/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./engine/src/Application.js":
/*!***********************************!*\
  !*** ./engine/src/Application.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Application": () => (/* binding */ Application),
/* harmony export */   "application": () => (/* binding */ application),
/* harmony export */   "stage": () => (/* binding */ stage)
/* harmony export */ });
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Stage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Stage */ "./engine/src/Stage.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");








const MAX_UPDATE_PER_LOGIC_TICK = 5;


/**
 * 
 *
 * @export
 * @class Application
 */
class Application extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher {
    constructor() {
        super();
        console.log( "🎮 Application start." );
        this.stage = new _Stage__WEBPACK_IMPORTED_MODULE_3__.Stage();
        this.lastUpdate = performance.now();
        onmessage = this.onRenderMessage.bind( this );
        this.paused = false;
        this.inputEnabled = true;
        this.physicsReady = false;
        this.physicsWorker = new Worker( "physics.js" );
        this.physicsWorker.onmessage = this.onPhysicsMessage.bind( this );
        this.physicsWorker.postMessage( { msg: "setStageBound",args: [640,480,true,true,true,true] } );

        this.touchEnabled = self._deviceInfo.touchEnabled;
        /** 
         * 논리적인 뷰포트를 얻는다
         * position은 renderViewport로부터의 위치
         * size는 논리 뷰포트 크기 
         */
        this.logicalViewport = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( 0,0,0,0 );
        /** 
         * 렌더 뷰포트의 좌상단 지점에서 로지컬 뷰포트의 원점까지의 로지컬 좌표계로 거리 
         */
        this.logicalViewportOffset = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( self._deviceInfo.logicalViewportOffset );
        /**
         * 렌더 뷰포트 크기:로직 뷰포트 크기
         * 로직이 렌더보다 크면 1 미만
         * 렌더가 로직보다 크면 1 초과 
         */
        this.logicalViewportScale = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( self._deviceInfo.logicalViewportScale );
        /**
         * 디바이스상의 해상도를 얻는다
         * position은 html콘텍스트 상에서의 좌표
         * size 디바이스 뷰포트 크기
         */
        this.deviceViewport = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( self._deviceInfo.deviceViewport );
        

        this.init( 640,480,60,Application.ScaleModes.LETTERBOX );
    }

    init( width,height,fps = 60,scaleMode = Application.ScaleModes.LETTERBOX ) {
        this.logicalViewport = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( 0,0,width,height );
        this.setUpdateFPS( fps );
        this.postMessageToRender( { msg: "addCommand",class: "Application",method: "setLogicalViewport",args: [this.logicalViewport.xywh,scaleMode] } );
    }

    onPhysicsMessage( msg ) {
        const data = msg.data;

        if ( data.msg == "ready" ) {
            console.log( "👍 Physics ready." );       
            this.physicsReady = true;
        } else if ( data.msg == "deviceInfo" ) {
            self._deviceInfo = msg.data.info;
            this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_6__.Event.RESIZE );
        }
    }

    onRenderMessage( msg ) {
        const data = msg.data;

        if ( data.msg == "render" ) {
            this.renderTick();
        } else if ( data.msg == "deviceInfo" ) {
            this.deviceViewport = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( data.info.deviceViewport );
            this.logicalViewportOffset = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( data.info.logicalViewportOffset );
            this.logicalViewportScale = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( data.info.logicalViewportScale );
            this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_6__.Event.RESIZE );
        } else if ( data.msg == "Asset_loadCompleted" ) {
            _Asset__WEBPACK_IMPORTED_MODULE_0__.Asset.dispatchLoadedEvent( data.id );
        } else if ( data.msg == "input" && this.enableInput ) {
            this.onInputMessage( data.inputType,data.secondlyInputType,data.inputData );
        } else {
            console.log( "onRenderMessage",msg );
        }
    }

    /** 
     * 로직 뷰포트에서의 렌더 뷰포트의 범위
     * 이 범위로 박스를 생성하면 화면을 모두 가릴 수 있다 
     */
    get logicalRenderBounds() {
        return new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( -this.logicalViewportOffset.x,-this.logicalViewportOffset.y,this.logicalViewport.width + this.logicalViewportOffset.x * 2,this.logicalViewport.height + this.logicalViewportOffset.y * 2 );
    }

    onInputMessage( inputType, secondlyInputType, inputData ) {
        const e = new _Event__WEBPACK_IMPORTED_MODULE_6__.Event( inputType );

        Object.assign( e,inputData );
        this.stage.dispatchEventWithChildren( e );
        if ( !e.stopped && secondlyInputType ) {
            e.name = secondlyInputType;
            this.stage.dispatchEventWithChildren( e );
        }
    }

    renderTick() {
        const now = performance.now();
        const delta =  ( now - this.lastUpdate ) / ( 1000 / this.updateFPS );
        // 프레임 경계에서 안맞을까봐 round처리 해봄
        const numOfUpdate = Math.round( delta );

        if ( !this.paused ) {
            for ( let i = 0; i < Math.min( MAX_UPDATE_PER_LOGIC_TICK,numOfUpdate ); i++ ) {
                this.update();
            }
        }
        this.lastUpdate += ( 1000 / this.updateFPS ) * numOfUpdate;
    }

    /**
     * stage에 update메시지를 발송하고
     * sprite 상태를 main thread로 보낸다
     *
     * @memberof Application
     */
    update() {
        this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_6__.Event.BEFORE_UPDATE );
        _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.doEnterFrame();
        let [buf,transferList] = this.stage.encodeRenderingInfoWithChildren();

        // console.log( buf,extraBuf,strings );
        if ( this.physicsReady ) {
            this.physicsWorker.postMessage( { msg: "update" } );
        } 
        //@ts-ignore
        this.postMessageToRender( { msg: "update",renderingInfo: buf }, transferList );
        this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_6__.Event.AFTER_UPDATE );
    }

    setUpdateFPS( FPS ) {
        this.updateFPS = FPS;
        this.postMessageToRender( { msg: "addCommand", class: "Application",method: "setUpdateFPS",args: [this.updateFPS] } );
    }


    /**
     * 엔진을 완전히 정지시키거나 다시 켠다.
     * ENTER_FRAME과 입력 이벤트를 멈추는 것
     *
     * @param {*} v
     * @memberof Application
     */
    setPaused( v ) {
        this.paused = v;
        this.enableInput( !v );
    }

    enableInput( v ) {
        this.inputEnabled = v;
    }

    setBackgroundColor( c ) {
        this.postMessageToRender( { msg: "addCommand", class: "Application", method: "setBackgroundColor",args: [_Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.hex2rgba( c )] } );
    }

    postMessageToRender( msg,transfer ) {
        postMessage( msg,transfer );
    }

    preload( assetFilenames,progressCallback ) {
        return _Asset__WEBPACK_IMPORTED_MODULE_0__.Asset.preload( assetFilenames,progressCallback );
    }
}

Application.ScaleModes = {
    NO_SCALE:   "NO_SCALE",
    CENTER:     "CENTER",
    CROP:       "CROP",
    LETTERBOX:  "LETTERBOX",
    STRETCH:    "STRETCH",
    FIT_WIDTH:  "FIT_WIDTH",
    FIT_HEIGHT: "FIT_HEIGHT",
};


//@ts-ignore
if ( self.application == null ) {
    //@ts-ignore
    self.application = new Application();
} 

/** @type {Application} */
//@ts-ignore
const application = self.application;
/** @type {Stage} */
//@ts-ignore
const stage = self.application.stage;

console.assert( _Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.isWebWorker(),`Application을 메인쓰레드에 만들려고 하고 있음` );


/***/ }),

/***/ "./engine/src/Asset.js":
/*!*****************************!*\
  !*** ./engine/src/Asset.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Asset": () => (/* binding */ Asset)
/* harmony export */ });
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");





const fontInfoCache = {};


class Asset extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher {
    /**
     * Creates an instance of AssetProxy.
     * @param {string=} name 관리되는 이름. 이름이 같으면 같은 어셋으로 간주된다.
     * @param {string=} assetType 어셋의 종류
     * @memberof AssetProxy
     */
    constructor( name, assetType ) {
        super();
        this.id = Asset.lastId++;
        if ( name != null && name.indexOf( "*" ) >= 0 ) {
            this.name = name.replace( "*",this.id.toString() );
        } else {
            this.name = name == null ? "" : name;
        }
        this.type = assetType == null ? Asset.guessType( this.name ) : assetType;

        Asset.finalizationRegistry.register( this,{ thisObjId: this.id, thisType: this.type } );

        this.loaded = undefined;
        this.onLoadedHandler = this.onLoaded.bind( this, [this.id] );

        if ( this.type == Asset.AssetTypes.TrueTypeFont
            || this.type == Asset.AssetTypes.BitmapFont
            || this.type == Asset.AssetTypes.Sound
            || this.type == Asset.AssetTypes.Texture ) {
            //LOADED 이벤트를 받아야 하는 타입만 걸어준다
            Asset.loadedEventDispatcher.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED,this.onLoadedHandler );
        }
        this.loadFontInfo( name );
    }

    /**
     * 폰트를 로딩하는 경우 폰트 정보가 따로 필요하다
     *
     * @param {*} name
     * @memberof Asset
     */
    loadFontInfo( name ) {
        if ( this.type == Asset.AssetTypes.TrueTypeFont ) {
            if ( fontInfoCache[name] ) {
                // 캐시에 있는 경우
                this.fontInfo = fontInfoCache[name];
                console.log( `폰트 ${this.name} 로드 완료.(캐시)` );
                this.loaded = true;
                this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED );
            } else {
                fetch( `asset/${name}.json` )
                    .then( response => {
                        console.assert( response.ok,`asset/${name}.json 로드하지 못했음.` );
                        return response.json();
                    } )
                    .then( data => {
                        this.fontInfo = data;
                        if ( this.fontLoaded ) {
                            fontInfoCache[this.name] = this.fontInfo;
                            console.log( `폰트 ${this.name} 로드 완료.(json을 늦게 로딩)` );
                            this.loaded = true;
                            this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED );
                        }
                    } );
            }
        } else if ( this.type == Asset.AssetTypes.BitmapFont || this.type == Asset.AssetTypes.MsdfFont ) {
            // 비트맵도 json을 따로 로딩하는 처리 필요
            const json = _Utils__WEBPACK_IMPORTED_MODULE_3__.Utils.getEmbeddedFile( name + ".json" );

            this.fontInfo = JSON.parse( json );
            this.loaded = true;
        }
    }


    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @param {boolean} [isOnce=false]
     * @returns {Asset}
     * @memberof Asset
     */
    addEventListener( eventName, func, context = null, isOnce = false ) {
        //@ts-ignore
        return super.addEventListener( eventName, func, context, isOnce );
    }

    release() {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand", class: "Asset", method: "release",args: [this.id] } );
    }

    load( extraData ) {
        // asset.extraData = extraData;
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { 
            msg:    "executeCommand",
            class:  "Asset",
            method: "load",
            args:   [
                { 
                    id:        this.id,
                    type:      this.type,
                    name:      this.name,
                    extraData: extraData,
                }
            ] } );
    }

    update( extraData ) {
        // asset.extraData = extraData;
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { 
            msg:    "addCommand",
            class:  "Asset",
            method: "load",
            args:   [
                { 
                    id:        this.id,
                    type:      this.type,
                    name:      this.name,
                    extraData: extraData,
                }
            ] } );
    }

    onLoaded( id, event ) {
        if ( id == event.id ) {
            // 내 것과 같은 id인 경우에만 이벤트를 부른다
            Asset.loadedEventDispatcher.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED,this.onLoadedHandler );
            // console.log( Asset.loadedEventDispatcher.eventEmitter );
            if ( this.type == Asset.AssetTypes.TrueTypeFont ) {
                this.fontLoaded = true;
                if ( this.fontInfo ) {
                    fontInfoCache[this.name] = this.fontInfo;
                    console.log( `폰트 ${this.name} 로드 완료.(ttf늦게 로딩)` );
                    this.loaded = true;
                    this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED );
                }
            } else {
                this.loaded = true;
                this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED );
            }
        }
    }

    static finalizeHandler( obj ) {
        // GC에 의해 수거되었으면 릴리즈를 보낸다.
        // console.log( `GC ${obj.thisObjId}` );
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand", class: "Asset", method: "release",args: [obj.thisObjId] } );
    }

    static dispatchLoadedEvent( id ) {
        Asset.loadedEventDispatcher.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED,{ id } );
    }

    static guessType( name ) {
        const extMatch = /\.[^.]+$/.exec( name );
        const ext = extMatch != null ? extMatch[0].toLowerCase() : "";


        if ( ext == ".png" || ext == ".jpg" ) {
            return Asset.AssetTypes.Texture;
        } else if ( ext == ".wav" || ext == ".mp3" ) {
            return Asset.AssetTypes.Sound;
        } else if ( ext == ".ttf" ) {
            return Asset.AssetTypes.TrueTypeFont;
        // } else if ( ext == ".fnt") {
        //     return Asset.AssetTypes.BitmapFont;
        // } else if ( ext == ".msdf") {
        //     return Asset.AssetTypes.MsdfFont;
        } return null;
    }

    static findPreloadedAsset( name ) {
        for ( let asset of Asset.preloadAssets ) {
            if ( asset.name == name ) return asset;
        } 
        return null;
    }

    static preload( assetFilenames,progressCallback ) {
        return new Promise( ( resolve,reject )=>{
            for ( let name of assetFilenames ) {
                const asset = new Asset( name );

                asset.load();
                Asset.preloadAssets.push( asset );
                Asset.preloadAssetPromises.push( asset.eventToPromise( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED ) );
            }
            Promise.all( Asset.preloadAssetPromises ).then( resolve );
        } );
    }
}
Asset.AssetTypes = {
    Texture:           "Texture",
    RenderTarget:      "RenderTarget",
    Sound:             "Sound",
    Shader:            "Shader",
    TrueTypeFont:      "TrueTypeFont",
    MsdfFont:          "MsdfFont",
    BitmapFont:        "BitmapFont",
    PostProcessFilter: "PostProcessFilter",
};
Asset.lastId = 1;
Asset.finalizationRegistry = new FinalizationRegistry( Asset.finalizeHandler );
Asset.loadedEventDispatcher = new _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher();

Asset.preloadAssets = [];
Asset.preloadAssetPromises = [];


/***/ }),

/***/ "./engine/src/Bitmap.js":
/*!******************************!*\
  !*** ./engine/src/Bitmap.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bitmap": () => (/* binding */ Bitmap)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _TextureBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TextureBase */ "./engine/src/TextureBase.js");



class Bitmap extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    /**
     * Creates an instance of Bitmap.
     * @param {TextureBase} texture
     * @memberof Bitmap
     */
    constructor( texture ) {
        super();
        this._$$spriteType = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.SpriteTypes.BITMAP;
        this._$$updateCode = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.texture = texture;
        this._$$localBounds.x = 0;
        this._$$localBounds.y = 0;
        this._$$localBounds.width = texture.width;
        this._$$localBounds.height = texture.height;
    }

    encodeExtraRenderingInfo() {
        let encodedBuffer = new Float32Array( 9 );

        encodedBuffer[0] = this.texture.asset.id;
        encodedBuffer.set( this.texture.uvRect.getCornerPoints(),1 );
        return [encodedBuffer];
    }

    /**
     * 비트맵의 텍스쳐를 교체한다.
     * 텍스쳐만 바뀌고 비트맵의 크기는 변하지 않는다.
     *
     * @param {TextureBase} texture
     * @memberof Bitmap
     */
    setTexture( texture ) {
        this.texture = texture;
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
    }
}


/***/ }),

/***/ "./engine/src/BitmapFont.js":
/*!**********************************!*\
  !*** ./engine/src/BitmapFont.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BitmapFont": () => (/* binding */ BitmapFont)
/* harmony export */ });
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _FontBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FontBase */ "./engine/src/FontBase.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");




class BitmapFont extends _FontBase__WEBPACK_IMPORTED_MODULE_1__.FontBase {
    constructor( bitmapFontName,referenceSize, styles, filter ) {
        super( bitmapFontName, referenceSize, styles );
        // Bitmap
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_0__.Asset( bitmapFontName,_Asset__WEBPACK_IMPORTED_MODULE_0__.Asset.AssetTypes.BitmapFont );
        // 페이지가 여러개 있는 폰트는 아직 처리 못함
        const page = this.asset.fontInfo.pages[0];
        const pngSize = _Utils__WEBPACK_IMPORTED_MODULE_2__.Utils.getImageSize( page.file );

        this.asset.load( { 
            bitmap:        page.file, 
            width:         pngSize.width,
            height:        pngSize.height,
            referenceSize: this.referenceSize,
            styles:        this.styles,
            fontInfo:      this.asset.fontInfo,
            filter:        filter
        } );
        this.fontLoaded = false;
    }    

    measureTextWidth( str,size ) {
        super.measureTextWidth( str,size );

        const fontInfo = this.asset.fontInfo;
        const scale = size ? size / fontInfo.info.size : 1;

        let width = 0;

        for ( let i = 0; i < str.length; i++ ) {
            const char = str.charCodeAt( i );
            const charInfo = fontInfo.chars[char];

            width += charInfo.xadvance * scale;
        }
        return width;        
    }
}




/***/ }),

/***/ "./engine/src/Component.js":
/*!*********************************!*\
  !*** ./engine/src/Component.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Component": () => (/* binding */ Component)
/* harmony export */ });
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _ComponentHolder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ComponentHolder */ "./engine/src/ComponentHolder.js");






/**
 * 이 클래스를 상속해서 기능을 구현한다.
 * 컴포넌트는 ComponentHolder에 자유롭게 add, remove할 수 있다.
 * add 될 때는 onAdd( holder )가 remove 될 때는 onRemove( holder )가 호출된다.
 * 
 * @class Component
 * 
 */
class Component {
    constructor() {
        // /** 
        //  * 컴포넌트가 holder에 추가될 때 호출된다.
        //  * @callback
        //  * @param {ComponentHolder=} holder
        //  * @memberof Component
        //  */
        // this.onAdded = undefined;
        // /** 
        //  * 컴포넌트가 holder에서 분리될 때 호출된다.
        //  * @callback
        //  * @param {ComponentHolder=} holder
        //  * @memberof Component
        //  */
        // this.onRemoved = undefined;

        /** 
         * 이 컴포넌트가 붙은 ComponentHolder 개체.
         * 이 개체는 addEventListener를 후킹해서 저장해두고 있으므로
         * 명시적으로 분리하지 않아도 자동으로 처리된다.
         * 
         * @readonly
         * @type {ComponentHolder}
         * 
         */
        this.holder = undefined;

        /** @type {Object.<string,[]>} */
        this.__savedHandlers = undefined;

        this.__name = this.constructor.name;
    }
   
    /**
     * 이 개체에 트리거를 추가할 수 있도록 Triggerable Proxy를 반환한다
     * 
     * @returns {Component} - EventDispatcher의 Proxy를 리턴한다
     * @memberof Component
     */
    triggerable() {
        // EventDispatcher의 triggerable을 빌려서 쓴다.
        // dispatchEvent를 구현했기 때문에 빌려써도 괜찮다.
        return _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.triggerable.call( this );
    }

    /**
     * 이 개체의 holder가 소유한 이벤트를 생성한다.
     * 
     * @param {object=} extenedValues 
     * @param {string=} eventName 
     * @returns {Event}
     * @memberof Component
     */
    newEvent( extenedValues,eventName ) {
        return _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.newEvent.call( this.holder, extenedValues, eventName );
    }

    /**
     * 
     * 이 개체의 holder가 소유한 트리거를 생성한다.
     * 트리거는 이 개체의 특정 프로퍼티값이 바뀔 때 자동으로 이벤트가 발생되도록 할 수 있다.
     * 
     * @param {object} props - 트리거를 걸 프로퍼티의 목록. { a:true, b:false } 로 하면 a에는 걸고 b에는 지운다.
     * @param {function=} filterFunction - true를 리턴한 경우에만 이벤트가 실행된다
     * @param {string=} eventName - 생략하면 자동으로 이벤트 이름이 부여된다
     * @returns {Event}
     * @memberof Component
     */
    newTrigger( props, filterFunction, eventName ) {
        return _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.newTrigger.call( this, props, filterFunction, eventName );
    }

    /**
     * 컴포넌트의 이름을 돌려준다
     * 
     * @returns {string}
     * @memberof Component
     */
    getName() {
        return this.__name;
    }

    /**
     * 컴포넌트의 이름을 설정한다. 기본 값은 클래스 이름이다.
     * 이 값을 바꿔서 같은 타입의 컴포넌트를 여러개 붙일 수 있다.
     * 만약 이름이 같다면 원래 있던 컴포넌트는 분리된다.
     * 
     * @param {string} v
     * @memberof Component
     */
    setName( v ) {
        this.__name = v;
    }

    /**
     *
     *
     * @param {Event|string} eventOrName
     * @param {object=} extendedValues
     * @returns {boolean}
     * @memberof Component
     */
    dispatchEvent( eventOrName, extendedValues ) {
        console.assert( this.holder, `컴포넌트 홀더가 없는데 이벤트를 발생시키려고 한다` );
        let event;

        if ( typeof eventOrName == "string" ) {
            event = new _Event__WEBPACK_IMPORTED_MODULE_0__.Event( eventOrName );
        } else {
            event = eventOrName;
        }

        event.target = this.holder;
        event.component = this;
        Object.assign( event,extendedValues );

        return this.holder.dispatchEvent( event );
    }


    isAdded() {
        return this.holder != null;
    }

    removeFromHolder() {
        console.assert( this.holder, `컴포넌트 홀더가 없는데 제거하려고 한다` );
        this.holder.removeComponent( this );
    }
}



/***/ }),

/***/ "./engine/src/ComponentHolder.js":
/*!***************************************!*\
  !*** ./engine/src/ComponentHolder.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentHolder": () => (/* binding */ ComponentHolder)
/* harmony export */ });
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");



const searchMap = new WeakMap();


class ComponentHolder extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {
    constructor() {
        super();
        this.__components = {};
    }

    addComponent( com ) {
        const comName = com.getName();

        if ( com.holder != null ) {
            // 붙이려는 컴포넌트가 다른데 붙어있었던 경우 제거
            com.removeFromHolder();
        }
        if ( this.__components[comName] != null ) {
            // 같은 이름의 컴포넌트가 붙어있던 경우 이전 컴포넌트를 제거
            this.__components[comName].removeFromHolder();
        }
        this.__components[comName] = com;
        const arr = searchMap.get( com.constructor ) || [];

        if ( !arr.includes( com ) ) {
            arr.push( com );
            searchMap.set( com.constructor,arr );
        }
        com.holder = new Proxy( this, {
            get: ( t,k ) => {
                if ( k == "addEventListener" ) {
                    return function( eventName, func, context, isOnce ) {
                        // console.log( `${comName}의 ${eventName}이벤트 핸들러를 후킹해서 저장한다` );
                        com.__savedHandlers = com.__savedHandlers || {};
                        com.__savedHandlers[eventName] = com.__savedHandlers[eventName] || [];
                        com.__savedHandlers[eventName].push( [func,context] );
                        //원본을 실행해준다
                        //@ts-ignore
                        t.addEventListener( ...arguments );
                    };
                } else return t[k];
            }
        } );
        if ( com.onAdded ) {
            com.onAdded.call( com, com.holder );
        } else if ( Object.getPrototypeOf( com ).onAdded ) {
            Object.getPrototypeOf( com ).onAdded.call( com, com.holder );
        }

        return com;
    }

    createComponent( classType,obj ) {
        const newCom = new classType();

        this.addComponent( Object.assign( newCom,obj ) );

        return newCom;
    }


    removeComponent( com ) {
        if ( typeof com == "function" && com.prototype != null ) {
            // ClassType으로 삭제를 시도하는 경우
            // 해당 타입의 컴포넌트를 모두 삭제한다
            for ( const key in this.__components ) {
                if ( com.getName() == key ) {
                    this.removeComponent( this.__components[key] );
                }
            }

            return;
        }
        const comName = com.getName();

        if ( com.onRemoved ) {
            com.onRemoved.call( com, com.holder );
        } else if ( Object.getPrototypeOf( com ).onRemoved ) {
            Object.getPrototypeOf( com ).onRemoved.call( com, com.holder );
        }
        delete this.__components[comName];

        if ( com.__savedHandlers ) {
            console.log( `${comName}의 이벤트 핸들러를 정리한다` );
            for ( const eventName in com.__savedHandlers ) {
                for ( const [func,context] of com.__savedHandlers[eventName] ) {
                    console.log( `${eventName} 이벤트 핸들러 삭제` );
                    this.removeEventListener( eventName,func,context );
                }
            }
        }

        const arr = searchMap.get( com.constructor );

        console.assert( Array.isArray( arr ) );
        const i = arr.indexOf( com );

        if ( i >= 0 ) {
            arr.splice( i,1 );
            if ( arr.length > 0 ) {
                searchMap.set( com.constructor,arr );
            } else {
                searchMap.delete( com.constructor );
            }
        }
    }

    hasComponent( comType ) {
        return this.__components[comType.name] != null;
    }

    get components() {
        return this.__components;
    }

    getComponent( comType ) {
        return this.__components[typeof comType == "string" ? comType : comType.name];
    }

    getCompatibleComponents( comType ) {
        const r = [];

        for ( const comName in this.__components ) {
            const com = this.__components[comName];

            if ( com instanceof comType ) {
                r.push( com );
            }
        }

        return r;
    }

    static getAllComponents( comType ) {
        return searchMap.get( comType );
    }

    static getAllComponentHolders( ...comTypes ) {
        let arr;

        arr = this.getAllComponents( comTypes[0] );
        for ( let i = 1; i < comTypes.length; i++ ) {
            const arr2 = this.getAllComponents( comTypes[i] );

            arr = arr2.filter( ( v,i,a ) => arr.includes( v ) );
        }
 
        const r = [];

        for ( const n of arr ) {
            r.push( n.holder );
        }

        return r;
    }

    hasAllComponents( ...comTypes ) {
        for ( const comType of comTypes ) {
            if ( !this.hasComponent( comType ) ) return false;
        }

        return true;
    }
}
ComponentHolder.registeredHolders = {};



/***/ }),

/***/ "./engine/src/Event.js":
/*!*****************************!*\
  !*** ./engine/src/Event.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Event": () => (/* binding */ Event)
/* harmony export */ });

/** @typedef {import("./Component").Component} Component */
/** @typedef {import("./Sprite").Sprite} Sprite */
/** @typedef {import("./EventDispatcher").EventDispatcher} EventDispatcher */

/**
 * 
 * @class Event
  */
class Event {
    /**
     *Creates an instance of Event.
     * @param {string=} name
     * @param {object=} extendedValues
     * @param {EventDispatcher=} owner
     * @memberof Event
     */
    constructor( name = "@EVENT" + ( ++Event.nextId ), extendedValues,owner ) {
        this.name = name;
        this.stopped = false;
        /** @type {EventDispatcher} */
        this.target = undefined;
        /** @type {Component} */
        this.component = undefined;
        /** @type {EventDispatcher} */
        this.owner = owner;
        this.forwarded = false;

        if ( extendedValues ) {
            Object.assign( this, extendedValues );
        }
    }

    /**
     *
     *
     * @param {function} func
     * @param {object=} context
     * @returns {Event}
     * @memberof Event
     */
    on( func, context ) {
        if ( this.owner == null ) this.owner = new Event.EventDispatcher();
        this.owner.on( this.name, func, context );

        return this;
    }

    /**
     *
     *
     * @param {function} func
     * @param {object=} context
     * @returns {Event}
     * @memberof Event
     */
    once( func, context ) {
        if ( this.owner == null ) this.owner = new Event.EventDispatcher();
        this.owner.once( this.name, func, context );

        return this;
    }

    /**
     *
     *
     * @param {function} func
     * @param {object=} context
     * @param {Sprite=} refSprite
     * @returns {Event}
     * @memberof Event
     */
    onStage( func, context,refSprite ) {
        //@ts-ignore
        console.assert( this.owner && this.owner.addChild, "Sprite가 아니면 onStage를 할 수 없습니다." );
        this.owner.onStage( this.name, func, context, refSprite );

        return this;
    }

    /**
     *
     *
     * @param {function} func
     * @param {object=} context
     * @returns {Event}
     * @memberof Event
     */
    remove( func, context ) {
        if ( this.owner == null ) this.owner = new Event.EventDispatcher();
        this.owner.removeEventListener( this.name, func, context );

        return this;
    }

    /**
     *
     *
     * @param {object=} extendedValues
     * @returns {Event}
     * @memberof Event
     */
    dispatch( extendedValues ) {
        if ( this.owner == null ) this.owner = new Event.EventDispatcher();
        Object.assign( this, extendedValues );
        this.owner.dispatchEvent( this );

        return this;
    }
    

    stopPropagation() {
        this.stopped = true;
    }

    getTarget() {
        return this.target;
    }

    static isInputEvent( eventName ) {
        const att = Event.eventAttribs[eventName];

        if ( att != null ) {
            return att.isInput == true;
        }
    }
}

Event.STAGE_VISIBLE = "stageVisible";
Event.STAGE_FOCUS = "stageFocus";
Event.ENTER_FRAME = "enterFrame";
Event.RENDER = "render";
Event.ADDED_TO_STAGE = "addedToStage";
Event.REMOVED_FROM_STAGE = "removedFromStage";
Event.POINTER_DOWN = "pointerDown";
Event.POINTER_UP = "pointerUp";
Event.POINTER_MOVE = "pointerMove";
Event.MOUSE_DOWN = "mouseDown";
Event.MOUSE_UP = "mouseUp";
Event.MOUSE_MOVE = "mouseMove";
Event.MOUSE_WHEEL = "mouseWheel";
Event.TOUCHES_BEGIN = "touchesBegin";
Event.TOUCHES_MOVE = "touchesMove";
Event.TOUCHES_END = "touchesEnd";
Event.TOUCHES_CANCEL = "touchesCancel";
Event.KEY_UP = "keyUp";
Event.KEY_DOWN = "keyDown";
Event.TIMER = "timer";
Event.TEXTURE_UPDATE = "textureUpdate";
Event.RESIZE = "resize";
Event.READY = "ready";
Event.COMPLETE = "complete";
Event.ERROR = "error";
Event.BEFORE_UPDATE = "beforeUpdate";
Event.AFTER_UPDATE = "afterUpdate";
Event.LOADED = "loaded";
Event.ALL = "*";
Event.APPLICATION_INIT = "APPLICATION_INIT";
Event.APPLICATION_START = "APPLICATION_START";

Event.eventAttribs = {
    [Event.POINTER_DOWN]:   { isInput: true },
    [Event.POINTER_UP]:     { isInput: true },
    [Event.POINTER_MOVE]:   { isInput: true },
    [Event.MOUSE_DOWN]:     { isInput: true, device: "mouse" },
    [Event.MOUSE_UP]:       { isInput: true, device: "mouse" },
    [Event.MOUSE_MOVE]:     { isInput: true, device: "mouse" },
    [Event.MOUSE_WHEEL]:    { isInput: true, device: "mouse" },
    [Event.TOUCHES_BEGIN]:  { isInput: true, device: "touch" },
    [Event.TOUCHES_END]:    { isInput: true, device: "touch" },
    [Event.TOUCHES_MOVE]:   { isInput: true, device: "touch" },
    [Event.TOUCHES_CANCEL]: { isInput: true, device: "touch" },
    [Event.KEY_UP]:         { isInput: true, device: "keyboard" },
    [Event.KEY_DOWN]:       { isInput: true, device: "keyboard" },
};

Event.EventDispatcher = undefined;
Event.nextId = 0;




/***/ }),

/***/ "./engine/src/EventDispatcher.js":
/*!***************************************!*\
  !*** ./engine/src/EventDispatcher.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventDispatcher": () => (/* binding */ EventDispatcher)
/* harmony export */ });
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");



// eventemitter3에서 _events 폴더에 이벤트를 보관한다고 가정하고 쓰여진 코드임


class EventDispatcher {
    constructor() {
        this.eventEmitter = new (eventemitter3__WEBPACK_IMPORTED_MODULE_0___default())();
    }

    /**
     * 이 개체에 트리거를 추가할 수 있도록 Triggerable Proxy를 반환한다
     * 
     * @returns {EventDispatcher} - EventDispatcher의 Proxy를 리턴한다
     * @memberof EventDispatcher
     */
    triggerable() {
        this.__triggers = {};

        return new Proxy( this, {
            set( target, key, value, receiver ) {
                const r = Reflect.set( target, key, value, receiver );
                const triggers = target.__triggers[key];

                if ( triggers ) {
                    for ( const [eventName, func] of triggers ) {
                        if ( func == null || func( target, key ) ) target.dispatchEvent( eventName, { key } );
                    }
                }

                return r;
            }
        } );
    }

    /**
     * 이 개체가 소유한 이벤트를 생성한다.
     * 
     * @param {object=} extenedValues 
     * @param {string=} eventName 
     * @returns {Event}
     */
    newEvent( extenedValues,eventName ) {
        return new _Event__WEBPACK_IMPORTED_MODULE_1__.Event( eventName, extenedValues, this );
    }

    
    /**
     * 
     * 이 개체가 소유한 트리거를 생성한다.
     * 트리거는 이 개체의 특정 프로퍼티값이 바뀔 때 자동으로 이벤트가 발생되도록 할 수 있다.
     * 
     * @param {object} props - 트리거를 걸 프로퍼티의 목록. { a:true, b:false } 로 하면 a에는 걸고 b에는 지운다.
     * @param {function=} filterFunction - true를 리턴한 경우에만 이벤트가 실행된다
     * @param {string=} eventName - 생략하면 자동으로 이벤트 이름이 부여된다
     * @returns {Event}
     */
    newTrigger( props, filterFunction, eventName ) {
        console.assert( this.__triggers != null, "이 개체는 triggerable이 아닙니다." );
        const e = new _Event__WEBPACK_IMPORTED_MODULE_1__.Event( eventName );

        for ( const prop in props ) {
            if ( props[prop] ) {
                this.__triggers[prop] = this.__triggers[prop] != null ? this.__triggers[prop] : [];
                this.__triggers[prop].push( [e.name, filterFunction] );
            } else {
                delete this.__triggers[prop];
            }
        }

        return e;
    }

    hasEventListener( eventName ) {
        return this.eventEmitter.listeners( eventName ).length > 0;
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @param {boolean} [isOnce=false]
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    addEventListener( eventName, func, context = null, isOnce = false ) {
        if ( isOnce ) {
            //@ts-ignore
            this.eventEmitter.once( eventName, func, context || this );
        } else {
            //@ts-ignore
            this.eventEmitter.on( eventName, func, context || this );
        }

        if ( eventName == _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME || eventName == _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RENDER ) {
            this.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ADDED_TO_STAGE, () => {
                //@ts-ignore
                EventDispatcher.enterFrameList.set( this,this.eventEmitter._events[eventName] != null ? this.eventEmitter._events[eventName].length : 1 );
            } );
            this.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.REMOVED_FROM_STAGE, () => {
                EventDispatcher.enterFrameList.delete( this );
            } );

            // @ts-ignore   this가 sprite로 가정
            if ( this.isOnStage() ) {
                //@ts-ignore
                EventDispatcher.enterFrameList.set( this,this.eventEmitter._events[eventName] != null ? this.eventEmitter._events[eventName].length : 1 );
            }
        } else {
            if ( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.isInputEvent( eventName ) ) {
                this.hasInputEvents = true;
            }
        }

        return this;
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @param {boolean} [isOnce=false]
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    addUniqueEventListener( eventName, func, context, isOnce = false ) {
        this.removeEventListener( eventName, func, context );
        this.addEventListener( eventName, func, context, isOnce );

        return this;
    }
    
    /**
     *
     *
     * @param {Event|string} eventOrName
     * @param {object=} extendedValues
     * @returns {boolean} - 이벤트 핸들러가 있으면 true
     * @memberof EventDispatcher
     */
    dispatchEvent( eventOrName,extendedValues ) {
        let event;

        if ( typeof eventOrName == "string" ) {
            event = new _Event__WEBPACK_IMPORTED_MODULE_1__.Event( eventOrName );
        } else {
            event = eventOrName;
        }

        event.target = this;
        Object.assign( event,extendedValues );

        if ( !event.forwarded ) this.eventEmitter.emit( "*",event );

        return this.eventEmitter.emit( event.name, event );
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @memberof EventDispatcher
     */
    removeEventListener( eventName, func, context ) {
        //@ts-ignore
        this.eventEmitter.removeListener( eventName, func, context || this );

        //@ts-ignore
        if ( ( eventName == _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME || eventName == _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RENDER ) && ( this.eventEmitter._events[eventName] == null || this.eventEmitter._events[eventName].length == 0 ) ) {
            EventDispatcher.enterFrameList.delete( this );
        }

        if ( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.isInputEvent( eventName ) ) {
            //@ts-ignore
            for ( const i in this.eventEmitter._events ) {
                if ( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.isInputEvent( i ) ) {
                    this.hasInputEvents = true;
                    break;
                }
            }
        }
    }

    /**
     *
     *
     * @param {string=} eventName
     * @memberof EventDispatcher
     */
    removeAllEventListeners( eventName ) {
        this.eventEmitter.removeAllListeners( eventName );

        //@ts-ignore
        if ( ( eventName == _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME || eventName == _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RENDER ) && ( eventName && this.eventEmitter._events[eventName] == null || this.eventEmitter._events[eventName].length == 0 ) ) {
            EventDispatcher.enterFrameList.delete( this );
        }

        if ( eventName && _Event__WEBPACK_IMPORTED_MODULE_1__.Event.isInputEvent( eventName ) ) {
            //@ts-ignore
            for ( const i in this.eventEmitter._events ) {
                if ( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.isInputEvent( i ) ) {
                    this.hasInputEvents = true;
                    break;
                }
            }
        }
    }


    /**
     *
     *
     * @param {string} event
     * @param {function} func
     * @param {any=} context
     * @param {EventDispatcher} [refSprite=this]
     * @param {boolean} [isOnce=false]
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    addEventListenerOnStage( event, func, context, refSprite = this, isOnce = false ) {
        const self = this;

        const onAdded = () => {
            self.addEventListener( event, func, context, isOnce );
        };

        const onRemoved = () => {
            self.removeEventListener( event, func, context );
        };

        refSprite.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ADDED_TO_STAGE, onAdded, this );
        refSprite.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.REMOVED_FROM_STAGE, onRemoved, this );

        return this;
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    on( eventName, func, context ) {
        return this.addEventListener( eventName, func, context );
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    once( eventName, func, context ) {
        return this.addEventListener( eventName, func, context, true );
    }

    /**
     *
     *
     * @param {string} event
     * @param {function} func
     * @param {any=} context
     * @param {EventDispatcher} [refSprite=this]
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    onStage( event, func, context, refSprite = this ) {
        return this.addEventListenerOnStage( event, func, context, refSprite );
    }

    beforeRender( func, context, isUnique = true ) {
        if ( isUnique ) {
            this.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RENDER, func, context );
        }

        this.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RENDER, func, context, true );
    }

    startForwardEvents( eventList,dstEventDispatcher ) {
        for ( let i = 0; i < eventList.length; i++ ) {
            const event = eventList[i];

            this.addEventListener( event,dstEventDispatcher.dispatchEvent.bind( dstEventDispatcher,[event] ) );
        }
    }

    stopForwardEvents( eventList,dstEventDispatcher ) {
        for ( let i = 0; i < eventList.length; i++ ) {
            const event = eventList[i];

            this.removeEventListener( event,dstEventDispatcher.dispatchEvent.bind( dstEventDispatcher,[event] ) );
        }
    }


    /**
     * 이벤트를 모두 기다려서 딱한번 func를 실행한다.
     * 이벤트 목록은 <이벤트이름> 혹은 [이벤트이름, 대상 EventDispatcher]
     *
     * @param {any[]} events
     * @param {function} func
     * @param {any=} context
     * @memberof EventDispatcher
     */
    waitEvents( events, func, context ) {
        const counts = [];
        let waitHandler;

        const removeAll = () => {
            let count = 0;

            for ( const i in events ) {
                let eventName;
                let target = this;

                if ( Array.isArray( events[i] ) ) {
                    [eventName, target] = events[i];
                } else eventName = events[i];
                target.removeEventListener( eventName, waitHandler, count );
                count++;
            }
        };

        waitHandler = function() {
            // this로 받았음
            // @ts-ignore
            counts[this - 1]++;

            for ( let j = 0; j < counts.length; j++ ) {
                if ( counts[j] == 0 ) return;
            }

            removeAll();
            func.call( context );
        };

        for ( const i in events ) {
            let eventName;
            let target = this;

            if ( Array.isArray( events[i] ) ) {
                [eventName, target] = events[i];
            } else eventName = events[i];
            // 0이면 EventEmitter3 내부에서 || 로 걸러지기 때문에 +1 해준다
            const countIndex = counts.length + 1;

            target.addEventListener( eventName, waitHandler, countIndex );
            counts.push( 0 );
        }
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {any[]} events
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    addCombinedEvents( eventName, events ) {
        this.waitEvents( events, () => {
            this.dispatchEvent( eventName );
        } );

        return this;
    }


    eventToPromise( eventName ) {
        return new Promise( ( resolve, reject ) => {
            this.addEventListener( eventName, resolve );
        } );
    }

    static doEnterFrame() {
        if ( EventDispatcher.enterFramePaused ) return 0;
        let totalEventCount = 0;

        for ( const [spr, count] of EventDispatcher.enterFrameList.entries() ) {
            // if (spr.isVisibleDeeply()) {
            spr.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME );
            spr.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RENDER );
            totalEventCount += count;
            // }
        }

        return totalEventCount;
    }
}


/**
 * @callback tween
 * @param {number} duration
 * @param {object} values
 * @param {string|function|import("./tween.js").Prop=} props
 * @returns {import("./tween.js").prototype}
 * @memberof EventDispatcher
 * @type {tween}
 */

EventDispatcher.prototype.tween = undefined;

/**
 * @callback move
 * @param {number} x
 * @param {number} y
 * @param {number} [duration=0]
 * @param {string|function|import("./tween.js").Prop=} props
 * @returns {Tween}
 * @memberof EventDispatcher
 * @type {move}
 */

EventDispatcher.prototype.move = undefined;

/**
 * @callback wait
 * @param {number} [duration=0]
 * @param {function=} func
 * @param {object=} context
 * @returns {import("./tween.js").prototype}
 * @memberof EventDispatcher
 * @type {wait}
 */

EventDispatcher.prototype.wait = undefined;


/** 
 * @callback getTweens
 * @param {boolean=} playingOnly
 * @returns {import("./tween.js").prototype[]}
 * @memberof EventDispatcher
 * 
 */

EventDispatcher.prototype.getTweens = undefined;

/**
 * @callback stopAllTweens
 * @memberof EventDispatcher
 */
EventDispatcher.prototype.stopAllTweens = undefined;

EventDispatcher.enterFramePaused = false;


_Event__WEBPACK_IMPORTED_MODULE_1__.Event.EventDispatcher = EventDispatcher;
EventDispatcher.enterFrameList = new Map();




/***/ }),

/***/ "./engine/src/FontBase.js":
/*!********************************!*\
  !*** ./engine/src/FontBase.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FontBase": () => (/* binding */ FontBase)
/* harmony export */ });
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Texture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Texture */ "./engine/src/Texture.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");








class FontBase extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher {
    constructor( name, referenceSize, styles ) {
        super();
        this.name = name;
        this.referenceSize = referenceSize || 1;
        this.styles = styles;
        /** @type {Asset} */
        this.asset;
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @param {boolean} [isOnce=false]
     * @returns {FontBase}
     * @memberof FontBase
     */
    addEventListener( eventName, func, context = null, isOnce = false ) {
        if ( eventName == _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED ) {
            this.asset.addEventListener( eventName, this.dispatchEvent.bind( this,_Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED ), null, isOnce );
        } 
        //@ts-ignore
        return super.addEventListener( eventName, func, context, isOnce );
    }

    getAscender( size ) {
        if ( !this.asset.loaded ) {
            console.log( `로딩이 안된 상태로 사이즈를 구하려고 한다. ${this.asset.name}` );
            return 0;
        }
        const fontInfo = this.asset.fontInfo;

        return fontInfo.ascender / fontInfo.unitsPerEm * ( size || this.referenceSize ); 
    }


    measureTextWidth( str,size ) {
        if ( !this.asset.loaded ) {
            console.log( `로딩이 안된 상태로 사이즈를 구하려고 한다. ${this.asset.name}` );
            return 0;
        }
        // 상속 받은 클래스에서 구현
    }
}



/***/ }),

/***/ "./engine/src/KeyCode.js":
/*!*******************************!*\
  !*** ./engine/src/KeyCode.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeyCode": () => (/* binding */ KeyCode)
/* harmony export */ });

const KeyCode = {
    ESC:    "Escape",
    ENTER:  "Enter",
    SPACE:  "Space",
    LEFT:   "ArrowLeft",
    RIGHT:  "ArrowRight",
    UP:     "ArrowUp",
    DOWN:   "ArrowDown",
    CTRL:   "ControlLeft",
    A:      "KeyA",
    B:      "KeyB",
    C:      "KeyC",
    D:      "KeyD",
    E:      "KeyE",
    F:      "KeyF",
    G:      "KeyG",
    H:      "KeyH",
    I:      "KeyI",
    J:      "KeyJ",
    K:      "KeyK",
    L:      "KeyL",
    M:      "KeyM",
    N:      "KeyN",
    O:      "KeyO",
    P:      "KeyP",
    Q:      "KeyQ",
    R:      "KeyR",
    S:      "KeyS",
    T:      "KeyT",
    U:      "KeyU",
    V:      "KeyV",
    W:      "KeyW",
    X:      "KeyX",
    Y:      "KeyY",
    Z:      "KeyZ",
    Digit0: "Digit0",
    Digit1: "Digit1",
    Digit2: "Digit2",
    Digit3: "Digit3",
    Digit4: "Digit4",
    Digit5: "Digit5",
    Digit6: "Digit6",
    Digit7: "Digit7",
    Digit8: "Digit8",
    Digit9: "Digit9",
};





/***/ }),

/***/ "./engine/src/Layout.js":
/*!******************************!*\
  !*** ./engine/src/Layout.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Layout": () => (/* binding */ Layout)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");









class Layout extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( x = 0,y = 0,w = 0,h = 0 ) {
        super();
        this.__locations = {};
        this.__width = w;
        this.__height = h;
        this.x = x;
        this.y = y;
    }

    resize( w, h ) {
        this.__width = w;
        this.__height = h;
        this._onResizeEvent();
    }

    setRect( x, y, w, h ) {
        this.x = x;
        this.y = y;
        this.resize( w, h );
    }

    _onResizeEvent() {
        for ( const key in this.__locations ) {
            const locSpr = this.__locations[key];

            if ( key == "origin" ) {
                locSpr.x = -this.x;
                locSpr.y = -this.y;
            } else {
                const [x, y] = key.split( "," );

                locSpr.x = this.__width * parseFloat( x );
                locSpr.y = this.__height * parseFloat( y );
            }
        }

        this.dispatchEvent( new _Event__WEBPACK_IMPORTED_MODULE_1__.Event( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RESIZE, { width: this.__width, height: this.__height } ) );
    }

    get origin() {
        return this.location( "origin" );
    }

    get topLeft() {
        return this.location( 0, 0 );
    }

    get topMiddle() {
        return this.location( 0.5, 0 );
    }

    get topRight() {
        return this.location( 1, 0 );
    }

    get bottomLeft() {
        return this.location( 0, 1 );
    }

    get bottomMiddle() {
        return this.location( 0.5, 1 );
    }

    get bottomRight() {
        return this.location( 1, 1 );
    }

    get leftMiddle() {
        return this.location( 0, 0.5 );
    }

    get rightMiddle() {
        return this.location( 1, 0.5 );
    }

    get center() {
        return this.location( 0.5, 0.5 );
    }


    /**
     *
     *
     * @param {string|number} x
     * @param {number} [y=null]
     * @returns {Layout}
     * @memberof Layout
     */
    location( x, y = null ) {
        const id = y != null ? x + "," + y : x;
        let locSpr = this.__locations[id];

        if ( locSpr != null ) return locSpr;
        locSpr = ( this.__locations[id] = new Layout() );

        if ( y == null ) {
            if ( id == "origin" ) {
                locSpr.x = -this.x;
                locSpr.y = -this.y;
            }
        } else {
            // @ts-ignore
            locSpr.x = this.__width * x;
            locSpr.y = this.__height * y;
        }

        this.addChild( locSpr );

        return locSpr;
    }

    get width() {
        return this.__width;
    }

    set width( v ) {
        this.__width = v;
        this._onResizeEvent();
    }

    get height() {
        return this.__height;
    }

    set height( v ) {
        this.__height = v;
        this._onResizeEvent();
    }

    /**
     * 
     * @returns {Point}
     * @memberof Layout
     */
    get size() {
        return new _Types__WEBPACK_IMPORTED_MODULE_2__.Point( this.__width, this.__height );
    }

    /**
     * @param {Point} v
     *
     * @memberof Layout
     */
    set size( v ) {
        this.__width = v.x;
        this.__height = v.y;
        this._onResizeEvent();
    }


    static fromRenderViewport() {
        const layout = new Layout( _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.x, _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.y,_Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.width, _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.height );

        _Application__WEBPACK_IMPORTED_MODULE_3__.application.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RESIZE, () => {
            layout.x = _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.x;
            layout.y = _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.y;
            layout.resize( _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.width, _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.height );
        } );

        return layout;
    }

    static fromLogicalViewpoer() {
        const layout = new Layout( 0,0,_Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalViewport.width, _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalViewport.height );

        _Application__WEBPACK_IMPORTED_MODULE_3__.application.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RESIZE, () => {
            layout.resize( _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalViewport.width, _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalViewport.height );
        } );

        return layout;
    }
}




/***/ }),

/***/ "./engine/src/Matrix.js":
/*!******************************!*\
  !*** ./engine/src/Matrix.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Matrix": () => (/* binding */ Matrix)
/* harmony export */ });



class Matrix {
    constructor( m11 = 1, m12 = 0, m21 = 0, m22 = 1, tx = 0, ty = 0 ) {
        this.__pixi = new PIXI.Matrix( m11, m12, m21, m22, tx, ty );
    }
}


/***/ }),

/***/ "./engine/src/Mesh.js":
/*!****************************!*\
  !*** ./engine/src/Mesh.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Mesh": () => (/* binding */ Mesh)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Texture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Texture */ "./engine/src/Texture.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");





class Mesh extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    /**
     * Creates an instance of Mesh.
     * @memberof Mesh
     */
    constructor() {
        super();
        this._$$spriteType = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.SpriteTypes.MESH;
        this._$$updateCode = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_NOTHING;
        this.dirty = {
            positionOffset: 0,
            positionLength: 0,
            texCoordOffset: 0,
            texCoordLength: 0,
            colorOffset:    0,
            colorLength:    0,
            indexOffset:    0,
            indexLength:    0,
            textureReset:   false,
            positionReset:  false,
            texCoordReset:  false,
            colorReset:     false,
            indexReset:     false,
        };
        this.a_position = undefined;
        this.a_texCoord = undefined;
        this.a_color = undefined;
        this.indices = undefined;
        this.a_genericArray = undefined;
    }

    setTexture( texture ) {
        this.texture = texture;
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.textureReset = true;
    }

    setTextureCoordinateArray( arr ) {
        this.dirty.texCoordReset = !( this.a_texCoord && this.a_texCoord.length >= arr.length );
        this.a_texCoord = new Float32Array( arr );
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.texCoordOffset = 0;
        this.dirty.texCoordLength = this.a_texCoord.length;
    }

    /**
     * @param {...number} args
     * @memberof Mesh
     */
    setTextureCoordinates( ...args ) {
        let minIndex = Infinity;
        let maxIndex = -Infinity;

        for ( let i = 0; i < args.length; i += 3 ) {
            const index = args[i];
            const x = args[i + 1];
            const y = args[i + 2];

            this.a_texCoord[index * 2] = x;
            this.a_texCoord[index * 2 + 1] = y;
            minIndex = Math.min( minIndex,index );
            maxIndex = Math.max( maxIndex,index );
        }
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.texCoordOffset = Math.min( this.dirty.texCoordOffset / 2,minIndex ) * 2;
        this.dirty.texCoordLength = Math.max( ( this.dirty.texCoordOffset + this.dirty.texCoordLength ) / 2 ,maxIndex ) * 2;
    }

    setTextureCoordinate( i,x,y ) {
        this.a_texCoord[i * 2] = x;
        this.a_texCoord[i * 2 + 1] = y;
    }

    getTextureCoordinate( i ) {
        return new _Types__WEBPACK_IMPORTED_MODULE_2__.Point( this.a_texCoord[i * 2],this.a_texCoord[i * 2 + 1] );
    }

    _calculateLocalBounds( startIndex = 0,endIndex = this.a_position.length / 2 ) {
        let minX = Infinity,maxX = -Infinity,minY = Infinity ,maxY = -Infinity;

        for ( let i = startIndex; i < endIndex * 2; i += 2 ) {
            const x = this.a_position[i];
            const y = this.a_position[i + 1];

            minX = Math.min( x,minX );
            maxX = Math.max( x,maxX );
            minY = Math.min( y,minY );
            maxY = Math.max( y,maxY );
        }
        this._$$localBounds.x = minX;
        this._$$localBounds.y = minY;
        this._$$localBounds.width = maxX - minX;
        this._$$localBounds.height = maxY - minY;
    }

    setVertexArray( arr ) {
        this.dirty.positionReset = !( this.a_position && this.a_position.length >= arr.length );
        this.a_position = new Float32Array( arr );
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        if ( !this.useCustomLocalBounds ) this._calculateLocalBounds();
        this.dirty.positionOffset = 0;
        this.dirty.positionLength = this.a_position.length;
    }

    /**
     * @param {...number} args
     * @memberof Mesh
     */
    setVertices( ...args ) {
        let minIndex = Infinity;
        let maxIndex = -Infinity;

        let minX = this._$$localBounds.left;
        let maxX = this._$$localBounds.right;
        let minY = this._$$localBounds.top;
        let maxY = this._$$localBounds.bottom;

        for ( let i = 0; i < args.length; i += 3 ) {
            const index = args[i];
            const x = args[i + 1];
            const y = args[i + 2];

            this.a_position[index * 2] = x;
            this.a_position[index * 2 + 1] = y;
            minX = Math.min( x,minX );
            maxX = Math.max( x,maxX );
            minY = Math.min( y,minY );
            maxY = Math.min( y,maxY );
            minIndex = Math.min( minIndex,index );
            maxIndex = Math.max( maxIndex,index );
        }
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;

        if ( !this.useCustomLocalBounds ) {
            this._$$localBounds.x = minX;
            this._$$localBounds.y = minY;
            this._$$localBounds.width = maxX - minX;
            this._$$localBounds.height = maxY - minY;
        }

        this.dirty.positionOffset = Math.min( this.dirty.positionOffset / 2,minIndex ) * 2;
        this.dirty.positionLength = Math.max( ( this.dirty.positionOffset + this.dirty.positionLength ) / 2,maxIndex ) * 2;
    }

    setVertex( i,x,y ) {
        this.a_position[i * 2] = x;
        this.a_position[i * 2 + 1] = y;
    }

    getVertex( i ) {
        return new _Types__WEBPACK_IMPORTED_MODULE_2__.Point( this.a_position[i * 2],this.a_position[i * 2 + 1] );
    }


    setColorArray( arr ) {
        this.dirty.colorReset = !( this.a_color && this.a_color.length >= arr.length * 2 );
        this.a_color = new Uint8Array( arr.length * 2 );
        for ( let i = 0; i < arr.length; i += 2 ) {
            this.a_color[i * 2 + 0] = ( arr[i] >> 16 ) & 0xff;
            this.a_color[i * 2 + 1] = ( arr[i] >> 8 ) & 0xff;
            this.a_color[i * 2 + 2] = ( arr[i] ) & 0xff;
            this.a_color[i * 2 + 3] =  arr[i + 1] * 255;
        }
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.colorOffset = 0;
        this.dirty.colorLength = this.a_color.length;
    }

    /**
     * @param {...number} args
     * @memberof Mesh
     */
    setColors( ...args ) {
        let minIndex = Infinity;
        let maxIndex = -Infinity;

        for ( let i = 0; i < args.length; i += 3 ) {
            const index = args[i];
            const c = args[i + 1];
            const a = args[i + 2];

            this.a_color[index * 4] = ( c >> 16 ) & 0xff;
            this.a_color[index * 4 + 1] = ( c >> 8 ) & 0xff;
            this.a_color[index * 4 + 2] = c & 0xff;
            this.a_color[index * 4 + 3] = a * 255;
            minIndex = Math.min( minIndex,index );
            maxIndex = Math.max( maxIndex,index );
        }
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.colorOffset = Math.min( this.dirty.colorOffset / 4,minIndex ) * 4;
        this.dirty.colorLength = Math.max( ( this.dirty.colorOffset + this.dirty.colorLength ) / 4,maxIndex ) * 4;
    }


    getColorArraySize() {
        // Utils.legacy();
        return this.a_color.length / 4;
    }

    setRgbaColorArray( arr ) {
        this.dirty.colorReset = !( this.a_color && this.a_color.length >= arr.length );
        this.a_color = new Uint8Array( arr.map( v=>v * 255 ) );
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.colorOffset = 0;
        this.dirty.colorLength = this.a_color.length;
    }

    setColor( i,c,a ) {
        const arr = _Utils__WEBPACK_IMPORTED_MODULE_3__.Utils.hex2rgba( c,a );

        this.a_color[i * 4] = arr[0];
        this.a_color[i * 4 + 1] = arr[1];
        this.a_color[i * 4 + 2] = arr[2];
        this.a_color[i * 4 + 3] = arr[3];
    }

    getColor( i ) {
        const c = _Utils__WEBPACK_IMPORTED_MODULE_3__.Utils.rgba2hex( this.a_color,i * 4 );

        return { color: c & 0xffffff,alpha: this.a_color[i * 4 + 3] };
    }


    setIndexArray( arr ) {
        this.dirty.indexReset = true;
        this.indices = new Uint16Array( Math.ceil( arr.length / 2 ) * 2 ); // float32로 바꿔야 하기 때문에 정렬
        this.indices.set( arr );
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.indexOffset = 0;
        this.dirty.indexLength = this.indices.length;
    }

    /**
     * @param {...number} args
     * @memberof Mesh
     */
    setIndices( ...args ) {
        let minIndex = Infinity;
        let maxIndex = -Infinity;

        for ( let i = 0; i < args.length; i += 2 ) {
            const index = args[i];
            const vi = args[i + 1];

            this.indices[index] = vi;
            minIndex = Math.min( minIndex,index );
            maxIndex = Math.max( maxIndex,index );
        }
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.indexOffset = Math.min( this.dirty.indexOffset,minIndex );
        this.dirty.indexLength = Math.max( this.dirty.indexOffset + this.dirty.indexLength,maxIndex );
    }

    getIndex( i ) {
        return this.indices[i];
    }

    setIndex( i,v ) {
        this.indices[i] = v;
    }

    /**
     *
     *
     * @param {string} attribName
     * @param {number[]} arr
     * @param {Mesh.ArrayTypes} arrayType
     * @param {number} [size=1]
     * @param {boolean} [normalize = false]
     * @memberof Mesh
     */
    setGenericArray( attribName, arr, arrayType = Mesh.ArrayTypes.FLOAT32, size = 1, normalize = false ) {
        this.a_genericArray = this.a_genericArray || {};
        this.a_genericArray[attribName] = { 
            data:          new arrayType( arr ),
            numComponents: size,
            normalize:     normalize 
        };
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
    }

    static createBox( x, y, w, h, color = 0xffffff, alpha = 1 ) {
        const m = new Mesh();

        m.setVertexArray( [x, y, x + w, y, x, y + h, x + w, y + h] );
        m.setColorArray( [color, alpha, color, alpha, color, alpha, color, alpha] );
        m.setIndexArray( [0, 1, 2, 1, 3, 2] );

        return m;
    }


    encodeExtraRenderingInfo() {
        const encodedBuffer = new Float32Array( 
            14 + 
             this.dirty.positionLength + 
             this.dirty.texCoordLength + 
             Math.ceil( this.dirty.colorLength / 4 ) + 
             Math.ceil( this.dirty.indexLength / 2 ) );

        encodedBuffer.set( [
            this.texture != null ? this.texture.asset.id : 0,
            this.dirty.positionOffset,
            this.dirty.positionLength,
            this.dirty.texCoordOffset,
            this.dirty.texCoordLength,
            this.dirty.colorOffset,
            this.dirty.colorLength,
            this.dirty.indexOffset,
            this.dirty.indexLength,
            +this.dirty.textureReset,
            +this.dirty.positionReset,
            +this.dirty.texCoordReset,
            +this.dirty.colorReset,
            +this.dirty.indexReset,
        ] );
        let offset = 14;

        if ( this.dirty.positionLength > 0 ) {
            encodedBuffer.set( _Types__WEBPACK_IMPORTED_MODULE_2__.TypedArrayHelper.subarray( this.a_position,this.dirty.positionOffset, this.dirty.positionLength ),offset );
            offset +=  this.dirty.positionLength;
        }
        if ( this.dirty.texCoordLength > 0 ) {
            encodedBuffer.set( _Types__WEBPACK_IMPORTED_MODULE_2__.TypedArrayHelper.subarray( this.a_texCoord,this.dirty.texCoordOffset, this.dirty.texCoordLength ),offset );
            offset +=  this.dirty.texCoordLength;
        }
        if ( this.dirty.colorLength > 0 ) {
            encodedBuffer.set( _Types__WEBPACK_IMPORTED_MODULE_2__.TypedArrayHelper.Uint8ToFloat32( this.a_color,this.dirty.colorOffset, this.dirty.colorLength ),offset );
            offset +=  this.dirty.colorLength / 4;
        }
        if ( this.dirty.indexLength > 0 ) {
            encodedBuffer.set( _Types__WEBPACK_IMPORTED_MODULE_2__.TypedArrayHelper.Uint16ToFloat32( this.indices,this.dirty.indexOffset, this.dirty.indexLength ),offset );
        }

        this.dirty.textureReset = false;
        this.dirty.positionReset = false;
        this.dirty.texCoordReset = false;
        this.dirty.colorReset = false;
        this.dirty.indexReset = false;

        let genericData;
        let transfer;

        if ( this.a_genericArray ) {
            genericData = this.a_genericArray;
            transfer = [];
            for ( let name in this.a_genericArray ) {
                transfer.push( this.a_genericArray[name].data.buffer );
            }            
        }

        return [encodedBuffer,null,genericData,transfer];
    }
}
/** 
 * 
 * @enum {object} 
 */
Mesh.ArrayTypes = {
    UINT32:  Uint32Array,
    UINT16:  Uint16Array,
    UINT8:   Uint8Array,
    FLOAT32: Float32Array,
};



/***/ }),

/***/ "./engine/src/MovieClip.js":
/*!*********************************!*\
  !*** ./engine/src/MovieClip.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MovieClip": () => (/* binding */ MovieClip)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _easing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./easing */ "./engine/src/easing.js");




const EMPTY_KEY = "$";
const STOP_MARK = -1;

/** 
 * @typedef {object} Options 
 * @param {boolean} autoPlay
*/

/** @type {Options} */
const defaultOptions = {
    autoPlay: true
};

// 
/*
    스테이지에 붙어 있을 때만 작동한다.
    일반 개체의 값을 조정할 때도 사용할 수 있다.

    "ease",
    [0,10,target,{x:[0,100,ease]}]
    [0,"goto","event"]
    [0,"stop"]

*/

//  * @typedef {Object.<string,Range>} Props

/**
 * @typedef {number|*[]} Range
 * @typedef {Object.<string,Range>} Props
 * @typedef {[number,number,object|string]|[number,number,object|string,Props]|[number,string,string|number]|[number,string]} Line
 * @typedef {Line[]} Timeline
 * @typedef {Object.<string,Timeline>} TimelineGroup
 */

/**
 *
 * @this MovieClip
 * @param {Event} e
 */
function onEnterFrame( e ) {
    /** @type {{timeline:object,action:object,lastFrame:number}} */
    const ani = this.__mc.animations[this.__mc.currentAnimation];

    if ( ani == null ) return;
    for ( let [target, timeline] of ani.timeline.entries() ) {
        let noKey = true;

        //console.assert(targetSprite instanceof Sprite);
        if ( typeof target == "string" ) {
            target = this.__mc.targets[target];
            console.assert( target != null, `MovieClip의 타겟을 찾을 수 없습니다.` );
        }

        for ( const param in timeline ) {
            const value = timeline[param][this.__mc.currentFrame];

            if ( param == EMPTY_KEY ) {
                noKey = false;
            } else if ( value != null ) {
                target[param] = value;
                noKey = false;
            }
        }

        if ( target instanceof _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite ) {
            if ( noKey ) {
                if ( this.contains( target ) ) this.removeChild( target );
            } else {
                if ( !this.contains( target ) ) this.addChild( target );
            }
        }
    }

    const action = ani.action[this.__mc.currentFrame];

    if ( action != null ) {
        if ( action == STOP_MARK ) {
            this.stop();
        } else if ( typeof action == "string" ) {
            const [header, value, extra] = action.split( ":" );

            if ( header == "ani" ) {
                this.gotoAndPlay( extra != null ? value + ":" + extra : value );
            } else if ( header == "sound" ) {
                //TODO:
            } else if ( header == "event" ) {
                //TODO:
            }
        } else {
            this.__mc.currentFrame = parseInt( action );
        }
    } else {
        if ( this.__mc.playing == false || this.__mc.currentFrame >= ani.lastFrame ) this.stop();
        else this.__mc.currentFrame++;
    }
}

/**
 * @this MovieClip
 * @param {Timeline} tl
 * @returns {{timeline:object,action:object,lastFrame:number}}
 */
function parseTimeline( tl ) {
    const timeline = new Map();
    const action = {};
    let paramTimeline;
    let lastFrame = 0;

    for ( const i in tl ) {
        const line = tl[i];

        if ( typeof line[1] == "string" ) {
            const [frame, command, label] = line;

            if ( command == "stop" ) {
                action[frame] = STOP_MARK;
            } else if ( command == "goto" ) {
                action[frame] = typeof label == "number" ? label : "ani:" + label;
            } else if ( command == "event" ) {
                action[frame] = "event:" + label;
            } else if ( command == "sound" ) {
                action[frame] = "sound:" + label;
            }
        } else {
            const [startFrame, endFrame, targetObject, props] = line;

            paramTimeline = timeline.get( targetObject ) || {};

            if ( props == null ) {
                paramTimeline[EMPTY_KEY] = paramTimeline[EMPTY_KEY] || {};
            
                //@ts-ignore
                for ( let frame = startFrame; frame <= endFrame; frame++ ) {
                    paramTimeline[EMPTY_KEY][frame] = 1;
                }
            } else {
            //@ts-ignore
                for ( const key in props ) {
                    paramTimeline[key] = paramTimeline[key] || {};

                    if ( Array.isArray( props[key] ) ) {
                        const [startValue, endValue, ease] = props[key];
                        const easingFunc = ( typeof ease == "function" ? ease : _easing__WEBPACK_IMPORTED_MODULE_2__.easing[ease] ) || _easing__WEBPACK_IMPORTED_MODULE_2__.easing.linear;

                        for ( let frame = startFrame; frame <= endFrame; frame++ ) {
                        //@ts-ignore
                            paramTimeline[key][frame] = easingFunc( ( frame - startFrame ) / ( endFrame - startFrame ) ) * ( endValue - startValue ) + startValue;
                        }
                    } else {
                        const value = props[key];

                        for ( let frame = startFrame; frame <= endFrame; frame++ ) {
                            paramTimeline[key][frame] = value;
                        }
                    }
                }
            }

            timeline.set( targetObject, paramTimeline );
            //@ts-ignore
            lastFrame = Math.max( lastFrame, endFrame );
        }
    }

    return { action,timeline,lastFrame };
}


class MovieClip extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    /**
     * 자동으로 애니메이션을 하는 MovieClip 개체를 만든다.
     * MovieClip은 Tween이나 show,hide를 시간순에 맞게 보여줄 수 있다.
     * 
     * 예제1) Array를 사용한 경우
     * 
     * new MovieClip([
     *     [0,10,targetSpr,{ x:[0,100,"outCubic"], y:20, alpha:[0.5,1] }],
     *     [11,20,targetSpr,{ x:[100,0,easing.inBounce] }]
     *     [20,"goto",0] // 이렇게 루프를 시킬 수도 있다. 없으면 마지막 프레임에서 멈춤. "stop", "event", "sound" 등을 쓸 수 있다.
     * ])
     * 
     * 예제2) Object를 사용한 경우
     * 
     * new MovieClip({
     *      default: [
     *          [0,10,targetSpr, { y: 10 }]
     *          :
     *      ],
     *      show: [
     *          [0,20,targetSpr, { x: 5 }]
     *          [20,"goto","default"]
     *      ]
     * });
     * 
     * @param {Timeline|TimelineGroup=} timelineData - 하나의 타임라인 애니메이션을 Array로 넣거나 다수의 애니메이션을 Object로 넣을 수 있다
     * @param {Options=} options
     * @memberof MovieClip
     */
    constructor( timelineData, options  ) {
        super();
        this.__mc = {};
        this.__mc.currentFrame = 0;
        this.__mc.currentAnimation = undefined;
        this.__mc.playing = false;
        this.__mc.targets = {};
        this.__mc.animations = {};
        this.__mc.options = Object.assign( defaultOptions, options );
        if ( timelineData ) this.addAnimations( timelineData );
        if ( this.__mc.options.autoPlay ) {
            this.play();
        }
    }

    /**
     * MovieClip에 animation을 추가한다.
     * 
     * @param {Timeline|TimelineGroup} timelineData - 하나의 타임라인 애니메이션을 Array로 넣거나 다수의 애니메이션을 Object로 넣을 수 있다
     * @memberof MovieClip
     */
    addAnimations( timelineData ) {
        if ( timelineData != null ) {
            if ( Array.isArray( timelineData ) ) {
                this.__mc.animations["default"] = parseTimeline.call( this, timelineData );
                this.__mc.currentAnimation = "default";
            } else {
                for ( const label in timelineData ) {
                    // 첫번째 애니메이션을 디폴트로
                    if ( this.__mc.currentAnimation == null ) this.__mc.currentAnimation = label;
                    this.__mc.animations[label] = parseTimeline.call( this, timelineData[label] );
                }
            }
        }
    }

    /**
     * 두 개의 MovieClip을 병합한다
     *
     * @param {MovieClip} mc
     * @param {boolean} replace
     * @memberof MovieClip
     */
    merge( mc,replace ) {
        for ( const label in mc.__mc.animations ) {
            const ani = mc.__mc.animations[label];

            if ( replace || this.__mc.animations[label] == null ) this.__mc.animations[label] = ani;
        }
    }


    setTarget( name, target ) {
        this.__mc.targets[name] = target;
    }


    /**
     *
     *
     * @param {string|number} f
     * @memberof MovieClip
     */
    gotoAndPlay( f ) {
        if ( typeof f == "string" ) {
            //@ts-ignore
            const [animationName, frame] = f.split( ":" );

            this.__mc.currentAnimation = animationName;
            this.__mc.currentFrame = frame != null ? parseInt( frame ) : 0;
        } else {
            console.assert( typeof f == "number" );
            //@ts-ignore
            this.__mc.currentFrame = parseInt( f );
        }

        this.play();
    }

    /**
     *
     *
     * @param {number} f
     * @memberof MovieClip
     */
    gotoAndStop( f ) {
        if ( typeof f == "string" ) {
            //@ts-ignore
            const [animationName, frame] = f.split( ":" );

            this.__mc.currentAnimation = animationName;
            this.__mc.currentFrame = frame != null ? parseInt( frame ) : 0;
        } else {
            console.assert( typeof f == "number" );
            //@ts-ignore
            this.__mc.currentFrame = parseInt( f );
        }

        this.stop();
    }

    play( aniName ) {
        if ( aniName != null ) {
            this.gotoAndPlay( aniName );
        }

        if ( !this.__mc.playing ) {
            this.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME,onEnterFrame,this );
            this.__mc.playing = true;
        }
    }

    stop() {
        if ( this.__mc.playing ) {
            this.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME,onEnterFrame,this );
            this.__mc.playing = false;
        }
    }

    /**
     *
     *
     * @param {number} f
     * @param {string|number} destination
     * @memberof MovieClip
     */
    setGotoAction( f, destination ) {
        //@ts-ignore
        if ( parseInt( destination ) == destination ) destination = parseInt( destination );
        this.__mc.animations[this.__mc.currentAnimation].action[f] = destination;
    }

    /**
     *
     *
     * @param {number} f
     * @memberof MovieClip
     */
    setStopAction( f ) {
        this.__mc.animations[this.__mc.currentAnimation].action[f] = STOP_MARK; // stop
    }


    /**
     * target을 제외하고 모든 내용이 동일한 MovieClip을 만든다.
     *
     * @returns {MovieClip}
     * @memberof MovieClip
     */
    instance() {
        const newObj = new MovieClip( null );

        newObj.__mc.animations = this.__mc.animations;
        newObj.__mc.currentAnimation = Object.keys( this.__mc.animations )[0];
        Object.assign( newObj.__mc.targets, this.__mc.targets );
        newObj.play();

        return newObj;
    }
}

// let b = new Sprite();
// new MovieClip([
//     [0, 0, b, { x: [0,1,easing.outCubic],y: [1,1] }],
// ]);




/***/ }),

/***/ "./engine/src/MsdfFont.js":
/*!********************************!*\
  !*** ./engine/src/MsdfFont.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MsdfFont": () => (/* binding */ MsdfFont)
/* harmony export */ });
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _FontBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FontBase */ "./engine/src/FontBase.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");




class MsdfFont extends _FontBase__WEBPACK_IMPORTED_MODULE_1__.FontBase {
    constructor( MsdfFontName,referenceSize, styles ) {
        super( MsdfFontName, referenceSize, styles );
        // Bitmap
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_0__.Asset( MsdfFontName,_Asset__WEBPACK_IMPORTED_MODULE_0__.Asset.AssetTypes.MsdfFont );
        // 페이지가 여러개 있는 폰트는 아직 처리 못함
        const page = this.asset.fontInfo.pages[0];
        const pngSize = _Utils__WEBPACK_IMPORTED_MODULE_2__.Utils.getImageSize( page.file );

        this.asset.load( { 
            bitmap:        page.file, 
            width:         pngSize.width,
            height:        pngSize.height,
            referenceSize: this.referenceSize,
            styles:        this.styles,
            fontInfo:      this.asset.fontInfo 
        } );
        this.fontLoaded = false;
    }    

    measureTextWidth( str,size ) {
        super.measureTextWidth( str,size );

        const fontInfo = this.asset.fontInfo;
        const scale = size ? size / fontInfo.info.size : 1;

        let width = 0;

        for ( let i = 0; i < str.length; i++ ) {
            const char = str.charCodeAt( i );
            const charInfo = fontInfo.chars[char];

            width += charInfo.xadvance * scale;
        }
        return width;        
    }
}




/***/ }),

/***/ "./engine/src/Particles.js":
/*!*********************************!*\
  !*** ./engine/src/Particles.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Particles": () => (/* binding */ Particles)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");

 



class Particles extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor() {
        super();
    }

    addParticles( ...args ) {

    }

    setTexture( ...args ) {

    }
}



/***/ }),

/***/ "./engine/src/Pixel.js":
/*!*****************************!*\
  !*** ./engine/src/Pixel.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Pixel": () => (/* binding */ Pixel)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");





class Pixel extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( color = 0xffffff, alpha = 1, width = 1, height = 1 ) {
        super();
        this._$$spriteType = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.SpriteTypes.PIXEL;
        this._$$updateCode = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.pixelColor = _Utils__WEBPACK_IMPORTED_MODULE_1__.Utils.hex2rgba( color,alpha );
        this.pixelWidth = width;
        this.pixelHeight = height;    
        this._$$localBounds.x = 0;
        this._$$localBounds.y = 0;
        this._$$localBounds.width = width;
        this._$$localBounds.height = height;
    }

    setColor( color = 0xffffff, alpha = 1 ) {
        this.pixelColor = _Utils__WEBPACK_IMPORTED_MODULE_1__.Utils.hex2rgba( color,alpha );
        this._$$updateCode = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
    }

    encodeExtraRenderingInfo() {
        let encodedBuffer = new Float32Array( 6 );

        encodedBuffer[0] = this.pixelWidth;
        encodedBuffer[1] = this.pixelHeight;
        encodedBuffer.set( this.pixelColor,2 );
        return [encodedBuffer];
    }
}



/***/ }),

/***/ "./engine/src/RenderTarget.js":
/*!************************************!*\
  !*** ./engine/src/RenderTarget.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RenderTarget": () => (/* binding */ RenderTarget)
/* harmony export */ });
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");
/* harmony import */ var _TextureBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TextureBase */ "./engine/src/TextureBase.js");
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
//
// 렌더링과 로직 쓰레드가 분리되어 있기 때문에 RT가 가장 만들기 어렵다.
// RT를 요청하는 시점에서 메인쓰레드에 생성
// draw할 때 그릴 스프라이트 트리의 스냅샷을 전송
// main에서는 받은 스냅샷을 가지고 draw를 즉시 수행
// RT는 수동으로 파기 해주어야 함












class RenderTarget extends _TextureBase__WEBPACK_IMPORTED_MODULE_1__.TextureBase {
    /**
     *Creates an instance of RenderTarget.
     * @param {number} width
     * @param {number} height
     * @param {boolean} filter
     * @memberof RenderTarget
     */
    constructor( width, height, filter = false ) {
        super();
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_6__.Asset( "<RT:*>",_Asset__WEBPACK_IMPORTED_MODULE_6__.Asset.AssetTypes.RenderTarget );
        this.width = width;
        this.height = height;
        this.uvRect = new _Types__WEBPACK_IMPORTED_MODULE_5__.Rect( 0,0,this.width,this.height );

        this.asset.load( { width: this.width,height: this.height,filter: filter } );
    }

    /**
     *
     *
     * @param {number} [color=0]
     * @param {number} [alpha=0]
     * @memberof RenderTarget
     */
    clear( color = 0 , alpha = 0 ) {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand", class: "RenderTarget", method: "clear",args: [this.asset.id, _Utils__WEBPACK_IMPORTED_MODULE_4__.Utils.hex2rgba( color,alpha )] } );
    }

    /**
     *
     *
     * @param {Sprite} spr
     * @memberof RenderTarget
     */
    draw( spr ) {
        let [buf,transferList] = spr.encodeRenderingInfoWithChildren();

        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand", class: "RenderTarget", method: "draw",args: [this.asset.id, buf] }, transferList );
    }
}


/***/ }),

/***/ "./engine/src/SceneManager.js":
/*!************************************!*\
  !*** ./engine/src/SceneManager.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SceneManager": () => (/* binding */ SceneManager)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Timer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Timer */ "./engine/src/Timer.js");
/* harmony import */ var _Mesh__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Mesh */ "./engine/src/Mesh.js");
/* harmony import */ var _RenderTarget__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./RenderTarget */ "./engine/src/RenderTarget.js");







// const Sprite = require("./sprite");
// const Mesh = require("./mesh");
// const RenderTarget = require("./renderTarget");
// const Utils = require("./utils");
// const Event = require("./event");

function rad( d ) {
    return d * Math.PI / 180;
}

let _needRT;

function defaultEase( ratio ) {
    return ratio;
}



class SceneManager extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( application, x, y, w, h, lw, lh ) {
        super();
        this.application = application;
        this.stage = application.stage;
        this.x1 = x;
        this.y1 = y;
        this.x2 = x + w;
        this.y2 = y + h;
        this.lw = lw;
        this.lh = lh;
        this.tweening = false;
        this.transitionEventCatcher = new _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        /** @type {Mesh} */
        this._blackMesh = null;
        /** @type {RenderTarget} */
        this._RT = null;
    }

    //#region [Transitions]
	
    // scene2 == newScene;
    //---------------------------------------------------------------------------------------------------
    // 트랜지션들
    //---------------------------------------------------------------------------------------------------


    static accordionLeft( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        //let h = self.lh;
        const scale1 = ( 1 - t );
        const scale2 = t;

        scene1.setScaleX( scale1 );
        scene2.setX( w * scale1 );
        scene2.setScaleX( scale2 );
    }

    static accordionRight( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        //let h = self.lh;
        const scale1 = ( 1 - t );
        const scale2 = t;

        scene1.setX( w * scale2 );
        scene1.setScaleX( scale1 );
        scene2.setScaleX( scale2 );
    }


    static zoomOut( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const scale1 = t + 1;
        const scale2 = t;
        const alpha = 1 - t * 1.2;

        scene1.setAlpha( alpha );
        if ( alpha <= 0 ) scene1.setVisible( false );

        scene1.setScale( scale1 );
        scene1.setPosition( -( w * scale1 - w ) / 2, -( h * scale1 - h ) / 2 );
        scene2.setAlpha( t );
        scene2.setScale( scale2 );
        scene2.setPosition( -( w * scale2 - w ) / 2, -( h * scale2 - h ) / 2 );
    }

    static zoomIn( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const scale1 = t + 1;
        const scale2 = t;

        scene1.setAlpha( 1 - t );
        scene1.setScale( scale1 );
        scene1.setPosition( -( w * scale1 - w ) / 2, -( h * scale1 - h ) / 2 );
        scene2.setAlpha( t );
        scene2.setScale( scale2 );
        scene2.setPosition( -( w * scale2 - w ) / 2, -( h * scale2 - h ) / 2 );
    }

    static zoomOutCross( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const scale1 = t + 1;
        const scale2 = ( 1 - t ) + 1;
        const alpha = 1 - t * 1.2;

        scene1.setAlpha( alpha );
        if ( alpha <= 0 ) scene1.setVisible( false );

        scene1.setScale( scale1 );
        scene1.setPosition( -( w * scale1 - w ) / 2, -( h * scale1 - h ) / 2 );
        scene2.setAlpha( t );
        scene2.setScale( scale2 );
        scene2.setPosition( -( w * scale2 - w ) / 2, -( h * scale2 - h ) / 2 );
    }

    static zoomInCross( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const scale1 = ( 1 - t );
        const scale2 = t;

        scene1.setAlpha( 1 - t );
        scene1.setScale( scale1 );
        scene1.setPosition( -( w * scale1 - w ) / 2, -( h * scale1 - h ) / 2 );
        scene2.setAlpha( t );
        scene2.setScale( scale2 );
        scene2.setPosition( -( w * scale2 - w ) / 2, -( h * scale2 - h ) / 2 );
    }


    static spinCW( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        //	let a1 = (1-t) * 360;
        const a1 = t * 180;
        const a2 = 180 + t * 180;
        //let l = Math.sqrt((w / 2) ** 2, (h / 2) ** 2);
        const [x1, y1] = [Math.cos( rad( a1 ) ) * w / 2 - Math.sin( rad( a1 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a1 ) ) * w / 2 + Math.cos( rad( a1 ) ) * h / 2 - h / 2];
        const [x2, y2] = [Math.cos( rad( a2 ) ) * w / 2 - Math.sin( rad( a2 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a2 ) ) * w / 2 + Math.cos( rad( a2 ) ) * h / 2 - h / 2];

        scene1.setAlpha( 1 - t );
        scene2.setAlpha( t );
        scene1.setRotation( a1 );
        scene2.setRotation( a2 );
        scene1.setPosition( -x1, -y1 );
        scene2.setPosition( -x2, -y2 );
    }

    static spinCCW( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        //	let a1 = (1-t) * 360;
        const a1 = 180 + ( 1 - t ) * 180;
        const a2 = ( 1 - t ) * 180;
        //let l = Math.sqrt((w / 2) ** 2, (h / 2) ** 2);
        const [x1, y1] = [Math.cos( rad( a1 ) ) * w / 2 - Math.sin( rad( a1 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a1 ) ) * w / 2 + Math.cos( rad( a1 ) ) * h / 2 - h / 2];
        const [x2, y2] = [Math.cos( rad( a2 ) ) * w / 2 - Math.sin( rad( a2 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a2 ) ) * w / 2 + Math.cos( rad( a2 ) ) * h / 2 - h / 2];

        scene1.setAlpha( 1 - t );
        scene2.setAlpha( t );
        scene1.setRotation( a1 );
        scene2.setRotation( a2 );
        scene1.setPosition( -x1, -y1 );
        scene2.setPosition( -x2, -y2 );
    }

    static spinCrossCW( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const a1 = -t * 180;
        const a2 = 180 + t * 180;
        //let l = Math.sqrt((w / 2) ** 2, (h / 2) ** 2);
        const [x1, y1] = [Math.cos( rad( a1 ) ) * w / 2 - Math.sin( rad( a1 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a1 ) ) * w / 2 + Math.cos( rad( a1 ) ) * h / 2 - h / 2];
        const [x2, y2] = [Math.cos( rad( a2 ) ) * w / 2 - Math.sin( rad( a2 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a2 ) ) * w / 2 + Math.cos( rad( a2 ) ) * h / 2 - h / 2];

        scene1.setAlpha( 1 - t );
        scene2.setAlpha( t );
        scene1.setRotation( a1 );
        scene2.setRotation( a2 );
        scene1.setPosition( -x1, -y1 );
        scene2.setPosition( -x2, -y2 );
    }

    static spinCrossCCW( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const a1 = t * 180;
        const a2 = 180 + -t * 180;
        //let l = Math.sqrt((w / 2) ** 2, (h / 2) ** 2);
        const [x1, y1] = [Math.cos( rad( a1 ) ) * w / 2 - Math.sin( rad( a1 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a1 ) ) * w / 2 + Math.cos( rad( a1 ) ) * h / 2 - h / 2];
        const [x2, y2] = [Math.cos( rad( a2 ) ) * w / 2 - Math.sin( rad( a2 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a2 ) ) * w / 2 + Math.cos( rad( a2 ) ) * h / 2 - h / 2];

        scene1.setAlpha( 1 - t );
        scene2.setAlpha( t );
        scene1.setRotation( a1 );
        scene2.setRotation( a2 );
        scene1.setPosition( -x1, -y1 );
        scene2.setPosition( -x2, -y2 );
    }


    static balloon( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const scale1x = t + 1;
        const scale2x = ( 1 - t ) + 1;
        const scale1y = ( 1 - t );
        const scale2y = t;

        scene1.setAlpha( 1 - t );
        scene1.setScale( scale1x, scale1y );
        scene1.setPosition( -( w * scale1x - w ) / 2, -( h * scale1y - h ) / 2 );
        scene2.setAlpha( t );
        scene2.setScale( scale2x, scale2y );
        scene2.setPosition( -( w * scale2x - w ) / 2, -( h * scale2y - h ) / 2 );
    }


    static tv( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const scale1x = t * 3 + 1;
        const scale2x = t * 0.2 + 0.8;//1--(1-t)*3+1;
        const scale1y = ( 1 - t );
        const scale2y = t;

        scene1.setAlpha( 1 - t );
        //let color = Math.max(1-t*2,0);
        //scene1.setColorMultiplier(color,color,color);
        scene1.setScale( scale1x, scale1y );
        scene1.setPosition( -( w * scale1x - w ) / 2, -( h * scale1y - h ) / 2 );
        scene2.setAlpha( t );
        scene2.setScale( scale2x, scale2y );
        scene2.setPosition( -( w * scale2x - w ) / 2, -( h * scale2y - h ) / 2 );
    }

    static getWiperV2( self, w, h ) {
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( [0, 0, w, 0, 0, h * 1.2, w, h, 0, h * 1.4, w, h * 1.2] );
        m.setColorArray( [0x000000, 1, 0x000000, 1, 0x000000, 1, 0x000000, 1, 0x000000, 0, 0x000000, 0] );
        m.setIndexArray( [0, 1, 2, 1, 3, 2, 2, 3, 4, 3, 4, 5] );
        m.setColorMultiplier( 0, 0, 0 );

        return m;
    }

    static getWiperV( self, w, h ) {
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( [0, 0, w, 0, 0, h, w, h, 0, h * 1.2, w, h * 1.2] );
        m.setColorArray( [0x000000, 1, 0x000000, 1, 0x000000, 1, 0x000000, 1, 0x000000, 0, 0x000000, 0] );
        m.setIndexArray( [0, 1, 2, 1, 3, 2, 2, 3, 4, 3, 4, 5] );
        m.setColorMultiplier( 0, 0, 0 );

        return m;
    }

    static getWiperH( self, w, h ) {
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( [0, 0, w, 0, 0, h, w, h, w * 1.2, 0, w * 1.2, h] );
        m.setColorArray( [0x000000, 1, 0x000000, 1, 0x000000, 1, 0x000000, 1, 0x000000, 0, 0x000000, 0] );
        m.setIndexArray( [0, 1, 2, 1, 3, 2, 1, 4, 3, 4, 5, 3] );
        m.setColorMultiplier( 0, 0, 0 );

        return m;
    }

    static wipeUp2( self, scene1, scene2, t, rawT ) {
        const physicalMarginX = -self.x1;
        const physicalMarginY = -self.y1;
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( t < 0.5 ) {
            //let t2 = t * 2;
            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getWiperV2( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setScaleY( -1 );
            m.setX( -physicalMarginX );
            m.setY( h * ( 1 + ( 1 - t * 2 ) * 1.4 ) - physicalMarginY );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getWiperV2( self,w, h );

            self._blackMesh = m;
            m.setScaleX( -1 );
            self.addChild( m );
            m.setX( w - physicalMarginX );
            m.setY( h * ( -t2 * 1.4 ) - physicalMarginY );
        }
    }


    static wipeDown( self, scene1, scene2, t, rawT ) {
        const physicalMarginX = -self.x1;
        const physicalMarginY = -self.y1;
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( t < 0.5 ) {
            const t2 = t * 2;

            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getWiperV( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setX( -physicalMarginX );
            m.setY( -h * ( 1 - t2 ) * 1.2 - physicalMarginY );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getWiperV( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setScaleY( -1 );
            m.setX( -physicalMarginX );
            m.setY( h * ( 1 + t2 * 1.2 ) - physicalMarginY );
        }
    }

    static wipeUp( self, scene1, scene2, t, rawT ) {
        const physicalMarginX = -self.x1;
        const physicalMarginY = -self.y1;
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( t < 0.5 ) {
            //let t2 = t * 2;
            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getWiperV( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setScaleY( -1 );
            m.setX( -physicalMarginX );
            m.setY( h * ( 1 + ( 1 - t * 2 ) * 1.2 ) - physicalMarginY );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getWiperV( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setX( -physicalMarginX );
            m.setY( h * ( -t2 * 1.2 ) - physicalMarginY );
        }
    }

    static wipeRight( self, scene1, scene2, t, rawT ) {
        const physicalMarginX = -self.x1;
        const physicalMarginY = -self.y1;
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( t < 0.5 ) {
            const t2 = t * 2;

            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getWiperH( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setX( -w * ( 1 - t2 ) * 1.2 - physicalMarginX );
            m.setY( -physicalMarginY );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getWiperH( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setScaleX( -1 );
            m.setX( w * ( 1 + t2 * 1.2 ) - physicalMarginX );
            m.setY( -physicalMarginY );
        }
    }

    static wipeLeft( self, scene1, scene2, t, rawT ) {
        const physicalMarginX = -self.x1;
        const physicalMarginY = -self.y1;
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( t < 0.5 ) {
            //let t2 = t * 2;
            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getWiperH( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setScaleX( -1 );
            m.setX( w * ( 1 + ( 1 - t * 2 ) * 1.2 ) - physicalMarginX );
            m.setY( -physicalMarginY );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getWiperH( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setX( w * ( -t2 * 1.2 ) - physicalMarginX );
            m.setY( -physicalMarginY );
        }
    }


    static getClockMesh( self, w, h, ratio ) {
        if ( ratio < 0 ) {
            ratio = 0;
        }

        if ( ratio > 1 ) {
            ratio = 1;
        }

        const angle = ratio * 360;
        const angleZone = Math.floor( ratio * 8 ) + 1;
        const angle2 = ( angle % 45 );
        const triWidth = Math.sin( rad( angle2 ) );
        let v = [];
        let idx = [];

        if ( ratio == 1 ) {
            v = [0 * w, 0 * h, 1 * w, 0 * h, 1 * w, 1 * h, 0 * w, 1 * h];
            idx = [0, 1, 2, 2, 3, 0];
        } else if ( angleZone == 1 ) {
            v = [0.5 * w, 0 * h, ( 0.5 + triWidth ) * w, 0 * h, 0.5 * w, 0.5 * h];
            idx = [0, 1, 2];
        } else if ( angleZone == 2 ) {
            v = [1 * w, 0 * h, 1 * w, triWidth * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h];
            idx = [0, 1, 2, 3, 0, 2];
        } else if ( angleZone == 3 ) {
            v = [1 * w, 0.5 * h, 1 * w, ( 0.5 + triWidth ) * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h, 1 * w, 0 * h];
            idx = [0, 1, 2, 3, 4, 2, 4, 0, 2];
        } else if ( angleZone == 4 ) {
            v = [1 * w, 1 * h, ( 1 - triWidth ) * w, 1 * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h, 1 * w, 0 * h];
            idx = [0, 1, 2, 3, 4, 2, 4, 0, 2];
        } else if ( angleZone == 5 ) {
            v = [0.5 * w, 1 * h, ( 0.5 - triWidth ) * w, 1 * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h, 1 * w, 0 * h, 1 * w, 1 * h];
            idx = [0, 1, 2, 3, 4, 0, 4, 5, 0];
        } else if ( angleZone == 6 ) {
            v = [0 * w, 1 * h, 0 * w, ( 1 - triWidth ) * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h, 1 * w, 0 * h, 1 * w, 1 * h];
            idx = [0, 1, 2, 3, 4, 2, 4, 5, 0];
        } else if ( angleZone == 7 ) {
            v = [0 * w, 0.5 * h, 0 * w, ( 0.5 - triWidth ) * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h, 1 * w, 0 * h, 1 * w, 1 * h, 0 * w, 1 * h];
            idx = [0, 1, 2, 3, 4, 2, 4, 5, 6, 0, 2, 6];
        } else {
            v = [0 * w, 0 * h, triWidth * w, 0 * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h, 1 * w, 0 * h, 1 * w, 1 * h, 0 * w, 1 * h];
            idx = [0, 1, 2, 3, 4, 2, 4, 5, 6, 0, 2, 6];
        }

        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        //m.setTexture(tex);
        //m.setTextureCoordinateArray(v);
        m.setVertexArray( v );
        m.setIndexArray( idx );
        m.setColorMultiplier( 0, 0, 0 );

        return m;
    }



    static getCircleMesh( self, radius ) {
        const sides = 64;
        const v = [0, 0];
        const idx = [];
        const c = [0x000000, 1];

        for ( let i = 0; i < sides; i++ ) {
            const angle = ( i / sides ) * 2 * Math.PI;

            v[2 + i * 4] = Math.cos( angle ) * radius;
            v[2 + i * 4 + 1] = Math.sin( angle ) * radius;
            v[2 + i * 4 + 2] = Math.cos( angle ) * radius * 1.2;
            v[2 + i * 4 + 3] = Math.sin( angle ) * radius * 1.2;
            c[2 + i * 4] = 0x000000;
            c[2 + i * 4 + 1] = 1;
            c[2 + i * 4 + 2] = 0x000000;
            c[2 + i * 4 + 3] = 0;
            idx[ i * 9] = 0;	//origin;
            idx[ i * 9 + 1] = ( i * 2 ) + 1;
            idx[ i * 9 + 2] = ( i * 2 ) + 3;
            idx[ i * 9 + 3] = ( i * 2 ) + 1;
            idx[ i * 9 + 4] = ( i * 2 ) + 2;
            idx[ i * 9 + 5] = ( i * 2 ) + 4;
            idx[ i * 9 + 6] = ( i * 2 ) + 1;
            idx[ i * 9 + 7] = ( i * 2 ) + 4;
            idx[ i * 9 + 8] = ( i * 2 ) + 3;

            if ( i == sides - 1 ) {
                idx[ i * 9 + 2] = 1;
                idx[ i * 9 + 5] = 2;
                idx[ i * 9 + 7] = 2;
                idx[ i * 9 + 8] = 1;
            }
        }

        //log(Log.UI, table.concat(idx,","));
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( v );
        m.setIndexArray( idx );
        m.setColorArray( c );

        return m;
    }

    static getCircleHoleMesh( self, radius1, radius2 ) {
        const sides = 32;
        const v = [];
        const idx = [];
        const c = [];

        for ( let i = 0; i < sides; i++ ) {
            const angle = ( i / sides ) * 2 * Math.PI;

            v[ i * 6] = Math.cos( angle ) * radius1 / 1.2;
            v[ i * 6 + 1] = Math.sin( angle ) * radius1 / 1.2;
            v[ i * 6 + 2] = Math.cos( angle ) * radius1;
            v[ i * 6 + 3] = Math.sin( angle ) * radius1;
            v[ i * 6 + 4] = Math.cos( angle ) * radius2;
            v[ i * 6 + 5] = Math.sin( angle ) * radius2;
            c[ i * 6] = 0x000000;
            c[ i * 6 + 1] = 0;
            c[ i * 6 + 2] = 0x000000;
            c[ i * 6 + 3] = 1;
            c[ i * 6 + 4] = 0x000000;
            c[ i * 6 + 5] = 1;
            idx[ i * 12] = ( i * 3 ) + 0;
            idx[ i * 12 + 1] = ( i * 3 ) + 4;
            idx[ i * 12 + 2] = ( i * 3 ) + 3;
            idx[ i * 12 + 3] = ( i * 3 ) + 0;
            idx[ i * 12 + 4] = ( i * 3 ) + 1;
            idx[ i * 12 + 5] = ( i * 3 ) + 4;
            idx[ i * 12 + 6] = ( i * 3 ) + 1;
            idx[ i * 12 + 7] = ( i * 3 ) + 2;
            idx[ i * 12 + 8] = ( i * 3 ) + 5;
            idx[ i * 12 + 9] = ( i * 3 ) + 1;
            idx[ i * 12 + 10] = ( i * 3 ) + 5;
            idx[ i * 12 + 11] = ( i * 3 ) + 4;

            if ( i == sides - 1 ) {
                idx[ i * 12 + 1] = 1;
                idx[ i * 12 + 2] = 0;
                idx[ i * 12 + 5] = 1;
                idx[ i * 12 + 8] = 2;
                idx[ i * 12 + 10] = 2;
                idx[ i * 12 + 11] = 1;
            }
        }

        //log(Log.UI, table.concat(idx,","));
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( v );
        m.setIndexArray( idx );
        m.setColorArray( c );

        return m;
    }

    static circleInOut( self, scene1, scene2, t, rawT ) {
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;
        const radius = Math.sqrt( ( w / 2 ) ** 2 + ( h / 2 ) ** 2 );

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( ( t < 0.5 ) ) {
            const t2 = t * 2;

            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getCircleHoleMesh( self,radius * ( 1 - t2 ) * 1.2, radius * 1.2 );

            self._blackMesh = m;
            self.addChild( m );
            //m.setScale(t);
            m.setX( self.lw / 2 );
            m.setY( self.lh / 2 );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getCircleHoleMesh( self,radius * t2 * 1.2, radius * 1.2 );

            self._blackMesh = m;
            self.addChild( m );
            //m.setScale(t);
            m.setX( self.lw / 2 );
            m.setY( self.lh / 2 );
        }
    }


    static circleOut( self, scene1, scene2, t, rawT ) {
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;
        const radius = Math.sqrt( ( w / 2 ) ** 2 + ( h / 2 ) ** 2 );

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( ( t < 0.5 ) ) {
            const t2 = t * 2;

            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getCircleMesh( self,radius * 1.2 );

            self._blackMesh = m;
            self.addChild( m );
            m.setScale( t2 );
            m.setX( self.lw / 2 );
            m.setY( self.lh / 2 );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getCircleHoleMesh( self,radius * t2 * 1.2, radius * 1.2 );

            self._blackMesh = m;
            self.addChild( m );
            //m.setScale(t);
            m.setX( self.lw / 2 );
            m.setY( self.lh / 2 );
        }
    }

    static circleIn( self, scene1, scene2, t, rawT ) {
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;
        const radius = Math.sqrt( ( w / 2 ) ** 2 + ( h / 2 ) ** 2 );

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( ( t < 0.5 ) ) {
            const t2 = t * 2;

            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getCircleHoleMesh( self,radius * ( 1 - t2 ) * 1.2, radius * 1.2 );

            self._blackMesh = m;
            self.addChild( m );
            //m.setScale(t);
            m.setX( self.lw / 2 );
            m.setY( self.lh / 2 );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getCircleMesh( self,radius * 1.2 );

            self._blackMesh = m;
            self.addChild( m );
            m.setScale( 1 - t2 );
            m.setX( self.lw / 2 );
            m.setY( self.lh / 2 );
        }
    }


    static clock( self, scene1, scene2, t, rawT ) {
        const physicalMarginX = -self.x1;
        const physicalMarginY = -self.y1;
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( ( t < 0.5 ) ) {
            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getClockMesh( self,w, h, t * 2 );

            m.setX( -physicalMarginX );
            m.setY( -physicalMarginY );
            self._blackMesh = m;
            self.addChild( m );
        } else {
            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getClockMesh( self,w, h, 1 - ( t - 0.5 ) * 2 );

            m.setScaleX( -1 );
            m.setX( w - physicalMarginX );
            m.setY( -physicalMarginY );
            self._blackMesh = m;
            self.addChild( m );
        }
    }



    //-----------------------------------------------------
    // RT transition;
    //-----------------------------------------------------

    static getCircleMeshRT( self, radius ) {
        const sides = 64;
        const v = [0, 0];
        const t = [( self.x2 - self.x1 ) / 2, ( self.y2 - self.y1 ) / 2];
        const idx = [];
        const c = [0xffffff, 1];

        for ( let i = 0; i < sides; i++ ) {
            const angle = ( i / sides ) * 2 * Math.PI;

            v[2 + i * 4] = Math.cos( angle ) * radius;
            v[2 + i * 4 + 1] = Math.sin( angle ) * radius;
            v[2 + i * 4 + 2] = Math.cos( angle ) * radius * 1.2;
            v[2 + i * 4 + 3] = Math.sin( angle ) * radius * 1.2;
            t[2 + i * 4] = t[1] + v[2 + i * 4];
            t[2 + i * 4 + 1] = t[2] + v[2 + i * 4 + 1];
            t[2 + i * 4 + 2] = t[1] + v[2 + i * 4 + 2];
            t[2 + i * 4 + 3] = t[2] + v[2 + i * 4 + 3];
            c[2 + i * 4] = 0xffffff;
            c[2 + i * 4 + 1] = 1;
            c[2 + i * 4 + 2] = 0xffffff;
            c[2 + i * 4 + 3] = 0;
            idx[i * 9] = 0;	//origin;
            idx[i * 9 + 1] = ( i * 2 ) + 1;
            idx[i * 9 + 2] = ( i * 2 ) + 3;
            idx[i * 9 + 3] = ( i * 2 ) + 1;
            idx[i * 9 + 4] = ( i * 2 ) + 2;
            idx[i * 9 + 5] = ( i * 2 ) + 4;
            idx[i * 9 + 6] = ( i * 2 ) + 1;
            idx[i * 9 + 7] = ( i * 2 ) + 4;
            idx[i * 9 + 8] = ( i * 2 ) + 3;

            if ( i == sides - 1 ) {
                idx[i * 9 + 2] = 1;
                idx[i * 9 + 5] = 2;
                idx[i * 9 + 7] = 2;
                idx[i * 9 + 8] = 1;
            }
        }

        //log(Log.UI, table.concat(idx,","));
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( v );
        m.setIndexArray( idx );
        m.setColorArray( c );
        m.setTextureCoordinateArray( t );
        m.setTexture( self._RT );

        return m;
    }

    static getCircleHoleMeshRT( self, radius1, radius2 ) {
        const sides = 32;
        const [cx, cy] = [( self.x2 - self.x1 ) / 2, ( self.y2 - self.y1 ) / 2];
        const v = [];
        const t = [];
        const idx = [];
        const c = [];

        for ( let i = 0; i < sides; i++ ) {
            const angle = ( i / sides ) * 2 * Math.PI;

            v.push(
                Math.cos( angle ) * radius1 / 1.2, Math.sin( angle ) * radius1 / 1.2,
                Math.cos( angle ) * radius1, Math.sin( angle ) * radius1,
                Math.cos( angle ) * radius2, Math.sin( angle ) * radius2
            );
            t.push(
                cx + v[i * 6], cy + v[i * 6 + 1],
                cx + v[i * 6 + 2], cy + v[i * 6 + 3],
                cx + v[i * 6 + 4], cy + v[i * 6 + 5]
            );
            c.push(
                0xffffff, 0,
                0xffffff, 1,
                0xffffff, 1
            );
            idx.push(
                ( i * 3 ) + 0, ( i * 3 ) + 4, ( i * 3 ) + 3,
                ( i * 3 ) + 0, ( i * 3 ) + 1, ( i * 3 ) + 4,
                ( i * 3 ) + 1, ( i * 3 ) + 2, ( i * 3 ) + 5,
                ( i * 3 ) + 1, ( i * 3 ) + 5, ( i * 3 ) + 4
            );

            if ( i == sides - 1 ) {
                idx[i * 12 + 1] = 1;
                idx[i * 12 + 2] = 0;
                idx[i * 12 + 5] = 1;
                idx[i * 12 + 8] = 2;
                idx[i * 12 + 10] = 2;
                idx[i * 12 + 11] = 1;
            }
        }

        //log(Log.UI, table.concat(idx,","));
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( v );
        m.setIndexArray( idx );
        m.setColorArray( c );
        m.setTextureCoordinateArray( t );
        m.setTexture( self._RT );

        return m;
    }


    static circleOutRT( self, scene1, scene2, t, rawT ) {
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh != null ) {
            self._blackMesh.removeFromParent();
        }

        const radius = Math.sqrt( ( w / 2 ) ** 2 + ( h / 2 ) ** 2 );

        scene1.setVisible( false );
        scene2.setVisible( true );
        const m = SceneManager.getCircleHoleMeshRT( self,radius * t * 1.2, radius * 1.2 );

        self._blackMesh = m;
        self.addChild( m );
        //m.setScale(t);
        m.setX( self.lw / 2 );
        m.setY( self.lh / 2 );
    }

    static circleInRT( self, scene1, scene2, t, rawT ) {
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        const radius = Math.sqrt( ( w / 2 ) ** 2 + ( h / 2 ) ** 2 );

        scene1.setVisible( false );
        scene2.setVisible( true );
        const m = SceneManager.getCircleMeshRT( self,radius * ( 1 - t ) * 1.2 );

        self._blackMesh = m;
        self.addChild( m );
        m.setX( self.lw / 2 );
        m.setY( self.lh / 2 );
    }

    static getPaperMeshRT( self, clip1, clip2 ) {
        //let sides = 32;
        const v = [
            self.x1, self.y1,
            self.x2 - clip1 - clip2, self.y1,
            self.x1, self.y2,
            self.x2 - clip1 - clip2, self.y2
        ];
        const t = [0 + clip1, 0, ( self.x2 - self.x1 ) - clip2, 0, 0 + clip1, ( self.y2 - self.y1 ), ( self.x2 - self.x1 ) - clip2, ( self.y2 - self.y1 )];
        const idx = [0, 1, 2, 1, 3, 2];
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( v );
        m.setIndexArray( idx );
        m.setTextureCoordinateArray( t );
        m.setTexture( self._RT );

        return m;
    }


    static paperDownRT( self, scene1, scene2, t, rawT ) {
        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        scene1.setVisible( false );
        scene2.setVisible( true );
        const clip1 = Math.sin( rad( t * 180 ) ) * ( self.x2 - self.x1 ) / 2;
        const clip2 = ( t < 0.5 ) ? 0 : ( 1 - Math.cos( rad( ( t - 0.5 ) * 180 ) ) ) * ( self.x2 - self.x1 );
        const m = SceneManager.getPaperMeshRT( self,clip1, clip2 );

        scene2.setX( Math.sin( rad( t * 180 ) ) * ( self.x2 - self.x1 ) / 2 );
        m.setX( 0 );
        const b1 = 1 - t * 0.5;
        const b2 = Math.max( 0, t * 2 - 1 );

        scene2.setColorMultiplier( b2, b2, b2 );
        m.setColorMultiplier( b1, b1, b1 );
        self._blackMesh = m;
        self.addChild( m );
    }

    static paperUpRT( self, scene1, scene2, t, rawT ) {
        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        scene1.setVisible( false );
        scene2.setVisible( true );
        scene2.setX( -Math.sin( rad( t * 180 ) ) * ( self.x2 - self.x1 ) / 2 );
        const x2 = ( t < 0.5 ) ? Math.sin( rad( t * 180 ) ) * ( self.x2 - self.x1 ) / 2 : scene2.getX() + ( self.x2 - self.x1 );
        const clip1 = ( t < 0.5 ) ? 0 : x2 - ( self.x2 - self.x1 ) / 2 - Math.cos( rad( ( t - 90 ) * 180 ) ) * ( self.x2 - self.x1 ) / 2;
        const clip2 = x2 - clip1;
        const m = SceneManager.getPaperMeshRT( self,clip1, clip2 );

        m.setX( x2 );
        const b1 = 1 - t * 0.5;
        const b2 = Math.max( 0, t * 2 - 1 );

        scene2.setColorMultiplier( b2, b2, b2 );
        m.setColorMultiplier( b1, b1, b1 );
        self._blackMesh = m;
        self.addChild( m );
    }



    static moveFromRight( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene1.setX( -t * width );
        scene2.setX( ( 1 - t ) * width );
    }

    static moveFromLeft( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene1.setX( t * width );
        scene2.setX( ( t - 1 ) * width );
    }

    static overFromRight( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene2.setX( ( 1 - t ) * width );
    }

    static overFromLeft( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene2.setX( ( t - 1 ) * width );
    }

    static moveFromRightWithFade( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene1.setAlpha( 1 - t );
        scene1.setX( -t * width );
        scene2.setX( ( 1 - t ) * width );
    }

    static moveFromLeftWithFade( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene1.setAlpha( 1 - t );
        scene1.setX( t * width );
        scene2.setX( ( t - 1 ) * width );
    }

    static overFromRightWithFade( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene1.setAlpha( 1 - t );
        scene2.setX( ( 1 - t ) * width );
    }

    static overFromLeftWithFade( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene1.setAlpha( 1 - t );
        scene2.setX( ( t - 1 ) * width );
    }

    static moveFromBottom( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene1.setY( -t * height );
        scene2.setY( ( 1 - t ) * height );
    }

    static moveFromTop( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene1.setY( t * height );
        scene2.setY( ( t - 1 ) * height );
    }

    static overFromBottom( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene2.setY( ( 1 - t ) * height );
    }

    static overFromTop( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene2.setY( ( t - 1 ) * height );
    }

    static moveFromBottomWithFade( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene1.setAlpha( 1 - t );
        scene1.setY( -t * height );
        scene2.setY( ( 1 - t ) * height );
    }

    static moveFromTopWithFade( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene1.setAlpha( 1 - t );
        scene1.setY( t * height );
        scene2.setY( ( t - 1 ) * height );
    }


    static overFromBottomWithFade( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene1.setAlpha( 1 - t );
        scene2.setY( ( 1 - t ) * height );
    }

    static overFromTopWithFade( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene1.setAlpha( 1 - t );
        scene2.setY( ( t - 1 ) * height );
    }

    static fade( self, scene1, scene2, t, rawT ) {
        if ( t < 0.5 ) {
            scene1.setAlpha( ( 0.5 - t ) * 2 );
        } else {
            scene1.setAlpha( 0 );
        }

        if ( t < 0.5 ) {
            scene2.setAlpha( 0 );
        } else {
            scene2.setAlpha( ( t - 0.5 ) * 2 );
        }
    }

    static crossfade( self, scene1, scene2, t, rawT ) {
        scene1.setAlpha( 1 - t );
        scene2.setAlpha( t );
    }

    static flip( self, scene1, scene2, t, rawT ) {
        const width = self.lw;

        if ( t < 0.5 ) {
            const s = ( 0.5 - t ) * 2;

            scene1.setScaleX( s );
            scene1.setX( ( 1 - s ) * width * 0.5 );
        } else {
            scene1.setScaleX( 0 );
            scene1.setX( width * 0.5 );
        }

        if ( t < 0.5 ) {
            scene2.setScaleX( 0 );
            scene2.setX( width * 0.5 );
        } else {
            const s = ( t - 0.5 ) * 2;

            scene2.setScaleX( s );
            scene2.setX( ( 1 - s ) * width * 0.5 );
        }
    }

    static flipWithFade( self, scene1, scene2, t, rawT ) {
        const width = self.lw;

        if ( t < 0.5 ) {
            const s = ( 0.5 - t ) * 2;

            scene1.setScaleX( s );
            scene1.setX( ( 1 - s ) * width * 0.5 );
            scene1.setAlpha( s );
        } else {
            scene1.setScaleX( 0 );
            scene1.setX( width * 0.5 );
            scene1.setAlpha( 0 );
        }

        if ( t < 0.5 ) {
            scene2.setScaleX( 0 );
            scene2.setX( width * 0.5 );
            scene2.setAlpha( 0 );
        } else {
            const s = ( t - 0.5 ) * 2;

            scene2.setScaleX( s );
            scene2.setX( ( 1 - s ) * width * 0.5 );
            scene2.setAlpha( s );
        }
    }

    static flipWithShade( self, scene1, scene2, t, rawT ) {
        const width = self.lw;

        if ( t < 0.5 ) {
            const s = ( 0.5 - t ) * 2;

            scene1.setScaleX( s );
            scene1.setX( ( 1 - s ) * width * 0.5 );
            scene1.setColorMultiplier( 1 - t, 1 - t, 1 - t, 1 );
        } else {
            scene1.setScaleX( 0 );
            scene1.setX( width * 0.5 );
            scene1.setColorMultiplier( 0.5, 0.5, 0.5, 1 );
        }

        if ( t < 0.5 ) {
            scene2.setScaleX( 0 );
            scene2.setX( width * 0.5 );
            scene2.setColorMultiplier( 0.5, 0.5, 0.5, 1 );
        } else {
            const s = ( t - 0.5 ) * 2;

            scene2.setScaleX( s );
            scene2.setX( ( 1 - s ) * width * 0.5 );
            scene2.setColorMultiplier( t, t, t, 1 );
        }
    }


    //#endregion

    //---------------------------------------------------------------------------------------------------
    //
    // 메인 코드
    //
    //---------------------------------------------------------------------------------------------------


    getCurrentSceneName() {
        return this.currentScene;
    }

    getCurrentScene() {
        if ( this.scene2 ) {
            return this.scene2;
        }

        return this.scene1;
    }

    isChanging() {
        return this.changingScene;
    }

    changeScene( sprOrFunc, duration, transition, ease, options ) {
        let spr;

        if ( typeof sprOrFunc == "function" ) {
            spr = sprOrFunc();
        } else {
            spr = sprOrFunc;
        }

        //log(Log.SCENE, "changeScene: " .. (this.currentScene ~= null and this.currentScene or "null") .. " to " .. (scene ~= null and scene or "null"));
        if ( !this.active ) {
            //if (GLOBAL.layerShieldForSceneChange) { GLOBAL.layerShieldForSceneChange.show() }
            this.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME, this.onEnterFrame, this );
            this.active = true;
        }

        this.changingScene = true;	 // 신 전환시 입력을 막거나 할 때 쓰려고. tweening하고는 시점이 좀 다르다
        this.eventFilter = options != null ? options.eventFilter : null;
        this.currentScene = spr;

        // henjeon, 2014.12.01;
        // 한 프레임에 onEnterFrame() 전에 changeScene() 연속으로 호출되면 begin이벤트 없이 } 이벤트가 호출되는 문제가 있다.
        // changeScene()에서 transitionBegin 이벤트를 바로 호출할 경우 코드 흐름이 전과 달라져서 여러 가지 문제가 발생하여,
        // 호출 순서는 그대로 유지하도록 여기서 this.time이 0이 아닐때만 이벤트를 호출하도록 처리함
        //		
        if ( this.tweening ) {
            if ( this.time != 0 ) {
                //return;
                this.dispatchEvent( "transitionEnd" );
                this.scene1.dispatchEvent( "exitEnd" );
                this.scene2.dispatchEvent( "enterEnd" );
                this.onTransitionEnd();
                this.scene1.removeFromParent();
                this.scene1 = this.scene2;
                this.scene2 = null;
                this.tweening = false;
                this.changingScene = false;
            } else {
                if ( this.scene2 ) {
                    this.scene2.removeFromParent();
                    this.scene2 = null;
                }
            }
        }

        if ( this.scene1 == null ) {
            //이전 씬이 없는 경우이다.
            this.scene1 = new _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        }

        this.duration = duration;
        this.transition = transition;
        this.ease = ease || defaultEase;
        this.scene2 = spr; //this.scenes[scene].new(options and options.userData);
        this.scene2.setVisible( false );
        this.addChild( this.scene2 );
        this.time = 0;
        this.currentTimer = _Timer__WEBPACK_IMPORTED_MODULE_3__.Timer.now();
        this.tweening = true;

        if ( _needRT.get( transition ) ) {
            const ss = this.stage.getScale();
            const w = ( this.x2 - this.x1 ); //* ss;
            const h = ( this.y2 - this.y1 ); //* ss;
            const sx = this.stage.getX();

            this.stage.setScale( 1 );
            const rt = new _RenderTarget__WEBPACK_IMPORTED_MODULE_5__.RenderTarget( w, h, true );

            rt.clear( 0x000000, 1 );
            this.stage.setPosition( -this.x1, -this.y1 );
            rt.draw( this.stage );
            this.stage.setX( sx );
            this.stage.setScale( ss.x,ss.y );
            this._RT = rt;
        }

        return this.scene2;
    }

    resetCurrentScene( currentScene ) {
        this.scene1 = currentScene;
        this.addChild( this.scene1 );
    }

    filterTransitionEvents( event ) {
        event.stopPropagation();
    }

    onTransitionBegin() {
        if ( this.eventFilter ) {
            this.stage.addChild( this.transitionEventCatcher );

            for ( const i in this.eventFilter ) {
                const event = this.eventFilter[i];

                this.transitionEventCatcher.addEventListener( event, this.filterTransitionEvents, this );
            }
        }
    }

    onTransitionEnd() {
        if ( this.eventFilter ) {
            for ( const i in this.eventFilter ) {
                const event = this.eventFilter[i];

                this.transitionEventCatcher.removeEventListener( event, this.filterTransitionEvents, this );
            }

            this.transitionEventCatcher.removeFromParent();
        }
    }

    onEnterFrame( event ) {
        // 이벤트필터링개체를 always on top 시킨다
        this.stage.addChild( this.transitionEventCatcher );

        // 트랜지션 종료시 이곳에서 일괄 처리
        if ( !this.tweening ) {
            //if (GLOBAL.layerShieldForSceneChange) { GLOBAL.layerShieldForSceneChange.hide() }
            this.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME, this.onEnterFrame, this );
            this.scene1.removeFromParent();
            this.scene1 = this.scene2;
            this.scene2 = null;
            this.active = null;
            this.changingScene = false;

            //wiper remove;
            if ( this._blackMesh ) {
                this._blackMesh.removeFromParent();
                this._blackMesh = null;
            }
		
            if ( this._RT ) {
                this._RT = null;
            }

            return;
        }

        if ( this.time == 0 ) {
            this.onTransitionBegin();
            this.scene2.setVisible( true );
            this.dispatchEvent( "transitionBegin" );
            this.scene1.dispatchEvent( "exitBegin" );
            this.scene2.dispatchEvent( "enterBegin" );
        }

        const timer = _Timer__WEBPACK_IMPORTED_MODULE_3__.Timer.now();
        const deltaTime = 1000 / 60; // timer - this.currentTimer;

        this.currentTimer = timer;
        const t = ( this.duration == 0 ) ? 1 : ( this.time / this.duration );

        this.transition( this, this.scene1, this.scene2, this.ease( t ), t );

        if ( this.time == this.duration ) {
            this.dispatchEvent( "transitionEnd" );
            this.scene1.dispatchEvent( "exitEnd" );
            this.scene2.dispatchEvent( "enterEnd" );
            this.onTransitionEnd();
            this.tweening = false;
        }

        this.time = this.time + deltaTime;

        if ( this.duration < this.time ) {
            this.time = this.duration;
        }
    }
}

_needRT = new Map( [
    [SceneManager.circleInRT, true],
    [SceneManager.circleOutRT, true],
    [SceneManager.paperDownRT, true],
    [SceneManager.paperUpRT, true],
] );



/***/ }),

/***/ "./engine/src/Serializer.js":
/*!**********************************!*\
  !*** ./engine/src/Serializer.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Serializer": () => (/* binding */ Serializer)
/* harmony export */ });

//import EventDispatcher from "./eventDispatcher";


/** 
 * @typedef {object} ClassDefOptions
 * @param {function=} construct
 * @param {boolean=} fill
 * @param {string[]=} white
 * @param {string[]=} black
 * @param {string[]=} keep
 * @param {boolean=} dataOnly
 */

/**
 * @typedef {[object,ClassDefOptions]} _ClassDef
 * 
 */

/**
 * @typedef {object|_ClassDef} ClassDef
 * 
 */

const S = {
    undefined:     "$$UDF",
    function:      "$$FNC",
    unknown:       "$$UKN",
    NaN:           "$$NAN",
    Infinity:      "$$INF",
    MinusInfinity: "$$MIF",
    Date:          "$$DAT",
    RegExp:        "$$RGX",
    Reference:     "$$REF"
};

const defaultOptions = {
    ignorePrefix:     "__",
    ignoreList:       ["__pixi"],
    skipUndefined:    true,
    skipUnknownClass: true
};

/** 
 * @typedef {object} SerializerOptions
 * @property {string=} ignorePrefix
 * @property {string[]=} ignoreList
 * @property {boolean=} skipUndefined
 * @property {boolean=} skipUnknownClass
 * 
 */


function copyObject( dst, src, keep ) {
    if ( keep == null ) {
        Object.assign( dst, src );
    } else {
        for ( const k in src ) {
            if ( typeof src[k] == "object" && dst[k] && keep.includes( k ) ) {
                // 대상이 프록시일 경우 그냥 복사하면 프록시 핸들러를 잃어버리기 때문에 
                // keep 리스트의 것들은 주소를 보존시켜야한다.
                Object.assign( dst[k], src[k] );
            } else {
                dst[k] = src[k];
            }
        }
    }
}

/**
 * 게임 오브젝트를 직렬화하고 다시 게임오브젝트로 만들 수 있도록 한다.
 * 직렬화한 오브젝트는 네트웍으로 보내거나 파일에 저장할 수 있다.
 * 
 * 직렬화할 오브젝트가 생성자에서 Proxy를 만드는 경우 주의가 필요함
 * Proxy가 다층으로 구성될 경우 Proxy의 handler를 잃어버릴 수 있다.
 * 그런 것들은 keep 옵션을 사용해서 타겟 개체의 프로토타입을 유지하도록 할 것
 *
 * @class Serializer
 */
class Serializer {
    /**
     *Creates an instance of Serializer.
     * @param {ClassDef[]} classList
     * @param {SerializerOptions} [options={}]
     * @memberof Serializer
     */
    constructor( classList, options = defaultOptions ) {
        //super();

        /** @type {Object.<string,_ClassDef>} */
        this.classList = {};
        this.options = options;
        for ( const classDef of classList ) {
            if ( Array.isArray( classDef ) ) {
                this.classList[classDef[0].name] = [classDef,classDef[1]];
            } else {
                this.classList[classDef.name] = [classDef,null];
            }
        }
        this.__objectToId = undefined;
        this.__idToObject = undefined;
        this.__refCount = undefined;
        //console.log( this.classList );
    }

    /**
     *
     *
     * @param {*} obj
     * @returns {object}
     * @memberof Serializer
     */
    _getSerializableObject( obj ) {
        if ( this.__objectToId.has( obj ) ) {
            this.__refCount[this.__objectToId.get( obj )] = ( this.__refCount[this.__objectToId.get( obj )] || 0 ) + 1;

            return S.Reference + ":" + this.__objectToId.get( obj );
        }
        if ( typeof obj == "undefined" ) {
            return S.undefined;
        } else if ( obj === null ) {
            return null;
        } else if ( obj instanceof RegExp ) {
            return S.RegExp + ":" + obj.toString();
        } else if ( obj instanceof Date ) {
            return S.Date + ":" + obj.getTime();
        } else if ( typeof obj == "string" || typeof obj == "number" || typeof obj == "boolean" ) {
            //@ts-ignore
            if ( Number.isNaN( obj ) ) {
                return S.NaN;
            } else if ( obj === Number.POSITIVE_INFINITY ) {
                return S.Infinity;
            } else if ( obj === Number.NEGATIVE_INFINITY ) {
                return S.MinusInfinity;
            } else {
                return obj;
            }
        } else if ( typeof obj == "function" ) {
            return S.function;
        } else if ( typeof obj == "object" )  {
            if ( this.options.skipUnknownClass && obj.constructor !== Object && obj.constructor !== Array && this.classList[obj.constructor.name] == null ) {
                return S.unknown;
            }

            const id = this.__objectToId.size;

            this.__objectToId.set( obj, id );
            let result;

            if ( Array.isArray( obj ) ) {
                result = [];
                for ( let i = 0; i < obj.length; i++ ) {
                    const convertedObj = this._getSerializableObject( obj[i] );

                    if ( this.options.skipUndefined && convertedObj == S.undefined ) continue;
                    if ( convertedObj != S.function && convertedObj != S.unknown ) {
                        result[i] = convertedObj;
                    }
                }
            } else {
                /** @type {ClassDefOptions} */
                const classOptions = obj.constructor !== Object ? this.classList[obj.constructor.name][1] : null;

                result = !( classOptions && classOptions.dataOnly ) && obj.constructor !== Object ? { __class: obj.constructor.name } : {};
                
                const sortedKey = Object.keys( obj ).sort();

                for ( const k of sortedKey ) {
                    // console.assert( k != "entityManager" );
                    if ( !this.options.ignoreList.includes( k ) && !k.startsWith( this.options.ignorePrefix ) ) {
                        if ( classOptions && classOptions.black && classOptions.black.includes( k ) ) continue;
                        if ( classOptions && classOptions.white && !classOptions.white.includes( k ) ) {
                            continue;
                        }
                        const convertedObj = this._getSerializableObject( obj[k] );

                        if ( this.options.skipUndefined && convertedObj == S.undefined ) continue;
                        if ( convertedObj != S.function && convertedObj != S.unknown ) {
                            result[k] = convertedObj;
                        }
                    }
                }
            }
            this.__idToObject[id] = result;
            //@ts-ignore
            result.__refId = id;

            return result;
        }
        throw new Error( `알 수 없는 타입 발견 ${obj}` );
    }

    getSerializableObject( obj ) {
        this.__objectToId = new Map();
        this.__idToObject = {};
        this.__refCount = {};

        const r = this._getSerializableObject( obj );

        // 리퍼런스 정리

        for ( const id in this.__idToObject ) {
            if ( this.__refCount[id] == null ) {
                delete this.__idToObject[id].__refId;
            }
        }
        delete this.__objectToId;
        delete this.__idToObject;
        delete this.__refCount;
        
        return r;
    }

    /**
     *
     *
     * @param {object} obj
     * @returns {string}
     * @memberof Serializer
     */
    stringify( obj ) {
        return JSON.stringify( this.getSerializableObject( obj ) );
    }

    /**
     * 직렬화된 개체를 복구한다.
     * 
     *
     * @param {string|object} s - 문자열 혹은 직렬화 처리된 개체
     * @param {object=} parseOptions
     * @returns {object}
     * @memberof Serializer
     */
    parse( s , parseOptions ) {
        /** @type {Serializer} */
        const self = this;
        const receiver = function ( k, v ) {
            if ( v == null ) {
                return v;
            } else if ( typeof v == "object" ) {
                if ( Array.isArray( v ) || v._$$class == null ) {
                    return v;
                } else {
                    console.assert( !self.__objectToId.has( v ) );

                    let newObj;
                    
                    console.assert( self.classList[v._$$class] );
                    const [classObj, classDefOptions] = self.classList[v._$$class];

                    if ( classDefOptions == null ) {
                        console.assert( classObj.length == 0,`${v._$$class}의 생성자의 인수는 ${classObj.length}인데 인수 없이 생성을 시도하고 있다. construct 옵션이 필요함` );
                        newObj = new classObj();
                        Object.assign( newObj, v );
                    } else {
                        if ( classDefOptions.construct ) {
                            newObj = classDefOptions.construct.call( self, v, parseOptions );
                        
                            if ( classDefOptions.fill !== false ) {
                                copyObject( newObj, v,classDefOptions.keep );
                            }
                        } else {
                            copyObject( newObj, v, classDefOptions.keep );
                        }
                    }
                    const id = v.__refId;

                    if ( id != null ) {
                        self.__objectToId.set( v, id );
                        self.__idToObject[id] = newObj;
                    
                        delete newObj.__refId;
                    }

                    delete newObj._$$class;

                    return newObj;
                }
            } else if ( typeof v == "string" ) {
                if ( Object.values( S ).includes( v.substr( 0, 5 ) ) ) {
                    // 내부타입 발견
                    const type = v.substr( 0, 5 );

                    if ( type == S.NaN ) return Number.NaN;
                    else if ( type == S.Infinity ) return Number.POSITIVE_INFINITY;
                    else if ( type == S.MinusInfinity ) return Number.NEGATIVE_INFINITY;
                    else if ( type == S.RegExp ) return new RegExp( v.substr( 6 ) );
                    else if ( type == S.Date ) return new Date( v.substr( 6 ) );
                    else if ( type == S.Reference ) {
                        const id = v.substr( 6 );

                        if ( self.__idToObject[id] ) return self.__idToObject[id];

                        throw new Error( "리퍼런스 개체가 만들어지기 전에 리퍼런스를 연결하려고 함" );
                    } else {
                        throw new Error( `parse 할 수 없는 개체 ${v}` );
                    }
                } else {
                    return v;
                }
            } else {
                return v;
            }
        };

        this.__objectToId = new Map();
        this.__idToObject = {};
        console.log( s );
        
        let r;

        if ( typeof s == "object" ) {
            const parseObject = function ( o ) {
                if ( o == null ) {
                    return o;
                } else if ( typeof o == "object" ) {
                    const r = Array.isArray( o ) ? [] : {};

                    for ( const k in o ) {
                        r[k] = receiver.call( r, k, parseObject( o[k] ) );
                    }

                    return r;
                } else {
                    return o;
                }
            };

            r = parseObject( s );
        } else if ( typeof s == "string" ) {
            r = JSON.parse( s, receiver );
        }

        delete this.__idToObject;
        delete this.__objectToId;

        console.log( r );

        return r;
    }
}




/***/ }),

/***/ "./engine/src/Shader.js":
/*!******************************!*\
  !*** ./engine/src/Shader.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Shader": () => (/* binding */ Shader)
/* harmony export */ });
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _TextureBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TextureBase */ "./engine/src/TextureBase.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");






class Shader {
    /**
     *Creates an instance of Shader.
     * @param {string} vertexSrc
     * @param {string} fragmentSrc
     * @param {TextureBase[]=} textures
     * @param {object=} constants
     * @memberof Shader
     */
    constructor( vertexSrc, fragmentSrc, textures, constants ) {
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_1__.Asset( "<Shader:*>",_Asset__WEBPACK_IMPORTED_MODULE_1__.Asset.AssetTypes.Shader );
        this.textures = textures != null ? textures : {};
        this.constants = constants != null ? constants : {};
        this.dirty = false;
        this.asset.load( { vertexSrc: vertexSrc,fragmentSrc: fragmentSrc,textures: this._getTextureIds(),constants: this.constants } );
    }

    _getTextureIds() {
        const textureIds = {};

        for ( let name in this.textures ) {
            textureIds[name] = this.textures[name].asset.id;
        }
        return textureIds;
    }

    _update() {
        this.dirty = true;
    }

    forceUpdate() {
        if ( this.dirty ) {
            this.asset.update( { textures: this._getTextureIds(),constants: this.constants } );
            this.dirty = false;
        }
    }

    release() {
        this.asset.release();
    }

    setConstant( name, value ) {
        this.constants[name] = value;
        this._update();

        return this;
    }

    setConstants( constants ) {
        Object.assign( this.constants,constants );
        this._update();

        return this;
    }

    /**
     * 셰이더에 텍스쳐를 바인딩한다
     * name을 지정하면 셰이더안에 nameSampler로 읽을 수 있다.
     * Sampler가 붙는 것에 주의할 것
     *
     * @param {string} name
     * @param {TextureBase} texture
     * @returns {Shader}
     * @memberof Shader
     */
    setTexture( name, texture ) {
        this.textures[name] = texture;
        this._update();

        return this;
    }

    /**
     *
     *
     * @returns {Shader} 
     * @memberof Shader
     */
    clone() {
        const newShader = { textures: {},constants: {} };

        newShader.asset = new _Asset__WEBPACK_IMPORTED_MODULE_1__.Asset( "<Shader:*>",_Asset__WEBPACK_IMPORTED_MODULE_1__.Asset.AssetTypes.Shader );
        Object.assign( newShader.textures,this.textures );
        Object.assign( newShader.constants,this.constants );
        Object.setPrototypeOf( newShader,Shader.prototype );
        newShader.asset.load( { copyFrom: this.asset.id, textures: newShader._getTextureIds(),constants: newShader.constants } );
        //@ts-ignore
        return newShader;
    }
}
Shader.lastId = 0;


/***/ }),

/***/ "./engine/src/Shape.js":
/*!*****************************!*\
  !*** ./engine/src/Shape.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Shape": () => (/* binding */ Shape)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");




// gideros와 완전히 호환은 안됨. 
// 대충 만든 다음에 API를 바꿀 것


class Shape extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( texture ) {
        super();
        this._$$spriteType = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.SpriteTypes.SHAPE;
        this._$$updateCode = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.beginPath();
        this.setLineStyle( 0,0x000000,0 );
        this.setFillStyle( Shape.SOLID,0x000000,0 );
    }

    get currentSubPathPoints() {
        return this.subPaths[this.subPaths.length - 1];
    }

    setLineStyle( width, color, alpha ) {
        this.lineWidth = width;
        this.lineColor = _Utils__WEBPACK_IMPORTED_MODULE_1__.Utils.hex2rgba( color,alpha );
    }

    setFillStyle( type, ...args ) {
        if ( type == Shape.SOLID ) {
            const [color, alpha] = args;

            this.fillColor = _Utils__WEBPACK_IMPORTED_MODULE_1__.Utils.hex2rgba( color,alpha );
        }
    }

    beginPath( winding ) {
        this.startX = 0;
        this.startY = 0;
        this.lastX = 0;
        this.lastY = 0;
        this.subPaths = [[]];
    }

    clear() {
        this.subPaths = [];
    }

    moveTo( x,y ) {
        this.endPath();
        if ( this.currentSubPathPoints.length == 0 ) {
            this.startX = x;
            this.startY = y;
        }
        this.currentSubPathPoints.push( x,y );
        this.lastX = x;
        this.lastY = y;
        this._$$localBounds.extendPoint( x,y );
    }

    lineTo( x,y ) {
        if ( this.currentSubPathPoints.length == 0 ) return this.moveTo( x,y );
        this.currentSubPathPoints.push( x, y );
        this.lastX = x;
        this.lastY = y;
        this._$$localBounds.extendPoint( x,y );
    }

    endPath() {
    }

    closePath() {
        if ( this.currentSubPathPoints.length > 0 ) {
            this.currentSubPathPoints.push( this.startX,this.startY );
            this.subPaths.push( [] );
        }
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
    }


    makeBox( x, y, w, h, c, a ) {
        this.beginPath();
        this.setFillStyle( Shape.SOLID, c, a );
        this.moveTo( x,y );
        this.lineTo( x + w,y );
        this.lineTo( x + w,y + h );
        this.lineTo( x,y + h );
        this.closePath();
    }

    static makeBox( x, y, w, h, c, a ) {
        const sh = new Shape();

        sh.makeBox( x, y, w, h, c, a );
        return sh;
    }

    encodeExtraRenderingInfo() {
        const getArray = ()=> {
            const arr = [];

            arr.push( this.subPaths.length - ( this.currentSubPathPoints.length == 0 ? 1 : 0 ) );
            this.subPaths.forEach( path => {
                arr.push( path.length );
                arr.push( ...path );
            } );
            return arr;
        };

        let arr2 = getArray();
        let encodedBuffer = new Float32Array( 9 + arr2.length );

        encodedBuffer[0] = this.lineWidth;
        encodedBuffer.set( this.lineColor,1 );
        encodedBuffer.set( this.fillColor,5 );
        encodedBuffer.set( arr2,9 );

        return [encodedBuffer];
    }
}

Shape.NONE = "none";
Shape.SOLID = "solid";
Shape.TEXTURE = "texture";
Shape.LINEAR_GRADIENT = "linearGradient";
Shape.RADIAL_GRADIENT = "radialGradient";
Shape.NON_ZERO = "noneZero";



/***/ }),

/***/ "./engine/src/Sound.js":
/*!*****************************!*\
  !*** ./engine/src/Sound.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Sound": () => (/* binding */ Sound)
/* harmony export */ });
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");







class Sound extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher {
    constructor( name ) {
        super();
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_1__.Asset( name,_Asset__WEBPACK_IMPORTED_MODULE_1__.Asset.AssetTypes.Sound );
        this.asset.load();
        this.playing = false;
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @param {boolean} [isOnce=false]
     * @returns {Sound}
     * @memberof Sound
     */
    addEventListener( eventName, func, context = null, isOnce = false ) {
        if ( eventName == _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED ) {
            this.asset.addEventListener( eventName, this.dispatchEvent.bind( this,_Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED ), null, isOnce );
        }
        //@ts-ignore
        return super.addEventListener( eventName, func, context, isOnce );
    }

    play( startTime,looping,paused ) {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound", method: "play",args: [this.asset.id, startTime,looping,paused] } );
        this.playing = true;
    }

    setVolume( v ) {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "setVolume",args: [this.asset.id, v] } );
    }

    setPitch( v ) {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "setPitch",args: [this.asset.id, v] } );
    }

    isPlaying() {
        return this.playing;
    }

    setPaused( v ) {
        if ( v ) {
            _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "setPaused",args: [this.asset.id, v] } );
        } else {
            this.play();
        }
        this.playing = !v;
    }

    setPosition( v ) {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "setPosition",args: [this.asset.id, v] } );
    }

    stop() {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "stop",args: [this.asset.id] } );
        this.playing = false;
    }

    getLength() {
        throw new Error( "Not implemented" );
    }

    static playSound( name ) {
        return ( new Sound( name ) ).play();
    }

    /**
     * 같은 key를 사용히면 항상 하나의 사운드만 나오게 한다.
     * 만약 같은 key인데 name이 다를 경우 이전 사운드는 중지시키고 새로 연주
     *
     * @static
     * @param {*} name
     * @param {*} vol
     * @param {*} loop
     * @param {*} [key=name]
     * @memberof Sound
     */
    static playSingleSound( name,vol,loop,key = name ) {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "playSingleSound",args: [name,vol,loop,key] } );
    }

    static stopAllSingleSound() {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "stopAllSingleSound",args: [] } );
    }
}




/***/ }),

/***/ "./engine/src/Spine.js":
/*!*****************************!*\
  !*** ./engine/src/Spine.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Spine": () => (/* binding */ Spine)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _TextField__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TextField */ "./engine/src/TextField.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _Storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Storage */ "./engine/src/Storage.js");

// import {SpinePixi from "./ext/spine-pixi";






//pixi-spine docs
//https://github.com/pixijs/pixi-spine/blob/next/examples/index.md

class Spine extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( spineFilename ) {
        super();
 
        this.loader = new SpinePixi.AssetManager();
        this.loader.loadText( spineFilename + ".json" );
        // this.loader.loadText( spineFilename + ".atlas" );
        // this.loader.loadTexture( spineFilename + ".png" );
        // this.loader.loadTexture( spineFilename + "2.png" );
        // this.loader.loadTexture( spineFilename + "3.png" );
        // this.loader.loadTexture( spineFilename + "4.png" );
        this.loader.loadText( "Spines/Spine_Player_3.atlas" );
        this.loader.loadTexture( "Spines/Spine_Player_3.png" );

        // Storage.loadFile( spineFilename ).on( Event.COMPLETE,( e )=>{

        //     this.spine = new SpinePixi( e.data );
        //     this.on( Event.READY,()=>{

        //         this.onStage( Event.ENTER_FRAME,()=>{

        //             this.spine.update();
                
        //         } );
            
        //     } );
        
        // } );
        this.spineFilename = spineFilename;
        requestAnimationFrame( ()=>this.load() );
    }

    load() {
        if ( this.loader.isLoadingComplete() ) {
            console.log( "완료" );
            let data = this.loadSkeleton( this.spineFilename );

            this.skeleton = data.skeleton;
            this.state = data.state;
            this.bounds = data.bounds;
            this.skeletonData = data;
            // this.onStage( Event.ENTER_FRAME,()=>{

            //     s.update( 1000 / 60 );
            // } );
            this.renderer = new SpinePixi.SkeletonRenderer( this.__pixi );
            this.onStage( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.ENTER_FRAME,()=>{
                this.state.update( 1 / 60 );
                this.state.apply( this.skeleton );
                this.renderer.draw( this.skeleton );
            } );

            this.__pixi.emit( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.READY );
        } else {
            requestAnimationFrame( ()=>this.load() );
        }
    }

    loadSkeleton( name ) {
        let basePath = name.substr( 0,name.lastIndexOf( "/" ) );
        //        let atlas = new SpinePixi.core.TextureAtlas( this.loader.get( name.replace( "-pro", "" ).replace( "-ess", "" ) + ".atlas" ), ( path ) => {
        let atlas = new SpinePixi.core.TextureAtlas( this.loader.get( "Spines/Spine_Player_3.atlas" ), ( path ) => {
            return this.loader.get( basePath + "/" + path );
        } );

        // Create a AtlasAttachmentLoader, which is specific to the WebGL backend.
        let atlasLoader = new SpinePixi.core.AtlasAttachmentLoader( atlas );
        // Create a SkeletonJson instance for parsing the .json file.
        let skeletonJson = new SpinePixi.core.SkeletonJson( atlasLoader );

        let skeletonData = skeletonJson.readSkeletonData( this.loader.get( name + ".json" ) );
        let skeleton = new SpinePixi.core.Skeleton( skeletonData );

        skeleton.flipY = true;
        let bounds = this.calculateBounds( skeleton );

        skeleton.setSkinByName( "runner" );
        // Create an AnimationState, and set the initial animation in looping mode.
        var animationState = new SpinePixi.core.AnimationState( new SpinePixi.core.AnimationStateData( skeleton.data ) );

        animationState.setAnimation( 0, "standing", true );

        //@ts-ignore
        animationState.addListener( {
            event: function( trackIndex, event ) {
                // console.log("Event on track " + trackIndex + ": " + JSON.stringify(event));
            },
            complete: function( trackIndex, loopCount ) {
                // console.log("Animation on track " + trackIndex + " completed, loop count: " + loopCount);
            },
            start: function( trackIndex ) {
                // console.log("Animation on track " + trackIndex + " started");
            },
            end: function( trackIndex ) {
                // console.log("Animation on track " + trackIndex + " ended");
            }
        } );

        // Pack everything up and return to caller.
        return { skeleton: skeleton, state: animationState, bounds: bounds };
    }

    calculateBounds( skeleton ) {
        var data = skeleton.data;

        skeleton.setToSetupPose();
        skeleton.updateWorldTransform();
        var offset = new SpinePixi.core.Vector2();
        var size = new SpinePixi.core.Vector2();

        skeleton.getBounds( offset, size, [] );

        return { offset: offset, size: size };
    }
}

// Spine은 자체적으로 차일드를 생성하기 때문에 차일드 수가 꼬일 수 있음
// 같은 처리를 하고 있는 TextField의 것을 쓰자
Spine.prototype.getChildAt = _TextField__WEBPACK_IMPORTED_MODULE_1__.TextField.prototype.getChildAt;
Spine.prototype.getNumChildren = _TextField__WEBPACK_IMPORTED_MODULE_1__.TextField.prototype.getNumChildren;
Spine.prototype.sortChildren = _TextField__WEBPACK_IMPORTED_MODULE_1__.TextField.prototype.sortChildren;
Spine.prototype.refreshColor = _TextField__WEBPACK_IMPORTED_MODULE_1__.TextField.prototype.refreshColor;



/***/ }),

/***/ "./engine/src/Sprite.js":
/*!******************************!*\
  !*** ./engine/src/Sprite.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Sprite": () => (/* binding */ Sprite)
/* harmony export */ });
/* harmony import */ var twgl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.module.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _ComponentHolder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ComponentHolder */ "./engine/src/ComponentHolder.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");
/* harmony import */ var _easing__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./easing */ "./engine/src/easing.js");
/* harmony import */ var _Transform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Transform */ "./engine/src/Transform.js");
/* harmony import */ var _Shader__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Shader */ "./engine/src/Shader.js");













class Sprite extends _ComponentHolder__WEBPACK_IMPORTED_MODULE_3__.ComponentHolder {
    constructor() {
        super();
        this._$$id = Sprite.lastId++;
        Sprite.finalizationRegistry.register( this,{ thisObjId: this._$$id } );
        this._$$spriteType = Sprite.SpriteTypes.SPRITE;
        this._$$updateCode = Sprite.UpdateCodes.UPDATE_NOTHING;
        this.transform = new _Transform__WEBPACK_IMPORTED_MODULE_9__.Transform();
        this.transform.invalidateCallback = this.onInvalidateTransform.bind( this );
        this._$$localBounds = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( 0,0,0,0 );
        this._$$boundsDirty = true;
        this._$$bounds = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( 0,0,0,0 );
        /** @type {Rect} */
        this.customBounds = undefined;
        // this.boundsDirty
        this.useCustomLocalBounds = false;
        this.worldMatrix = undefined;
        this.colorOverride = [1,1,1,1];
        this.colorAdd = [0,0,0,0];
        this.clipRegion = null;
        /** @type {Sprite[]} */
        this.children = [];
        this.parent = null;
        this._$$visible = true;
        this.customPrev;

        /** @type {Asset} */
        this.asset;

        this.cacheBitmapMode = Sprite.CacheBitmapModes.NO_CACHE;
        this.cacheBitmapDstId = 0;
        /** @type {Asset} */
        this.cacheBitmapAsset;
        this.blendMode = Sprite.BlendModes.NORMAL;
        this.motionBlur = true;

        /** @type {Shader} */
        this.shader;
    }

    static finalizeHandler( obj ) {
        // GC에 의해 수거되었으면 릴리즈를 보낸다.
        _Application__WEBPACK_IMPORTED_MODULE_7__.application.postMessageToRender( { msg: "addCommand",class: "Sprite", method: "release",args: [obj.thisObjId] } );
    }


    release() {
        // 강제로 삭제
        if ( this.asset != null )  {
            this.asset.release();
        }
        // 스프라이트 지우라는 메시지 보내야함
        for ( let key in this ) {
            delete this[key];
        }
        _Application__WEBPACK_IMPORTED_MODULE_7__.application.postMessageToRender( { msg: "addCommand",executionTiming: 2,class: "Sprite",method: "release",args: [this._$$id] } );
    }

    /**
     * 스프라이트의 복사본을 만든다
     * 얕은 복사를 하기 때문에 스프라이트를 상속한 개체인 경우 값이 아니라 참조가 복사되는 것에 주의 할 것
     *
     * @returns {Sprite} 
     * @memberof Sprite
     */
    clone() {
        /** @type {Sprite} */
        const newObj = {};

        Object.assign( newObj,this );
        Object.setPrototypeOf( newObj,Object.getPrototypeOf( this ) );
        newObj._$$id = Sprite.lastId++;
        // 개체를 공유하게 되기 때문에 clone을 다시 해주어야 한다
        newObj.transform = newObj.transform.clone();
        newObj.transform.invalidateCallback = newObj.onInvalidateTransform.bind( newObj );
        newObj._$$localBounds = newObj._$$localBounds.clone();
        newObj._$$bounds = newObj._$$bounds.clone();
        newObj.worldMatrix = ( newObj.worldMatrix != null ) ? twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.copy( newObj.worldMatrix ) : null;
        newObj.colorOverride = [...newObj.colorOverride];
        newObj.colorAdd = [...newObj.colorAdd];
        newObj.clipRegion = ( newObj.clipRegion != null ) ? newObj.clipRegion.clone() : null;
        newObj.children = [...newObj.children];
        newObj.customPrev = ( newObj.customPrev != null ) ? ( Object.assign( {},newObj.customPrev ) ) : null;
        newObj._$$updateCode |= Sprite.UpdateCodes.UPDATE_EXTRA;
        return newObj;
    }

    onInvalidateTransform() {
        let spr = this;

        do {
            spr._$$boundsDirty = true;
            spr = spr.parent;
        } while ( spr != null );
        return spr;
    }

    getPath( detailInfo ) {
        const path = [];
        let spr = this;

        while ( spr.parent != null ) {
            if ( detailInfo ) {
                path.unshift( spr.parent.children.indexOf( spr ) + ":" + spr.constructor.name );
            } else {
                path.unshift( spr.parent.children.indexOf( spr ) );
            }
            spr = spr.parent;
        }
        //@ts-ignore
        if ( spr.isStage ) {
            return "//" + path.join( "/" );
        } else {
            return "?/" + path.join( "/" );
        }
    }


    /**
     * @returns {Point} 
     * @memberof Sprite
     */
    get position() {
        return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( this.transform.x,this.transform.y );
    }

    /**
     * @param {Point} v
     * @memberof Sprite
     */
    set position( v ) {
        this.transform.x = v.x;
        this.transform.y = v.y;
    }

    setPosition( x,y ) {
        this.transform.x = x;
        this.transform.y = y;
    }

    getPosition() {
        return this.position;
    }


    get x() { return this.transform.x; }

    set x( v ) { this.transform.x = v; }

    getX() { return this.transform.x; }

    setX( v ) { this.transform.x = v; } 

    get y() { return this.transform.y; }

    set y( v ) { this.transform.y = v; }

    getY() { return this.transform.y; }

    setY( v ) { this.transform.y = v; } 

    /**
     * [x,y] 형태로 반환한다.
     *
     * @returns {[number,number]}
     * @memberof Sprite
     */
    get xy() { return [this.x, this.y]; }

    /**
     * [x,y] 형태로만 받는다.
     * 
     * @param {number[]|Point} v
     * @memberof Sprite
     */
    set xy( v ) {
        if ( Array.isArray( v ) ) {
            this.x = v[0];
            this.y = v[1];
        } else {
            //@ts-ignore
            this.x = v.x;
            //@ts-ignore
            this.y = v.y;
        }
    }

    /**
     * @returns {number}
     * @memberof Sprite
     */
    getRotation() { return this.transform.rotation; }

    /**
     * @param {number} v
     * @memberof Sprite
     */
    setRotation( v ) { this.transform.rotation = v; }

    get anchorX() { 
        return this.transform.anchorX / ( this.bounds.width || 1 ); 
    }

    /**
     * @returns {Point}
     * @memberof Sprite
     */
    get anchorPosition() {
        return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( this.transform.anchorX,this.transform.anchorY );
    }

    /**
     * @param {Point} v
     * @memberof Sprite
     */
    set anchorPosition( v ) {
        this.transform.anchorX = v.x;
        this.transform.anchorY = v.y;
    }

    get anchorPositionX() {
        return this.transform.anchorX;
    }

    set anchorPositionX( v ) {
        this.transform.anchorX = v;
    }

    get anchorPositionY() {
        return this.transform.anchorY;
    }

    set anchorPositionY( v ) {
        this.transform.anchorY = v;
    }


    set anchorX( v ) { 
        this.transform.anchorX = v * this.bounds.width; 
    }

    get anchorY() { 
        return this.transform.anchorY / ( this.bounds.height || 1 ); 
    }

    set anchorY( v ) { 
        this.transform.anchorY = v * this.bounds.height; 
    }

    getAnchorPoint() {
        return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( this.anchorX,this.anchorY );
    }

    setAnchorPoint( ax,ay ) {
        this.anchorX = ax;
        this.anchorY = ay;
    }

    get scaleX() { return this.transform.scaleX; }

    set scaleX( v ) { this.transform.scaleX = v; }

    getScaleX() { return this.transform.scaleX; }

    setScaleX( v ) { this.transform.scaleX = v; }
    

    get scaleY() { return this.transform.scaleY; }

    set scaleY( v ) { this.transform.scaleY = v; }

    getScaleY() { return this.transform.scaleY; }

    setScaleY( v ) { this.transform.scaleY = v; }



    /**
     * @returns {Point}
     * @memberof Sprite
     */
    get scale() { return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( this.transform.scaleX,this.transform.scaleY ); }

    /**
     * @param {number|Point} v
     *
     * @memberof Sprite
     */

    /**
     * @param {[number,number]|Float32Array|number|Point} v
     * @memberof Sprite
     */
    set scale( v ) {
        if ( typeof v === "number" ) {
            // 스케일은 동시에 넣을 수 있으면 편리
            this.transform.scaleX = v;
            this.transform.scaleY = v;
        } else {
            const p = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( v );

            this.transform.scaleX = p.x;
            this.transform.scaleY = p.y;
        }
    } 

    getScale() {
        return this.scale;
    }

    setScale( x,y ) {
        this.scaleX = x;
        this.scaleY = y == null ? x : y;
    }

    get rotation() {
        return this.transform.rotation;
    }

    set rotation( v ) {
        this.transform.rotation = v;
    }

    /**
     * 자식 스프라이트를 제외하고 순수하게 자기 자신의 크기
     *
     * @readonly
     * @memberof Sprite
     */
    get localBounds() {
        const r = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( this._$$localBounds );

        r.x -= this.transform.anchorX;
        r.y -= this.transform.anchorY;
        return r;
    }

    /**
     * 자신과 자식 모두를 포함한 경계 사각형을 구한다.
     *
     * @readonly
     * @memberof Sprite
     */
    get bounds() {
        if ( this.customBounds ) {
            return this.customBounds;
        }
        if ( !this._$$boundsDirty ) {
            return this._$$bounds;
        }
        // 여기 느리다. 나중에 최적화 할 것
        // 하위 개체가 추가/삭제되거나 이동하면 다시 계산하도록 해야 한다.
        // 다시 계산이 필요한 경우 상위로 전파시켜줘야할 것 같음
        let matFrom = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.identity();
        let bounds = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect();
        let boundsPoints = [];

        const search = ( spr,mat )=>{
            if ( !spr._$$boundsDirty ) {
                // 자식 스프라이트가 바뀐게 없으면 보관된 점들을 사용한다.
                boundsPoints.push( ... spr._$$boundsPoints );
            } else {
                if ( spr.spriteType != 0 ) {
                    const [x1,y1,x2,y2,x3,y3,x4,y4] = spr.localBounds.getCornerPoints();
                    let x,y;

                    [x,y] = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( mat,[x1,y1,0] );
                    boundsPoints.push( x,y );
                    [x,y] = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( mat,[x2,y2,0] );
                    boundsPoints.push( x,y );
                    [x,y] = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( mat,[x3,y3,0] );
                    boundsPoints.push( x,y );
                    [x,y] = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( mat,[x4,y4,0] );
                    boundsPoints.push( x,y );
                }
                for ( let child of spr.children ) {
                    if ( child.visible ) {
                        search( child,twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.multiply( mat,child.transform.matrix ) );
                    }
                }
            }
        };

        search( this,matFrom );
        for ( let i = 0; i < boundsPoints.length; i += 2 ) {
            bounds.extendPoint( boundsPoints[i],boundsPoints[i + 1] );
        }

        this._$$bounds = bounds;
        this._$$boundsDirty = false;
        this._$$boundsPoints = boundsPoints;
        return bounds;      
    }

    getBounds() {
        return this.bounds;
    }

    updateLocalBounds() {

    }    

    get visible() {
        return this._$$visible;
    }

    set visible( v ) {
        if ( !this._$$visible && v ) {
            this._updateChildren( Sprite.UpdateCodes.UPDATE_CLEAR_PREV ); 
        }
        this._$$visible = v;
    }

    isVisible() {
        return this.visible;
    }

    setVisible( v ) {
        this.visible = v;
    }

    isVisibleDeeply() {
        let spr;

        for ( spr = this; spr != null && !spr.isStage; spr = spr.parent ) {
            if ( !spr.visible ) return false;
        }
        if ( spr == null ) return false;

        return true;
    }

    get redMultiplier() { return this.colorOverride[0]; }

    set redMultiplier( v ) { this.colorOverride[0] = v; }

    get greenMultiplier() { return this.colorOverride[1]; }

    set greenMultiplier( v ) { this.colorOverride[1] = v; }

    get blueMultiplier() { return this.colorOverride[2]; }

    set blueMultiplier( v ) { this.colorOverride[2] = v; }

    get alpha() {
        return this.colorOverride[3];
    }

    set alpha( v ) {
        this.colorOverride[3] = v;
    }

    setAlpha( v ) {
        this.colorOverride[3] = v;
    }

    getAlpha( v ) {
        return this.colorOverride[3];
    }

    setColorMultiplier( r,g,b,a ) {
        this.colorOverride[0] = r;
        this.colorOverride[1] = g;
        this.colorOverride[2] = b;
        if ( a != null ) this.colorOverride[3] = a; 
    }

    setOverrideColor( c,a ) {
        const arr = _Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.hex2rgba( c,a );

        this.colorOverride[0] = arr[0];
        this.colorOverride[1] = arr[1];
        this.colorOverride[2] = arr[2];
        if ( a != null ) this.colorOverride[3] = arr[3];
    }

    get width() {
        return this.bounds.width;
    }

    set width( v ) {
        this.customBounds = this.customBounds || this.bounds;
        this.customBounds.width = v;
    }

    get height() {
        return this.bounds.height;
    }

    set height( v ) {
        this.customBounds = this.customBounds || this.bounds;
        this.customBounds.height = v;
    }

    setCustomBounds( x,y,w,h ) {
        this.customBounds.x = x;
        this.customBounds.y = y;
        this.customBounds.width = w;
        this.customBounds.height = h;
    }


    getWidth() {
        return this.width;
    }

    getHeight() {
        return this.height;
    }

    localToGlobal( x,y ) {
        let matArr = [];

        for ( let spr = this; ; spr = spr.parent ) {
            matArr.unshift( spr.transform.matrix );
            if ( spr.parent == null ) break;
        }
        let mat = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.identity();

        matArr.forEach( v=>{
            twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.multiply( mat,v,mat );
        } );
        let p = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( mat,[x,y,0] );

        return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( p[0],p[1] );
    }

    globalToLocal( x,y ) {
        //@ts-ignore
        if ( this.parent == null || this.isStage ) {
            return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( x,y );
        }
        // 지난 프레임에 구해놓은 worldMatrix를 사용하면 빠르게 할 수 있다.
        // 지금은 그냥 둔다
        let matArr = [];

        for ( let spr = this; ; spr = spr.parent ) {
            matArr.push( twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.inverse( spr.transform.matrix ) );
            if ( spr.parent == null ) break;
        }
        let mat = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.identity();

        matArr.forEach( v=>{
            twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.multiply( mat,v,mat );
        } );
        let p = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( mat,[x,y,0] );

        return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( p[0],p[1] );
    }

    setBlendMode( v ) {
        this.blendMode = v;        
    }


    //#region addChild & removeChild

    _updateChildren( updateCodeToON ) {
        for ( const s of this.searchChildren() ) {
            s.updateCode |= updateCodeToON;
        }
    }

    /**
     *
     *
     * @param {Sprite} spr
     * @param {number=} i
     * @memberof Sprite
     */
    addChildAt( spr, i ) {
        if ( i == null ) {
            i = this.children.length;
        }
        const oldIndex = this.children.indexOf( spr );
            
        this.children.splice( i,0, spr );
        if ( oldIndex >= 0 ) {
            // 원래 있던 경우 위치 이동
            if ( oldIndex > i ) {
                this.children.splice( oldIndex + 1,1 );
            } else if ( oldIndex < i ) {
                this.children.splice( oldIndex,1 );
            }
        }
        spr.parent = this;
        if ( this.isOnStage() ) {
            spr._updateChildren( Sprite.UpdateCodes.UPDATE_CLEAR_PREV ); 
            spr.dispatchEventWithChildren( new _Event__WEBPACK_IMPORTED_MODULE_2__.Event( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.ADDED_TO_STAGE ) );
        }
        this.onInvalidateTransform();
    }


    /**
     *
     *
     * @param {...Sprite} sprs
     * @memberof Sprite
     */
    addChild( ...sprs ) {
        for ( const spr of sprs ) {
            this.addChildAt( spr );
        }
    }


    removeChildAt( i ) {
        const child = this.children[i];

        child.parent = null;
        this.children.splice( i,1 );
        if ( this.isOnStage() ) {
            child.dispatchEventWithChildren( new _Event__WEBPACK_IMPORTED_MODULE_2__.Event( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.REMOVED_FROM_STAGE ) );
        }
        this.onInvalidateTransform();
    }

    /**
     *
     *
     * @param {Sprite} spr
     * @memberof Sprite
     */
    removeChild( spr ) {
        let index = this.children.indexOf( spr );

        if ( index != -1 ) this.removeChildAt( index );
    }

    removeFromParent() {
        if ( this.parent ) {
            this.parent.removeChild( this );
        }
    }

    clearChildren() {
        for ( let i = this.children.length - 1; i >= 0; i-- ) {
            this.removeChildAt( i );
        }
    }

    getChildIndex( spr ) {
        return this.children.indexOf( spr );
    }

    getChildAt( i ) {
        return this.children[i];
    }

    //#endregion

    getStage() {
        let spr;

        for ( spr = this; spr != null && !spr.isStage; spr = spr.parent );
        return spr;
    }

    isOnStage() {
        return this.getStage() != null;
    }

    /**
     *
     *
     * @param {Event|string} eventOrName
     * @param {object=} extendedValues
     * @memberof Sprite
     */
    dispatchEventWithChildren( eventOrName,extendedValues ) {
        let event;

        if ( typeof eventOrName == "string" ) {
            event = new _Event__WEBPACK_IMPORTED_MODULE_2__.Event( eventOrName );
        } else {
            event = eventOrName;
        }
        Object.assign( event,extendedValues );
        // const inputOnly = Event.isInputEvent( event.name );

        for ( const spr of this.searchChildren( true ) ) {
            if ( event.stopped ) return;
            spr.dispatchEvent( event );
        }
    }

    /**
     * 
     * @param {boolean} [bottomUp=false]
     */
    *searchChildren( bottomUp ) {
        yield* Sprite.searchChildren( this, bottomUp );
    }

    /**
     *
     *
     * @static
     * @param {Sprite} startObj
     * @param {boolean} [bottomUp=false]
     * @memberof Sprite
     */
    static *searchChildren( startObj, bottomUp = false ) {
        const searchRecursive = function* ( cur ) {
            if ( bottomUp ) {
                if ( cur.children.length > 0 ) {
                    for ( let i = cur.children.length - 1; i >= 0; i-- ) {
                        const child = cur.children[i];

                        if ( child ) yield* searchRecursive( child );
                    }
                }
                yield cur;
            } else {
                yield cur;
                if ( cur.children.length > 0 ) {
                    for ( let i = 0; i < cur.children.length; i++ ) {
                        const child = cur.children[i];

                        if ( child ) yield* searchRecursive( child );
                    }
                }
            }
        };

        yield* searchRecursive( startObj );
    }

    findChildById( id ) {
        for ( let spr of this.searchChildren( ) ) {
            if ( spr.id == id ) return spr;
        }
    }


    getNumChildren() {
        return this.children.length;
    }

    /**
     *
     *
     * @returns {Sprite}
     * @memberof Sprite
     */
    getParent() {
        return this.parent;
    }

    /**
     *
     *
     * @param {Sprite} spr
     * @returns {boolean}
     * @memberof Sprite
     */
    contains( spr ) {
        return this.children.includes( spr );
    }

    hitTestPoint( x, y ) {
        const p = this.globalToLocal( x,y );
        const rect = this.bounds;

        return rect.contains( p.x,p.y );
    }

    setClip( x,y,width,height ) {
        this.clipRegion = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( x,y,width,height );
    }

    setShader( shader ) {
        this.shader = shader;
    }

    getShader() {
        return this.shader;
    }


    //#region setInteractive() 
    
    /**
     * @callback AnimationHandler
     * @param {{x:number,y:number,button:*,target:Sprite}} event
     * @param {{downPointerPosition:Point,downThisPosition:Point,downOffset:Point,downButton:*,pushed:boolean,clickCancled:boolean,state:string,moveDeltaPosition:Point,moveThisPosition:Point}} info
     * @return {Tween}
     */
    /**
     * @callback InteractiveHandler
     * @param {{x:number,y:number,button:*,target:Sprite}} event
     * @param {{downPointerPosition:Point,downThisPosition:Point,downOffset:Point,downButton:*,pushed:boolean,clickCancled:boolean,state:string,moveDeltaPosition:Point,moveThisPosition:Point}} info
     */
    /**
     *
     * @param {object} options
     * @param {AnimationHandler=} options.pressAnimation - 눌러지는 애니메이션을 틀기. tween를 리턴해야한다.
     * @param {AnimationHandler=} options.releaseAnimation - 올라오는 애니메이션을 틀기. tween을 리턴해야한다.
     * @param {InteractiveHandler=} options.down - 영역안에서 down한 경우
     * @param {InteractiveHandler=} options.move - down 후 move할 경우
     * @param {InteractiveHandler=} options.up - down 후 up할 경우
     * @param {InteractiveHandler=} options.click - down에서 멀리 떨어지지 않은 위치에서 up
     * @param {InteractiveHandler=} options.press - down 후 up할 때 영역 안
     * @param {boolean=} options.preventRelease - click이나 press에서 releaseAnimation하지 않도록
     * @param {boolean=} options.disableBasicAnimation - 기본 애니메이션 끄기
     * @param {number=} options.pressOffsetY - 기본 pressAnimation에서 얼마나 아래로 내려가는가
     * @param {number=} options.clickRadius - click으로 판정하는 반지름
     * @param {boolean=} options.dragX - 가로축으로 드래그
     * @param {boolean=} options.dragY - 세로축으로 드래그
     * @param {number=} options.dragReleaseDistance - 이 거리를 벗어나면 drag가 취소된다.
     * @param {boolean=} options.allowDragOutside - 화면 밖으로 못 끌고 나가도록 한다
     * @memberof Sprite
     */
    setInteractive( options = null ) {
        this.__interactive = this.__interactive || {};
        const _i = this.__interactive;
        const clickCancelDistance = ( options && options.clickRadius != null ) ? options.clickRadius : 10;
        const defaultPressOffsetY = 3;// 실제 픽셀기준으로 해야함
        const pointerDown = ( e ) => {
            if ( this.hitTestPoint( e.x, e.y ) ) {
                _i.downPointerPosition = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( e.x, e.y );
                _i.downThisPosition = this.getPosition().clone();
                _i.downOffset = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( e.x - this.x, e.y - this.y );
                _i.downButton = e.button;
                _i.pushed = true;
                _i.clickCanceled = false;
                _i.state = "down";
                if ( !options.disableBasicAnimation ) {
                    if ( _i.tween ) _i.tween.stop();
                    _i.tween = this.move(
                        _i.downThisPosition.x,
                        _i.downThisPosition.y + ( options.pressOffsetY != null ? options.pressOffsetY : defaultPressOffsetY ),
                        300,
                        _easing__WEBPACK_IMPORTED_MODULE_8__.easing.outBack );
                    e.stopPropagation();
                } else if ( options.pressAnimation ) {
                    if ( _i.tween ) _i.tween.stop();
                    _i.tween = options.pressAnimation.call( this, e, _i );
                    e.stopPropagation();
                }
                if ( options.down != null ) {
                    options.down.call( this, e, _i );
                }
            }
        };
        const pointerMove = ( e ) => {
            if ( _i.state == "down" || _i.state == "move" ) {
                _i.state = "move";
                _i.moveDeltaPosition = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( e.x - _i.downPointerPosition.x , e.y - _i.downPointerPosition.y );
                _i.moveThisPosition = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point(
                    options.dragX ? _i.downThisPosition.x + _i.moveDeltaPosition.x : _i.downThisPosition.x,
                    options.dragY ? _i.downThisPosition.y + _i.moveDeltaPosition.y : _i.downThisPosition.y,
                );
                if ( !options.allowDragOutside ) {
                    _i.moveThisPosition.x = _Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.clamp( _i.moveThisPosition.x, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.left - _i.downOffset.x, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.right - _i.downOffset.x );
                    _i.moveThisPosition.y = _Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.clamp( _i.moveThisPosition.y, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.top - _i.downOffset.y, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.bottom - _i.downOffset.y );
                }
                if ( options.dragX || options.dragY ) {
                    if ( _i.tween ) _i.tween.cancel();
                }
                if ( options.dragX ) this.x = _i.moveThisPosition.x;
                if ( options.dragY ) this.y = _i.moveThisPosition.y;
                if ( _i.clickCanceled == false ) {
                    if ( Math.sqrt( _i.moveDeltaPosition.x ** 2 + _i.moveDeltaPosition.y ** 2 ) > clickCancelDistance ) {
                        _i.clickCanceled = true;
                    }
                }
                e.stopPropagation();
                if ( options.move != null ) {
                    options.move.call( this,e, _i );
                }
                if ( _i.pushed && !this.hitTestPoint( e.x, e.y ) ) {
                    _i.pushed = false;
                    if ( !options.disableBasicAnimation ) {
                        if ( _i.tween ) _i.tween.stop();
                        _i.tween = this.move(
                            _i.moveThisPosition.x,
                            _i.moveThisPosition.y,
                            200,
                            _easing__WEBPACK_IMPORTED_MODULE_8__.easing.outCubic );
                        e.stopPropagation();
                    } else if ( options.releaseAnimation ) {
                        if ( _i.tween ) _i.tween.stop();
                        _i.tween = options.releaseAnimation.call( this, e, _i );
                        e.stopPropagation();
                    }
                } else if ( !_i.pushed && this.hitTestPoint( e.x, e.y ) ) {
                    _i.pushed = true;
                    if ( !options.disableBasicAnimation ) {
                        if ( _i.tween ) _i.tween.stop();
                        _i.tween = this.move(
                            _i.moveThisPosition.x,
                            _i.moveThisPosition.y + ( options.pressOffsetY != null ? options.pressOffsetY : defaultPressOffsetY ),
                            100,
                            _easing__WEBPACK_IMPORTED_MODULE_8__.easing.outCubic );
                        e.stopPropagation();
                    } else if ( options.pressAnimation ) {
                        if ( _i.tween ) _i.tween.stop();
                        _i.tween = options.pressAnimation.call( this, e, _i );
                        e.stopPropagation();
                    }
                }
            }
        };
        const pointerUp = ( e ) => {
            if ( _i.state == "down" || _i.state == "move" ) {
                _i.state = "up";
                _i.moveDeltaPosition = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( e.x - _i.downPointerPosition.x , e.y - _i.downPointerPosition.y );
                _i.moveThisPosition = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point(
                    options.dragX ? _i.downThisPosition.x + _i.moveDeltaPosition.x : _i.downThisPosition.x,
                    options.dragY ? _i.downThisPosition.y + _i.moveDeltaPosition.y : _i.downThisPosition.y,
                );
                if ( options.dragX ) this.x = _i.moveThisPosition.x;
                if ( options.dragY ) this.y = _i.moveThisPosition.y;
                if ( !options.allowDragOutside ) {
                    _i.moveThisPosition.x = _Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.clamp( _i.moveThisPosition.x, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.left - _i.downOffset.x, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.right - _i.downOffset.x );
                    _i.moveThisPosition.y = _Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.clamp( _i.moveThisPosition.y, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.top - _i.downOffset.y, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.bottom - _i.downOffset.y );
                }
                if ( _i.clickCanceled == false ) {
                    if ( Math.sqrt( _i.moveDeltaPosition.x ** 2 + _i.moveDeltaPosition.y ** 2 ) < clickCancelDistance ) {
                        if ( options.click != null ) options.click.call( this, e, _i );
                    }
                }
                if ( this.hitTestPoint( e.x, e.y ) ) {
                    _i.pushed = true;
                    if ( options.press != null ) options.press.call( this,e, _i );
                }
                if ( !options.preventRelease ) {
                    if ( !options.disableBasicAnimation ) {
                        if ( _i.tween ) _i.tween.stop();
                        _i.tween = this.move(
                            _i.moveThisPosition.x,
                            _i.moveThisPosition.y,
                            300,
                            _easing__WEBPACK_IMPORTED_MODULE_8__.easing.outBounce );
                        e.stopPropagation();
                    } else if ( options.releaseAnimation ) {
                        if ( _i.tween ) _i.tween.stop();
                        _i.tween = options.releaseAnimation.call( this, e, _i );
                        e.stopPropagation();
                    }
                }
                if ( options.up != null ) {
                    options.up.call( this, e, _i );
                }
            }
        };

        if ( options != null ) {
            this.on( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.POINTER_DOWN, pointerDown );
            this.on( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.POINTER_MOVE, pointerMove );
            this.on( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.POINTER_UP, pointerUp );
        } else {
            this.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.POINTER_DOWN, pointerDown );
            this.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.POINTER_MOVE, pointerMove );
            this.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.POINTER_UP, pointerUp );
            delete this.__interactive;
        }
    }

    //#endregion    


    encodeRenderingInfo() {
        // id(1),type(1),updateCode(1),colorOverride(4),colorAdd(4),anchor(2),shaderId(1),matrix(16),clipRegion(4)
        const encodedBuffer = new Float32Array( 38 );

        // encodedBuffer[0] = this.id;
        // encodedBuffer[1] = this.spriteType;
        // encodedBuffer[2] = this.updateCode; 
        // // encodedBuffer.set( this.colorOverride,3 );
        // encodedBuffer[3] = this.colorOverride[0];
        // encodedBuffer[4] = this.colorOverride[1];
        // encodedBuffer[5] = this.colorOverride[2];
        // encodedBuffer[6] = this.colorOverride[3];
        // // encodedBuffer.set( this.colorAdd,7 );
        // encodedBuffer[7] = this.colorAdd[0];
        // encodedBuffer[8] = this.colorAdd[1];
        // encodedBuffer[9] = this.colorAdd[2];
        // encodedBuffer[10] = this.colorAdd[3];
        // encodedBuffer[11] = this.transform.anchorX;
        // encodedBuffer[12] = this.transform.anchorY;

        encodedBuffer.set( [this._$$id,
                            this._$$spriteType,
                            this._$$updateCode,
                            this.colorOverride[0],
                            this.colorOverride[1],
                            this.colorOverride[2],
                            this.colorOverride[3],
                            this.colorAdd[0],
                            this.colorAdd[1],
                            this.colorAdd[2],
                            this.colorAdd[3],
                            this.transform.anchorX,
                            this.transform.anchorY] );

        if ( this.shader != null ) {
            this.shader.forceUpdate();
            encodedBuffer[13] = this.shader.asset.id;
        } else {
            encodedBuffer[13] = 0;
        }
        // for ( let i = 0; i < 16; i++ ) {
        //     encodedBuffer[14 + i] = this.transform.matrix[i]; 
        // }
        // encodedBuffer.set( this.transform.matrix,14 );
        _Types__WEBPACK_IMPORTED_MODULE_4__.TypedArrayHelper.memcpy( encodedBuffer,14,this.transform.matrix,0,16 );

        encodedBuffer.set( ( this.clipRegion != null ) ? this.clipRegion.xywh : [NaN,NaN,NaN,NaN],30 );
        encodedBuffer[34] = this.cacheBitmapAsset != null ? this.cacheBitmapAsset.id : 0;
        encodedBuffer[35] = this.cacheBitmapDstId;
        encodedBuffer[36] = this.blendMode;
        encodedBuffer[37] = +this.motionBlur;

        return encodedBuffer;
    }

    encodeCustomPrev() {
        const encodedBuffer = new Float32Array( 22 );

        encodedBuffer.set( [
            this.customPrev.colorOverride[0],
            this.customPrev.colorOverride[1],
            this.customPrev.colorOverride[2],
            this.customPrev.colorOverride[3],
            this.customPrev.anchorPositionX,
            this.customPrev.anchorPositionY] );
        // encodedBuffer.set( this.customPrev.worldMatrix,6 );
        _Types__WEBPACK_IMPORTED_MODULE_4__.TypedArrayHelper.memcpy( encodedBuffer,6,this.customPrev.worldMatrix,0,16 );
        return encodedBuffer;
    }

    sortChildren( prop = "y" ) {
        this.children.sort( ( a, b ) => a[prop] - b[prop] );
    }


    setCustomPrev( worldMatrix,colorOverride,anchorPositionX,anchorPositionY ) {
        this.customPrev = {
            worldMatrix,
            colorOverride,
            anchorPositionX,
            anchorPositionY,
        };
        this._$$updateCode |= Sprite.UpdateCodes.UPDATE_CUSTOM_PREV;
    }

    setCacheMode( mode ) {
        if ( this.cacheBitmapMode == Sprite.CacheBitmapModes.SNAPSHOT ) {
            this._updateChildren( Sprite.UpdateCodes.UPDATE_CLEAR_PREV );   
        }
        if ( this.cacheBitmapAsset ) {            
            this.cacheBitmapAsset.release();

            /**
             *
             *
             * @param {Sprite} spr
             */
            const clearDstId = ( spr )=>{
                if ( spr.cacheBitmapMode == Sprite.CacheBitmapModes.NO_CACHE ) {
                    this.cacheBitmapAsset = null;
                    spr.cacheBitmapDstId = 0;
                    for ( let spr2 of spr.children ) {
                        clearDstId( spr2 );
                    }
                }   
            };

            this.cacheBitmapMode = Sprite.CacheBitmapModes.NO_CACHE;
            clearDstId( this );
        }
        this.cacheBitmapMode = mode;
    }


    encodeRenderingInfoWithChildren() {
        const encodedBuffers = [];
        const transferList = [];

        /**
         *
         *
         * @param {Sprite} spr
         * @param {m4.Mat4} worldMatrix
         * @param {[number,number,number,number]|Float32Array} colorOverride
         * @param {[number,number,number,number]|Float32Array|null} clipRect
         * @param {number} cacheBitmapDstId
         */
        function encodeChildren( spr,worldMatrix,colorOverride, clipRect, cacheBitmapDstId ) {
            const buf = spr.encodeRenderingInfo();
            const bufMatrix = buf.subarray( 14,14 + 16 );
            const curColorOverride = buf.subarray( 3,3 + 4 );
            const curClipRect = buf.subarray( 30,30 + 4 );
            let assetId = 0;
            let extra;
            let strs;
            let genericData;
            let customPrev;
            let needMakeRT = false;

            // clipRegion 트랜스폼
            if ( !Number.isNaN( curClipRect[0] ) ) {
                let clipPos = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( worldMatrix,[curClipRect[0],curClipRect[1],0] );

                curClipRect[0] = clipPos[0] + spr.x;
                curClipRect[1] = clipPos[1] + spr.y;
            }

            // 매트릭스는 트리 하단으로 갈 수록 곱한다.
            twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.multiply( worldMatrix,bufMatrix,bufMatrix );
            // 월드 매트릭스로 보관. 한 프레임 늦은 값이다.
            // copy하는 이유는 postMessage로 원본이 보내져서 사라지기 때문
            spr.worldMatrix = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.copy( bufMatrix );


            if ( spr.cacheBitmapMode != Sprite.CacheBitmapModes.NO_CACHE ) {
                if ( spr.cacheBitmapAsset == null ) {
                    needMakeRT = true;
                } else if ( spr.cacheBitmapMode == Sprite.CacheBitmapModes.FILTER ) {
                    // 필터링 모드
                    spr.cacheBitmapAsset.release();
                    needMakeRT = true;
                }
            } 
            
            if ( needMakeRT ) {
                const rect = spr.bounds;
                const asset = new _Asset__WEBPACK_IMPORTED_MODULE_6__.Asset( "<RT:*>",_Asset__WEBPACK_IMPORTED_MODULE_6__.Asset.AssetTypes.RenderTarget );

                asset.load( { 
                    x:           rect.x,
                    y:           rect.y,
                    width:       Math.min( 2048, rect.width ),
                    height:      Math.min( 2048,rect.height ), 
                    worldMatrix: spr.worldMatrix  } );
                spr.cacheBitmapAsset = asset;
                assetId = asset.id;
                spr.cacheBitmapDstId = assetId;
                cacheBitmapDstId = assetId;
                // console.log( `Cache ${assetId} src=${spr.cacheBitmapSrcId}` );
            } else {
                spr.cacheBitmapDstId = cacheBitmapDstId || spr.cacheBitmapDstId;
            }
            buf[35] = spr.cacheBitmapDstId;

            // 컬러는 RGBA각각을 곱해나간다. 0~1 값
            curColorOverride[0] = curColorOverride[0] * colorOverride[0];
            curColorOverride[1] = curColorOverride[1] * colorOverride[1];
            curColorOverride[2] = curColorOverride[2] * colorOverride[2];
            curColorOverride[3] = curColorOverride[3] * colorOverride[3];
            // clipRect는 NaN이면 부모 것을 가져온다
            if ( Number.isNaN( curClipRect[0] ) && !Number.isNaN( clipRect[0] ) ) {
                curClipRect.set( clipRect );
            }
            if ( spr._$$spriteType != 0 ) {
                //@ts-ignore
                if ( ( spr._$$updateCode & Sprite.UpdateCodes.UPDATE_EXTRA ) && spr.encodeExtraRenderingInfo != null ) {
                    let transfer;

                    //@ts-ignore
                    [extra,strs,genericData,transfer] = spr.encodeExtraRenderingInfo();
                    if ( transfer ) transferList.push( ...transfer );
                }
                if ( ( spr._$$updateCode & Sprite.UpdateCodes.UPDATE_CUSTOM_PREV ) ) {
                    customPrev = spr.encodeCustomPrev();
                }
                // RT에 그릴 것이라서 srcId=0
                buf[34] = 0;
                encodedBuffers.push( [buf,extra,strs,customPrev,genericData] );
            } 
            
            if ( spr.cacheBitmapMode == Sprite.CacheBitmapModes.SNAPSHOT && spr.cacheBitmapDstId == 0 ) {
                // 캐시된 경우
            } else {
                // 비트맵에 캐시한 경우가 아니면 차일드를 그린다.
                spr.children.forEach( child => {
                    if ( child.visible ) {
                        encodeChildren( child, bufMatrix,curColorOverride, curClipRect, cacheBitmapDstId );
                        if ( spr.cacheBitmapMode == Sprite.CacheBitmapModes.SNAPSHOT ) {
                            child.cacheBitmapDstId = 0;
                        }
                    }
                } );
                if ( spr.cacheBitmapMode == Sprite.CacheBitmapModes.SNAPSHOT ) {
                    spr.cacheBitmapDstId = 0;
                }
            }

            if ( spr.cacheBitmapAsset ) {
                // 텍스쳐를 그려야 함
                const buf2 = new Float32Array( buf );

                buf2[34] = assetId;
                buf2[35] = 0;
                encodedBuffers.push( [buf2,null,null,customPrev,null] );
            }
            spr._$$updateCode = Sprite.UpdateCodes.UPDATE_NOTHING;
        }

        if ( this.visible ) {
            encodeChildren( this,twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.identity(), [1,1,1,1], [NaN,NaN,NaN,NaN], 0 );

            for ( let i = 0; i < encodedBuffers.length; i++ ) {
                transferList.push( encodedBuffers[i][0].buffer );
                if ( encodedBuffers[i][1] ) {
                    transferList.push( encodedBuffers[i][1].buffer );
                }
                if ( encodedBuffers[i][3] ) {
                    transferList.push( encodedBuffers[i][3].buffer );
                }
            }
            return [encodedBuffers,transferList];
        } else {
            return [null,null];
        }
    }
}

Sprite.lastId = 1;
Sprite.finalizationRegistry = new FinalizationRegistry( Sprite.finalizeHandler );
Sprite.loadedEventDispatcher = new _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher();


Sprite.SpriteTypes = {
    SPRITE:    0,
    BITMAP:    1,
    MESH:      2,
    TEXTFIELD: 3,
    PIXEL:     4,
    SHAPE:     5,
};
Sprite.UpdateCodes = {
    UPDATE_NOTHING:     0,
    UPDATE_EXTRA:       1,
    UPDATE_CLEAR_PREV:  2,
    UPDATE_CUSTOM_PREV: 4,
};
Sprite.CacheBitmapModes = {
    NO_CACHE: 0,
    SNAPSHOT: 1,
    FILTER:   2,
};


/** 
 * @enum {number}
*/
Sprite.BlendModes = {
    NORMAL:     0, //[gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    MULTIPLY:   1, //[gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];
    ADD:        2, //[gl.ONE, gl.DST_ALPHA];
    SCREEN:     3, //[gl.ONE, gl.ONE_MINUS_SRC_COLOR];
    NORMAL_NPM: 4, //[gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    ADD_NPM:    5, //[gl.SRC_ALPHA, gl.DST_ALPHA, gl.ONE, gl.DST_ALPHA];
    SCREEN_NPM: 6, //[gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_COLOR];
};


/***/ }),

/***/ "./engine/src/Stage.js":
/*!*****************************!*\
  !*** ./engine/src/Stage.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Stage": () => (/* binding */ Stage)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var twgl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.module.js");






class Stage extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor() {
        super();
        this.isStage = true;
    }
}

/***/ }),

/***/ "./engine/src/Storage.js":
/*!*******************************!*\
  !*** ./engine/src/Storage.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Storage": () => (/* binding */ Storage)
/* harmony export */ });
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Timer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Timer */ "./engine/src/Timer.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");






// 각 스토리지 설명
//https://blog.sessionstack.com/how-javascript-works-storage-engines-how-to-choose-the-proper-storage-api-da50879ef576
// 캐시 데이터는 Cache API
// 유저 데이터는 IndexedDB 쓰라고 권고 하고 있다

class Storage extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {
    constructor( dbName ) {
        super();
        console.assert( self.indexedDB, "indexedDB가 지원되지 않는 브라우저" );

        const version = 1;
        const request = self.indexedDB.open( dbName,version );

        request.onerror = ( event ) => {
            throw new Error( "indexedDB 열기 실패" );
        };
        request.onupgradeneeded = ( event ) => {
            const thisDb = event.target.result;

            // console.log( "upgrade" );
            thisDb.createObjectStore( "files", { keyPath: "path" } );
        };
        request.onsuccess = ( event ) => {
            const db = request.result;

            this.db = db;

            // console.log( event );
            this.dispatchEvent( "ready" );
        };
    }

    read( key ) {
        return new Promise( ( resolve, reject ) => {
            const func = () => {
                const request = this.db.transaction( "files", "readonly" ).objectStore( "files" ).get( key );

                request.onsuccess = ( event ) => {
                    this.dispatchEvent( new _Event__WEBPACK_IMPORTED_MODULE_2__.Event( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.COMPLETE, { content: event.target.result.content } ) );
                    resolve( event.target.result.content );
                };
            };

            if ( this.db ) {
                func();
            } else {
                this.once( "ready", func );
            }
        } );
    }

    write( key, value ) {
        return new Promise( ( resolve, reject ) => {
            const func = () => {
                const request = this.db.transaction( "files", "readwrite" ).objectStore( "files" ).put( { path: key, content: value } );

                request.onsuccess = ( event ) => {
                    this.dispatchEvent( new _Event__WEBPACK_IMPORTED_MODULE_2__.Event( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.COMPLETE ) );
                    resolve();
                };
            };

            if ( this.db ) {
                func();
            } else {
                this.once( "ready", func );
            }
        } );
    }


    static loadFile( filename ) {
        // /** @type {PIXI.Loader} */
        // //@ts-ignore
        // const loader = PIXI.Loader.shared;
        // const r = new EventDispatcher();

        // if ( loader.resources[filename] ) {
        //     if ( loader.resources[filename].isComplete ) {
        //         Timer.delayedCall( 0, ()=> r.dispatchEvent( Event.COMPLETE,{ data: loader.resources[filename].data } ) );
        //     } else {
        //         loader.load( ( loader,resources )=> r.dispatchEvent( Event.COMPLETE,{ data: resources[filename].data } ) );
        //     }
        // } else {
        //     loader.add( filename,filename );
        //     loader.load( ( loader,resources )=> {
        //         if ( resources[filename].error ) throw new Error( resources[filename].error );
        //         r.dispatchEvent( Event.COMPLETE,{ data: resources[filename].data } );
        //     }
        //     );
        // }

        // return r;
    }
}



/***/ }),

/***/ "./engine/src/TextField.js":
/*!*********************************!*\
  !*** ./engine/src/TextField.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextField": () => (/* binding */ TextField)
/* harmony export */ });
/* harmony import */ var _FontBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FontBase */ "./engine/src/FontBase.js");
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _TrueTypeFont__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TrueTypeFont */ "./engine/src/TrueTypeFont.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");







class TextField extends _Sprite__WEBPACK_IMPORTED_MODULE_1__.Sprite {
    /**
     * Creates an instance of TextField.
     * @param {Font} font
     * @param {string} text
     * @param {*} styles
     * @memberof TextField
     */
    constructor( font, text, styles ) {
        super();
        this.font = font;
        this.styles = styles;
        this.useBaseline = false;
        this._$$spriteType = _Sprite__WEBPACK_IMPORTED_MODULE_1__.Sprite.SpriteTypes.TEXTFIELD;
        this._$$updateCode = _Sprite__WEBPACK_IMPORTED_MODULE_1__.Sprite.UpdateCodes.UPDATE_EXTRA;
        // 트루타입폰트를 캔버스에 그렸다가 텍스쳐로 바꾸는데 이 때 알파에 검정이 섞이는 것을 빼려면 다음과 같이 해야한다.
        this.colorAdd = ( font instanceof _TrueTypeFont__WEBPACK_IMPORTED_MODULE_2__.TrueTypeFont ) ? [1,1,1,0] : [0,0,0,0];
        this.customBounds = new _Types__WEBPACK_IMPORTED_MODULE_3__.Rect();
        this.text = text;
    }

    get text() {
        return this._text;
    }

    set text( text ) {
        if ( text != this._text ) {
            this.customBounds.width = this.font.measureTextWidth( text,this.fontSize );
            this.customBounds.height = this.fontSize;
        }
        this._text = text;
    }

    get fontSize() {
        return this.font.referenceSize;
    }

    getTextWidth() {
        return this.width;
    }

    setTextColor( c,a ) {
        // this.colorAdd = Utils.hex2rgba( c,a );
        this.setOverrideColor( c,a );
    }

    static fromTextWrap( text, areaWidth, areaHeight, lineSpacing, font, align, ignoreWordWrap ) {
        const wordWrapStyle = {
            align:         align != null ? align : "left",
            lineHeight:    lineSpacing,
            wordWrap:      areaWidth != null && !ignoreWordWrap,
            whiteSpate:    "normal",
            trim:          true,
            breakWord:     areaWidth != null && !ignoreWordWrap,
            wordWrapWidth: areaWidth
        };

        const tf = new TextField( font, text, wordWrapStyle );

        //spr.addChild( tf );
        //TODO: 틀렸음
        tf.anchorX = ( align == "center" ) ? 0.5 : ( align == "right" ? 1.0 : 0.0 );

        //tf.__pixi.x = (align == "center") ? areaWidth * 0.5 : (align == "right" ? areaWidth : 0.0);
        if ( areaWidth != null ) {
            tf.x += areaWidth * tf.anchorPosition.x;
        }

        return tf;
    }



    encodeExtraRenderingInfo() {
        let encodedBuffer = new Float32Array( 2 );

        encodedBuffer[0] = this.font.asset.id;
        encodedBuffer[1] = +this.useBaseline;

        return [encodedBuffer,[this.text]];
    }
}


/***/ }),

/***/ "./engine/src/Texture.js":
/*!*******************************!*\
  !*** ./engine/src/Texture.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Texture": () => (/* binding */ Texture)
/* harmony export */ });
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _TextureBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TextureBase */ "./engine/src/TextureBase.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");





class Texture extends _TextureBase__WEBPACK_IMPORTED_MODULE_1__.TextureBase {
    /**
     * Creates an instance of Texture.
     * @param {string} filename
     * @param {boolean} filter
     * @param {*} option
     * @memberof Texture
     */
    constructor( filename, filter = false, option = {} ) {
        super();
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_0__.Asset( filename,_Asset__WEBPACK_IMPORTED_MODULE_0__.Asset.AssetTypes.Texture );
        const size = _Utils__WEBPACK_IMPORTED_MODULE_3__.Utils.getImageSize( filename );

        this.uvRect = option.rect || new _Types__WEBPACK_IMPORTED_MODULE_2__.Rect( 0,0,size.width,size.height );
        this.width = this.uvRect.width;
        this.height = this.uvRect.height;
        this.asset.load( { width: size.width,height: size.height,uvRect: this.uvRect, filter: filter } );
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @param {boolean} [isOnce=false]
     * @returns {Texture}
     * @memberof Texture
     */
    addEventListener( eventName, func, context = null, isOnce = false ) {
        if ( eventName == _Event__WEBPACK_IMPORTED_MODULE_4__.Event.LOADED ) {
            this.asset.addEventListener( eventName, this.dispatchEvent.bind( this,_Event__WEBPACK_IMPORTED_MODULE_4__.Event.LOADED ), null, isOnce );
        } 
        //@ts-ignore
        return super.addEventListener( eventName, func, context, isOnce );
    }
}



/***/ }),

/***/ "./engine/src/TextureBase.js":
/*!***********************************!*\
  !*** ./engine/src/TextureBase.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextureBase": () => (/* binding */ TextureBase)
/* harmony export */ });
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");




class TextureBase extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher {
    constructor() {
        super();
        this.width = 0;
        this.height = 0;
        /** @type {Asset} */
        this.asset = undefined;
        /** @type {Rect} */
        this.uvRect = undefined;
    }

    get size() {
        return [this.width,this.height];
    }
}



/***/ }),

/***/ "./engine/src/TexturePack.js":
/*!***********************************!*\
  !*** ./engine/src/TexturePack.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TexturePack": () => (/* binding */ TexturePack)
/* harmony export */ });
/* harmony import */ var _TextureBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TextureBase */ "./engine/src/TextureBase.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Texture__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Texture */ "./engine/src/Texture.js");







class TexturePack extends _TextureBase__WEBPACK_IMPORTED_MODULE_0__.TextureBase {
    /**
     *Creates an instance of TexturePack.
     * @param {string|object} txtfile
     * @param {string} imagefile
     * @param {TextureBase.Filters} filter
     * @param {object=} options
     * @memberof TexturePack
     */
    constructor( txtfile,imagefile,filter,options ) {
        super();
        this.filename =  imagefile;
        this.regions = {};

        if ( typeof( txtfile ) == "string" ) {
            const s = _Utils__WEBPACK_IMPORTED_MODULE_1__.Utils.getEmbeddedFile( txtfile );


            if ( s != null ) {
                const lines = s.split( "\n" );

                for ( const line of lines ) {
                //console.log(line);
                    const result = /([^,]+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+)/.exec( line );

                    if ( result != null ) {
                        const [, name, x, y, width, height] = result;
                        //console.log(`${name} ${x} ${y} ${width} ${height}`);
                        const rect = new _Types__WEBPACK_IMPORTED_MODULE_3__.Rect( parseFloat( x ), parseFloat( y ), parseFloat( width ), parseFloat( height ) );

                        this.regions[name] = new _Texture__WEBPACK_IMPORTED_MODULE_4__.Texture( this.filename,false,{ rect } );
                    }
                }
            }
        } else {
            // txtfile 부분에 개체를 넣은 경우
            for ( let name in txtfile ) {
                let rectArr = txtfile[name];
                let rect = new _Types__WEBPACK_IMPORTED_MODULE_3__.Rect( ...rectArr );

                this.regions[name] = new _Texture__WEBPACK_IMPORTED_MODULE_4__.Texture( this.filename,filter,{ rect } );
            }
        }
    }

    getTextureRegion( name ) {
        return this.regions[name];
    }
}



/***/ }),

/***/ "./engine/src/TileMap.js":
/*!*******************************!*\
  !*** ./engine/src/TileMap.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TileMap": () => (/* binding */ TileMap)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Mesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Mesh */ "./engine/src/Mesh.js");
/* harmony import */ var _Shader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Shader */ "./engine/src/Shader.js");
/* harmony import */ var _TextureBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TextureBase */ "./engine/src/TextureBase.js");





/*

2019-10-05
resize가 너무 느려서 처음에 메시를 만들어 두는 쪽으로 했다

2021-11-21

mesh를 child로 가지고 있는 것을 그냥 mesh를 extend하게 수정하거나
숨겨줘야함

*/



/**
 * @this {TileMap}
 *
 * @param {number} tx
 * @param {number} ty
 * @returns {number[]}
 */
function tileToRect( tx, ty ) {
    const x1 = tx * ( this.__tileWidth + this.__spacingX ) + this.__marginX;
    const y1 = ty * ( this.__tileHeight + this.__spacingY ) + this.__marginY;

    // 기데로스의 uv좌표 변환시 생기는 문제 때문에 0.99999를 곱함
    //return [x1,y1,x1 + this.__tileWidth * 0.99999,y1 + this.__tileHeight * 0.99999];
    //return [x1, y1, x1 + this.__tileWidth ,y1 + this.__tileHeight];
    // return [x1 >>> 0, y1 >>> 0, x1 + this.__tileWidth >>> 0, y1 + this.__tileHeight >>> 0];
    return [x1, y1, x1 + this.__tileWidth, y1 + this.__tileHeight];
    // let [a, b, c, d] = [0.03,0.125,-0.03,-0.125];
    // return [x1 + a, y1 + b, x1 + this.__tileWidth + c, y1 + this.__tileHeight + d];
}

function replaceMeshData( m, i, x1, y1, x2, y2, tx1, ty1, tx2, ty2, c1, a1, c2, a2, c3, a3, c4, a4 ) {
    const [nVtx, nUv, nVc, nIdx] = [i * 4,i * 4, i * 4, i * 6];

    m.setVertices(
        nVtx + 0, x1, y1,
        nVtx + 1, x2, y1,
        nVtx + 2, x1, y2,
        nVtx + 3, x2, y2
    );
    m.setTextureCoordinates(
        nUv + 0, tx1, ty1,
        nUv + 1, tx2, ty1,
        nUv + 2, tx1, ty2,
        nUv + 3, tx2, ty2
    );
    m.setColors(
        nVc + 0, c1, a1,
        nVc + 1, c2, a2,
        nVc + 2, c3, a3,
        nVc + 3, c4, a4
    );
    m.setIndices(
        nIdx + 0, nVtx + 0,
        nIdx + 1, nVtx + 1,
        nIdx + 2, nVtx + 2,
        nIdx + 3, nVtx + 1,
        nIdx + 4, nVtx + 3,
        nIdx + 5, nVtx + 2
    );
}



class TileMap extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    /**
     *Creates an instance of TileMap.
     * @param {number} width
     * @param {number} height
     * @param {TextureBase} texture
     * @param {number} tileWidth
     * @param {number} tileHeight
     * @param {number} [spacingX=0]
     * @param {number} [spacingY=0]
     * @param {number} [marginX=0]
     * @param {number} [marginY=0]
     * @param {number} [displayWidth=tileWidth]
     * @param {number} [displayHeight=tileHeight]
     * @memberof TileMap
     */
    constructor( width, height, texture, tileWidth, tileHeight, spacingX = 0, spacingY = 0, marginX = 0, marginY = 0, displayWidth = tileWidth, displayHeight = tileHeight ) {
        super();
        this.__mapWidth = width;
        this.__mapHeight = height;
        this.__texture = texture;
        this.__tileWidth = tileWidth;
        this.__tileHeight = tileHeight;
        this.__spacingX = spacingX;
        this.__spacingY = spacingY;
        this.__marginX = marginX;
        this.__marginY = marginY;
        this.__displayWidth = displayWidth || tileWidth;
        this.__displayHeight = displayHeight || tileHeight;
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_1__.Mesh();

        m.setTexture( texture );
        this.__mesh = m;
        this.useCustomLocalBounds = true;
        this._$$localBounds.width = width * tileWidth;
        this._$$localBounds.height = height * tileHeight;
        this.clearAllTiles();
        this.addChild( m );
    }

    clearAllTiles() {
        const [vtx, idx, uv, vc] = [[], [], [], []];

        for ( let y = 0; y < this.__mapHeight; y++ ) {
            for ( let x = 0; x < this.__mapWidth; x++ ) {
                const [x1,y1,x2,y2] = [x * this.__displayWidth,y * this.__displayHeight,( x + 1 ) * this.__displayWidth,( y + 1 ) * this.__displayHeight];

                vtx.push( x1,y1,x2,y1,x1,y2,x2,y2 );
                uv.push( 0,0,0,0,0,0,0,0 );
                vc.push( 0,0,0,0,0,0,0,0 );
                idx.push( 0,0,0, 0,0,0 );
            }
        }
        let m = this.__mesh;

        m.setVertexArray( vtx );
        m.setIndexArray( idx );
        m.setTextureCoordinateArray( uv );
        m.setColorArray( vc );
        this.__map = [];
    }
	
    /**
     *
     *
     * @param {number} x
     * @param {number} y
     * @param {number} tx
     * @param {number} ty
     * @param {boolean} [flip=false]
     * @param {number} [c1=0xffffff]
     * @param {number} [a1=1.0]
     * @param {number} [c2=c1]
     * @param {number} [a2=a1]
     * @param {number} [c3=c1]
     * @param {number} [a3=a1]
     * @param {number} [c4=c1]
     * @param {number} [a4=a1]
     * @memberof TileMap
     */
    setTile( x,y,tx,ty,flip = false,c1 = 0xffffff,a1 = 1.0,c2 = c1,a2 = a1,c3 = c1,a3 = a1,c4 = c1,a4 = a1 ) {
        if ( tx == null || ty == null ) {
            this.clearTile( x,y );
        }

        const w = this.__mapWidth;
        const [x1,y1,x2,y2] = [x * this.__displayWidth,y * this.__displayHeight,( x + 1 ) * this.__displayWidth,( y + 1 ) * this.__displayHeight];
        const m = this.__mesh;
        const [tx1,ty1,tx2,ty2] = tileToRect.call( this,tx,ty );
        let t = this.__map[y * this.__mapWidth + x];

        // if ( t == null ) {

        //     const nVtx = m.getVertexArraySize();

        //     m.resizeVertexArray( nVtx + 4 );
        //     m.resizeTextureCoordinateArray( nVtx + 4 );
        //     m.resizeColorArray( nVtx + 4 );
        //     m.resizeIndexArray( nVtx / 4 * 6 + 6 );
        //     replaceMeshData( m, nVtx / 4 ,
        //                      x1, y1, x2, y2,
        //                      tx1, ty1, tx2, ty2,
        //                      c1, a1, c2, a2, c3, a3, c4, a4 );
        //     t = [tx, ty, flip, c1, a1, c2, a2, c3, a3, c4, a4, nVtx / 4 ];
        
        // } else {

        replaceMeshData( m, x + y * this.__mapWidth,// t[11],
                         x1,y1,x2,y2,
                         tx1,ty1,tx2,ty2,
                         c1,a2,c2,a2,c3,a3,c4,a4 );
        t = [tx, ty, flip, c1, a1, c2, a2, c3, a3, c4, a4, x + y * this.__mapWidth];//t[11]];
        
        // }

        this.__map[y * this.__mapWidth + x] = t;
    }
	
    getTile( x,y ) {
        const t = this.__map[y * this.__mapWidth + x];

        if ( t != null ) {
            return t;
        }
    }
	
    getArray( x,y ) {
        const t = this.__map[y * this.__mapWidth + x];

        if ( t == null ) {
            return;
        }

        const pos = t[11];
        const [nVtx,nIdx] = [pos * 4,pos * 6];
        const m = this.__mesh;
        const vtx = [];
        const uv = [];
        const vc = [];
        const idx = [];

        for ( let i = 0; i < 4; i++ ) {
            const { x, y } = m.getVertex( nVtx + i );

            vtx.push( x,y );
            const { x: u, y: v } = m.getTextureCoordinate( nVtx + i );

            uv.push( u,v );
            const { color, alpha } = m.getColor( nVtx + i );

            vc.push( color,alpha );
        }

        for ( let i = 0; i < 6; i++ ) {
            const v = m.getIndex( nIdx + i );

            idx.push( v );
        }

        return [vtx,uv,vc,idx];
    }
	
    clearTile( x,y ) {
        const t = this.__map[y * this.__mapWidth + x];

        if ( t != null ) {
            const nIdx = t[11] * 6;

            this.__mesh.setIndices(
                nIdx + 0, 0,
                nIdx + 1, 0,
                nIdx + 2, 0,
                nIdx + 3, 0,
                nIdx + 4, 0,
                nIdx + 5, 0
            );
        }

        this.__map[y * this.__mapWidth + x] = null;
    }
    /*
	shift(offsetX,offsetY) {
	
	}
	*/


    setTexture( texture ) {
        this.__mesh.setTexture( texture );//, matrix);
    }


    /**
     *
     *
     * @param {Shader} shader
     * @memberof TileMap
     */
    setShader( shader ) {
        this.__mesh.setShader( shader );
    }

    setTileColor( x, y, color, alpha, isCorner ) {
        const w = this.__mapWidth;

        if ( !isCorner ) {
            const t = this.__map[y * this.__mapWidth + x];

            if ( t ) {
                const nVc = t[11] * 4;

                this.__mesh.setColors(
                    nVc + 0, color, alpha,
                    nVc + 1, color, alpha,
                    nVc + 2, color, alpha,
                    nVc + 3, color, alpha
                );
            }
        } else {
            // 코너의 컬러
            // 12
            // 30
            const t0 = this.__map[y * this.__mapWidth + x];
            const t1 = ( y > 0 && x > 0 ) ? this.__map[( y - 1 ) * this.__mapWidth + x - 1] : null;
            const t2 = ( y > 0 ) ? this.__map[( y - 1 ) * this.__mapWidth + x] : null;
            const t3 = ( x > 0 ) ? this.__map[y * this.__mapWidth + x - 1] : null;

            if ( t0 ) {
                this.__mesh.setColor( t0[11] * 4 + 0, color, alpha );
            }

            if ( t1 ) {
                this.__mesh.setColor( t1[11] * 4 + 3, color, alpha );
            }

            if ( t2 ) {
                this.__mesh.setColor( t2[11] * 4 + 2, color, alpha );
            }

            if ( t3 ) {
                this.__mesh.setColor( t3[11] * 4 + 1, color, alpha );
            }
        }
    }
}
TileMap.FLIP_DIAGONAL = "flipDiagonal";
TileMap.FLIP_HORIZONTAL = "flipHorizontal";
TileMap.FLIP_VERTICAL = "flipVertical";




/***/ }),

/***/ "./engine/src/Timer.js":
/*!*****************************!*\
  !*** ./engine/src/Timer.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Timer": () => (/* binding */ Timer)
/* harmony export */ });
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");





class Timer extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {
    /**
     * 타이머 개체를 만든다.
     * 타이머는 바로 시작하지 않으며 start를 불러야 시작한다.
     * 
     * @param {number} delay - ms 단위
     * @param {number} [repeatCount=0] - 몇 번을 반복하는 타이머인가? 0이면 무한 반복
     * @memberof Timer
     */
    constructor( delay, repeatCount = 0 ) {
        super();
        this.delay = delay;
        this.repeatCount = repeatCount;
        this.count = 0;
    }

    start() {
        this.stop();
        this.__timer = setInterval( () => {
            this.count++;
            const e = new _Event__WEBPACK_IMPORTED_MODULE_1__.Event( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.TIMER );

            // @ts-ignore
            e.timer = this;
            this.dispatchEvent( e );

            if ( this.repeatCount != 0 && this.count >= this.repeatCount ) {
                this.stop();
            }
        }, this.delay );
    }

    stop() {
        if ( this.__timer ) {
            clearInterval( this.__timer );
            this.__timer = null;
        }
    }

    getCurrentCount() {
        return this.count;
    }

    getDelay() {
        return this.delay;
    }

    /**
     * delay 만큼의 지연시간 후에 함수를 실행한다
     *
     * @static
     * @param {number} delay - ms 단위. 0을 줘도 동기적으로 실행되지 않는다.
     * @param {function} func
     * @param {object=} context
     * @returns {Timer}
     * @memberof Timer
     */
    static delayedCall( delay, func, context ) {
        console.assert( func != null );
        const t = new Timer( delay, 1 );

        t.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.TIMER, func, context );
        t.start();

        return t;
    }

    /**
     * 현재 시간을 밀리세컨드 단위로 돌려준다
     *
     * @static
     * @returns {number}
     * @memberof Timer
     */
    static now() {
        return ( +new Date );
    }

    /**
     * 퍼포먼스 타이머는 Timer.now()보다 더 정확한 시간 간격을 측정할 수 있지만
     * 이것이 현재 시간을 표시하고 있는 것은 아님에 주의. Timer.now()와 다른 값이다.
     * 간격은 매우 정확하며 1ms 이상의 해상도를 돌려준다. 그러나 이 호출 자체가 비싸다.
     *
     * @static
     * @returns {number}
     * @memberof Timer
     */
    static getPerformaceTimer() {
        return performance.now();
    }

    /**
     * 파일이름이나 로그에 출력할 때 사용하기 편한 ISO포멧의 시간 표시를 돌려준다
     *
     * @static
     * @param {Date} [date=new Date()]
     * @returns {string}
     * @memberof Timer
     */
    static getShortDate( date = new Date() ) {
        return date.toISOString();
    }

    static wait( ms ) {
        return new Promise( ( resolve,reject )=>{
            this.delayedCall( ms,resolve );
        } );
    }

    static waitFrame( frame ) {
        return new Promise( ( resolve,reject )=>{
            this.delayedCall( 1000 / 60 * frame,resolve );
        } );
    }
}



/***/ }),

/***/ "./engine/src/Transform.js":
/*!*********************************!*\
  !*** ./engine/src/Transform.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Transform": () => (/* binding */ Transform)
/* harmony export */ });
/* harmony import */ var twgl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.module.js");



class Transform {
    constructor() {
        this._x = 0;
        this._y = 0;
        this._anchorX = 0;
        this._anchorY = 0;
        this._scaleX = 1;
        this._scaleY = 1;
        this._rotation = 0;
        this._matrixDirty = false;
        this._matrix = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.identity();
        this.invalidateCallback = null;
    }

    get x() {
        return this._x;
    }

    get y() {
        return this._y;
    }

    get anchorX() {
        return this._anchorX;
    }

    get anchorY() {
        return this._anchorY;
    }


    get scaleX() {
        return this._scaleX;
    }

    get scaleY() {
        return this._scaleY;
    }

    get rotation() {
        return this._rotation;       
    }

    set x( v ) {
        this.setDirty( this._x != v );
        this._x = v;
    }

    set y( v ) {
        this.setDirty( this._y != v );
        this._y = v;
    }

    set anchorX( v ) {
        this.setDirty( this._anchorX != v );
        this._anchorX = v;
    }

    set anchorY( v ) {
        this.setDirty( this._anchorY != v );
        this._anchorY = v;
    }

    set scaleX( v ) {
        this.setDirty( this._scaleX != v );
        this._scaleX = v;
    }

    set scaleY( v ) {
        this.setDirty( this._scaleY != v );
        this._scaleY = v;
    }

    set rotation( v ) {
        this.setDirty( this._rotation != v );
        this._rotation = v;
    }

    get matrix() {
        if ( this._matrixDirty ) {
            const mat =  twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.translation( [this._x,this._y,0] );

            // 앵커만큼 역으로 이동한 다음
            // 여기가 구버전과 다른 점
            // m4.translate( mat, [this.anchorPosition.x,this.anchorPosition.y,0],mat );
            twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.scale( mat, [this._scaleX,this._scaleY,1] ,mat );
            twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.rotateZ( mat,this._rotation * Math.PI / 180 ,mat );        
            // 여기서 다시 앵커만큼 이동해야 하는데
            // 이 처리는 vs에서 한다
            this._matrix = mat;
            this._matrixDirty = false;
        } 
        return this._matrix;
    }

    setDirty( v ) {
        if ( this.invalidateCallback && v ) {
            // _matrixDirty가 이번에 false에서 true가 될 때만 호출하는게 아니고
            // true에서 true가 될 때도 호출 한다.
            // 그래야 _boundsDirty가 제대로 처리 되기 때문
            this.invalidateCallback();
        }
        this._matrixDirty = this._matrixDirty || v;
    }

    /**
     *
     *
     * @returns {Transform} 
     * @memberof Transform
     */
    clone() {
        const newTransform = {};

        Object.assign( newTransform,this );
        Object.setPrototypeOf( newTransform,this.constructor.prototype );
        //@ts-ignore
        return newTransform;
    }
}




/***/ }),

/***/ "./engine/src/TrueTypeFont.js":
/*!************************************!*\
  !*** ./engine/src/TrueTypeFont.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TrueTypeFont": () => (/* binding */ TrueTypeFont)
/* harmony export */ });
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _FontBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FontBase */ "./engine/src/FontBase.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");





class TrueTypeFont extends _FontBase__WEBPACK_IMPORTED_MODULE_1__.FontBase {
    constructor( trueTypeFontName,referenceSize, styles ) {
        super( trueTypeFontName, referenceSize, styles );
        // TTF
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_0__.Asset( trueTypeFontName,_Asset__WEBPACK_IMPORTED_MODULE_0__.Asset.AssetTypes.TrueTypeFont );
        this.asset.load( { 
            referenceSize: this.referenceSize, 
            styles:        this.styles 
        } );
        this.fontLoaded = false;
    }    

    measureTextWidth( str,size ) {
        super.measureTextWidth( str,size );

        const fontInfo = this.asset.fontInfo;

        let width = 0;

        for ( let i = 0; i < str.length; i++ ) {
            const char = str.charCodeAt( i );
            const charInfo = fontInfo.chars[char];

            if ( Array.isArray( charInfo ) ) {
                width += charInfo[0];
                if ( false ) {}   
            } else if ( charInfo != null ) {
                width += charInfo;
            }
            if ( i < str.length - 1 && fontInfo.kerningPairs ) {
            //마지막 글자가 아닌경우 kerning
                const charNext = str.charCodeAt( i + 1 );

                const kerning = fontInfo.kerningPairs[char + "," + charNext];

                if ( kerning ) {
                    width += kerning;
                }
            }
        }
        return width / fontInfo.unitsPerEm * ( size || this.referenceSize );
    }
}




/***/ }),

/***/ "./engine/src/Tween.js":
/*!*****************************!*\
  !*** ./engine/src/Tween.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tween": () => (/* binding */ Tween)
/* harmony export */ });
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _easing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./easing */ "./engine/src/easing.js");
/* harmony import */ var _Stage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Stage */ "./engine/src/Stage.js");
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");







/**
 * @typedef Prop
 * @property {function|string=} ease
 * @property {boolean=} autoPlay
 * @property {boolean=} swapValues
 * @property {boolean=} reflect
 * @property {number=} delay
 * @property {number=} repeatCount
 * @property {boolean=} dispatchEvents
 * @property {number=} timeScale
 * @property {Tween=} nextTween
 */



/*
base on GTween for Gideros;
This code is MIT licensed, see http://www.opensource.org/licenses/mit-license.php;
Copyright (c) 2010 - 2011 Gideros Mobile;
Based on Tween 2.01 for ActionScript 3;
http://gskinner.com/libraries/GTween/
GTween 2.01 for ActionScript 3 is MIT licensed, see http://www.opensource.org/licenses/mit-license.php;
Copyright (c) 2009 Grant Skinner;
Notes:
* Documentation is derived from GTween 2.01's original documentation.
*/

/*
	* Tween is a light-weight instance oriented tween engine. This means that you instantiate tweens for specific purposes, && then reuse, update || discard them.
	* This is different than centralized tween engines where you "register" tweens with a global object. This provides a more familiar && useful interface;
	* for object oriented programmers.

	* Tween boasts a number of advanced features:
	* - frame && time based durations/positions which can be set per tween;
	* - simple sequenced tweens using .nextTween;
	* - pause && resume individual tweens || all tweens;
	* - jump directly to the } || beginning of a tween with :toEnd() || :toBeginning();
	* - jump to any arbitrary point in the tween with :setPosition();
	* - complete, init, && change callbacks;
	* - smart garbage collector interactions (prevents collection while active, allows collection if target is collected);
	* - easy to set up in a single line of code;
	* - can repeat || reflect a tween a specified number of times;
	* - deterministic, so setting a position on a tween will (almost) always result in predictable results;
*/

function hexToRgb( c ) {
    return [( c >> 16 ) / 255, ( ( c >> 8 ) & 0xff ) / 255, ( c & 0xff ) / 255];
}


const copyTickList = [];

class Tween extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher {
    /**
     *Creates an instance of Tween.
     * @param {object} target
     * @param {number} duration
     * @param {object=} values
     * @param {string|function|Prop=} props
     * @memberof Tween
     */
    constructor( target, duration, values, props ) {
        super();
        this._delay = 0;
        this._paused = true;
        this._position = Number.NaN;
        this._isEnd = false;
        this.autoPlay = true;
        this.repeatCount = 1;
        this.timeScale = 1;
        this.ease = Tween.defaultEase;
        this.dispatchEvents = Tween.defaultDispatchEvents;
        this.target = target;
        this.duration = duration;
        this.reflect = undefined;
        this.nextTween = undefined;
        let swap = null;

        if ( typeof props == "function" || typeof props == "string" ) {
            //@ts-ignore
            props = { ease: props };
        }

        if ( props != null ) {
            //@ts-ignore
            swap = props.swapValues;
            //@ts-ignore
            props.swapValues = null;
            Object.assign( this, props );
        }

        if ( typeof this.ease == "string" ) {
            this.ease = _easing__WEBPACK_IMPORTED_MODULE_3__.easing[this.ease];
        }

        console.assert( this.ease != null );
        this.resetValues( values );

        if ( swap ) {
            this.swapValues();
        }

        if ( this.duration == 0 && this.getDelay() == 0 && this.autoPlay ) {
            this.calculatedPosition = null;
            this.setPosition( 0 );
        }

        if ( !Tween.active ) {
            _Application__WEBPACK_IMPORTED_MODULE_5__.application.stage.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, Tween.onTick );
            Tween.active = true;
        }
    }

    /*
		* Plays or pauses a tween. You can still change the position value externally on a paused;
		* tween, but it will !be updated automatically. While paused is false, the tween is also prevented;
		* from being garbage collected while it is active.
		* This is achieved in one of two ways:
		* 1. If the target object derives from EventDispatcher, then the tween will subscribe to a dummy event using a hard reference. This allows;
		* the tween to be garbage collected if its target is also collected, && there are no other external references to it.
		* 2. If the target object is !an EventDispatcher, then the tween is placed in a global list, to prevent collection until it is paused || completes.
		* Note that pausing all tweens via the Tween.pauseAll static property will !free the tweens for collection.
	*/
    /**
     *
     *
     * @returns {boolean}
     * @memberof Tween
     */
    isPaused() {
        return this._paused;
    }


    isEnd() {
        return this._isEnd;
    }

    stop() {
        this.setPaused( true );
    }

    /**
     *
     *
     * @param {boolean} value
     * @memberof Tween
     */
    setPaused( value ) {
        if ( value == this._paused ) {
            return;
        }

        this._paused = value;

        if ( this._paused ) {
            Tween.activeTweenList.delete( this );
        } else {
            if ( Number.isNaN( this._position ) || ( this.repeatCount != 0 && this._position >= this.repeatCount * this.duration ) ) {
                // reached the end, reset.
                this._inited = false;
                this.calculatedPosition = 0;
                this.calculatedPositionOld = 0;
                this.ratio = 0;
                this.ratioOld = 0;
                this.positionOld = 0;
                this._position = -this.getDelay();
            }

            Tween.activeTweenList.set( this,true );
        }
    }

    stopAll() {
        for ( const [tween] of Tween.activeTweenList ) {
            tween.stop();
        }
    }


    /*
		* Gets && sets the position of the tween in frames || seconds (depending on .useFrames). This value will;
		* be constrained between -delay && repeatCount*duration. It will be resolved to a .calculatedPosition before;
		* being applied.
		*
		* Negative values:
		* Values below 0 will always resolve to a calculatedPosition of 0. Negative values can be used to set up a delay on the tween, as the tween will have to count up to 0 before initing.
		*
		* Positive values:
		* Positive values are resolved based on the duration, repeatCount, && reflect properties.
	*/
    getPosition() {
        return this._position;
    }

    /**
     *
     *
     * @param {number} pos
     * @returns {Tween}
     * @memberof Tween
     */
    setPosition( pos ) {
        this.positionOld = this._position;
        this.ratioOld = this.ratio;
        this.calculatedPositionOld = this.calculatedPosition;
        const maxPosition = this.repeatCount * this.duration;
        const isEnd = pos >= maxPosition && this.repeatCount > 0;

        if ( isEnd ) {
            if ( this.calculatedPositionOld == maxPosition ) {
                return;
            }

            this._position = maxPosition;
            this.calculatedPosition = ( this.reflect && ( this.repeatCount % 2 == 0 ) ) && 0 || this.duration;
        } else {
            this._position = pos;
            this.calculatedPosition = ( this._position < 0 ) ? 0 : ( this._position % this.duration );

            if ( this.reflect && Math.floor( this.getPosition() / this.duration ) % 2 != 0 ) {
                this.calculatedPosition = this.duration - this.calculatedPosition;
            }
        }

        this.ratio = ( this.duration == 0 && this._position >= 0 ) ? 1 : this.ease( this.calculatedPosition / this.duration, 0, 1, 1 );

        if ( this.target && ( this._position >= 0 || this.positionOld >= 0 ) && this.calculatedPosition != this.calculatedPositionOld ) {
            if ( !this._inited ) {
                this.init();
            }

            for ( const n in this._endValues ) {
                let initVal, rangeVal, val;

                if ( n == "color" ) {
                    // 컬러는 쪼개서 트윈해야한다
                    initVal = this._initValues[n];
                    rangeVal = this._rangeValues[n];
                    const val1  = initVal[0] + rangeVal[0] * this.ratio;
                    const val2  = initVal[1] + rangeVal[1] * this.ratio;
                    const val3  = initVal[2] + rangeVal[2] * this.ratio;

                    this.target.setColorMultiplier( val1, val2, val3 );
                } else {
                    initVal = this._initValues[n];
                    rangeVal = this._rangeValues[n];
                    val = initVal + rangeVal * this.ratio;
                    console.assert( this.target[n] != null );
                    this.target[n] = val;
                }
            }
        }

        if ( this.dispatchEvents ) {
            this.dispatchEvent( "change" );
        }

        if ( isEnd ) {
            this._isEnd = true;
            this.setPaused( true );

            if ( this.nextTween ) {
                this.nextTween.setPaused( false );
            }

            if ( this.dispatchEvents ) {
                this.dispatchEvent( "complete" );
            }
        }

        return this;
    }


    /*
		* The length of the delay in frames || seconds (depending on .useFrames).
		* The delay occurs before a tween reads initial values || starts playing.
	*/
    /**
     *
     *
     * @returns {number}
     * @memberof Tween
     */
    getDelay() {
        return this._delay;
    }

    /**
     *
     *
     * @param {number} value
     * @returns {Tween}
     * @memberof Tween
     */
    setDelay( value ) {
        if ( this._position <= 0 ) {
            this._position = -value;
        }

        this._delay = value;

        return this;
    }


    /*
		* Sets the numeric end value for a property on the target object that you would like to tween.
		* For example, if you wanted to tween to a new x position, you could use: myTween.setValue("x",400).
		*
		* name: The name of the property to tween.
		* value: The numeric end value (the value to tween to).
	*/
    /**
     *
     *
     * @param {string} name
     * @param {*} value
     * @returns {Tween}
     * @memberof Tween
     */
    setValue( name, value ) {
        this._endValues[name] = value;
        this.invalidate();

        return this;
    }

    /*
		* Returns the end value for the specified property if one exists.
		*
		* name: The name of the property to return a } value for.
	*/
    getValue( name ) {
        return this._endValues[name];
    }

    /*
		* Removes a end value from the tween. This prevents the Tween instance from tweening the property.
		*
		* name: The name of the end property to delete.
	*/
    deleteValue( name ) {
        this._rangeValues[name] = null;
        this._initValues[name] = null;
        const result = this._endValues[name] != null;

        this._endValues[name] = null;

        return result;
    }


    /*
		* Shorthand method for making multiple setProperty calls quickly.
		* This adds the specified properties to the values list.
		* 
		* Example: set x and y end values:
		* myTween.setEndValues({x:200, y:400});
		*
		* properties: An object containing end property values.
	*/
    /**
     *
     *
     * @param {object} values
     * @returns {Tween}
     * @memberof Tween
     */
    setValues( values ) {
        Object.assign( this._endValues, values );
        this.invalidate();

        return this;
    }

    /*
		* Similar to .setEndValues(), but clears all previous end values;
		* before setting the new ones.
		*
		* properties: An object containing end property values.
	*/
    /**
     *
     *
     * @param {*} values
     * @returns {Tween}
     * @memberof Tween
     */
    resetValues( values ) {
        this._endValues = {};
        this.setValues( values );

        return this;
    }

    /*
		* Returns the table of all end properties && their values. This is a copy of values, so modifying;
		* the returned object will not affect the tween.
	*/
    /**
     *
     *
     * @returns {object}
     * @memberof Tween
     */
    getValues() {
        return Object.assign( {}, this._endValues );
    }

    /*
		* Returns the initial value for the specified property.
		* Note that the value will not be available until the tween inits.
	*/
    /**
     *
     *
     * @param {string} name
     * @returns {*}
     * @memberof Tween
     */
    getInitValue( name ) {
        return this._initValues[name];
    }

    /*
		* Swaps the init && } values for the tween, effectively reversing it.
		* This should generally only be called before the tween starts playing.
		* This will force the tween to init if it hasn't already done so, which;
		* may result in an onInit call.
		* It will also force a render (so the target immediately jumps to the new values;
		* immediately) which will result in the onChange callback being called.
		* 
		* You can also use the special "swapValues" property on the props parameter of;
		* the Tween constructor to call :swapValues() after the values are set.
		* 
		* The following example would tween the target from 100,100 to its current position:
		* new Tween(ball, 2, {x=100, y=100}, {swapValues=true});
	*/
    swapValues() {
        if ( !this._inited ) {
            this.init();
        }

        const o = this._endValues;

        this._endValues = this._initValues;
        this._initValues = o;

        for ( const n in this._rangeValues ) {
            const v = this._rangeValues[n];

            this._rangeValues[n] = -v;
        }

        this.calculatedPosition = null;

        if ( this._position < 0 ) {
            const pos = this.positionOld;

            this.setPosition( 0 );
            this._position = this.positionOld;
            this.positionOld = pos;
        } else {
            this.setPosition( this._position );
        }
    }

    /*
		* Reads all of the initial values from target && calls the onInit callback.
		* This is called automatically when a tween becomes active (finishes delaying);
		* && when :swapValues() is called. It would rarely be used directly;
		* but is exposed for possible use by power users.
	*/
    init() {
        this._inited = true;
        this._initValues = {};
        this._rangeValues = {};

        for ( const key in this._endValues ) {
            if ( key == "color" ) {
                // hex로 들어온 값을 r, g, b 값으로 나눠서 저장한다
                this._initValues[key] = hexToRgb( this.target.colorMultiplier );
                let value;

                value = hexToRgb( this._endValues[key] );
                this._rangeValues[key] = [
                    value[0] - parseFloat( this._initValues[key][0] ),
                    value[1] - parseFloat( this._initValues[key][1] ),
                    value[2] - parseFloat( this._initValues[key][2] )
                ];
            } else {
                //나머지 원본으로
                console.assert( this.target[key] != null, `트윈으로 조작하려는 값이 null이다.` );
                this._initValues[key] = this.target[key];
                this._rangeValues[key] = this._endValues[key] - this._initValues[key];
            }
        }

        if ( this.dispatchEvents ) {
            this.dispatchEvent( "init" );
        }
    }

    /*
		* Jumps the tween to its beginning && pauses it. This is the same as calling .setPosition(0) and .setPaused(true).
	*/
    toStart() {
        this.setPosition( 0 );
        //this.setPaused(true);
    }

    cancel() {
        this.setPosition( 0 );
        this.stop();
    }

    /*
		* Jumps the tween to its end and pauses it. This is roughly the same as calling .setPosition(repeatCount*duration).
	*/
    toEnd() {
        this.setPosition( ( this.repeatCount > 0 ) && this.repeatCount * this.duration || this.duration );
    }

    invalidate() {
        this._inited = false;

        if ( this._position > 0 ) {
            this._position = 0;
        }

        if ( this.autoPlay ) {
            this.setPaused( false );
        }
    }


    /**
     *
     *
     * @returns {Tween}
     * @memberof Tween
     */
    onCompleteRemoveFromParent() {
        this.addEventListener( "complete",
                               () => {
                                   this.target.removeFromParent();
                                   this.target = null;
                               },this );

        return this;
    }

    /**
     *
     *
     * @param {function} func
     * @param {any=} data
     * @returns {Tween}
     * @memberof Tween
     */
    onComplete( func,data ) {
        this.addEventListener( "complete",func,data );

        return this;
    }

    /**
     *
     *
     * @param {function} func
     * @param {any=} data
     * @returns {Tween}
     * @memberof Tween
     */
    onChange( func,data ) {
        this.addEventListener( "change",func,data );

        return this;
    }

    /**
     *
     *
     * @param {Tween} tween
     * @returns {Tween}
     * @memberof Tween
     */
    setNextTween( tween ) {
        this.nextTween = tween;

        return this;
    }

    /**
     *
     *
     * @param {number} duration
     * @param {object} values
     * @param {string|function|Prop=} props
     * @returns {Tween}
     * @memberof Tween
     */
    tween( duration, values, props ) {
        const newTween = new Tween( this.target, duration, values, props );

        if ( !this.isEnd() ) {
            newTween.setPaused( true );
            this.setNextTween( newTween );
        }

        return newTween;
    }

    /**
     *
     *
     * @param {number} x
     * @param {number} y
     * @param {number} [duration = 0]
     * @param {string|function|Prop=} props
     * @returns {Tween}
     * @memberof Tween
     */
    move( x, y, duration = 0, props ) {
        const newTween = new Tween( this.target, duration, { x: x, y: y }, props );

        if ( !this.isEnd() ) {
            newTween.setPaused( true );
            this.setNextTween( newTween );
        }

        return newTween;
    }

    /**
     *
     *
     * @param {number} [duration=0]
     * @param {function=} func
     * @param {object=} context
     * @returns {Tween}
     * @memberof Tween
     */
    wait( duration = 0, func, context ) {
        const newTween = new Tween( this.target, duration );

        if ( func ) {
            this.onComplete( func, context );
        }

        if ( !this.isEnd() ) {
            newTween.setPaused( true );
            this.setNextTween( newTween );
        }

        return newTween;
    }

    stopTweenChain() {
        Tween.stopTarget( this.target );
    }


    static linearEase( a, b, c, d ) {
        return a;
    }

    static onTick() {
        if ( Tween.pauseAll ) {
            return;
        }

        const dt = 1 / 60 * Tween.timeScaleAll * 1000;

        for ( const [tween] of Tween.activeTweenList ) {
            copyTickList.push( tween );
        }

        for ( let i = 0; i < copyTickList.length; i++ ) {
            const tween = copyTickList[i];

            tween.setPosition( tween._position + ( tween.useFrames && Tween.timeScaleAll || dt ) * tween.timeScale );
        }

        if ( copyTickList.length == 0 ) {
            _Application__WEBPACK_IMPORTED_MODULE_5__.application.stage.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, Tween.onTick );
            Tween.active = null;
        }

        copyTickList.length = 0;
    }

    // 타겟에 걸린 트윈 모두 정지
    static stopTarget( target ) {
        for ( const [tween] of Tween.activeTweenList ) {
            if ( tween.target == target ) {
                tween.stop();
            }
        }
    }

    /*
	* Constructs a new Tween instance.
	*
	* target: The object whose properties will be tweened.
	* duration: The length of the tween in frames || seconds depending on the timingMode.
	* values: An object containing } property values. For example, to tween to x=100, y=100, you could pass {x=100, y=100} as the values object.
	* props: An object containing properties to set on this tween. For example, you could pass {ease=myEase} to set the ease property of the new instance. It also supports a single special property "swapValues" that will cause :swapValues() to be called after the values specified in the values parameter are set.
    */
}

/*

트윈을 연결해서 애니메이션을 만들 수 있도록 하기 위해서 작성
Sprite 파일에 함수를 정의하면 상호참조 때문에 안됨
spr.move(10,10,100).move(100,50,200)...

*/

_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.tween = function ( duration, values, props ) {
    return new Tween( this, duration, values, props );
};

_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.move = function ( x, y, duration = 0, props ) {
    return new Tween( this, duration, { x: x, y: y }, props );
};

_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.wait = function ( duration = 0, func, context ) {
    return new Tween( this, duration ).onComplete( func,context );
};

_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.getTweens = function ( playingOnly ) {
    const tweens = [];

    for ( const [tween] of Tween.activeTweenList ) {
        if ( tween.target == this ) {
            if ( !playingOnly || tween.paused ) {
                tweens.push( tween );
            }
        }
    }

    return tweens.length > 0 ? tweens : null;
};

_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.stopAllTweens = function () {
    Tween.stopTarget( this );
};

Tween.active = false;
Tween.defaultDispatchEvents = true;
Tween.defaultEase = Tween.linearEase;
Tween.pauseAll = false;
Tween.timeScaleAll = 1;
Tween.activeTweenList = new Map();




/***/ }),

/***/ "./engine/src/Types.js":
/*!*****************************!*\
  !*** ./engine/src/Types.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Rect": () => (/* binding */ Rect),
/* harmony export */   "Point": () => (/* binding */ Point),
/* harmony export */   "TypedArrayHelper": () => (/* binding */ TypedArrayHelper)
/* harmony export */ });

function getRectLike( r ) {
    if ( Array.isArray( r ) || r instanceof Float32Array ) {
        return { x: r[0],y: r[1], width: r[2],height: r[3] };
    } else {
        return r;
    }
}

function getPointLike( p ) {
    if ( Array.isArray( p ) || p instanceof Float32Array ) {
        return { x: p[0],y: p[1] };
    } else {
        return p;
    }
}


class Rect {
    /**
     * Creates an instance of Rect.
     * @param {[number,number,number,number]|Float32Array|number|Rect=} x
     * @param {number=} y
     * @param {number=} width
     * @param {number=} height
     * @memberof Rect
     */
    constructor( x,y,width,height ) {
        if ( Array.isArray( x ) || x instanceof Float32Array ) {
            this.x  = x[0];
            this.y = x[1];
            this.width = x[2];
            this.height = x[3];
        } else if ( typeof x === "object" ) {
            this.x = x.x;
            this.y = x.y;
            this.width = x.width;
            this.height = x.height;
        } else {
            this.x = x || 0;
            this.y = y || 0;
            this.width = width || 0;
            this.height = height || 0;
        }
    }

    /**
     *
     *
     * @returns {Rect}
     * @memberof Rect
     */
    clone() {
        return new Rect( this );    
    }


    getCornerPoints() {
        const { x,y,width,height } = this;

        return [x,y,x + width,y,x,y + height,x + width,y + height];
    }

    getArray() {
        return [this.x,this.y,this.width,this.height];
    }

    extendPoint( x,y ) {
        if ( this.x == null ) {
            this.x = x;
            this.y = y;
            this.width = 0;
            this.height = 0;
        } else {
            if ( x < this.x ) {
                this.width += this.x - x;
                this.x = x;
            }
            if ( y < this.y ) {
                this.height += this.y - y;
                this.y = y;
            }
            this.width = Math.max( this.right,x ) - this.x;
            this.height = Math.max( this.bottom,y ) - this.y;
        }
    }

    extendRect( r ) {
        this.extendPoint( r.x,r.y );
        this.extendPoint( r.right,r.y );
        this.extendPoint( r.x,r.bottom );
        this.extendPoint( r.right,r.bottom );
    }

    get xywh() {
        return [this.x,this.y,this.width,this.height];
    }

    set xywh( r ) {
        const r2 = getRectLike( r );

        this.x = r2.x;
        this.y = r2.y;
        this.width = r2.width;
        this.height = r2.height;
    }

    get left() { return this.x; }

    get right() { return this.x + this.width; }

    get top() { return this.y; }

    get bottom() { return this.y + this.height; }

    contains( x,y ) {
        return ( x >= this.left && x < this.right && y >= this.top && y < this.bottom );
    }
}


class Point {
    /**
     * Creates an instance of Point.
     * @param {[number,number]|Float32Array|number|Point=} x
     * @param {number=} y
     * @memberof Point
     */
    constructor( x,y ) {
        if ( Array.isArray( x ) || x instanceof Float32Array ) {
            this.x = x[0];
            this.y = x[1];
        } else if ( typeof x === "object" ) {
            this.x = x.x;
            this.y = x.y;
        } else {
            this.x = x || 0;
            this.y = y || 0;
        }
    }

    /**
     *
     *
     * @returns {Point}
     * @memberof Point
     */
    clone() {
        return new Point( this );    
    }

    getArray() {
        return [this.x,this.y];
    }

    get xy() {
        return [this.x,this.y];
    }

    set xy( p ) {
        const p2 = getPointLike( p );

        this.x = p2.x;
        this.y = p2.y;
    }

    /**
     * Point를 더한다.
     *
     * @param {Point|number} p
     * @returns {Point}
     * @memberof Point
     */
    add( p ) {
        const p2 = getPointLike( p );

        this.x += p2.x;
        this.y += p2.y;
        return new Point( this );
    }

    /**
     * Point를 뺀다.
     *
     * @param {Point|number} p
     * @returns {Point}
     * @memberof Point
     */
    subtract( p ) {
        const p2 = getPointLike( p );

        this.x -= p2.x;
        this.y -= p2.y;
        return new Point( this );
    }

    /**
     *
     *
     * @param {Point|number} p
     * @returns {Point}
     * @memberof Point
     */
    mul( p ) {
        const p2 = getPointLike( p );

        this.x *= p2.x;
        this.y *= p2.y;
        return new Point( this );
    }
}


class TypedArrayHelper {
    /**
     *
     *
     * @static
     * @param {Uint8Array} uint8Arr
     * @param {number} begin
     * @param {number=} length
     * @returns {Float32Array} 
     * @memberof TypedArrayHelper
     */
    static Uint8ToFloat32( uint8Arr,begin = 0,length = null ) {
        return new Float32Array( uint8Arr.buffer,uint8Arr.byteOffset + begin,( length != null ) ? Math.ceil( length / 4 ) : null );
    }

    /**
     *
     *
     * @static
     * @param {Uint16Array} uint16Arr
     * @param {number} begin
     * @param {number=} length
     * @returns {Float32Array} 
     * @memberof TypedArrayHelper
     */
    static Uint16ToFloat32( uint16Arr,begin = 0,length = null ) {
        return new Float32Array( uint16Arr.buffer,uint16Arr.byteOffset + begin * 2,length != null ? Math.ceil( length / 2 ) : null );
    }

    /**
     *
     *
     * @static
     * @param {Float32Array} float32Arr
     * @param {number} begin
     * @param {number=} length
     * @returns {Uint8Array} 
     * @memberof TypedArrayHelper
     */
    static Float32ToUint8( float32Arr,begin = 0,length = null ) {
        return new Uint8Array( float32Arr.buffer,float32Arr.byteOffset + begin * 4,length != null ? length * 4 : null );
    }

    /**
     *
     *
     * @static
     * @param {Float32Array} float32Arr
     * @param {number} begin
     * @param {number=} length
     * @returns {Uint16Array} 
     * @memberof TypedArrayHelper
     */
    static Float32ToUint16( float32Arr,begin = 0,length = null ) {
        return new Uint16Array( float32Arr.buffer,float32Arr.byteOffset + begin * 4,length != null ? length * 2 : null );
    }

    /**
     *
     *
     * @static
     * @param {Float32Array|Uint16Array|Uint8Array} typedArr
     * @param {number} begin
     * @param {number=} length
     * @returns {*} 
     * @memberof TypedArrayHelper
     */
    static subarray( typedArr,begin = 0,length = null ) {        
        return typedArr.subarray( begin, length != null ? begin + length : null );
    }

    /**
     *
     *
     * @static
     * @param {Float32Array|Uint16Array|Uint8Array} typedArr
     * @param {number} newSize
     * @returns {Float32Array|Uint16Array|Uint8Array}
     * @memberof TypedArrayHelper
     */
    static resize( typedArr, newSize ) {
        //@ts-ignore
        const newArr = new ( typedArr.constructor )( newSize );

        newArr.set( typedArr,0,Math.min( newSize,typedArr.length ) );
        return newArr;
    }

    static memcpy( dst,dstOffset,src,srcOffset,srcLength ) {
        // webpack polyfill 을 사용하는 코드
        // const elementSize = dst.constructor.BYTES_PER_ELEMENT;

        // dstOffset = dst.byteOffset + dstOffset * elementSize;
        // srcOffset = src.byteOffset + srcOffset * elementSize;
        // srcLength *= elementSize;

        // Buffer.from( src.buffer, srcOffset,srcLength ).copy( Buffer.from( dst.buffer, dstOffset, srcLength ) );

        if ( srcLength < 100 ) {
            const dst2 = dst.subarray( dstOffset );
            const src2 = src.subarray( srcOffset );

            for ( let i = 0; i < srcLength; i++ ) {
                dst2[i] = src2[i];
            }
        } else {
            const byteLength = srcLength * src.BYTES_PER_ELEMENT;
            const u8dst = new Uint8Array( dst.buffer,dst.byteOffset + dstOffset * dst.BYTES_PER_ELEMENT );
            const u8src = new Uint8Array( src.buffer,src.byteOffset + srcOffset * src.BYTES_PER_ELEMENT,byteLength );

            u8dst.set( u8src );
        }
    }    
}


/***/ }),

/***/ "./engine/src/Utils.js":
/*!*****************************!*\
  !*** ./engine/src/Utils.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Utils": () => (/* binding */ Utils)
/* harmony export */ });



class AsyncValue {
    constructor() {
        this.value = undefined;
        this.promise = new Promise( ( resolve,reject ) => {
            this._resolve = resolve;
            this._reject = reject;
        } );
    }

    resolve( v ) {
        this.value = v;
        this._resolve( v );
        delete this.promise;
        delete this._resolve;
        delete this._reject;
    }

    reject( e ) {
        this._reject( e );
        delete this.promise;
        delete this._resolve;
        delete this._reject;
    }
}

const Utils = {

    AsyncValue,
    /**
     * Ctrl-shift-H
     * Alt-R 상태로 다음 조건 변환하여 일괄 삭제할 수 있다
     * Utils\.nullReplace\(([^,]+)\s*,\s*([^)]+)\)
     * $1 != null ? $1 : $2
     * 
     * @param {*} target
     * @param {*} value
     * @returns {*}
     * @memberof Utils
     */
    nullReplace( target, value ) {
        return target != null ? target : value;
    },

    /**
     *
     *
     * @param {number=} a
     * @param {number=} b
     * @returns {number}
     * @memberof Utils
     */
    random( a, b ) {
        console.assert( ( a == null && b == null ) || ( a != null && b != null ), `random(${a},${b}) 구문은 허용되지 않음. random(1,a) 혹은 random(0,a)를 명확히 쓸 것` );

        if ( b == null ) {
            // [1,i]
            return Math.floor( Math.random() * a + 1 );
        } else if ( a == null ) {
            return Math.random();
        } else {
            // [i,j]
            return Math.floor( Math.random() * ( b - a + 1 ) + a );
        }
    },

    /**
     *
     *
     * @param {number|string} a
     * @param {number} b
     * @returns {number}
     * @memberof Utils
     */
    precision( a, b ) {
        //@ts-ignore
        return parseFloat( a ).toPrecision( b );
    },

    /**
     *
     *
     * @param {number} a
     * @param {number} b
     * @returns {number}
     * @memberof Utils
     */
    idiv( a, b ) {
        // 음수에 대해서 바르게 처리함
        return a / b >> 0;
    },

    /**
     *
     *
     * @param {number} v0
     * @param {number} v1
     * @param {number} a
     * @returns {number}
     * @memberof Utils
     */
    lerp( v0, v1, a ) {
        return v0 + ( v1 - v0 ) * a;
    },

    /**
     *
     *
     * @param {number} v
     * @param {number} min
     * @param {number} max
     * @returns {number}
     * @memberof Utils
     */
    clamp( v, min, max ) {
        return Math.min( Math.max( v, min ), max );
    },

    /**
     *
     *
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @returns {number}
     * @memberof Utils
     */
    distance( x1, y1, x2, y2 ) {
        return Math.sqrt( ( x2 - x1 ) * ( x2 - x1 ) + ( y2 - y1 ) * ( y2 - y1 ) );
    },

    /**
     *
     *
     * @param {number} a
     * @returns {number}
     * @memberof Utils
     */
    frac( a ) {
        return a % 1;
    },

    legacy( msg = "" ) {
        // console.log( `♨ Legacy API ${msg}` );
    },

    notImplements( msg = "" ) {
        // console.log( `♨ Not Implemented. ${msg}` );
    },

    /**
     *
     *
     * @param {string} filename
     * @returns {string}
     * @memberof Utils
     */
    getEmbeddedFile( filename ) {
        console.assert( self._embeddedFiles[filename.toLowerCase()] != null );

        return self._embeddedFiles[filename];
    },

    /**
     *
     *
     * @param {string} filename
     * @returns {Uint8Array}
     * @memberof Utils
     */
    getEmbeddedBinaryFile( filename ) {
        console.assert( self._embeddedFiles[filename.toLowerCase()] != null );
        const base64Data = self._embeddedFiles[filename.toLowerCase()];
        const lookupTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        const arr = [];

        for ( let i = 0; i < base64Data.length; ) {
            const d = lookupTable.indexOf( base64Data.charAt( i++ ) );
            const e = lookupTable.indexOf( base64Data.charAt( i++ ) );
            const f = lookupTable.indexOf( base64Data.charAt( i++ ) );
            const g = lookupTable.indexOf( base64Data.charAt( i++ ) );
            const a = ( d << 2 ) | ( e >> 4 );
            const b = ( ( e & 15 ) << 4 ) | ( f >> 2 );
            const c = ( ( f & 3 ) << 6 ) | g;

            arr.push( a );
            if ( f != 64 ) arr.push( b );
            if ( g != 64 ) arr.push( c );
        }
        return new Uint8Array( arr );
    },

    embeddedFileExist( filename ) {
        return self._embeddedFiles[filename] != null;
    },

    /**
     *
     *
     * @param {string} filename
     * @returns {XMLDocument}
     * @memberof Utils
     */
    getEmbeddedXmlFile( filename ) {
        // @ts-ignore
        const xml = ( new window.DOMParser() ).parseFromString( Utils.getEmbeddedFile( filename ), "text/xml" );

        return xml;
    },

    /**
     * @typedef {object} Size
     * @property {number} width
     * @property {number} height
     *
     * @param {string} filename
     * @returns {Size}
     * @memberof Utils
     */
    getImageSize( filename ) {
        const imageInfo = self._imageSizes[filename.toLowerCase()];

        if ( imageInfo ) {
            return imageInfo;
        } else {
            return { width: 0,height: 0 };
        }
    },

    /**
     * 문자열에서 <tag> </tag> 형태를 추출한다
     *
     * @static
     * @param {string} str
     * @returns {*}
     * @memberof TextField
     */
    splitStringWithTag( str ) {
        const tagRegExp = /<([^>]+)>/g;
        const tagStack = ["default"];
        const resultArr = [];

        let lastIndex = 0;

        while ( true ) {
            const result = tagRegExp.exec( str );
            const lastTag = tagStack[tagStack.length - 1]; 

            if ( result == null ) {
                // 태그 못찾음
                if ( lastIndex < str.length ) {
                    resultArr.push( [lastTag,str.substring( lastIndex )] );
                }
                return resultArr;
            } else {
                const tagName = result[1];
                const tagIndex = result.index;

                if ( tagName[0] != '/' ) {
                    tagStack.push( tagName );
                } else if ( lastTag == tagName.substring( 1 ) ) {
                    tagStack.length--;
                } 
                if ( lastIndex != tagIndex ) {
                    resultArr.push( [lastTag,str.substring( lastIndex,tagIndex )] );
                }
                lastIndex = tagRegExp.lastIndex;
            }
        }
    },



    /**
     * [r,g,b,a] 가 담긴 어레이를 반환한다. r,g,b는 0~1.0의 값이다.
     *
     * @param {number} c
     * @param {number=} a
     * @returns {[number,number,number,number]}
     * @memberof Utils
     */
    hex2rgba( c,a ) {
        const result = [];

        // b,g,r,a 순서
        result[0] = ( ( c & 0xff0000 ) >> 16 ) / 255;
        result[1] = ( ( c & 0xff00 ) >> 8 ) / 255;
        result[2] = ( c & 0xff ) / 255;
        if ( a != null ) {
            result[3] = a;
        } else {
            result[3] = ( ( c & 0xff000000 ) >> 24 ) / 255;
        }
        //@ts-ignore
        return result;
    },

    rgba2hex( arr, i ) {
        const idx = i || 0;

        return ( ( arr[idx] * 255 ) << 16 ) | ( ( arr[idx + 1] * 255 ) << 8 ) | ( arr[idx + 2] * 255 ) | ( ( arr[idx + 3] * 255 ) << 24 );
    },


    /**
     *
     *
     * @param {number} angle
     * @returns {number}
     * @memberof Utils
     */
    angleToDir( angle ) {
        let dir;

        if ( -135 < angle && angle <= -45 ) {
            dir = 1;
        } else if ( -45 < angle && angle <= 45 ) {
            dir = 2;
        } else if ( 45 < angle && angle <= 135 ) {
            dir = 3;
        } else {
            dir = 4;
        }

        return dir;
    },

    /**
     *
     *
     * @param {number} dir
     * @returns {[number,number]}
     * @memberof Utils
     */
    dirToOffset( dir ) {
        let ax, ay;

        if ( dir == 1 ) {
            [ax, ay] = [0, -1];
        } else if ( dir == 2 ) {
            [ax, ay] = [1, 0];
        } else if ( dir == 3 ) {
            [ax, ay] = [0, 1];
        } else if ( dir == 4 ) {
            [ax, ay] = [-1, 0];
        }

        return [ax, ay];
    },



    filterAttrib( attrib, whiteList, blackList ) {
        // 성공하면 true
        const whiteListStr = whiteList != null ? ( Array.isArray( whiteList ) ? "," + whiteList.join( "," ) + "," : "," + whiteList + "," ) : ",*,";
        const blackListStr = blackList != null ? ( Array.isArray( blackList ) ? "," + blackList.join( "," ) + "," : "," + blackList + "," ) : "";
        const attribs = attrib != null ? ( Array.isArray( attrib ) ? attrib : attrib.split( "," ) ) : [];


        let whitePass;

        if ( blackListStr.indexOf( ",*," ) >= 0 ) {
            // black이 * 면 그냥 실패
            return false;
        } else if ( whiteListStr.indexOf( ",*," ) >= 0 ) {
            //white가 * 면 그냥 통과
            whitePass = true;
        } else if ( attribs.length > 0 ) {
            for ( const v of attribs ) {
                if ( whiteListStr.indexOf( "," + v + "," ) >= 0 ) {
                    //화이트에서 하나라도 있으면 통과
                    whitePass = true;
                    break;
                }
            }
        } else {
            //어트리뷰트가 하나도 주어지지 않았을 경우 실패
            return false;
        }

        if ( whitePass ) {
            for ( const v of attribs ) {
                if ( blackListStr.indexOf( "," + v + "," ) >= 0 ) {
                    //블랙에서 하나라도 있으면 최종 실패
                    return false;
                }
            }

            return true;
        }

        return false;
    },


    format( text, ...args ) {
        let s;

        if ( args.length > 0 ) {
            // %s %d
            // %0 %1 %2 %3 %4...
            let count = 0;

            s = text.replace( /%[s|d]/g, function ( s ) {
                return `%${count++}`;
            } );

            for ( let i = 0; i < args.length; i++ ) {
                s = s.replace( `%${i}`, args[i] );
            }
        } else s = text;

        return s;
    },

    isNode() {
        return ( typeof {"env": {}} == "object" && typeof {"env": {}}.versions == "object" && typeof {"env": {}}.versions.node != "undefined" );
    },

    isWebWorker() {
        //@ts-ignore
        return !this.isNode() 
            && ( typeof WorkerGlobalScope !== "undefined" ) 
            && ( typeof importScripts === "function" ) 
            // eslint-disable-next-line no-undef
            && ( navigator instanceof WorkerNavigator );
    },

    clearObject( obj ) {
        const props = Object.keys( obj );

        for ( let i = 0,n = props.length; i < n; i++ ) {
            delete obj[props[i]];
        }
    }

};


/***/ }),

/***/ "./engine/src/easing.js":
/*!******************************!*\
  !*** ./engine/src/easing.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "easing": () => (/* binding */ easing)
/* harmony export */ });
/*
Easing functions adapted from Robert Penner's AS3 tweening equations.
*/

const easing = {};

const backS = 1.70158;

easing.inBack = function ( t ) {
    return t * t * ( ( backS + 1 ) * t - backS );
};

easing.outBack = function ( t ) {
    t = t - 1;

    return t * t * ( ( backS + 1 ) * t + backS ) + 1;
};

easing.inOutBack = function ( t ) {
    t = t * 2;

    if ( t < 1 ) return 0.5 * ( t * t * ( ( backS * 1.525 + 1 ) * t - backS * 1.525 ) );
    else {
        t = t - 2;

        return 0.5 * ( t * t * ( ( backS * 1.525 + 1 ) * t + backS * 1.525 ) + 2 );
    }
};

easing.inBounce = function ( t ) {
    return 1 - easing.outBounce( 1 - t );
};

easing.outBounce = function ( t ) {
    if ( t < 1 / 2.75 ) {
        return 7.5625 * t * t;
    } else if ( t < 2 / 2.75 ) {
        t = t - 1.5 / 2.75;

        return 7.5625 * t * t + 0.75;
    } else if ( t < 2.5 / 2.75 ) {
        t = t - 2.25 / 2.75;

        return 7.5625 * t * t + 0.9375;
    } else {
        t = t - 2.625 / 2.75;

        return 7.5625 * t * t + 0.984375;
    }
};

easing.inOutBounce = function ( t ) {
    t = t * 2;
    if ( t < 1 ) return 0.5 * easing.inBounce( t );
    else return 0.5 * easing.outBounce( t - 1 ) + 0.5;
};

easing.inCircular = function ( t ) {
    return -( Math.sqrt( 1 - t * t ) - 1 );
};

easing.outCircular = function ( t ) {
    return Math.sqrt( 1 - ( t - 1 ) * ( t - 1 ) );
};

easing.inOutCircular = function ( t ) {
    t = t * 2;

    if ( t < 1 ) return -0.5 * ( Math.sqrt( 1 - t * t ) - 1 );
    else {
        t = t - 2;

        return 0.5 * ( Math.sqrt( 1 - t * t ) + 1 );
    }
};

easing.inCubic = function ( t ) {
    return t * t * t;
};

easing.outCubic = function ( t ) {
    t = t - 1;

    return t * t * t + 1;
};

easing.inOutCubic = function ( t ) {
    if ( t < 0.5 ) return 4 * t * t * t;
    else {
        t = t - 1;

        return 4 * t * t * t + 1;
    }
};

var elasticA = 1;
var elasticP = 0.3;
var elasticS = elasticP / 4;

easing.inElastic = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    t = t - 1;

    return -( elasticA * Math.pow( 2, 10 * t ) * Math.sin( ( t - elasticS ) * ( 2 * Math.PI ) / elasticP ) );
};

easing.outElastic = function ( t ) {
    if ( t == 0 || t == 1 ) return t;

    return elasticA * Math.pow( 2, -10 * t ) * Math.sin( ( t - elasticS ) * ( 2 * Math.PI ) / elasticP ) + 1;
};

easing.inOutElastic = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    t = t * 2 - 1;
    if ( t < 0 ) return -0.5 * ( elasticA * Math.pow( 2, 10 * t ) * Math.sin( ( t - elasticS * 1.5 ) * ( 2 * Math.PI ) / ( elasticP * 1.5 ) ) );

    return 0.5 * elasticA * Math.pow( 2, -10 * t ) * Math.sin( ( t - elasticS * 1.5 ) * ( 2 * Math.PI ) / ( elasticP * 1.5 ) ) + 1;
};

easing.inExponential = function ( t ) {
    if ( t == 0 ) return 0;

    return Math.pow( 2, 10 * ( t - 1 ) );
};

easing.outExponential = function ( t ) {
    if ( t == 1 ) return 1;

    return 1 - Math.pow( 2, -10 * t );
};

easing.inOutExponential = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    t = t * 2 - 1;
    if ( t < 0 ) return 0.5 * Math.pow( 2, 10 * t );

    return 1 - 0.5 * Math.pow( 2, -10 * t );
};

easing.linear = function ( t ) {
    return t;
};

easing.inQuadratic = function ( t ) {
    return t * t;
};

easing.outQuadratic = function ( t ) {
    return -t * ( t - 2 );
};

easing.inOutQuadratic = function ( t ) {
    if ( t < 0.5 ) return 2 * t * t;

    return -2 * t * ( t - 2 ) - 1;
};

easing.inQuartic = function ( t ) {
    return t * t * t * t;
};

easing.outQuartic = function ( t ) {
    t = t - 1;

    return 1 - t * t * t * t;
};

easing.inOutQuartic = function ( t ) {
    if ( t < 0.5 ) return 8 * t * t * t * t;
    t = t - 1;

    return -8 * t * t * t * t + 1;
};

easing.inQuintic = function ( t ) {
    return t * t * t * t * t;
};

easing.outQuintic = function ( t ) {
    t = t - 1;

    return 1 + t * t * t * t * t;
};

easing.inOutQuintic = function ( t ) {
    if ( t < 0.5 ) return 16 * t * t * t * t * t;
    t = t - 1;

    return 16 * t * t * t * t * t + 1;
};

easing.inSine = function ( t ) {
    return 1 - Math.cos( t * ( Math.PI / 2 ) );
};

easing.outSine = function ( t ) {
    return Math.sin( t * ( Math.PI / 2 ) );
};

easing.inOutSine = function ( t ) {
    return -0.5 * ( Math.cos( t * Math.PI ) - 1 );
};

easing.outElasticSmooth = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    var elasticA = 1, elasticP = 0.38;
    var elasticS = elasticP / 4;

    return elasticA * Math.pow( 2.5, -10 * t ) * Math.sin( ( t - elasticS ) * ( 2 * Math.PI ) / elasticP ) + 1;
};

easing.inElasticSmooth2 = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    t = t - 1;
    var elasticA = 1, elasticP = 0.57;
    var elasticS = elasticP / 4;

    return -( elasticA * Math.pow( 2.6, 10 * t ) * Math.sin( ( t - elasticS ) * ( 2 * Math.PI ) / elasticP ) );
};

easing.outElasticSmooth2 = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    var elasticA = 1, elasticP = 0.57;
    var elasticS = elasticP / 4;

    return elasticA * Math.pow( 2.6, -10 * t ) * Math.sin( ( t - elasticS ) * ( 2 * Math.PI ) / elasticP ) + 1;
};

easing.outElasticWave = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    var elasticP = 0.19;
    var elasticS = elasticP / 4;
    var tPow = Math.pow( t, 4 );
    var v = Math.pow( 220, -0.7 * Math.pow( t, 0.4 ) ) * Math.sin( ( Math.pow( t, 0.95 ) - elasticS ) * ( 2 * Math.PI ) / elasticP ) + 1;

    return v * ( 1 - tPow ) + tPow;
};




/***/ }),

/***/ "./engine/src/flatfast.js":
/*!********************************!*\
  !*** ./engine/src/flatfast.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Application": () => (/* reexport safe */ _Application_js__WEBPACK_IMPORTED_MODULE_0__.Application),
/* harmony export */   "application": () => (/* reexport safe */ _Application_js__WEBPACK_IMPORTED_MODULE_0__.application),
/* harmony export */   "stage": () => (/* reexport safe */ _Application_js__WEBPACK_IMPORTED_MODULE_0__.stage),
/* harmony export */   "Bitmap": () => (/* reexport safe */ _Bitmap_js__WEBPACK_IMPORTED_MODULE_1__.Bitmap),
/* harmony export */   "Component": () => (/* reexport safe */ _Component_js__WEBPACK_IMPORTED_MODULE_2__.Component),
/* harmony export */   "ComponentHolder": () => (/* reexport safe */ _ComponentHolder_js__WEBPACK_IMPORTED_MODULE_3__.ComponentHolder),
/* harmony export */   "Event": () => (/* reexport safe */ _Event_js__WEBPACK_IMPORTED_MODULE_4__.Event),
/* harmony export */   "EventDispatcher": () => (/* reexport safe */ _EventDispatcher_js__WEBPACK_IMPORTED_MODULE_5__.EventDispatcher),
/* harmony export */   "TrueTypeFont": () => (/* reexport safe */ _TrueTypeFont_js__WEBPACK_IMPORTED_MODULE_6__.TrueTypeFont),
/* harmony export */   "BitmapFont": () => (/* reexport safe */ _BitmapFont_js__WEBPACK_IMPORTED_MODULE_7__.BitmapFont),
/* harmony export */   "MsdfFont": () => (/* reexport safe */ _MsdfFont_js__WEBPACK_IMPORTED_MODULE_8__.MsdfFont),
/* harmony export */   "KeyCode": () => (/* reexport safe */ _KeyCode_js__WEBPACK_IMPORTED_MODULE_9__.KeyCode),
/* harmony export */   "Layout": () => (/* reexport safe */ _Layout_js__WEBPACK_IMPORTED_MODULE_10__.Layout),
/* harmony export */   "Matrix": () => (/* reexport safe */ _Matrix_js__WEBPACK_IMPORTED_MODULE_11__.Matrix),
/* harmony export */   "Mesh": () => (/* reexport safe */ _Mesh_js__WEBPACK_IMPORTED_MODULE_12__.Mesh),
/* harmony export */   "MovieClip": () => (/* reexport safe */ _MovieClip_js__WEBPACK_IMPORTED_MODULE_13__.MovieClip),
/* harmony export */   "Particles": () => (/* reexport safe */ _Particles_js__WEBPACK_IMPORTED_MODULE_14__.Particles),
/* harmony export */   "Pixel": () => (/* reexport safe */ _Pixel_js__WEBPACK_IMPORTED_MODULE_15__.Pixel),
/* harmony export */   "RenderTarget": () => (/* reexport safe */ _RenderTarget_js__WEBPACK_IMPORTED_MODULE_16__.RenderTarget),
/* harmony export */   "SceneManager": () => (/* reexport safe */ _SceneManager_js__WEBPACK_IMPORTED_MODULE_17__.SceneManager),
/* harmony export */   "Shader": () => (/* reexport safe */ _Shader_js__WEBPACK_IMPORTED_MODULE_18__.Shader),
/* harmony export */   "Shape": () => (/* reexport safe */ _Shape_js__WEBPACK_IMPORTED_MODULE_19__.Shape),
/* harmony export */   "Sound": () => (/* reexport safe */ _Sound_js__WEBPACK_IMPORTED_MODULE_20__.Sound),
/* harmony export */   "Spine": () => (/* reexport safe */ _Spine_js__WEBPACK_IMPORTED_MODULE_21__.Spine),
/* harmony export */   "Sprite": () => (/* reexport safe */ _Sprite_js__WEBPACK_IMPORTED_MODULE_22__.Sprite),
/* harmony export */   "Stage": () => (/* reexport safe */ _Stage_js__WEBPACK_IMPORTED_MODULE_23__.Stage),
/* harmony export */   "Storage": () => (/* reexport safe */ _Storage_js__WEBPACK_IMPORTED_MODULE_24__.Storage),
/* harmony export */   "TextField": () => (/* reexport safe */ _TextField_js__WEBPACK_IMPORTED_MODULE_25__.TextField),
/* harmony export */   "Texture": () => (/* reexport safe */ _Texture_js__WEBPACK_IMPORTED_MODULE_26__.Texture),
/* harmony export */   "TextureBase": () => (/* reexport safe */ _TextureBase_js__WEBPACK_IMPORTED_MODULE_27__.TextureBase),
/* harmony export */   "TexturePack": () => (/* reexport safe */ _TexturePack_js__WEBPACK_IMPORTED_MODULE_28__.TexturePack),
/* harmony export */   "TileMap": () => (/* reexport safe */ _TileMap_js__WEBPACK_IMPORTED_MODULE_29__.TileMap),
/* harmony export */   "Timer": () => (/* reexport safe */ _Timer_js__WEBPACK_IMPORTED_MODULE_30__.Timer),
/* harmony export */   "Tween": () => (/* reexport safe */ _Tween_js__WEBPACK_IMPORTED_MODULE_31__.Tween),
/* harmony export */   "Utils": () => (/* reexport safe */ _Utils_js__WEBPACK_IMPORTED_MODULE_32__.Utils),
/* harmony export */   "easing": () => (/* reexport safe */ _easing_js__WEBPACK_IMPORTED_MODULE_33__.easing),
/* harmony export */   "hangul": () => (/* reexport safe */ _hangul_js__WEBPACK_IMPORTED_MODULE_34__.hangul),
/* harmony export */   "Point": () => (/* reexport safe */ _Types_js__WEBPACK_IMPORTED_MODULE_35__.Point),
/* harmony export */   "Rect": () => (/* reexport safe */ _Types_js__WEBPACK_IMPORTED_MODULE_35__.Rect),
/* harmony export */   "Serializer": () => (/* reexport safe */ _Serializer_js__WEBPACK_IMPORTED_MODULE_36__.Serializer)
/* harmony export */ });
/* harmony import */ var _Application_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Application.js */ "./engine/src/Application.js");
/* harmony import */ var _Bitmap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Bitmap.js */ "./engine/src/Bitmap.js");
/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Component.js */ "./engine/src/Component.js");
/* harmony import */ var _ComponentHolder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ComponentHolder.js */ "./engine/src/ComponentHolder.js");
/* harmony import */ var _Event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Event.js */ "./engine/src/Event.js");
/* harmony import */ var _EventDispatcher_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./EventDispatcher.js */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _TrueTypeFont_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TrueTypeFont.js */ "./engine/src/TrueTypeFont.js");
/* harmony import */ var _BitmapFont_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./BitmapFont.js */ "./engine/src/BitmapFont.js");
/* harmony import */ var _MsdfFont_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MsdfFont.js */ "./engine/src/MsdfFont.js");
/* harmony import */ var _KeyCode_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./KeyCode.js */ "./engine/src/KeyCode.js");
/* harmony import */ var _Layout_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Layout.js */ "./engine/src/Layout.js");
/* harmony import */ var _Matrix_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Matrix.js */ "./engine/src/Matrix.js");
/* harmony import */ var _Mesh_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Mesh.js */ "./engine/src/Mesh.js");
/* harmony import */ var _MovieClip_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./MovieClip.js */ "./engine/src/MovieClip.js");
/* harmony import */ var _Particles_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Particles.js */ "./engine/src/Particles.js");
/* harmony import */ var _Pixel_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Pixel.js */ "./engine/src/Pixel.js");
/* harmony import */ var _RenderTarget_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./RenderTarget.js */ "./engine/src/RenderTarget.js");
/* harmony import */ var _SceneManager_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./SceneManager.js */ "./engine/src/SceneManager.js");
/* harmony import */ var _Shader_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Shader.js */ "./engine/src/Shader.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Shape.js */ "./engine/src/Shape.js");
/* harmony import */ var _Sound_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Sound.js */ "./engine/src/Sound.js");
/* harmony import */ var _Spine_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./Spine.js */ "./engine/src/Spine.js");
/* harmony import */ var _Sprite_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./Sprite.js */ "./engine/src/Sprite.js");
/* harmony import */ var _Stage_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./Stage.js */ "./engine/src/Stage.js");
/* harmony import */ var _Storage_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./Storage.js */ "./engine/src/Storage.js");
/* harmony import */ var _TextField_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./TextField.js */ "./engine/src/TextField.js");
/* harmony import */ var _Texture_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./Texture.js */ "./engine/src/Texture.js");
/* harmony import */ var _TextureBase_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./TextureBase.js */ "./engine/src/TextureBase.js");
/* harmony import */ var _TexturePack_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./TexturePack.js */ "./engine/src/TexturePack.js");
/* harmony import */ var _TileMap_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./TileMap.js */ "./engine/src/TileMap.js");
/* harmony import */ var _Timer_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./Timer.js */ "./engine/src/Timer.js");
/* harmony import */ var _Tween_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./Tween.js */ "./engine/src/Tween.js");
/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./Utils.js */ "./engine/src/Utils.js");
/* harmony import */ var _easing_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./easing.js */ "./engine/src/easing.js");
/* harmony import */ var _hangul_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./hangul.js */ "./engine/src/hangul.js");
/* harmony import */ var _Types_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./Types.js */ "./engine/src/Types.js");
/* harmony import */ var _Serializer_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./Serializer.js */ "./engine/src/Serializer.js");







































/***/ }),

/***/ "./engine/src/hangul.js":
/*!******************************!*\
  !*** ./engine/src/hangul.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hangul": () => (/* binding */ hangul)
/* harmony export */ });

const choSungTable = ["ㄱ", "ㄲ", "ㄴ", "ㄷ", "ㄸ", "ㄹ", "ㅁ", "ㅂ", "ㅃ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅉ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ"];
const jungSungTable = [
    "ㅏ", "ㅐ", "ㅑ", "ㅒ", "ㅓ", // 0~4;
    "ㅔ", "ㅕ", "ㅖ", "ㅗ", "ㅘ", // 5~9;
    "ㅙ", "ㅚ", "ㅛ", "ㅜ", "ㅝ", // 10~14;
    "ㅞ", "ㅟ", "ㅠ", "ㅡ", "ㅢ", // 15~19;
    "ㅣ"];
const jongSungTable = [" ", "ㄱ", "ㄲ", "ㄳ", "ㄴ", "ㄵ", "ㄶ", "ㄷ", "ㄹ", "ㄺ", "ㄻ", "ㄼ", "ㄽ", "ㄾ", "ㄿ", "ㅀ", "ㅁ", "ㅂ", "ㅄ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ"];

const choSungToCode = {};
const jungSungToCode = {
    ["ㅏㅣ"]:  1,
    ["ㅣㅏ"]:  2,
    ["ㅑㅣ"]:  3,
    ["ㅓㅣ"]:  5,
    ["ㅣㅓ"]:  6,
    ["ㅕㅣ"]:  7,
    ["ㅗㅏ"]:  9,
    ["ㅗㅐ"]:  10,
    ["ㅗㅏㅣ"]: 10,
    ["ㅗㅣ"]:  11,
    ["ㅣㅗ"]:  12,
    ["ㅜㅓ"]:  14,
    ["ㅜㅔ"]:  15,
    ["ㅜㅓㅣ"]: 15,
    ["ㅜㅣ"]:  16,
    ["ㅡㅜ"]:  17,
    ["ㅡㅣ"]:  19,
};
const jongSungToCode = {};

for ( let i = 0; i < choSungTable.length; i++ ) {
    const v = choSungTable[i];

    choSungToCode[v] = i;
}

for ( let i = 0; i < jungSungTable.length; i++ ) {
    const v = jungSungTable[i];

    jungSungToCode[v] = i;
}

for ( let i = 0; i < jongSungTable.length; i++ ) {
    const v = jongSungTable[i];

    jongSungToCode[v] = i;
}

const uniCodeHangulBase = 0xac00;
const uniCodeHangulLast = 0xd79f;

const hangul = {};

function ucharToNumber( uchar ) {
    return uchar.charCodeAt( 0 );
}

const rangeHangul = [ucharToNumber( "가" ), ucharToNumber( "힣" )];

hangul.isValidUnicode = function ( uchar ) {
    //[가-힣] 검사, 
    const num = ucharToNumber( uchar );

    return num >= rangeHangul[0] && num <= rangeHangul[1];
};

const rangeHangulJa = [ucharToNumber( "ㄱ" ), ucharToNumber( "ㅎ" )];
const rangeHangulMo = [ucharToNumber( "ㅏ" ), ucharToNumber( "ㅣ" )];

hangul.isJamo = function ( uchar ) {
    //자모 여부 검사 검사
    const num = ucharToNumber( uchar );

    return ( num >= rangeHangulJa[0] && num <= rangeHangulJa[1] ) ||
		( num >= rangeHangulMo[0] && num <= rangeHangulMo[1] );
};

// 마지막이 종성이 검사
hangul.isJongSung = function ( str ) {
    const char = str.substr( str.length - 1 );
    const code = char.charCodeAt( 0 );

    if ( code < uniCodeHangulBase || code > uniCodeHangulLast ) {
        const choSung = choSungToCode[char];

        if ( choSung ) {
            // 자음은 모두 받침이 있게 발음된다
            return true;
        }

        if ( "bcdfghjklmnpqrstvwxz136780".indexOf( char ) >= 0 ) {
            return true;
        }

        return false;
    }

    // 분해해서 받침이 있는지 본다
    let uc = code - uniCodeHangulBase;

    //const choSung = Math.floor(uc / (21 * 28));
    uc = uc % ( 21 * 28 );
    //const jungSung = Math.floor(uc / 28);
    uc = uc % 28;
    const jongSung = uc;

    return jongSung > 0;
};




// 대한민국{를} 가려면 [비행기]{을} 타라

hangul.replaceJoSa = function ( inputText ) {
    if ( inputText == null || inputText == "" ) return inputText;

    //let words = inputText.match(/\s*([\S]+){([^/}]+)}/g);
    const re = /}?([^}]*){([^/}]*)}/g;
    let result = re.exec( inputText );
    //const words = [];
    let lastIndex = 0;
    let s = "";

    while ( result != null ) {
        lastIndex = re.lastIndex;
        const [pre, joSa, lastChar] = [
            //RegExp.lastMatch,
            RegExp.$1,
            RegExp.$2,
            RegExp.$1.match( /.['"`^()[\]]?$/ )[0].substr( 0, 1 ), // 마지막 글자
        ];
        const isJongSung = hangul.isJongSung( lastChar );
        const jongSung = isJongSung ? hangul.divideJaSo( lastChar )[2] : null;
        let newJoSa;

        if ( joSa == "을" || joSa == "를" ) {
            newJoSa = isJongSung ? "을" : "를";
        } else if ( joSa == "이" || joSa == "가" ) {
            newJoSa = isJongSung ? "이" : "가";
        } else if ( joSa == "과" || joSa == "와" ) {
            newJoSa = isJongSung ? "과" : "와";
        } else if ( joSa == "은" || joSa == "는" ) {
            newJoSa = isJongSung ? "은" : "는";
        } else if ( joSa == "이는" ) {
            newJoSa = isJongSung ? "이는" : "는";
        } else if ( joSa == "이와" ) {
            newJoSa = isJongSung ? "이와" : "와";
        } else if ( joSa == "여" || joSa == "이여" ) {
            newJoSa = isJongSung ? "이여" : "여";
        } else if ( joSa == "으로" || joSa == "로" ) {
            newJoSa = ( isJongSung && jongSung != "ㄹ" ) ? "으로" : "로";
        } else if ( joSa == "이네" || joSa == "네" ) {
            newJoSa = isJongSung ? "이네" : "네";
        } else if ( joSa == "이랑" || joSa == "랑" ) {
            newJoSa = isJongSung ? "이랑" : "랑";
        } else if ( joSa == "라" ) {
            newJoSa = isJongSung ? "이라" : "라";
        }

        s = s + pre + newJoSa;

        result = re.exec( inputText );
    }

    return s + inputText.substr( lastIndex );
};

hangul.format = function ( text, ...args ) {
    let s;

    if ( args.length > 0 ) {
        // %s %d
        // %0 %1 %2 %3 %4...
        let count = 0;

        s = text.replace( /%[s|d]/g, function ( s ) {
            return `%${count++}`;
        } );

        for ( let i = 0; i < args.length; i++ ) {
            s = s.replace( `%${i}`, args[i] );
        }
    } else s = text;

    return hangul.replaceJoSa( s );
};

// 자소를 합친다
hangul.mergeJaSo = function ( choSung, jungSung, jongSung ) {
    //log(choSung,jungSung,jongSung);
    const choSungPos = choSungToCode[choSung];
    const jungSungPos = jungSungToCode[jungSung];
    const jongSungPos = jongSung ? jongSungToCode[jongSung] : 0;
    const code = uniCodeHangulBase + ( choSungPos * 21 + jungSungPos ) * 28 + jongSungPos;

    return String.fromCharCode( code );
};

// 글자하나를 자소로 분리한다
hangul.divideJaSo = function ( char ) {
    const code = char.charCodeAt( 0 );

    if ( code < uniCodeHangulBase || code > uniCodeHangulLast ) {
        const choSung = choSungToCode[char];

        if ( choSung ) {
            return [choSungTable[choSung]];
        }

        const jungSung = jungSungToCode[char];

        if ( jungSung ) {
            return [null, jungSungTable[jungSung]];
        }

        return [];
    }

    let uc = code - uniCodeHangulBase;
    const choSung = Math.floor( uc / ( 21 * 28 ) );

    uc = uc % ( 21 * 28 );
    const jungSung = Math.floor( uc / 28 );

    uc = uc % 28;
    const jongSung = uc;

    return [
        choSungTable[choSung],
        jungSungTable[jungSung],
        ( jongSung > 0 && jongSungTable[jongSung] || null )
    ];
};

// 이 캐릭터가 자소중에 하나인지 검사
hangul.getTypeOfJaSo = function ( char ) {
    let [f1, f2, f3] = [false, false, false];
    const choSung = choSungToCode[char];

    if ( choSung ) {
        f1 = true;
    }

    const jungSung = jungSungToCode[char];

    if ( jungSung ) {
        f2 = true;
    }

    const jongSung = jongSungToCode[char];

    if ( jongSung ) {
        f3 = true;
    }

    return [f1, f2, f3];
};

// console.log(hangul.divideJaSo("한"));
// console.log(hangul.mergeJaSo(...hangul.divideJaSo("글")));
// console.log(hangul.isJamo("한"));
// console.log(hangul.isJamo("ㅏ"));
// console.log(hangul.isJongSung("간"));
// console.log(hangul.isJongSung("가"));
// console.log(hangul.isJongSung("bob"));
// console.log(hangul.replaceJoSa("대한민국{를} 가려면 '비행기'{을} 타라 323{로}"));


/***/ }),

/***/ "./engine/src/lib/a-star.js":
/*!**********************************!*\
  !*** ./engine/src/lib/a-star.js ***!
  \**********************************/
/***/ ((module) => {

// ======================================================================
// Copyright (c) 2012 RapidFire Studio Limited;
// All Rights Reserved. 
// http://www.rapidfirestudio.com;
// Permission is hereby granted, free of charge, to any person obtaining;
// a copy of this software && associated documentation files (the;
// "Software"), to deal in the Software without restriction, including;
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/|| sell copies of the Software, && to;
// permit persons to whom the Software is furnished to do so, subject to;
// the following conditions:

// The above copyright notice && this permission notice shall be;
// included in all copies || substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF;
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY;
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE;
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ======================================================================

//module ( "astar", package.seeall );
//--------------------------------------------------------------
// let variables;
//--------------------------------------------------------------

let INF = Number.POSITIVE_INFINITY;
let cachedPaths = null;
//--------------------------------------------------------------
// let statics;
//--------------------------------------------------------------


class astar {


    static dist( x1, y1, x2, y2 ) {
        return Math.sqrt( Math.pow( x2 - x1, 2 ) + Math.pow( y2 - y1, 2 ) );
    }

    static dist_between ( nodeA, nodeB ) {
        return this.dist( nodeA.x, nodeA.y, nodeB.x, nodeB.y );
    }

    static heuristic_cost_estimate ( nodeA, nodeB ) {
        return this.dist( nodeA.x, nodeA.y, nodeB.x, nodeB.y );
    }

    static is_valid_node ( node, neighbor ) {
        return true;
    }

    static lowest_f_score ( set, f_score ) {
        let [lowest, bestNode] = [INF, null];
        for (let i in set) {
            let node = set[i];
            let score = f_score [ node ];
            if (score < lowest) {
                [lowest, bestNode] = [score, node];
            }
        }
        return bestNode;
    }

    static neighbor_nodes ( theNode, nodes ) {
        let neighbors = [];
        for (let i in nodes) {
            let node = nodes[i];
            if (theNode != node && this.is_valid_node( theNode, node )) {
                neighbors.push(node);
            }
        }
        return neighbors;
    }

    static not_in ( set, theNode ) {
        for (let i in set) {
            let node = set[i];
            if (node == theNode) return false;
        }
        return true;
    }

    static remove_node ( set, theNode ) {
        for (let i in set) {
            let node = set[i];
            if (node == theNode) { 
                set[i] = set[set.length - 1];
                set[set.length - 1] = null;
                break;
            }
        }	
    }

    static unwind_path ( flat_path, map, current_node ) {
        if (map [ current_node ]) {
            flat_path.unshift(map[ current_node ] );
            return this.unwind_path( flat_path, map, map [ current_node ] );
        } else {
            return flat_path;
        }
    }

    //--------------------------------------------------------------
    // pathfinding statics;
    //--------------------------------------------------------------

    static a_star ( start, goal, nodes, valid_node_func ) {
        let closedset = [];
        let openset = [ start ];
        let came_from = [];

        if (valid_node_func) this.is_valid_node = valid_node_func;

        let [g_score, f_score] = [[], []];
        g_score [ start ] = 0;
        f_score[start] = g_score[start] + this.heuristic_cost_estimate( start, goal );
        while (openset.length > 0) {
            let current = this.lowest_f_score( openset, f_score );
            if (current == goal) {
                let path = this.unwind_path( [], came_from, goal );
                path.push(goal);
                return path;
            }

            this.remove_node( openset, current );
            closedset.push(current);
            let neighbors = this.neighbor_nodes( current, nodes );
            for (let i in neighbors) {
                let neighbor = neighbors[i];
                if (this.not_in( closedset, neighbor )) {
			
                    let tentative_g_score = g_score[current] + this.dist_between( current, neighbor );
                    if (this.not_in( openset, neighbor ) || tentative_g_score < g_score [ neighbor ]) { 
                        came_from 	[ neighbor ] = current;
                        g_score 	[ neighbor ] = tentative_g_score;
                        f_score[neighbor] = g_score[neighbor] + this.heuristic_cost_estimate( neighbor, goal );
                        if (this.not_in( openset, neighbor )) {
                            openset.push(neighbor );
                        }
                    }
                }
            }
        }
        return null; // no valid path;
    }

    //--------------------------------------------------------------
    // exposed statics;
    //--------------------------------------------------------------

    static clear_cached_paths () {
        cachedPaths = null;
    }

    static distance ( x1, y1, x2, y2 ) {
        return this.dist( x1, y1, x2, y2 );
    }

    static path ( start, goal, nodes, ignore_cache, valid_node_func ) {
        if (!cachedPaths) { cachedPaths = {}; }
        if (!cachedPaths[start]) {
            cachedPaths[start] = {};
        } else if(cachedPaths[start][goal] && !ignore_cache) {
            return cachedPaths[start][goal];
        }
	
        return this.a_star(start, goal, nodes, valid_node_func);
    }

}

module.exports = astar;


/***/ }),

/***/ "./engine/src/lib/button2.js":
/*!***********************************!*\
  !*** ./engine/src/lib/button2.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Button2)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");


/*

    * 표시는 애니메이션 가능한 인자
    
    up.image;
    up.font;
    up.text;
    up.textColor       *
    up.textAlignLeft;
    up.textX           *
    up.textY           *
    up.icon;
    up.iconChecked;
    up.iconColor;
    up.iconScale;
    up.iconX           *
    up.iconY           *
    up.color           *
    up.alpha           *
    up.scale           *        scaleX, scaleY를 한꺼번에 지정
    up.scaleX          *
    up.scaleY          *
    up.width;
    up.height;
    up.x               *
    up.y               *
    
    up.ease;
    up.duration;
    textMaxWidth                글자의 가로 최대 크기를 지정(넘치면 스케일링해서 줄임);
    checkBox;
    check = false;
    holdDownOnClick = false        클릭되었을때 눌러져있는가
    clickOnDown = false            마우스 다운에서 클릭이 발생하는가
    
    textureTypeImage = true            이미지 타입이 Texture인가(자동 판정);
    singleSpriteType = false        스프라이트 하나만 사용하는 버튼인가(down.image를 따로 지정하지 않고 사용. 이미지 타입이 Texutre가 아닌 경우);
    useSpriteAnchorPoint = false    이미지를 스프라이트로 지정하는 경우, 기존 앵커포인트를 그대로 사용할지 여부.
    spriteTypeIcon = false            아이콘을 스프라이트 타입으로 갖다 쓸 것인가. (기본은 Texuture라서 new Bitmap()로 만들어서 사용);
    //-
    
    2014.06;
        - image에 Sprite도 지정할 수 있게 수정. (단, Sprite를 사용할 때는 down.image도 반드시 지정해야 함);
        - 텍스트 정렬할 때 앵커포인트 계산을 바운딩박스 기준으로 정밀하게 계산하도록 수정.
        - UP/DOWN 트위닝이 중간에 끊길 때 toEnd 대신 setPause로 수정해서 부드럽게 전환되도록 수정.        
        
    2014.07.07;
        - singleSpriteType 사용할 수 있게 됨. 스프라이트 하나만으로 버튼 만들기 가능.
        - useSpriteAnchorPoint 추가. 스프라이트로 버튼 만들 때 기존의 앵커포인트를 그대로 사용.
        
    2014.07.18;
        - textMaxWidth 추가. 출력되는 글자가 이 길이를 넘어가면 scaleX를 줄여줌.
        
    2014.07.21;
        - disable.alpha 추가. 비활성화 되었을 때의 알파를 바꾸고 싶을 때 사용.
        - iconScale 추가.
        
    2014.08.01;
        - buttonChild 추가. 텍스트랑 같은 레벨에 외부 객체를 차일드로 넣을 수 있음.
        - 사실상 텍스트를 외부에서 조립해서 넣는거나 마찬가지(애니메이션도 자연스럽게 따라감);
    2014.08.27;
        - hitBox 추가. up.sprite 대신 버튼영역을 설정하는 용도. 기울어지지 않은 사각형 형태만 사용가능.
    
*/


function splitHexColor( c ) {
    let r = Math.floor( c / 65536 ) % 65536 / 255;
    let g = Math.floor( c / 256 ) % 256 / 255;
    let b = c % 256 / 255;

    return [r, g, b];
}

function fireClickEvent( self ) {
    if ( self.isVisible() == false ) { return; }

    self.clicked = true;
    if ( self.sound ) {
        playSound( self.sound );
    }
    let e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "click" );

    e.checked = self.checked;
    self.dispatchEvent( e );
}


function setIconTexture( iconSprite, icon ) {
    if ( icon.getRegion ) {
        iconSprite.setTextureRegion( icon );
    } else {
        iconSprite.setTexture( icon );
    }
}

// 기존 트윈 모두 제거
function deleteAllTweens( self ) {
    self._tween = null;
    self._tweenSprite = null;
    self._tweenText = null;
    self._tweenIcon = null;
}

// 기존 트윈 모두 멈춤
function stopAllTweens( self ) {
    if ( self._tween ) { self._tween.stop(); }
    if ( self._tweenSprite ) { self._tweenSprite.stop(); }
    if ( self._tweenText ) { self._tweenText.stop(); }
    if ( self._tweenIcon ) { self._tweenIcon.stop(); }
    deleteAllTweens( self );
}

function onPointerDown( e, cancel ) {
    if ( this.isVisibleDeeply() == false ) { return; }

    //if (this.upSprite.hitTestPoint(e.x, e.y) || cancel) {
    if ( ( this.hitBox || this.upSprite ).hitTestPoint( e.x, e.y ) || cancel ) {
        this.pointerHold = true;    // move 이벤트를 항상 처리하지 않기 위해서 표시를 남김
        if ( !this.clicked ) {
            stopAllTweens( this );
            this.tween = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween(
                this.upSprite, this.down.duration,
                {
                    scaleX: this.down.scaleX,
                    scaleY: this.down.scaleY,
                    x:      this.down.x,
                    y:      this.down.y,
                    alpha:  this.down.alpha,
                }, { ease: this.down.ease } );
            this.tween.addEventListener( "complete",
                                         () => {
                                             deleteAllTweens( this );
                                             this.isCompletelyDownState = true;
                                             if ( !this.singleSpriteType ) {
                                                 this.upSprite.setVisible( false );
                                                 this.downSprite.setVisible( true );
                                                 if ( this.buttonChild ) {
                                                     this.downSprite.addChild( this.buttonChild );
                                                 }
                                             }

                                             if ( this.checkBox ) {
                                                 if ( this.checked ) {
                                                     console.log( "체크박스켜기", this.upSprite.icon, this.up.iconChecked );
                                                     setIconTexture( this.upSprite.icon, this.up.iconChecked );
                                                     setIconTexture( this.downSprite.icon, this.down.iconChecked || this.up.iconChecked );
                                                 } else {
                                                     console.log( "체크박스끄기", this.upSprite.icon, this.up.icon );
                                                     setIconTexture( this.upSprite.icon, this.up.icon );
                                                     setIconTexture( this.downSprite.icon, this.down.icon || this.up.icon );
                                                 }
                                             }
                                         }
            );
            if ( this.checkBox ) {
                this.checked = !this.checked;
            }

            this.tweenSprite = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween(
                this.upSprite.image, this.down.duration,
                {
                    redMultiplier:   this.down.colorR,
                    greenMultiplier: this.down.colorG,
                    blueMultiplier:  this.down.colorB,
                }, { ease: this.down.ease }
            );
            if ( this.upSprite.text ) {
                this.tweenText = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween(
                    this.upSprite.text, this.down.duration,
                    {
                        x:               this.down.textX,
                        y:               this.down.textY,
                        redMultiplier:   this.down.textColorR,
                        greenMultiplier: this.down.textColorG,
                        blueMultiplier:  this.down.textColorB,
                        alpha:           this.down.alpha,
                    }, { ease: this.down.ease }
                );
            }
            if ( this.upSprite.icon ) {
                this.tweenIcon = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween(
                    this.upSprite.icon, this.down.duration,
                    {
                        x: this.down.iconX,
                        y: this.down.iconY,
                    }, { ease: this.down.ease }
                );
            }
            if ( this.buttonChild ) {
                this.tweenChild = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween(
                    this.buttonChild, this.down.duration,
                    {
                        redMultiplier:   this.down.textColorR,
                        greenMultiplier: this.down.textColorG,
                        blueMultiplier:  this.down.textColorB,
                        alpha:           this.down.alpha,
                    }, { ease: this.down.ease }
                );
            }

            if ( !cancel && this.clickOnDown ) {
                fireClickEvent( this );
            } else {
                if ( this.down.sound ) {
                    playSound( this.down.sound );
                }
            }
        }
        e.stopPropagation();
    }
}

function upButton( self ) {
    self.isCompletelyDownState = false;
    if ( !self.singleSpriteType ) {
        self.upSprite.setVisible( true );
        self.downSprite.setVisible( false );
        if ( self.buttonChild ) {
            self.upSprite.addChild( self.buttonChild );
        }
    }

    self._tween = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween(
        self.upSprite, self.up.duration,
        {
            scaleX: self.up.scaleX,
            scaleY: self.up.scaleY,
            x:      self.up.x,
            y:      self.up.y,
            alpha:  self.up.alpha,
        }, { ease: self.up.ease } );
    self._tween.addEventListener( "complete",
                                  () => { deleteAllTweens( self ); }
    );
    self._tweenSprite = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween(
        self.upSprite.image, self.up.duration,
        {
            redMultiplier:   self.up.colorR,
            greenMultiplier: self.up.colorG,
            blueMultiplier:  self.up.colorB,
        }, { ease: self.down.ease }
    );
    if ( self.upSprite.text ) {
        self._tweenText = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween(
            self.upSprite.text, self.up.duration,
            {
                x:               self.up.textX,
                y:               self.up.textY,
                redMultiplier:   self.up.textColorR,
                greenMultiplier: self.up.textColorG,
                blueMultiplier:  self.up.textColorB,
                alpha:           self.up.alpha,
            }, { ease: self.up.ease }
        );
    }
    if ( self.upSprite.icon ) {
        self._tweenIcon = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween(
            self.upSprite.icon, self.up.duration,
            {
                x: self.up.iconX,
                y: self.up.iconY,
            }, { ease: self.up.ease }
        );
    }
    if ( self.buttonChild ) {
        self._tweenChild = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween(
            self.buttonChild, self.up.duration,
            {
                redMultiplier:   self.up.textColorR,
                greenMultiplier: self.up.textColorG,
                blueMultiplier:  self.up.textColorB,
                alpha:           self.up.alpha,
            }, { ease: self.up.ease }
        );
    }

    self.clicked = false;
}

function onPointerUp( e, cancel ) {
    if ( this.isVisible() == false ) { return; }

    if ( !this.pointerHold ) { return; }
    e.stopPropagation();
    if ( !cancel ) { this.pointerHold = false; } // 범위 벗어나서 튀어나오는 경우가 cancel;
    stopAllTweens( this );
    let [x, y, w, h] = this.cancelBound;
    let pos = this.globalToLocal( e.x, e.y );
    let x2 = pos.x;
    let y2 = pos.y;

    //let clicked = false;
    if ( !this.clicked && !this.clickOnDown && !cancel && x <= x2 && x2 < x + w && y <= y2 && y2 < y + h ) {
        fireClickEvent( this );
    }
    if ( !( this.clicked && this.holdDownOnClick ) ) {
        // downOnClick이 아니면 
        if ( cancel && this.up.sound ) {
            playSound( this.up.sound );
        }

        upButton( this );
        if ( cancel && this.checkBox ) {
            this.checked = !this.checked;
            if ( this.checked ) {
                console.log( "캔슬로 체크박스켜기" );
                setIconTexture( this.upSprite.icon, this.up.iconChecked );
                setIconTexture( this.downSprite.icon, this.down.iconChecked || this.up.iconChecked );
            } else {
                console.log( "캔슬로 체크박스끄기" );
                setIconTexture( this.upSprite.icon, this.up.icon );
                setIconTexture( this.downSprite.icon, this.down.icon || this.up.icon );
            }
        }
    }
}

function onPointerMove( e ) {
    if ( this.isVisible() == false ) { return; }

    if ( this.pointerHold ) {
        let [x, y, w, h] = this.cancelBound;
        let { x: x2, y: y2 } = this.globalToLocal( e.x, e.y );

        if ( x <= x2 && x2 < x + w && y <= y2 && y2 < y + h ) {
            if ( !this.isCompletelyDownState && this.tween == null ) {
                onPointerDown.call( this,e, true );
            }
        } else {
            if ( this.isCompletelyDownState && this.tween == null ) {
                onPointerUp.call( this,e, true );
            }
        }
        e.stopPropagation();
    }
}

// 전달받은 이미지를 타입에 따라 구분해서 스프라이트로 반환(Texture인지 Sprite인지);
function imageToSprite( image ) {
    if ( image.RGBA5551 ) {
        return [new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( image ), true];
    } else {
        return [image, false];
    }
}




class Button2 extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( p ) {
        super();
        p = p || { };
        this.checkBox = p.checkBox;
        this.checked = p.checked;
        this.holdDownOnClick = p.holdDownOnClick;
        this.clickOnDown = p.clickOnDown;
        this.sound = p.sound;
        this.textureTypeImage = true;
        this.singleSpriteType = false;
        this.isCompletelyDownState = false;
        this.textMaxWidth = p.textMaxWidth;
        this.buttonChild = p.buttonChild;
        this.buttonChildPos = p.buttonChildPos || { x: 0, y: 0 };
        this.hitBox = p.hitBox;
        this.hitBoxPos = p.hitBoxPos || { x: 0, y: 0 };
        this.spriteTypeIcon = p.spriteTypeIcon;
        let up = p.up;
        let down = p.down || {};
        let disable = p.disable || {};

        down.width = up.width;
        down.height = up.height;
        //애니메이션 가능한 부분은 기본값이 필요하다
        up.textColor = up.textColor || 0x000000;
        up.textX = up.textX || 0;
        up.textY = up.textY || 0;
        up.iconX = up.iconX || 0;
        up.iconY = up.iconY || 0;
        up.iconColor = up.iconColor || 0xffffff;
        up.iconScale = up.iconScale || 1;
        up.color = up.color || 0xffffff;
        up.alpha = up.alpha || 1.0;
        up.scaleX = up.scaleX || up.scale || 1.0;
        up.scaleY = up.scaleY || up.scale || 1.0;
        up.x = up.x || 0;
        up.y = up.y || 0;
        up.ease = up.ease || _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outBack;
        up.duration = up.duration || 150;
        up.useSpriteAnchorPoint = up.useSpriteAnchorPoint || false;
        down.text = down.text || up.text;
        down.textColor = down.textColor || up.textColor;
        down.textX = down.textX || up.textX;
        down.textY = down.textY || up.textY;
        down.iconX = down.iconX || up.iconX;
        down.iconY = down.iconY || up.iconY;
        down.iconColor = down.iconColor || up.iconColor;
        down.iconScale = down.iconScale || up.iconScale;
        down.color = down.color || up.color;
        down.alpha = down.alpha || up.alpha;
        down.scaleX = down.scaleX || down.scale || up.scaleX;
        down.scaleY = down.scaleY || down.scale || up.scaleY;
        down.x = down.x || up.x;
        down.y = down.y || up.y;
        down.ease = down.ease || up.ease;
        down.duration = down.duration || up.duration;
        disable.color = disable.color || 0x808080;
        disable.alpha = disable.alpha || 1;
        disable.spriteTypeAlpha = disable.spriteTypeAlpha || 0.6;
        this.up = up;
        this.down = down;
        this.disable = disable;
        // 컬러를 쪼개야 트윈 가능
        [up.colorR, up.colorG, up.colorB] = splitHexColor( up.color );
        [down.colorR, down.colorG, down.colorB] = splitHexColor( down.color );
        [up.textColorR, up.textColorG, up.textColorB] = splitHexColor( up.textColor );
        [down.textColorR, down.textColorG, down.textColorB] = splitHexColor( down.textColor );
        {
            this.upSprite = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
            let b;
            let ap = { x: 0.5, y: 0.5 };

            if ( up.image ) {
                [b, this.textureTypeImage] = imageToSprite( up.image );
                if ( !this.textureTypeImage && up.useSpriteAnchorPoint ) {
                    ap = b.getAnchorPoint();
                }            
            } else {
                b = Mesh.createBox( 0, 0, up.width, up.height, 0xffffff );
            }
            if ( b.setAnchorPoint ) {
                b.setAnchorPoint( ap.x, ap.y );
            } else {
                b.setPosition( -ap.x * b.getWidth(),-ap.y * b.getHeight() );
            }
            b.setColorMultiplier( up.colorR, up.colorG, up.colorB );
            this.upSprite.addChild( b );
            if ( up.text ) {
                this.upSprite.textInfo =
                {
                    font:      up.font,
                    x:         up.textX,
                    y:         up.textY,
                    r:         up.textColorR,
                    g:         up.textColorG,
                    b:         up.textColorB,
                    alignLeft: up.textAlignLeft,
                    color:     up.textColor
                    //color = 0x000000;
                };
            }

            let icon;

            if ( up.icon ) {
                if ( this.checkBox && this.checked ) {
                    if ( this.spriteTypeIcon ) {
                        icon = up.iconChecked;
                    } else {
                        icon = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( up.iconChecked );
                    }
                } else {
                    if ( this.spriteTypeIcon ) {
                        icon = up.icon;
                    } else {
                        icon = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( up.icon );
                    }
                }
                icon.setScale( up.iconScale );
                icon.setAnchorPoint( 0.5, 0.5 );
                icon.setPosition( up.iconX, up.iconY );
                icon.setOverrideColor( up.iconColor );
                //icon.setScale(up.iconScale);
                this.upSprite.addChild( icon );
            }
            
            if ( this.buttonChild ) {
                this.buttonChild.setPosition( this.buttonChildPos.x, this.buttonChildPos.y );
                this.buttonChild.setColorMultiplierByHex( up.textColor );
                this.upSprite.addChild( this.buttonChild );
            }
            
            this.upSprite.setX( up.x );
            this.upSprite.setY( up.y );
            this.upSprite.setScaleX( up.scaleX );
            this.upSprite.setScaleY( up.scaleY );
            this.addChild( this.upSprite );
            this.upSprite.image = b;
            this.upSprite.icon = icon;
            this.upSprite.setAlpha( up.alpha );
        }

        {
            this.downSprite = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
            let b;

            if ( down.image ) {    
                b = imageToSprite( down.image );
            } else if ( !this.textureTypeImage ) {
                this.singleSpriteType = true;
                b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
            } else if ( up.image ) {
                b = imageToSprite( up.image );
            } else {
                b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Shape();
                b.makeBox( 0, 0, down.width, down.height, 0xffffff );
            }
            b.setAnchorPoint( 0.5, 0.5 );
            b.setColorMultiplier( down.colorR, down.colorG, down.colorB );
            this.downSprite.addChild( b );
            if ( down.text ) {
                this.downSprite.textInfo =
                {
                    font:      down.font || up.font,
                    x:         down.textX,
                    y:         down.textY,
                    r:         down.textColorR,
                    g:         down.textColorG,
                    b:         down.textColorB,
                    alignLeft: down.textAlignLeft || up.textAlignLeft,
                    color:     down.textColor
                    //color = 0x000000;
                };
            }

            let icon;

            if ( down.icon || up.icon ) {
                if ( this.checkBox && this.checked ) {
                    if ( this.spriteTypeIcon ) {
                        icon = down.iconChecked || up.iconChecked;
                    } else {
                        icon = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( down.iconChecked || up.iconChecked );
                    }
                } else {
                    if ( this.spriteTypeIcon ) {
                        icon = down.icon || up.icon;
                    } else {
                        icon = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( down.icon || up.icon );
                    }
                }
                icon.setScale( down.iconScale );
                icon.setAnchorPoint( 0.5, 0.5 );
                icon.setOverrideColor( down.iconColor );
                icon.setPosition( down.iconX, down.iconY );
                //icon.setScale(down.iconScale);
                this.downSprite.addChild( icon );
            }

            this.downSprite.setX( down.x );
            this.downSprite.setY( down.y );
            this.downSprite.setScaleX( down.scaleX );
            this.downSprite.setScaleY( down.scaleY );
            this.downSprite.setVisible( false );
            this.addChild( this.downSprite );
            this.downSprite.icon = icon;
            this.downSprite.setAlpha( down.alpha );
        }

        this.setText( up.text, down.text );
        // 터치 영역 관련
        {
            if ( this.hitBox ) {
                this.hitBox.setAlpha( 0 );
                this.hitBox.setPosition( this.hitBoxPos.x, this.hitBoxPos.y );
                this.addChild( this.hitBox );
            }
            
            //x, y, w, h = this.getBounds(this.upSprite);
            let { x, y, width:w, height:h } = ( this.hitBox || this.upSprite ).getBounds( this );

            this.cancelBound = [x - Button2.cancelMargin, y - Button2.cancelMargin, w + Button2.cancelMargin * 2, h + Button2.cancelMargin * 2];
        }

        this.setEnabled( true );
    }

    _setText( btnSpr, txt ) {
        let ti = btnSpr.textInfo;
        let t = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextField( ti.font, txt );

        t.setTextColor( 0xffffff );
        t.setColorMultiplier( ti.r, ti.g, ti.b );
        // 좌표 조정
        // 앵커포인트를 바운딩박스 기준으로 맞춰야 제대로 된 좌표에 나온다.
        // 숫자 "0"의 바운딩박스 하단을 Baseline으로 보고 세로 정렬을 하고,
        // txt의 바운딩박스 전체를 가지고 가로정렬을 한다.    
        let [ , by, , bh] = ti.font.getBounds0();
        let [tx,  , tw, ] = ti.font.getBounds( txt );
        let [h, v] = [0.5, 0.5];

        if ( ti.alignLeft ) { h = 0; }
        
        // 길이제한이 있으면 먼저 맞춰준다
        let sx = 1;

        if ( this.textMaxWidth && tw > this.textMaxWidth ) {        
            sx = this.textMaxWidth / tw;
            t.setScaleX( sx );
        }
        
        h = ( tx + tw * h ) / t.getWidth() * sx;
        v = ( by + bh * v ) / t.getHeight();
        t.setAnchorPoint( h, v );
        t.setPosition( ti.x, ti.y );
        btnSpr.addChild( t );
        btnSpr.text = t;
        btnSpr.textStr = txt;
    }

    setText( upText, downText ) {
        this.up.text = upText;
        this.down.text = downText;
        if ( this.upSprite.text ) {
            this.upSprite.text.removeFromParent();
            this.upSprite.text = null;
        }

        if ( this.downSprite.text ) {
            this.downSprite.text.removeFromParent();
            this.downSprite.text = null;
        }

        if ( upText  && this.upSprite.textInfo ) {
            this._setText( this.upSprite, upText );
        }

        if ( downText  && this.downSprite.textInfo ) {
            this._setText( this.downSprite, downText );
        }
    }

    setIconScale( scx, scy ) {
        if ( this.upSprite.icon ) {
            this.upSprite.icon.setScale( scx, scy );
        }
        
        if ( this.downSprite.icon ) {
            this.downSprite.icon.setScale( scx, scy );
        }
    }

    setTextScale( scx, scy ) {
        if ( this.upSprite.text ) {
            this.upSprite.text.setScale( scx, scy );
        }

        if ( this.downSprite.text ) {
            this.downSprite.text.setScale( scx, scy );
        }
    }

    setTextColor( hexColor ) {
        if ( this.upSprite.text ) {
            this.upSprite.text.setTextColor( hexColor );
        }

        if ( this.downSprite.text ) {
            this.downSprite.text.setTextColor( hexColor );
        }
        
        if ( this.upSprite.textInfo ) {
            this.upSprite.textInfo.color = hexColor;
        }
        
        if ( this.downSprite.textInfo ) {
            this.downSprite.textInfo.color = hexColor;
        }
    }

    setButtonColor( hexColor ) {
        this.up.color = hexColor;
        this.down.color = hexColor;
        let r,g,b = splitHexColor( hexColor );

        this.up.colorR, this.up.colorG, this.up.colorB = r,g,b;
        this.down.colorR, this.down.colorG, this.down.colorB = r,g,b;
        this.upSprite.image.setColorMultiplier( r,g,b );
    }

    setEnabled( bOpt ) {
        if ( bOpt != this.enabled ) {
            if ( bOpt == true ) {
                stopAllTweens( this );
                this.upSprite.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN, onPointerDown, this );
                this.downSprite.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN, onPointerDown, this );
                this.upSprite.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP, onPointerUp, this );
                this.downSprite.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP, onPointerUp, this );
                this.upSprite.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_MOVE, onPointerMove, this );
                this.downSprite.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_MOVE, onPointerMove, this );
                this.enabled = true;
                /*
                if (this.textureTypeImage == true) {
                    this.setColorMultiplier(1, 1, 1);
                    this.setAlpha(1);
                } else {
                    this.setAlpha(1);
                }
                */
                this.setColorMultiplier( 1, 1, 1 );
                this.setAlpha( 1 );
            } else {
                stopAllTweens( this );
                this.upSprite.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN, onPointerDown, this );
                this.downSprite.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN, onPointerDown, this );
                this.upSprite.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP, onPointerUp, this );
                this.downSprite.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP, onPointerUp, this );
                this.upSprite.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_MOVE, onPointerMove, this );
                this.downSprite.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_MOVE, onPointerMove, this );
                this.enabled = false;
                if ( this.textureTypeImage == true ) {
                    //this.setColorMultiplier(0.5, 0.5, 0.5);
                    this.setOverrideColor( this.disable.color );
                    this.setAlpha( this.disable.alpha );
                    this.upSprite.setColorMultiplier( this.up.colorR, this.up.colorG, this.up.colorB );
                } else {
                    this.setOverrideColor( this.disable.color );
                    this.setAlpha( this.disable.spriteTypeAlpha );
                }

                this.upSprite.setVisible( true );
                this.downSprite.setVisible( false );
                this.upSprite.setPosition( this.up.x, this.up.y );
                this.upSprite.setScale( this.up.scaleX, this.up.scaleY );
                this.upSprite.setAlpha( this.up.alpha );
                if ( this.upSprite.text ) {
                    this.upSprite.text.setPosition( this.up.textX, this.up.textY );
                    this.upSprite.text.setColorMultiplier( this.up.textColorR, this.up.textColorG, this.up.textColorB, this.up.alpha );
                }
                
                if ( this.upSprite.icon ) {
                    this.upSprite.icon.setPosition( this.up.iconX, this.up.iconY );
                }
            }    
        }
    }


    setCanceled() {
        let e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "cancel" );

        e.x = 0;
        e.y = 0;
        onPointerUp( this, e, true );
    }

    forceUp() {
        upButton( this );
    }
}

Button2.cancelMargin = 30;



/***/ }),

/***/ "./engine/src/lib/colors.js":
/*!**********************************!*\
  !*** ./engine/src/lib/colors.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const Colors = {
    AliceBlue:            0xF0F8FF,
    AntiqueWhite:         0xFAEBD7,
    Aqua:                 0x00FFFF,
    Aquamarine:           0x7FFFD4,
    Azure:                0xF0FFFF,
    Beige:                0xF5F5DC,
    Bisque:               0xFFE4C4,
    Black:                0x000000,
    BlanchedAlmond:       0xFFEBCD,
    Blue:                 0x0000FF,
    BlueViolet:           0x8A2BE2,
    Brown:                0xA52A2A,
    BurlyWood:            0xDEB887,
    CadetBlue:            0x5F9EA0,
    Chartreuse:           0x7FFF00,
    Chocolate:            0xD2691E,
    Coral:                0xFF7F50,
    CornflowerBlue:       0x6495ED,
    Cornsilk:             0xFFF8DC,
    Crimson:              0xDC143C,
    Cyan:                 0x00FFFF,
    DarkBlue:             0x00008B,
    DarkCyan:             0x008B8B,
    DarkGoldenrod:        0xB8860B,
    DarkGray:             0xA9A9A9,
    DarkGreen:            0x006400,
    DarkKhaki:            0xBDB76B,
    DarkMagenta:          0x8B008B,
    DarkOliveGreen:       0x556B2F,
    DarkOrange:           0xFF8C00,
    DarkOrchid:           0x9932CC,
    DarkRed:              0x8B0000,
    DarkSalmon:           0xE9967A,
    DarkSeaGreen:         0x8FBC8F,
    DarkSlateBlue:        0x483D8B,
    DarkSlateGray:        0x2F4F4F,
    DarkTurquoise:        0x00CED1,
    DarkViolet:           0x9400D3,
    DeepPink:             0xFF1493,
    DeepSkyBlue:          0x00BFFF,
    DimGray:              0x696969,
    DodgerBlue:           0x1E90FF,
    FireBrick:            0xB22222,
    FloralWhite:          0xFFFAF0,
    ForestGreen:          0x228B22,
    Fuchsia:              0xFF00FF,
    Gainsboro:            0xDCDCDC,
    GhostWhite:           0xF8F8FF,
    Gold:                 0xFFD700,
    Goldenrod:            0xDAA520,
    Gray:                 0x808080,
    Green:                0x008000,
    GreenYellow:          0xADFF2F,
    Honeydew:             0xF0FFF0,
    HotPink:              0xFF69B4,
    IndianRed:            0xCD5C5C,
    Indigo:               0x4B0082,
    Ivory:                0xFFFFF0,
    Khaki:                0xF0E68C,
    Lavender:             0xE6E6FA,
    LavenderBlush:        0xFFF0F5,
    LawnGreen:            0x7CFC00,
    LemonChiffon:         0xFFFACD,
    LightBlue:            0xADD8E6,
    LightCoral:           0xF08080,
    LightCyan:            0xE0FFFF,
    LightGoldenrodYellow: 0xFAFAD2,
    LightGreen:           0x90EE90,
    LightGray:            0xD3D3D3,
    LightPink:            0xFFB6C1,
    LightSalmon:          0xFFA07A,
    LightSeaGreen:        0x20B2AA,
    LightSkyBlue:         0x87CEFA,
    LightSlateGray:       0x778899,
    LightSteelBlue:       0xB0C4DE,
    LightYellow:          0xFFFFE0,
    Lime:                 0x00FF00,
    LimeGreen:            0x32CD32,
    Linen:                0xFAF0E6,
    Magenta:              0xFF00FF,
    Maroon:               0x800000,
    MediumAquamarine:     0x66CDAA,
    MediumBlue:           0x0000CD,
    MediumOrchid:         0xBA55D3,
    MediumPurple:         0x9370DB,
    MediumSeaGreen:       0x3CB371,
    MediumSlateBlue:      0x7B68EE,
    MediumSpringGreen:    0x00FA9A,
    MediumTurquoise:      0x48D1CC,
    MediumVioletRed:      0xC71585,
    MidnightBlue:         0x191970,
    MintCream:            0xF5FFFA,
    MistyRose:            0xFFE4E1,
    Moccasin:             0xFFE4B5,
    NavajoWhite:          0xFFDEAD,
    Navy:                 0x000080,
    OldLace:              0xFDF5E6,
    Olive:                0x808000,
    OliveDrab:            0x6B8E23,
    Orange:               0xFFA500,
    OrangeRed:            0xFF4500,
    Orchid:               0xDA70D6,
    PaleGoldenrod:        0xEEE8AA,
    PaleGreen:            0x98FB98,
    PaleTurquoise:        0xAFEEEE,
    PaleVioletRed:        0xDB7093,
    PapayaWhip:           0xFFEFD5,
    PeachPuff:            0xFFDAB9,
    Peru:                 0xCD853F,
    Pink:                 0xFFC0CB,
    Plum:                 0xDDA0DD,
    PowderBlue:           0xB0E0E6,
    Purple:               0x800080,
    Red:                  0xFF0000,
    RosyBrown:            0xBC8F8F,
    RoyalBlue:            0x4169E1,
    SaddleBrown:          0x8B4513,
    Salmon:               0xFA8072,
    SandyBrown:           0xF4A460,
    SeaGreen:             0x2E8B57,
    Seashell:             0xFFF5EE,
    Sienna:               0xA0522D,
    Silver:               0xC0C0C0,
    SkyBlue:              0x87CEEB,
    SlateBlue:            0x6A5ACD,
    SlateGray:            0x708090,
    Snow:                 0xFFFAFA,
    SpringGreen:          0x00FF7F,
    SteelBlue:            0x4682B4,
    Tan:                  0xD2B48C,
    Teal:                 0x008080,
    Thistle:              0xD8BFD8,
    Tomato:               0xFF6347,
    Turquoise:            0x40E0D0,
    Violet:               0xEE82EE,
    Wheat:                0xF5DEB3,
    White:                0xFFFFFF,
    WhiteSmoke:           0xF5F5F5,
    Yellow:               0xFFFF00,
    YellowGreen:          0x9ACD32,
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Colors);

/***/ }),

/***/ "./engine/src/lib/grid9.js":
/*!*********************************!*\
  !*** ./engine/src/lib/grid9.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Grid9)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");



class Grid9 extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh {
    /**
     *Creates an instance of Grid9.
     * @param {TextureBase} texture
     * @param {number=} x
     * @param {number=} y
     * @param {number=} w
     * @param {number=} h
     * @memberof Grid9
     */
    constructor( texture, x, y, w, h ) {
        super();
        this.__texture = texture;
        if ( x != null && y != null && w != null && h != null ) {
            this.setRect( x, y, w, h );
        }
    }

    /**
     *
     *
     * @param {number} x
     * @param {number} y
     * @param {number} w
     * @param {number} h
     * @memberof Grid9
     */
    setRect( x, y, w, h ) {
        let [tw, th] = [this.__texture.width,this.__texture.height];
        let a = Math.ceil( tw / 3 );
        let b = Math.floor( th / 3 );

        this.__rect = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Rect( x, y, w, h );
        this.setVertexArray( [
            x, y, x + a, y, x + w - a, y, x + w, y,
            x, y + b, x + a, y + b, x + w - a, y + b, x + w, y + b,
            x, y + h - b, x + a, y + h - b, x + w - a, y + h - b, x + w, y + h - b,
            x, y + h, x + a, y + h, x + w - a, y + h, x + w, y + h
        ] );
        this.setTextureCoordinateArray( [
            0, 0, a, 0, tw - a, 0, tw, 0,
            0, b, a, b, tw - a, b, tw, b,
            0, th - b, a, th - b, tw - a, th - b, tw, th - b,
            0, th, a, th, tw - a, th, tw, th
        ] );
        // 1 2 3 4;
        // 5 6 7 8;
        // 9 101112;
        // 13141516;
        this.setIndexArray( [
            0, 1, 4, 1, 5, 4, 1, 2, 5, 2, 6, 5, 2, 3, 6, 3, 7, 6,
            4, 5, 8, 5, 9, 8, 5, 6, 9, 6, 10, 9, 6, 7, 10, 7, 11, 10,
            8, 9, 12, 9, 13, 12, 9, 10, 13, 10, 14, 13, 10, 11, 14, 11, 15, 14] );
        this.setColorArray( [
            0xffffff, 1, 0xffffff, 1, 0xffffff, 1, 0xffffff, 1,
            0xffffff, 1, 0xffffff, 1, 0xffffff, 1, 0xffffff, 1,
            0xffffff, 1, 0xffffff, 1, 0xffffff, 1, 0xffffff, 1,
            0xffffff, 1, 0xffffff, 1, 0xffffff, 1, 0xffffff, 1] );
        this.setTexture( this.__texture );
    }

    get width() {
        return this.__rect.width;
    }

    get height() {
        return this.__rect.height;
    }

    getLocalBounds( rect ) {
        return this.__rect;
    }
}



/***/ }),

/***/ "./engine/src/lib/iconPack.js":
/*!************************************!*\
  !*** ./engine/src/lib/iconPack.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ IconPack)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");



class IconPack extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh {
    /**
     *Creates an instance of IconPack.
     * @param {TextureBase} texture
     * @param {number} col
     * @param {number} row
     * @param {number} tw
     * @param {number} th
     * @param {number} [color=0xffffff]
     * @param {number} [alpha=1]
     * @param {number} [spacing=0]
     * @param {number} [margin=0]
     * @memberof IconPack
     */
    constructor( texture, col, row, tw, th, color = 0xffffff, alpha = 1, spacing = 0, margin = 0 ) {
        super();
        this.__isIconPack = true;
        this.__spacing = spacing;
        this.__margin = margin;
        this.__width = tw;
        this.__height = th;
        this.__texture = texture;
        this.__perRow = Math.floor( ( texture.width / tw - this.__margin * 2 ) / ( tw + this.__spacing ) );
        this.setTexture( texture );
        this._$$color = color;
        this.__alpha = alpha;
        this.setColorArray( [color,alpha,color,alpha,color,alpha,color,alpha] );
        this.setVertexArray( [-tw / 2,-th / 2, tw / 2,-th / 2, -tw / 2,th / 2, tw / 2,th / 2] );
        this.setIndexArray( [0,1,2,1,3,2] );
        this.setColRow( col,row );
    }


    setColRow( col,row ) {
        let tw = this.__width;
        let th = this.__height;
        let tx = ( col - 1 ) * ( tw + this.__spacing ) + this.__margin;
        let ty = ( row - 1 ) * ( th + this.__spacing ) + this.__margin;

        this.setTextureCoordinateArray( [tx,ty,tx + tw,ty,tx,ty + th,tx + tw,ty + th] );
        this._$$col = col;
        this.__row = row;
    }

    setById( id ) {
        let col = ( ( id - 1 ) % this.__perRow ) + 1;
        let row = Math.floor( id / this.__perRow ) + 1;

        this.setColRow( col,row );
    }

    getId() {
        return this._$$col + ( this.__row - 1 ) * this.__perRow;
    }

    getColRow() {
        return [this._$$col,this.__row];
    }

    clone( col,row ) {
        return new IconPack( this.__texture,
                             col != null ? col : this._$$col,
                             row != null ? row : this.__row,
                             this.__width, this.__height, this._$$color, this.__alpha, this.__spacing, this.__margin );
    }


    /**
     *
     *
     * @param {boolean=} x
     * @param {boolean=} y
     * @memberof IconPack
     */
    setFlip( x,y ) {
        let tw = this.__width;
        let th = this.__height;
        let tx = ( this._$$col - 1 ) * ( tw + this.__spacing ) + this.__margin;
        let ty = ( this.__row - 1 ) * ( th + this.__spacing ) + this.__margin;

        if ( x && y ) {
            this.setTextureCoordinates( 3,tx,ty,2,tx + tw,ty,1,tx,ty + th,0,tx + tw,ty + th );
        } else if ( x ) {
            this.setTextureCoordinates( 1,tx,ty,0,tx + tw,ty,3,tx,ty + th,2,tx + tw,ty + th );
        } else if ( y ) {
            this.setTextureCoordinates( 2,tx,ty,3,tx + tw,ty,0,tx,ty + th,1,tx + tw,ty + th );
        } else {
            this.setTextureCoordinates( 0,tx,ty,1,tx + tw,ty,2,tx,ty + th,3,tx + tw,ty + th );
        }
    }

    // 임의의 4조각으로 쪼갠다
    sliceMesh( physics ) {
        let col = this._$$col;
        let row = this.__row;
        let tw = this.__width;
        let th = this.__height;
        let tx = ( col - 1 ) * ( tw + this.__spacing ) + this.__margin;
        let ty = ( row - 1 ) * ( th + this.__spacing ) + this.__margin;
        let cx = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( Math.floor( tw * 0.45 ),Math.floor( tw * 0.55 ) ) - 1;
        let cy = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( Math.floor( th * 0.45 ),Math.floor( th * 0.55 ) ) - 1;
        let x1 = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( Math.floor( tw * 0.3 ),Math.floor( tw * 0.7 ) ) - 1;
        let y1 = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( Math.floor( th * 0.3 ),Math.floor( th * 0.7 ) ) - 1;
        let x2 = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( Math.floor( tw * 0.3 ),Math.floor( tw * 0.7 ) ) - 1;
        let y2 = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( Math.floor( th * 0.3 ),Math.floor( th * 0.7 ) ) - 1;
        //log(tx,ty,tw,th,cx,cy);
        let m1 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh();
        let vtx1 = [-tw / 2, -th / 2, x1 - tw / 2, -th / 2, cx - tw / 2, cy - th / 2, -tw / 2, y1 - th / 2];

        m1.setVertexArray( vtx1 );
        m1.setTextureCoordinateArray( [tx,ty,tx + x1,ty,tx + cx,ty + cy,tx,ty + y1] );
        m1.setIndexArray( [0,1,2,0,2,3] );
        m1.setTexture( this.__texture );
        let m2 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh();
        let vtx2 = [x1 - tw / 2, -th / 2, tw - tw / 2, -th / 2, tw - tw / 2, y2 - th / 2, cx - tw / 2, cy - th / 2];

        m2.setVertexArray( vtx2 );
        m2.setTextureCoordinateArray( [tx + x1,ty,tx + tw,ty,tx + tw,ty + y2,tx + cx,ty + cy] );
        m2.setIndexArray( [0,1,2,0,2,3] );
        m2.setTexture( this.__texture );
        let m3 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh();
        let vtx3 = [-tw / 2, y1 - th / 2, cx - tw / 2, cy - th / 2, x2 - tw / 2, th - th / 2, -tw / 2, th - th / 2];

        m3.setVertexArray( vtx3 );
        m3.setTextureCoordinateArray( [tx,ty + y1,tx + cx,ty + cy,tx + x2,ty + th,tx,ty + th] );
        m3.setIndexArray( [0,1,2,0,2,3] );
        m3.setTexture( this.__texture );
        let m4 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh();
        let vtx4 = [cx - tw / 2, cy - th / 2, tw - tw / 2, y2 - th / 2, tw - tw / 2, th - th / 2, x2 - tw / 2, th - th / 2];

        m4.setVertexArray( vtx4 );
        m4.setTextureCoordinateArray( [tx + cx,ty + cy,tx + tw,ty + y2,tx + tw,ty + th,tx + x2,ty + th] );
        m4.setIndexArray( [0,1,2,0,2,3] );
        m4.setTexture( this.__texture );
        if ( this._$$color ) {
            let color = this._$$color;
            let alpha = this.__alpha;

            m1.setColorArray( [color,alpha || 1,color,alpha || 1,color,alpha || 1,color,alpha || 1] );
            m2.setColorArray( [color,alpha || 1,color,alpha || 1,color,alpha || 1,color,alpha || 1] );
            m3.setColorArray( [color,alpha || 1,color,alpha || 1,color,alpha || 1,color,alpha || 1] );
            m4.setColorArray( [color,alpha || 1,color,alpha || 1,color,alpha || 1,color,alpha || 1] );
        }

        return [m1,m2,m3,m4];
    }
}



/***/ }),

/***/ "./engine/src/lib/listView.js":
/*!************************************!*\
  !*** ./engine/src/lib/listView.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ListView)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _grid9__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./grid9 */ "./engine/src/lib/grid9.js");



/*

ListView;
듀얼에 사용한 것에서 많이 바뀌었음

params = 

stickOnBorder = false;
background = {image,color}  // 구글스러운 스타일
animationFunc = func(this,item,index);
clip = true;
fitHitAreaToScreenWidth // 화면 다 덮는다. 모달처럼. CONFIG 없으면 동작안됨
align = "top" , "bottom"
							bottom 은 setItems를 할 때 즉시 위로 밀어올리게 되어있다.
							add로 하나씩 추가하면 위치가 잘 안맞을 수 있음

//--------------------------------------------------------------------------------------------------------------

Example);
	// 만들때
	// 첫번째 인자가 items이다.
	listView1 = new ListView({}, width, height, spriteFunc, 
		{
			padding = 0,
			cutOffsetBottom = 0,
			fitHitAreaToScreenWidth = true,
			background = {color=0xf0f0f0,image = deckImage,headerHeight = 180},
		});
	listView1.addEventListener("click", onClick, this);
	listView1.addEventListener("movePosition",function(e);
		// e.backgroundY 로 포지션 값이 넘어온다
	end);
	listView1.add(item);
	listView1.setItems(items, forceUpdate, forceRefresh);
	item = {text = itemName, data = {} }
	
Sprite Func);
function spriteFunc_example(listView,item,index,listViewOwner) {
	let text = item.text;
	let d = item.data;
	let spr = new Sprite();
	:
	retrun spr;
}


Refresh 처리);
		listView1.addEventListener("refreshReady", func, data);
		listView1.addEventListener("refreshCancel", func, data);
		listView1.addEventListener("refresh", func, data);
		e.sprite로 리프래시 스프라이트가 넘어옴
		




*/

const ITEM_PADDING = 1;

//let LIST_TOP_MARGIN = 0;
/**
 * @this ListView
 *
 * @param {*} item
 * @param {number} index
 * @param {*} owner
 * @returns {[Sprite,*,number]}
 */
function defaultSpriteFunc( item, index, owner ) {
    const spr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
    const back1 = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.createBox( -Math.floor( this.width / 2 ), -10, this.width, 20, 0xffffff );
    const back2 = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.createBox( -Math.floor( this.width / 2 ) + 1, -9, this.width - 4, 18, 0xff0000 );

    spr.addChild( back1 );
    spr.addChild( back2 );
    const t1 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextField( null , item.text );

    t1.setPosition( Math.floor( -t1.getWidth() / 2 ), Math.floor( -t1.getHeight() / 2 + Font.getDefault().getAscender() ) );
    t1.setTextColor( 0xffffff );
    spr.addChild( t1 );

    return [spr, null , 20];
}

/**
 * @this ListView
 *
 * @param {number} y
 * @returns {number}
 */
function getClippedY( y ) {
    if ( this.align == "top" ) {
        if ( y < this.topPosition ) {
            if ( this.itemHeight < this.height ) {
                y = this.topPosition;
            } else if ( y + this.itemHeight < this.height ) {
                y = this.height - this.itemHeight;
            }
        } else {
            if ( this.itemHeight < this.height ) {
                if ( y + this.itemHeight > 0 ) {
                    y = this.topPosition;
                }
            } else {
                if ( this.height < y + this.itemHeight ) {
                    y = this.topPosition;
                }
            }
        }
    } else if ( this.align == "bottom" ) {
        if ( y + this.itemHeight > this.topPosition + this.height ) {
            // 하단 아래로 들어간 경우
            if ( this.itemHeight < this.height ) {
                y = this.height - this.itemHeight - 1;
            } else if ( y > 0 ) {
                y = 0;
            }
        } else {
            if ( this.itemHeight < this.height ) {
                if ( y + this.itemHeight < this.height ) {
                    y = this.height - this.itemHeight - 1;
                }
            } else {
                if ( y + this.itemHeight < this.topPosition + this.height ) {
                    y = this.height - this.itemHeight - 1;
                }
            }
        }
    }

    return y;
}

/**
 * @this ListView
 *
 * @param {number} index
 * @returns {boolean}
 */
function existItemSprite( index ) {
    if ( index >= this.parentSprite.getNumChildren()  || index < 0 ) {
        return false;
    }

    return true;
}

/**
 * @this ListView
 *
 * @param {number} index
 * @returns {[boolean,object?]}
 */
function isItemVisible( index ) {
    if ( !existItemSprite.call( this, index ) || index >= this.parentSprite.getNumChildren() ) {
        return [false, null];
    }

    const itemSprite = this.parentSprite.getChildAt( index );
    const height = itemSprite._height != null ? itemSprite._height : itemSprite.getHeight();
    let y, isVisible;
    let top = 0 + this.cutOffsetTop;
    let bottom = this.height + this.cutOffsetBottom;

    if ( this.clip ) {
        top = this.clip.top != null ? this.clip.top : top;
        bottom = this.clip.bottom != null ? this.clip.bottom : bottom;
    }

    if ( this.dontHide ) {
        isVisible = true;
    } else {
        y = itemSprite.getY() + this.parentSprite.getY();
        isVisible = y + height / 2 > top && y - height / 2 < bottom;
    }

    return [isVisible, itemSprite];
}

/**
 * @this ListView
 *
 * @param {number} i
 * @param {*} v
 * @param {*} oldTable
 */
function createChildSprite( i, v, oldTable ) {
    // TODO: 뭐뭐를 this 의 변수로 빼야하나
    let y = this.y1;
    //let col = 1;
    let spr;
    // 스프라이트 재사용
    let customWidth, customHeight;

    if ( oldTable ) {
        //log(Log.UI, v.text,oldTable[v],"재활용");
        spr = oldTable[v];
        [customWidth, customHeight] = [spr._$$customWidth, spr._$$customHeight];
    }

    if ( spr ) {
    } else {
        [spr, customWidth, customHeight] = this.spriteFunc( this,v, i, this.owner );
        spr._$$customWidth =  customWidth  != null ?  customWidth  : spr._$$customWidth;
        spr._$$customHeight =  customHeight  != null ?  customHeight  : spr._$$customHeight;
    }

    v.targetPosY = y;
    const h =  customHeight  != null ?  customHeight  : spr.getHeight( );
    const w =  customWidth  != null ?  customWidth  : spr.getWidth( );

    if ( i == 0 && this.params.pullToRefresh ) {
        this.pullLength = h + this.params.padding;// * 2.5; -- 조금만 당겨도 리프레시가 일어나서 좀 더 늘려놓음 by 세미콜론맨
        y = y - this.pullLength;
    }

    if ( ! this.animationFunc ) {
        spr.setPosition( this.width / 2 + ( spr.getWidth() - w ) / 2, y + Math.floor( h / 2 ) );
    } else {
        spr.setPosition( this.width / 2 + ( spr.getWidth() - w ) / 2, y + Math.floor( h / 2 ) );
        this.animationFunc( this, spr, i );
    }

    this.parentSprite.addChild( spr );

    if ( ! spr._skipLineFeed || i == this.items.length - 1 ) {
        this.y1 = this.y1 + h + this.params.padding;
    }

    this.items[i].sprite = spr;
    spr.setVisible( false );
}

/**
 * @this ListView
 *
 * @param {number} start
 * @param {*} oldTable
 */
function createChildSprites( start, oldTable ) {
    if ( this.items == null || this.items.length == 0 ) {
        return;
    }

    start = start || 0;

    for ( let i = start; i < this.items.length; i++ ) {
        const v = this.items[i];

        if ( !existItemSprite.call( this, i ) ) {
            createChildSprite.call( this, i, v, oldTable );

            if ( this.sprDynamic != null ) {
                this.itemHeight = Math.max( this.y1, this.y2 ) - this.params.padding - this.params.topMargin;

                if ( this.itemHeight > this.height - this.targetPosY ) {
                    break;
                }
            }
        }
    }
}

/**
 * @this ListView
 *
 */
function invalidateVisible() {
    if ( this.lowerbound && this.upperbound ) {
        if ( isItemVisible.call( this, this.lowerbound ) && isItemVisible.call( this, this.upperbound ) &&
			!isItemVisible.call( this, this.lowerbound - 1 ) &&
			!isItemVisible.call( this, this.upperbound + 1 ) ) {
            return;
        }
    }

    this.lowerbound = null;
    this.upperbound = null;

    if ( this.items ) {
        for ( const i in this.items ) {
            const v = this.items[i];

            if ( this.sprDynamic != null && !existItemSprite.call( this, i ) ) {
                if ( this.upperbound ) {
                    // upperbound 가 설정된 이후에는 리스트 항목을 만들지 않는다(보이지 않는 부분이므로 생성하지 않는다);
                    break;
                }

                // 보이는 부분에 대해서 리스트 항목 추가 생성
                createChildSprites.call( this, i );
            }

            const [isVisible, itemSprite] = isItemVisible.call( this, i );

            if ( itemSprite != null && itemSprite.isVisible() != isVisible ) {
                //log(v.text,"보이기",isVisible);
                itemSprite.setVisible( isVisible );
                const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "setVisible" );

                e.visible = isVisible;
                itemSprite.dispatchEvent( e );
            }

            if ( this.lowerbound != null ) {
                if ( isVisible ) {
                    //lowerbound는 가장 먼저 발견된 보이는 인덱스
                    if ( this.lowerbound != i ) {
                        const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "moved" );

                        e.lowerbound = i;
                        this.dispatchEvent( e );
                    }

                    this.lowerbound = i;
                }
            } else if ( this.upperbound != null ) {
                if ( ! isVisible ) {
                    //upperbound는 보이지 않는 인덱스 - 1;
                    this.upperbound = parseInt( i ) - 1;
                }
            }
        }
    }

    this.upperbound = this.upperbound != null ? this.upperbound : this.items.length;
}

/**
 * @this ListView
 *
 */
function onEnterFrame() {
    //if (this .locked) { return }
    let dstY;

    if ( this.locked == true ) {
        dstY = this.pullLength || 0;
    } else {
        dstY = this.targetPosY;
    }

    if ( this.drag ) {
    } else {
        const y = ( dstY * 0.5 + this.currentPosY * 4.5 ) / 5;
        const delta = Math.abs( this.currentPosY - y );

        if ( delta > 0.1 ) {
            this.currentPosY = y;
            this.parentSprite.setY( y );
            invalidateVisible.call( this );
        } else {
            this.parentSprite.setY( this.targetPosY );
            this.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, this );
        }

        //e.stopPropagation();
        this.setBackgroundY( y );
    }

    const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "movePosition" );

    e.y = this.parentSprite.getY();
    e.backgroundY = e.y * 0.9;
    this.dispatchEvent( e );
}

/**
 * @this ListView
 *
 * @param {*} e
 */
function onPointerDown( e ) {
    //log(Log.UI, "pointerDown:", this .locked, this .isVisible());

    if ( ! this.locked && this.isVisible() ) {
        const { x: ex, y: ey } = this.globalToLocal( e.x, e.y );
        const { x, y } = this.hitArea.globalToLocal( e.x, e.y );
        const [w, h] = [this.hitArea.getWidth(), this.hitArea.getHeight()];

        // 조작감 좋게 해주려고 약간 여유있게 해줌.
        //if (this .hitArea.hitTestPoint(e.x, e.y)) {
        const minX = Math.min( 0, ( this.width - w ) / 2 );
        let minY;

        if ( this.params.background ) {
            minY = this.currentPosY * 0.9 - 10;//(this .topPosition || 10) - 10;
        } else {
            minY = 0;
        }

        if ( x > minX && x < w && y > minY - this.params.margin && y < h + this.params.margin ) {
            let selectedIndex;

            for ( let i = 0; i < this.parentSprite.getNumChildren(); i++ ) {
                const spr = this.parentSprite.getChildAt( i );
                //log(Log.UI, i, e.x, e.y, spr.hitTestPoint(e.x, e.y));

                if ( spr.hitTestPoint( e.x, e.y ) ) {
                    selectedIndex = i;
                    break;
                }
            }

            this.clickIndex = selectedIndex;
            /*
			if (! selectedIndex) {
			
				let event = new Event("close");
				event.x = e.x;
				event.y = e.y;
				this .dispatchEvent(event);
			end*/
            [this.startPosX, this.startPosY] = [ex, ey];
            this.originalPosY = this.parentSprite.getY();
            this.lastPosY = ey;
            this.currentPosY = this.originalPosY + ey - this.startPosY;
            this.velY = 0;
            this.pointerTime = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now();
            this.drag = true;
            this.isClick = true;
            e.stopPropagation();
        } else {
            const event = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "close" );

            event.x = e.x;
            event.y = e.y;
            this.dispatchEvent( event );
            /*
			if (this .params.moreThanOne == null ) {
				e.stopPropagation();
			}
			*/
            e.stopPropagation();
        }
    }
}

/**
 * @this ListView
 *
 * @param {*} e
 */
function onPointerUp( e ) {
    if ( this.drag && this.isVisible() ) {
        const { y: ey } = this.globalToLocal( e.x, e.y );

        this.drag = false;
        const deltaTime = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now() - this.pointerTime;  // 시간이 길수록 천천히 움직인 것

        this.velY = this.velY / Math.pow( 3, ( deltaTime / 1000 * 30 ) );
        const deltaY = ey - this.startPosY;
        const deltaY2 = this.velY * 10;

        this.targetPosY = getClippedY.call( this, this.originalPosY + deltaY + deltaY2 );

        if ( this.pulled ) {
            console.log( "당겼음" );
            this.pulled = false;
            const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "refresh" );

            e.sprite = this.parentSprite.getChildAt( 1 );
            e.item = this.items[1];
            this.dispatchEvent( e );
            this.setLocked( true );
        } else if ( this.isClick && this.itemTouchEnable ) {
            //for (let i=1;i<=this ;i++) {
            if ( this.clickIndex == null ) {
                const event = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "close" );

                event.x = e.x;
                event.y = e.y;
                this.dispatchEvent( event );
            } else {
                for ( let i = 0; i < this.items.length; i++ ) {
                    //let spr = this .parentSprite.getChildAt(i);
                    const spr = this.items[i].sprite;

                    if ( spr && spr.hitTestPoint( e.x, e.y ) ) {
                        let ex, ey = this.globalToLocal( e.x, e.y );
                        const _e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "click" );

                        //e.data = {index=i,item=this .items[i]}
                        _e.index = i;
                        _e.item = this.items[i];
                        _e.item._target = spr;
                        _e.x = ex;
                        _e.y = ey;
                        //log(Log.UI, e.index,e.item);
                        this.dispatchEvent( _e );
                        break;
                    }
                }
            }
        }

        this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, this );
        e.stopPropagation();
    }
}

//마우스 드래그 동작을 적당히 붙여넣어서 휠이 동작하게 처리함.
/**
 * @this ListView
 *
 * @param {*} e
 * @returns
 */
function onPointerWheel( e ) {
    if ( this.drag ) {
        return;
    }

    if ( !this.isVisible() ) {
        return;
    }

    let { x: ex, y: ey } = this.globalToLocal( e.x, e.y );
    //from pointer down, 히트 영역 검사 부분
    let { x, y } = this.hitArea.globalToLocal( e.x, e.y );
    const [w, h] = [this.hitArea.getWidth(), this .hitArea.getHeight()];

    // 조작감 좋게 해주려고 약간 여유있게 해줌.
    const minX = Math.min( 0, ( this.width - w ) / 2 );
    let minY;

    if ( this.params.background ) {
        minY = this.currentPosY * 0.9 - 10;
    } else {
        minY = 0;
    }

    //히트 영역 검사
    if ( !( x > minX && x < w && y > minY - this.params.margin && y < h + this.params.margin ) ) {
        return;
    }

    //from pointer down, 마우스 다운시 처리
    [this.startPosX, this.startPosY] = [ex, ey];
    this.originalPosY = this.parentSprite.getY();
    this.lastPosY = ey;
    this.currentPosY = this.originalPosY + ey - this.startPosY;
    this.velY = 0;
    this.pointerTime = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now();
    //from pointer move, 드래그 처리 부분
    const WheelSpeed = 1;//휠 속도 처리 부분

    ( {  y: ey } = this.globalToLocal( e.x, e.y ) );
    y = this.originalPosY + ey - this.startPosY;

    if ( this.parentSprite.getY() != y ) {
        this.currentPosY = y;
        this.parentSprite.setY( y );
        invalidateVisible.call( this );
        this.setBackgroundY( y );
        const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "movePosition" );

        e.y = this.parentSprite.getY();
        e.backgroundY = e.y * 0.9;
        this.dispatchEvent( e );
    }

    this.velY = this.velY + ( ey - this.lastPosY );
    let deltaTime = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now() - this.pointerTime;  // 시간이 길수록 천천히 움직인 것

    deltaTime = Math.max( deltaTime, 100 );
    this.velY = this.velY / Math.pow( 3, ( deltaTime / 1000 * 30 ) );
    this.pointerTime = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now();
    //from pointer up, 드래그 후 마우스 업하는 부분
    const deltaY = ey - this.startPosY;
    const deltaY2 = this.velY * 10;

    this.targetPosY = getClippedY.call( this, this.originalPosY + deltaY + deltaY2 );
    //애니메이션 처리
    this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, this );
    e.stopPropagation();
}

/**
 * @this ListView
 *
 * @param {*} e
 */
function onPointerMove( e ) {
    if ( this.drag && this.isVisible() ) {
        const { x: ex, y: ey } = this.globalToLocal( e.x, e.y );
        let y = this.originalPosY + ey - this.startPosY;

        if ( this.stickOnBorder ) {
            y = getClippedY.call( this, y );
        }

        if ( this.parentSprite.getY() != y ) {
            this.currentPosY = y;
            this.parentSprite.setY( y );
            invalidateVisible.call( this );
            this.setBackgroundY( y );
            const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "movePosition" );

            e.y = this.parentSprite.getY();
            e.backgroundY = e.y * 0.9;
            this.dispatchEvent( e );
        }

        this.velY = this.velY + ( ey - this.lastPosY );
        const deltaTime = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now() - this.pointerTime;  // 시간이 길수록 천천히 움직인 것

        this.velY = this.velY / Math.pow( 3, ( deltaTime * 30 ) );
        this.pointerTime = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now();

        if ( Math.abs( this.startPosX - ex ) > 10 || Math.abs( this.startPosY - ey ) > 10 ) {
            this.isClick = false;
        }

        if ( ! this.pulled && this.pullLength && this.pullLength <= y ) {
            console.log( "당기기 준비" );
            this.pulled = true;
            const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "refreshReady" );

            e.sprite = this.parentSprite.getChildAt( 1 );
            e.item = this.items[1];
            this.dispatchEvent( e );
        } else if ( this.pulled && this.pullLength && y < this.pullLength ) {
            console.log( "당기기 취소" );
            this.pulled = false;
            const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "refreshCancel" );

            e.sprite = this.parentSprite.getChildAt( 1 );
            e.item = this.items[1];
            this.dispatchEvent( e );
        }

        //log(Log.UI, this .currentPosY);
        e.stopPropagation();
        this.lastPosY = ey;
    }
}

//-------------------------------------------------------------------------------------------------------------------
// ListView.add(item);
// ListView.insert(item, pos);
//-------------------------------------------------------------------------------------------------------------------

/**
 * @this ListView
 *
 * @param {*} v
 * @param {number} pos
 */
function insertItem( v, pos ) {
    pos = pos != null ? pos : this.items.length;

    if ( typeof v == "object" ) {
        this.items.splice( pos, 0, { text: v[0], data: v[1] } );
    } else if ( typeof v == "string" ) {
        this.items.splice( pos, 0, { text: v } );
    }
}



class ListView extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    //-------------------------------------------------------------------------------------------------------------------
    // ListView.constructor(itemTable, height, params);
    //-------------------------------------------------------------------------------------------------------------------

    constructor( itemTable, width, height, params ) {
        super();
        params = params  != null ? params  : {};
        this.params = params;
        params.topMargin = params.topMargin != null ? params.topMargin : 0;
        params.bottomMargin = params.bottomMargin  != null ? params.bottomMargin  : 0;
        this.height = height != null ? height : _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.height;
        this.width = width != null ? width : _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.width;
        this.dontHide = params.dontHide;
        this.lockColumn = params.lockColumn;
        this.owner = params.owner;
        this.sprDynamic = params.sprDynamic;
        this.animationFunc = params.animationFunc;
        this.align = params.align != null ? params.align : "top";
        this.stickOnBorder = params.stickOnBorder;
        // 상하 잘리는 범위 옵셋 지정
        this.cutOffsetTop = params.cutOffsetTop != null ? params.cutOffsetTop : 0;
        this.cutOffsetBottom = params.cutOffsetBottom  != null ? params.cutOffsetBottom  : 0;
        this.topPosition = 0;

        // background;
        if ( params.background ) {
            this.topPosition = params.background.headerHeight;
            this.makeBackground();
        }

        const margin = this.cutOffsetTop + this.cutOffsetBottom + params.topMargin + params.bottomMargin;

        this.setCustomBounds( 0, 0, width, height + margin );
        this.refreshHitArea();

        // 리스트아이템이 이 아래에 들어감
        this.soundTimers = [];
        this.parentSprite = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.parentSprite.setY( this.topPosition );
        this.addChild( this.parentSprite );
        this.spriteFunc = params.spriteFunc != null ? params.spriteFunc : defaultSpriteFunc;
        this.targetPosY = 0;
        this.currentPosY = 0;
        params.padding = params.padding != null ? params.padding : ITEM_PADDING;
        //params.topMargin = params.topMargin || LIST_TOP_MARGIN;
        this.items = [];
        this.setItems( itemTable );
        this.itemTouchEnable = true;
        params.margin =  params.margin != null ?  params.margin : 0;
        this.clip = params.clip;
        this.updateClip();
        this.pullLength = undefined;
    }

    updateClip() {
        if ( this.clip ) {
            this.setClip( 0, 0, this.width, this.height );
        }
    }



    //-------------------------------------------------------------------------------------------------------------------
    // ListView.setLocked(v);
    //-------------------------------------------------------------------------------------------------------------------

    setLocked( v ) {
        if ( this.locked && v == null ) {
            this.currentPosY = this.pullLength;
        }

        this.locked = v;
    }

    //-------------------------------------------------------------------------------------------------------------------
    // ListView.refreshHitArea();
    //-------------------------------------------------------------------------------------------------------------------

    refreshHitArea() {
        let m;

        if ( this.params.fitHitAreaToScreenWidth ) {
            m = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.createBox( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.left, 0, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width, this.height, 0xff0000 );
        } else {
            m = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.createBox( 0, 0, this.width, this.height, 0xff0000 );
        }

        m.setAlpha( 0.2 );
        m.setVisible( false );
        this.addChild( m );

        if ( this.hitArea ) {
            this.hitArea.removeFromParent();
        }

        this.hitArea = m;
        this.hitArea.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN, onPointerDown, this );
        this.hitArea.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP, onPointerUp, this );
        this.hitArea.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_MOVE, onPointerMove, this );
        //this.hitArea.addEventListener(Event.POINTER_WHEEL, onPointerWheel, this);
    }

    //-------------------------------------------------------------------------------------------------------------------
    // ListView.setCurY(y, stopScroll);
    //-------------------------------------------------------------------------------------------------------------------

    /**
     *
     *
     * @param {number=} [y=null]
     * @param {boolean} [stopScroll=false]
     * @memberof ListView
     */
    setCurY( y = null, stopScroll = false ) {
        if ( y == null ) y = this.currentPosY; 

        this.targetPosY = y;
        this.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, this );

        if ( stopScroll ) {
            this.currentPosY = y;
            this.parentSprite.setY( y );
        } else {
            //log(Log.UI, this.currentPosY,this.targetPosY);
            this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, this );
        }

        invalidateVisible.call( this );
    }


    add( item ) {
        insertItem.call( this, item );
        this.setItems();
    }

    insert( item, pos ) {
        insertItem.call( this, item, pos );
        this.setItems();
    }

    //-------------------------------------------------------------------------------------------------------------------
    // ListView.getIndex(item);
    // ListView.getItem(index);
    // ListView.setItem(item, index);
    // ListView.getNumOfItems();
    //-------------------------------------------------------------------------------------------------------------------

    getIndex( item ) {
        return this.items.indexOf( item );
    }

    getItem( index ) {
        return this.items[index];
    }

    setItem( item, index ) {
        this.removeAt( index );
        this.insert( item, index );
    }

    getNumOfItems() {
        return this.items.length;
    }


    //-------------------------------------------------------------------------------------------------------------------
    // ListView.refresh();
    //-------------------------------------------------------------------------------------------------------------------

    // 리스트 스프라이트를 다시그린다.
    refresh() {
        this.setItems( null , false, true );
    }

    //-------------------------------------------------------------------------------------------------------------------
    // ListView.setItems(itemTable, forceUpdate, forceRefresh);
    //-------------------------------------------------------------------------------------------------------------------

    /**
     *
     *
     * @param {[]=} [itemTable = null]
     * @param {boolean} [forceUpdate = false]
     * @param {boolean} [forceRefresh = false]
     * @memberof ListView
     */
    setItems( itemTable = null, forceUpdate = false, forceRefresh = false ) {
        if ( this.y1 == null || this.y2 == null || forceUpdate || itemTable != null || this.sprDynamic == null ) {
            this.y1 = 0 + this.params.topMargin;
            this.y2 = 0 + this.params.topMargin;
        }

        let oldTable, oldParentSprite;

        if ( forceUpdate || itemTable != null ) {
            this.parentSprite.clearChildren();
            this.items = [];

            //k,v 테이블로 바꿈
            if ( itemTable != null ) {
                for ( const i in itemTable ) {
                    const v = itemTable[i];

                    insertItem.call( this, v );
                }
            }
        } else if ( forceRefresh ) {
            const { x, y } = this.parentSprite.getPosition();

            this.parentSprite.clearChildren();
            this.parentSprite.setPosition( x, y );
        } else {
            oldParentSprite = this.parentSprite;
            oldTable = this._lastSprites;
            oldParentSprite.removeFromParent();
            this.parentSprite = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
            this.addChild( this.parentSprite );
            this.parentSprite.position = oldParentSprite.getPosition();
        }

        this.lowerbound = null;
        this.upperbound = null;

        if ( this.items != null ) {
            // 리스트 항목을 처음 부터 추가
            createChildSprites.call( this, 0, oldTable );
        }


        //전체 아이템의 세로 사이즈
        //this.itemHeight = y - this.params.padding;
        if ( this.sprDynamic == null ) {
            this.itemHeight = Math.max( this.y1, this.y2 ) - this.params.padding - this.params.topMargin + this.params.bottomMargin;

            //변경된 사이즈 처리
            if ( this.itemHeight < this.height ) {
                if ( this.targetPosY + this.itemHeight < 0 ) {
                    this.targetPosY = 0;
                    this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, this );
                }
            }

            if ( this.items != null ) {
                this._lastSprites = [];

                for ( const i in this.items ) {
                    const v = this.items[i];

                    if ( i < this.parentSprite.getNumChildren() ) {
                        this._lastSprites[v] = this.parentSprite.getChildAt( i );
                    } else {
                        this._lastSprites[v] = null;
                    }
                }
            } else {
                this._lastSprites = null;
            }
        }

        if ( this.align == "bottom" ) {
            this.parentSprite.setY( this.height - this.itemHeight );
        }

        invalidateVisible.call( this );

        if ( this.align == "bottom" ) {
            this.targetPosY = this.height - this.itemHeight - 1;
            this.parentSprite.setY( this.targetPosY );
            //this.addEventListener(Event.ENTER_FRAME, onEnterFrame, this);
        }
    }

    //-------------------------------------------------------------------------------------------------------------------
    // ListView.clear();
    // ListView.remove(item);
    // ListView.removeAt(index);
    //-------------------------------------------------------------------------------------------------------------------

    clear() {
        for ( const i in this.soundTimers ) {
            const t = this.soundTimers[i];

            t.stop();
        }

        this.soundTimers = [];

        this.items = [];
        this.setItems();
    }

    remove( item ) {
        const i = this.items.indexOf( item );

        console.assert( i >= 0 );
        this.removeAt( i );
    }

    removeAt( index ) {
        this.items.splice( index, 1 );
        this.setItems();
    }

    //-------------------------------------------------------------------------------------------------------------------
    // ListView.moveTo(index);
    //-------------------------------------------------------------------------------------------------------------------

    moveTo( index ) {
        index = index || 1;

        if ( this.items && this.items.length > 0 ) {
            if ( index > this.items.length ) {
                index = this.items.length;
            }

            this.targetPosY = -this.items[index].targetPosY;

            if ( this.targetPosY < 0 ) {
                if ( this.itemHeight < this.height ) {
                    this.targetPosY = this.topPosition;
                } else if ( this.targetPosY + this.itemHeight < this.height ) {
                    this.targetPosY = this.height - this.itemHeight;
                }
            }
        } else {
            this.targetPosY = this.topPosition;
        }

        if ( this.currentPosY != this.targetPosY ) {
            this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, this );
        }
    }

    //-------------------------------------------------------------------------------------------------------------------
    // ListView.setItemsTouchDisabled();
    // ListView.setItemsTouchEnabled();
    //-------------------------------------------------------------------------------------------------------------------

    // 버튼 터치 가능/불가능하게
    setItemsTouchDisabled() {
        this.itemTouchEnable = false;
        const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "itemsTouchDisabled" );

        this.dispatchEvent( e );
    }

    setItemsTouchEnabled() {
        this.itemTouchEnable = true;
        const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "itemsTouchEnabled" );

        this.dispatchEvent( e );
    }

    //-------------------------------------------------------------------------------------------------------------------
    // ListView.makeBackground();
    //-------------------------------------------------------------------------------------------------------------------

    makeBackground() {
        if ( this.params.background.image ) {
            const img = this.params.background.image;
            const [w, h] = [img.getWidth() / img.getScaleX(), img.getHeight() / img.getScaleY()];
            const [sx, sy] = [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width / w,( this.topPosition - 10 ) / h];
            const minScale = Math.max( sx, sy );
            const maxScale = Math.max( sx, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height / h );//*1.2;
            const minY = ( this.topPosition - 10 ) / 2;
            const maxY = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height / 2;

            //log (Log.UI, "해더이미지",w,h,minScale,maxScale,"물리가로폭",CONFIG.PW);
            img.setScale( minScale );
            img.setPosition( this.width / 2 - w * minScale / 2, minY - h * minScale / 2 );
            this.addChild( img );
            this.headerImage = img;
            this.headerImageMinScale = minScale;
            this.headerImageMaxScale = maxScale;
            this.headerImageMinY = minY;
            this.headerImageMaxY = maxY;
        }

        const s = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Shape();

        s.makeBox( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.left,
                   -10,
                   _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width,
                   _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height + 10,// - this.getY() + 10, 
                   this.params.background.color || 0xffffff );
        this.addChild( s );
        this.background = s;
        this.setBackgroundY( this.topPosition );
    }


    //-------------------------------------------------------------------------------------------------------------------
    // ListView.setBackgroundY(y);
    //-------------------------------------------------------------------------------------------------------------------

    setBackgroundY( y ) {
        if ( ! this.background ) {
            return;
        }

        y = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( y, 0, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height / 0.9 );

        if ( this.params.background.image ) {
            const img = this.headerImage;
            const [w, h] = [img.getWidth() / img.getScaleX(), img.getHeight() / img.getScaleY()];
            const v = y / _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height;
            const scale = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( this.headerImageMinScale, this.headerImageMaxScale, v );

            y = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( this.headerImageMinY, this.headerImageMaxY, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.linear( v ) );
            this.headerImage.setScale( scale );
            this.headerImage.setPosition( this.width / 2 - w * scale / 2, y - h * scale / 2 );
            const v2 = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( this.params.background.darkLevel || 0.5, 1.0, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.linear( v ) );

            this.headerImage.setColorMultiplier( v2, v2, v2 );
        }

        this.background.setY( y * 0.9 > 0 && y * 0.9 || 0 );
    }


    //-------------------------------------------------------------------------------------------------------------------
    // ListView.fadeIn(dur);
    //-------------------------------------------------------------------------------------------------------------------

    fadeIn( dur ) {
        //log(Log.UI, "페이드인효과");
        this.parentSprite.setAlpha( 0 );
        new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this.parentSprite, dur || 1000, { alpha: 1 } );
    }

    //-------------------------------------------------------------------------------------------------------------------
    // ListView.getVisibleItemSprites();
    //-------------------------------------------------------------------------------------------------------------------

    getVisibleItemSprites() {
        const t = [];

        for ( let i = this.lowerbound; i <= this.upperbound; i++ ) {
            t.push( this.items[i].sprite );
        }

        return t;
    }
}



/***/ }),

/***/ "./engine/src/lib/mabiMML.js":
/*!***********************************!*\
  !*** ./engine/src/lib/mabiMML.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MabiMML)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");





const destiny = `
MML@t106L8r16G#.ABB>C16C.&C<E.F#.&F#A.B.>D<B.BB16B16B16BAAG16GF#.r.D#16AGGA16B.G#ABB>C16C.&Cr16E.DCC<B16B.&BF#E16EB16B16B16BA16A.GGF#AG16G16E2>F#.E.<B>G.F#.&F#A.G.<A16>e16F.E.<A>F.E.<A>G.F.&F<G32>C#32E32A4.&A32r<FFF16F.<AB->CC<B-16>F.&FrB-.B-16D16E16FFFF16F.GEDDE16C.&CrG.A.FDDE16F.DEFDA16A.&ArF.A16F16G16AAAA16A.B-GF16G.&Gr4A4>E4F<FFF16F.<AB->CC<B-16>F.&F>C<A.B-16D16E16FFFF16F.EFG16A2&A16rAB-F#o1B>B<B>B<B->B-<B->B-<A>A<A>AD>D<D>D<G#>G#<G#>G#<A>A<A>A<D4>D<D4A>D<DG.>D16G4<CG>C<CF.>C16F<F<B->FB-<B-B.B16r4B.>BB.E>E<F#>F#<G#>G#<E4o4B>C16C.&Cr<F#GAAB16B.&Br4r16B16B16B16BAAG16GF#.r.D#16AGGA16B.G#ABB>C16C.&Cr16E.DCC<B16B.&Br4r16B16B16B16BA16A.GGF#AG16G16o2E>E<E>E<D>D<D>D<C>C<C>C<<B>B<B>BD>D<D>D<C>C<C>C<B->B-<B->B-<A2L32DA1.r4.r16.,
v14r16L8D.DEG#.G.&GC.C.&CF#.F#.rG.G.&GE4E4D#4F#4r16E.ED#D4D4<<A.>AE16<AD.>D.<DG.>GD16<GCG>C<CF#4>F#<F#<B.>B.<B>E>E<E>E<D>D<D>D<C>C<C>C<<B>B<B>BD>D<D>D<C>C<C>C<<B->B-<B->B-<A2>D4>D4<DA>D4<G4>G.D16<G>DG<GC4>C.<G16C4>C4<F4>F.C16<F>CF4<<B-4>B-4<B->FB-<B-B4>B4<BB>B4C4>C.<G16C4>C4<C#4>C#.<A16C#A>C#<C#D4>D4<DA>D4<G4>G..D16<G>DG<GC4>C.<G16C4>C4<E-4>E-.<E-16DD>D<D>>v15A.G.GrGAEG.F.F4.DEFF16E.EFEGF16F16D2rAB-F#A.G.GrGAEG.F.F4FGFE.E.ED#.B.AAG#G#A16BG#.ABo1A4>A4DA>D<DG4>G<GCG>C<CF#4>F#4<<B4>B4E16>E<E16>E<F#G#>EG#<G#<A4>A4DA>D<DF4>F<FEB>E<E<A.>E16A4<B>F#B<Bo5F#.E.<B>F#.E.<B>G.F#.&F#A.G.<A16>E16F.E.<A>F.E.<A>G.F.&FL32rC#EA4.&Arr<<F#A>CE1&E4.r4.rrr,
v14r16<L8E.F#G#<A2>D4.<F#G2>C2<F#4.AB2r16E.EF#G#.>E.&E>L4EGF#AAGL8<AG16G.&G>E.E<A.>E4D#4>F#.E.<BB.B.GB.B.&B>D#.D#.r<A.A.rA.A.rA.A.&Ar2<A.>C4r.F.A.B-.D16r4.F.F.<B-.B-16r4.>D.<B-.>C2rC.E.C.<A16r4.>A4.F2rD.D.F.C16r4.G.F.B-.C16r4E4A4A4r4.>C.<A.B-2rF.F.D2r<B-.>E-.F.D-16r4F#4C4>A.G.&GA.B-.&B->C.<F.&FE.F.&FF.E.&EF.E.&ED.<A.A.B-.><F4L2DDE-D<AB>E<B4>E4L8E-.G.CE-.E-.CE.F#.>D<B4E4E.CC.<B.>D.rE16>E.ED#D<E.G.D.G.CF#.F#.DA.F.AA.G#.&G#E4ECD#<B.B.L2>GGBAAAAG;
`;
const ahchoo = `
MML@t128v15>>L4F2E2D.L8C16<B-16>C<B-AGG>C<F2ECD2<CDDD16E16v14o1G>GL16>EFGArGD<B-GD<B-GL8>C2C#2rA>DEFA>C4L16rv15FG>C<FG>L32C.<C.FG>CFG>C<CFG>CFG>C2&C8&C&C2L8ro4FF4v14o1B-4>B-<B-B->B-rC4.>C<CrCB-4<A4>A<AA4>A4D4>D<DrD>D4<<B-4>B-<B-B->B-rC4.>C<CrC>C4<C#4>C#<C#C#4>C#<D4>D4<AD>D<D4<B4>B<BB4>B4<B-4>B-<B-B-4>B-4<A4>A<AA4>A4D4>D<DD4>D4<<G>G<GA4A>A4<B->B-<B-B4B>B4C4>C<GCG>C<Cr>C<C4r4>C<C<B-4B-4>C4C4D-4D-A->E-4<E-.<A-.>A-<A-4A->A-<A-4A->A-<A-4A->A-<A-4G>G<G4G>G<G>C4>C<C>C<C>C<C>C<F>F<F>F<F>F<FE-4>E-<E->E-<E->E-<E-D4>D<DF#4>F#<F#G4>G<G-4F4<B-.A-.>A-<A-4A->A-<A-4A->A-<A-4A->A-<A-4G>G<G4G>G<G>C4>C<C>C<C>C<C>C<F>F<F>F<F>F<FE-4>E-<E->E-<E->E-<E-D4>D<DF#4>F#<F#F4>F<B->B-C4<B4v15o5C#4C#>C#4<<EEEED#D#>C#C#<BBA#16B.&BB>B<BA#B>C#DDC#C#16<G#.GG#>C#16<B.A4rAG#AB16>C#.&C#r4.C#D#E4EEED#<A#>D#C#4<BB4A#4B.>C#.&C#<G#.G#16rEEEED#D#>C#C#<BBA#16B.&BB.B16BA#B>C#DDC#C#16<G#.GG#>C#16<B.AA.A16AG#AB16>C#.&C#rC#C#C#D#E4EEED#<A#>D#C#4<BB4B4B4t76L16>>C#.<C#.F#B.<B.>EA.<A.>EL32o3rF#A>>CG#2.&G#&G#16.o2E.B.>EF#.G#16&G#64&G#2.&G#2.,
v14>B-2G2F.r.rCr2<GF2r2v15F2E2D2E.E16F16G2F.E8C1.&&C2L8rCC4rEEFF4rEF4A4E4F4r4GFFEEDDCC4G4F4rEEFF4rEF4A4E4F4rB-B-B-B-AAGGFF4EEF4A4A.A16AGF16G16G4rEEEG>DC4.C.C16C<B-AG4AF4.AAAF4.G4.rF16G16AGFG4A4B-4.r4AGFG4.r2.F4E4F4G4A-4G4A-4B-.>C.&C<G.G16rE-E-E-E-DD>CC<B-B-A16B-.&B-B-.B-16B-AB->CD-D-CC16<G.F#G>C16<B-.A-A-.A-16A-GA-B-16>C.&C<A-.A-16r>CDE-4E-E-E-D<A>DC4<B-B-4A-4B-.>C.&C<G.G16rE-E-E-E-DD>CC<B-B-A16B-.&B-B-.B-16B-AB->CD-D-CC16<G.F#G>C16<B-.A-A-.A-16A-GA-B-16>C.&CrCCCDE-4E-E-E-D<A>DC4<B-B-2B.>C#16v14L4o2A1A1G#1>C#<C#C#C#8>C#16<F#8.F#F#F#8F#8EEEE8E8D#>L8D#<D#G4>G<GG#4>G#<G4F#4<B.A.>A<A4A>A<A4A>A<A4A>A<A4G#>G#<G#4G#>G#<G#>C#4>C#<C#>C#<C#>C#<C#>C#<F#>F#<F#>F#<F#>F#<F#E4>E<E>E<E>E<ED#4>D#<D#G4>G<GF#4F#F#4BF#<B4L16>>A.>E.A<G#.>E.F#<F#.>C#.E<<B1L32r8r.r.>>Et54<B>G#B>E>E1&E4.,
v14<B-1C1<A2>F2<B->F8B-.&B-B-2B-2F2A2<D1&D1&D1L8rDD4>>rC2.CrC4CC4C4rC2.ArB-4AD4C4rC2.CrC4CC4C4rE2.DD4C4C2F2rD4E4.G.G16r>D4<G4.G4r>CCF4.F.F16rFEC<D4.E2rD4.D2rF4.F4DD<B-r1L4B-B-B-B->D-D-D-L8D-.E-.&E-C4rGGF4.F.F.rF.F.&FF.F.FFF4.E4F4E.E-.&E-C4rCCC4.E-4rA-GF#2L4ArF.G-E-L8F.G.&GC4rCC<B-4.>F.F.rF.F.&FF4rFFF4.E4D-4E.E-.&E-C.C.E-E-E-4.A-.A-.A-GF#2A4r4L4E-.FGrE.>G#r.<<B.r.rB.>>F#.r<F#FD#F8.E2&E16L8rEEE2r4AG#G2A#4r4F#4.G4E4F#.G#.&G#C#4rG#G#F#4.r2F#.F#2.r.F#4.F4D#4F.E.&EE4.EEE4.A4.AG#G2A#4r4A4EE4F#4F#4;
`;


const steps = {
    A: 0,
    B: 2,
    C: -9,
    D: -7,
    E: -5,
    F: -4,
    G: -2
};

const REF_FREQ = 440; // A4;
const REF_OCTAVE = 4;
const ROOT_MULT = 2 ** ( 1 / 12 ); // A constant: the twelfth root of two.


function calculateNoteFrequency( n ) {
    return REF_FREQ * ( ROOT_MULT ** n );
}

function calculateNoteSteps( str ) {
    const [_, note, sharp, octave] = /([a-z])([#-]?)(\d)/i.exec( str );

    if ( note == "N" ) {
        return parseInt( octave ) - 13;
    } else {
        return ( parseInt( octave ) - REF_OCTAVE ) * 12 + steps[note] + ( sharp == "#" ? 1 : 0 ) + ( sharp == "-" ? - 1 : 0 );
    }
}

function calculateNote( note ) {
    const steps = calculateNoteSteps( note );

    return calculateNoteFrequency( steps );
}

/**
 * @this MabiMML
 *
 * @param {string} mml
 * @returns {[any,any]}
 */
function mml2note( mml ) {
    const noteResult = [];
    const tempoResult = []; // for tempo;
    let tempo = 120;
    let octave = 4;
    let notelength = 4;
    let volume = 15;
    let time = 0;
    let pos = 0;
    let finished = false;

    do {
        //string.match(string.sub(mml, pos), "^(%&*)([%a<>])(%A-)()[%&%a<>]");
        const r = /^(&*)([a-z<>])([^a-z<>]*)[&a-z<>]/i.exec( mml.substr( pos ) );
        let found, link, c, args;

        if ( r == null ) {
            [found, link, c, args] = /^(&*)([a-z<>])([^a-z<>]*)/i.exec( mml.substr( pos ) );
            finished = true;
        } else {
            [found, link, c, args] = r;
        }

        pos = pos + found.length - 1;

        if ( c == "O" ) { // Set octave;
            octave = parseFloat( args );
        } else if ( c == "T" ) { // Set tempo;
            tempo = parseFloat( args );
            tempoResult.push( [time, tempo] );
        } else if ( c == "V" ) { // Set volume;
            volume = parseFloat( args );
        } else if ( c == "R" ) { // Rest;
            let notetime;

            if ( /\d+/.test( args ) ) {
                const [len] = args.match( /\d+/ );

                notetime = parseFloat( len );
            } else {
                notetime = notelength;
            }

            if ( /\./.test( args ) ) {
                notetime = notetime / 1.5;
            }

            noteResult.push( [time, 0, 0] );
            time = time + 240 / notetime;
        } else if ( c == "L" ) { // Set note length;
            notelength = parseFloat( args );

            if ( /\./.test( args ) ) {
                notelength = notelength / 1.5;
            }
        } else if ( c == ">" ) {
            // Increase octave;
            octave = Math.max( 0, octave + 1 );
        } else if ( c == "<" ) {
            // Decrease octave;
            octave = Math.max( 0, octave - 1 );
        } else if ( /[A-GN]/.test( c ) ) {
            // Play note;
            let note;

            if ( /[+#-]/.test( args ) ) {
                const [mod] = args.match( /[+#-]/ );

                if ( mod == "#" || mod == "+" ) {
                    note = c + "#" + octave;
                } else if ( mod == "-" ) {
                    note = c + "-" + octave;
                }
            } else {
                note = c + octave;
            }

            let notetime;

            if ( /\d+/.test( args ) ) {
                const [len] = args.match( /\d+/ );

                notetime = parseFloat( len );
            } else {
                notetime = notelength;
            }

            if ( /\./.test( args ) ) {
                notetime = notetime / 1.5;
            }

            const linkFlag = link != "";
            const pitch = calculateNote( note );

            noteResult.push( [time, pitch, volume, linkFlag] );
            time = time + 240 / notetime;
        }
    } while ( !finished );

    noteResult.push( [time, 0, 0] );

    return [noteResult, tempoResult];
}

/**
 * @this MabiMML
 *
 * @param {string} mml
 * @returns {[number[],number[]]}
 */
function parseMML( mml ) {
    //".*MML@(.*);-"
    console.assert( /MML@([\s\S]*);/m.test( mml ),"Can't found MML tag." );
    let [_, s] = /MML@([\s\S]*);/m.exec( mml );
    let chNotes = [];
    const noteResult = [];

    if ( s ) {
        s = s.toUpperCase();
        //s = string.gsub(s,"[^ABCDEFG#+%-%.O><TVLNR0-9&,]","");
        s = s.replace( /\s/g,"" );
        chNotes = s.split( "," );
    }

    const tempo = [];

    for ( const i in chNotes ) {
        const chNote = chNotes[i];
        //log(v);
        let tempoResult;

        [noteResult[i], tempoResult] = mml2note.call( this, chNote );

        for ( const j in tempoResult ) {
            const v2 = tempoResult[j];

            tempo.push( v2 );
        }
    }

    tempo.sort( ( a, b ) => a[0] - b[0] );

    for ( let i = tempo.length - 1; i > 1; i-- ) {
        if ( tempo[i] == tempo[i - 1] ) {
            tempo.splice( i, 1 );
        }
    }

    return [noteResult, tempo];
}

/**
 * @this MabiMML
 *
 */
function playNote() {
    let nextPlayTime = Number.POSITIVE_INFINITY;
    let duration;

    if ( this.tempoPosition < this.tempos.length && this.tempos[this.tempoPosition][0] <= this.time ) {
        this.tempo = this.tempos[this.tempoPosition][1];
        this.tempoPosition = this.tempoPosition + 1;

        if ( this.tempoPosition < this.tempos.length ) {
            nextPlayTime = Math.min( nextPlayTime, this.tempos[this.tempoPosition][0] );
        }
    }

    let notePlayed;

    for ( const channelIndex in this.channels ) {
        const channel = this.channels[channelIndex];

        if ( this.positions[channelIndex] < channel.length ) {
            const [time, pitch, volume, link] = channel[this.positions[channelIndex]];

            if ( time <= this.time ) {
                const sc = this.sound[channelIndex];

                if ( pitch > 0 ) {
                    sc.setVolume( Math.pow( Math.min( 1, volume / 15 ), 2 ) * this.volume );
                    sc.setPitch( pitch / 440 * this.pitchMod );

                    if ( !link ) {
                        sc.stop();
                        sc.play();
                        notePlayed = true;
                    } else {
                        sc.setPause( true );
                        sc.setPause( false );
                        //played = true;
                    }
                } else {
                    if ( sc ) {
                        sc.stop();
                        this.sc[channelIndex] = null;
                    }
                }

                this.positions[channelIndex] = this.positions[channelIndex] + 1;
            }

            if ( this.positions[channelIndex] < channel.length ) {
                nextPlayTime = Math.min( nextPlayTime, channel[this.positions[channelIndex]][0] );
            }
        }
    }

    if ( nextPlayTime < Number.POSITIVE_INFINITY ) {
        let remain = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now() - this.ms, -100, 100 );

        if ( this.time == 0 ) {
            remain = 0;
        }

        duration = ( nextPlayTime - this.time ) / this.tempo * 1000 / this.speed;
        this.timer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( duration - remain * 0.5, playNote, this );
        this.time = nextPlayTime;
        this.ms = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now()  + duration;

        if ( notePlayed ) {
            const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "note", { duration: duration } );

            this.dispatchEvent( e );
        }
    } else {
        console.log( "End of song" );
        this.stop();
        const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "complete" );

        this.dispatchEvent( e );
    }
}



class MabiMML extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {
    constructor( mml, instrument ) {
        super();
        this.instrument = instrument;
        this.channels = undefined;
        this.tempos = undefined;
        [this.channels, this.tempos] = parseMML.call( this,mml );
        this.positions = [];
        this.tempoPosition = 0;
        this.tempo = 120;
        this.sound = [];
        this.sc = [];
        this.speed = 1.0;
        this.pitchMod = 1.0;
        this.volume = 1.0;
        console.log( this.channels );
        for ( const i in this.channels ) {
            this.positions[i] = 0;

            if ( typeof instrument == "object" ) {
                this.sound[i] = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound( instrument[i] );
            } else {
                this.sound[i] = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound( instrument );
            }
        }
    }

    setSpeed( v ) {
        this.speed = v;
    }

    setPitch( v ) {
        this.pitchMod = v;
    }

    play() {
        this.time = 0;
        this.ms = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now();
        console.log( "Begin song" );
        playNote.call( this );
    }

    stop() {
        if ( this.timer ) {
            this.timer.stop();
            this.timer = null;
        }

        for ( const i in this.channels ) {
            if ( this.sc[i] ) {
                this.sc[i].stop();
                this.sc[i] = null;
            }
        }
    }

    setVolume( v ) {
        this.volume = v;
    }
}



/***/ }),

/***/ "./engine/src/lib/random.js":
/*!**********************************!*\
  !*** ./engine/src/lib/random.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/*

비트연산 버전으로 바꾼 랜덤

l1 = lcg(0) // Linear congruential generator (Ansi C params);
l2 = lcg(0, 'nr') //Linear congruential generator (Numerical recipes params);
l3 = lcg(0, 'mvc') // Linear congruential generator (Microsoft Visual C params);
c1 = mwc(0) // Multiply-with-carry (Ansi C params);
c2 = mwc(0, 'nr') // Multiply-with-carry (Numerical recipes params);
c3 = mwc(0, 'mvc') // Multiply-with-carry (Microsoft Visual C params);
m = twister(0) // Mersenne twister;

*/

const _random = {
    random: function ( i, j ) {

        if ( i == null ) {

            return Math.random();
        
        } else if ( j == null ) {

            return Math.floor( Math.random() * i + 1 );
        
        } else {

            return Math.floor( Math.random() * ( j - i ) + 1 ) + i;
        
        }
    
    }
};

function normalize( n ) { //keep numbers at 32 bits;

    //return n % 0x100000000;
    return n & 0xffffffff;

}

function seed() {

    //return normalize(tonumber(tostring(os.time()):reverse()));
    return normalize( +new Date() );

}

//Mersenne twister;
class mersenne_twister {

    constructor( s ) {

        this.mt = [];
        this.index = 0;
        this.randomseed( s );
    
    }

    randomseed( s ) {

        if ( s == null ) s = seed();
        this.mt[0] = normalize( s );
        for ( let i = 1; i <= 623; i++ ) {

            this.mt[i] = normalize( 0x6c078965 * ( this.mt[i - 1] ^ ( ( this.mt[i - 1] / 0x40000000 ) >> 0 ) + i ) );
        
        }
    
    }

    random( a, b ) {

        let y;
        if ( this.index == 0 ) {

            for ( let i = 0; i <= 623; i++ ) {

                //y = bit_or(math_floor(this.mt[i] / 0x80000000) * 0x80000000, this.mt[(i + 1) % 624] % 0x80000000);
                y = this.mt[( i + 1 ) % 624] & 0x7fffffff;
                this.mt[i] = this.mt[( i + 397 ) % 624] ^ ( y >> 1 );
                if ( ( y & 1 ) != 0 ) {

                    this.mt[i] = this.mt[i] ^ 0x9908b0df; 
                
                }
            
            }
        
        }
        y = this.mt[this.index];
        y = y ^ ( y / 0x800 );
        y = y ^ ( normalize( y << 7 ) & 0x9d2c5680 );
        y = y ^ ( normalize( y << 15 ) & 0xefc60000 );
        y = y ^ ( y >> 14 );
        y = y >>> 0;
        this.index = ( this.index + 1 ) % 624;
        if ( a == null ) {

            return y / 0x100000000;
        
        } else if ( b == null ) {

            if ( a == 0 ) {

                return y;
            
            } else {

                return 1 + ( y % a );
            
            }
        
        } else {

            return a + ( y % ( b - a + 1 ) );
        
        }
    
    }

}

//Linear Congruential Generator;
class linear_congruential_generator {

    constructor( s,r ) {

        this.a = 1103515245;
        this.c = 12345;
        this.m = 0x100000000;  //from Ansi C;
        if ( r ) {

            if ( r == "nr" ) {

                [this.a, this.c, this.m] = [1664525, 1013904223, 0x100000000]; //from Numerical Recipes.
            
            } else if ( r == "mvc" ) {

                [this.a, this.c, this.m] = [214013, 2531011, 0x100000000];
            
            }//from MVC;
        
        }
        this.randomseed( s );
    
    }

    random( a, b ) {

        const y = ( this.a * this.x + this.c ) % this.m;

        this.x = y;
        if ( a == null ) {

            return y / 0x100000000;
        
        } else if ( b == null ) {

            if ( a == 0 ) {

                return y;
            
            } else {

                return 1 + ( y % a );
            
            }
        
        } else {

            return a + ( y % ( b - a + 1 ) );
        
        }
    
    }

    randomseed( s ) {

        if ( s == null ) s = seed();
        this.x = normalize( s );
    
    }

}

// Multiply-with-carry;
class multiply_with_carry {

    constructor( s,r ) {

        this.a = 1103515245;
        this.c = 12345;
        this.m = 0x100000000;  //from Ansi C;
        if ( r ) {

            if ( r == "nr" ) {

                [this.a, this.c, this.m] = [1664525, 1013904223, 0x100000000]; //from Numerical Recipes.
            
            } else if ( r == "mvc" ) {

                [this.a, this.c, this.m] = [214013, 2531011, 0x100000000];
            
            }//from MVC;
        
        }
        this.ic = this.c;
        this.randomseed( s );
    
    }

    random( a, b ) {

        const m = this.m;
        const t = this.a * this.x + this.c;
        const y = t % m;

        this.x = y;
        this.c = t / m >> 0;
        if ( a == null ) {

            return y / 0x100000000;
        
        } else if ( b == null ) {

            if ( a == 0 ) {

                return y;
            
            } else {

                return 1 + ( y % a );
            
            }
        
        } else {

            return a + ( y % ( b - a + 1 ) );
        
        }
    
    }

    randomseed( s ) {

        if ( s == null ) s = seed();
        this.c = this.ic;
        this.x = normalize( s );
    
    }

}

/**
 * @this Random
 *
 * @param {number} balance
 * @param {number} bias
 * @param {number} min
 * @param {number} max
 * @returns {number}
 */
function _getDamage( balance, bias, min, max ) {

    const generator = this.generator || _random;

    function curveFunc( a, b ) {

        return Math.pow( a, 1 / ( b * 0.66 + 0.34 ) );

    }

    let r;
    do {

        const r0 = generator.random();
        const r1 = generator.random();

        if ( r0 < 0.5 ) {

            if ( bias < 0.5 ) {

                r = curveFunc( r1, balance ) * ( 1 - bias ) - 1 + bias + bias;

            } else {

                r = curveFunc( r1, balance ) * bias;

            }

        } else {

            if ( bias < 0.5 ) {

                r = ( 1 - curveFunc( 1 - r1, balance ) ) * ( 1 - bias ) + bias;

            } else {

                r = ( 1 - curveFunc( 1 - r1, balance ) ) * bias + bias;

            }

        }

    } while ( r < 0 || r >= 1 );
    if ( max ) {

        return Math.floor( min + ( max + 1 - min ) * r );

    } else if ( min ) {

        return Math.floor( 1 + max * r );

    } else {

        return r;

    }

}


class Random {

    constructor( seed, method, arg ) {

        seed = seed != null ? seed : ( +new Date() );
        this.seed = seed;
        this.method = method;
        this.arg = arg;
        if ( method == "mwc" ) {

            this.generator = new multiply_with_carry( seed, arg );
        
        } else if ( method == "lcg" ) {

            this.generator = new linear_congruential_generator( seed, arg );
        
        } else {

            this.generator = new mersenne_twister( seed );
        
        }

    }

    /**
     *
     *
     * @param {number?} a
     * @param {number?} b
     * @returns {number}
     * @memberof Random
     */
    random( a, b ) {

        console.assert( ( a == null && b == null ) || ( a != null && b != null ),`random(${a},${b}) 구문은 허용되지 않음. random(1,a) 혹은 random(0,a)를 명확히 쓸 것` );

        return this.generator.random( a, b );
    
    }

    getRandomFunc() {

        return this.generator.random.bind( this.generator ); 
    
    }

    randomseed( s ) {

        return this.generator.randomseed( s );
    
    }


    // 테이블을 섞어서 돌려줌
    shuffle( t ) {

        const generator = this.generator || _random;
        const t1 = [];
        const t2 = [];
        for ( let i = 1; i <= t; i++ ) {

            t1[i] = t[i];
        
        }
        for ( let i = 1; i <= t; i++ ) {

            const pick = generator.random( t1.length );

            t2[t2.length + 1] = t1[pick];
            t1.splice( pick, 1 );
        
        }

        return t2;
    
    }

    bool() {

        const generator = this.generator || _random;

        return generator.random( 2 ) == 1 ? true : false;
    
    }

    rangei( a, b ) {

        const generator = this.generator || _random;

        return generator.random( Math.floor( a ), Math.floor( b ) );
    
    }

    rangef( a, b ) {

        const generator = this.generator || _random;
        if ( a != null && b != null ) {

            return generator.random() * ( b - a ) + a;
        
        } else {

            return generator.random();
        
        }
    
    }

    pick( a, b, n ) {

        const generator = this.generator || _random;
        const t = [];
        const t2 = [];

        console.assert( b - a + 1 >= n, "범위보다 많은 랜덤 갯수를 요구함" );
        for ( let i = 1; i <= n; i++ ) {

            let pick;
            do {

                pick = generator.random( a, b );
            
            } while ( t[pick] );
            t[pick] = true;
            t2.push( pick );
        
        }

        return t2;
    
    }

    getDamage( balance, bias, min, max ) {

        return _getDamage.call( this, balance, bias, min, max );
    
    }

    static getDamage( balance, bias, min, max ) {

        _getDamage.call( this, balance, bias, min, max );
    
    }

    save() {

        const t = JSON.parse( JSON.stringify( this ) );
        if ( t.generator.mt ) {

            for ( const k in t.generator.mt ) {

                const v = t.generator.mt[k];

                t.generator.mt[k] = v;
            
            }
        
        }

        return t;
    
    }

    load( t ) {

        if ( t.method == "mwc" ) {

            this.generator = new multiply_with_carry( t.seed, t.arg );
        
        } else if ( t.method == "lcg" ) {

            this.generator = new linear_congruential_generator( t.seed, t.arg );
        
        } else {

            this.generator = new mersenne_twister( t.seed );
        
        }
        for ( const k in t ) {

            const v = t[k];
            if ( k == "generator" ) {

                for ( const k2 in v ) {

                    const v2 = v[k2];
                    if ( typeof v2 == "object" ) {

                        Object.assign( this[k][k2],v2 );
                    
                    } else {

                        this[k][k2] = v2;
                    
                    }
                
                }
            
            } else if ( typeof v == "object" ) {

                Object.assign( this[k], v );
            
            } else {

                this[k] = v;
            
            }
        
        }
    
    }

}

Random.prototype.get = Random.prototype.random;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Random);


/***/ }),

/***/ "./engine/src/lib/shaderHelper.js":
/*!****************************************!*\
  !*** ./engine/src/lib/shaderHelper.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _engine_Shader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/Shader */ "./engine/src/Shader.js");


//@ts-ignore
// import defaultVertexSrc from "@engine/render/shaders/default.vs";

// uniform mat3 translationMatrix;
// uniform mat3 projectionMatrix;


class ShaderHelper {
    /**
     *
     *
     * @param {string} shaderName
     * @returns {Shader}
     * @memberof ShaderHelper
     */
    getShader( shaderName ) {
        return ShaderHelper.shaders[shaderName];
    }
}


const defaultVertexSrc = `
    precision mediump float;

    attribute vec2 a_position;
    attribute vec4 a_color;
    attribute vec2 a_texCoord;

    uniform mat4 u_viewMatrix;
    uniform mat4 u_worldMatrix;
    uniform vec2 u_anchor;

    varying mediump vec2 v_texCoord;
    varying mediump vec2 v_position;
    varying lowp vec4 v_colorOverride;

    void main() {
        mat4 anchorMat = mat4(1);

        anchorMat[3].xy = u_anchor;
        gl_Position = vec4((u_viewMatrix * u_worldMatrix * anchorMat * vec4(a_position, 0.0,1.0)).xy, 0, 1);
        v_position = gl_Position.xy;
        v_colorOverride = vec4(a_color.xyz*a_color.www,1.0);
        v_texCoord = a_texCoord;
    }
`;


ShaderHelper.shaders = {
    "mask": new _engine_Shader__WEBPACK_IMPORTED_MODULE_0__.Shader(
        `
        precision mediump float;

        attribute vec2 a_position;
        attribute vec4 uvuv;
        attribute vec2 a_texCoord;

        uniform mat4 u_viewMatrix;
        uniform mat4 u_worldMatrix;
        uniform vec2 u_anchor;

        varying mediump vec2 v_texCoord;
        varying mediump vec2 v_position;

        varying mediump vec2 v_texCoord1;
        varying mediump vec2 v_texCoord2;
        
        void main() {
            mat4 anchorMat = mat4(1);

            anchorMat[3].xy = u_anchor;
            gl_Position = vec4((u_viewMatrix * u_worldMatrix * anchorMat * vec4(a_position, 0.0,1.0)).xy, 0, 1);

            v_position = gl_Position.xy;
            //256*128
            vec4 uvuv2 = uvuv.wzyx;
            // v_texCoord1 = ((uvuv2.wz * vec2(2.0,2.0*3.0/2.0)  )*vec2(18.0/16.0,26.0/24.0)) / vec2(512.0,256.0);
            // v_texCoord2 = ((uvuv2.yx * vec2(2.0,2.0*3.0/2.0)  )*vec2(18.0/16.0,26.0/24.0)) / vec2(512.0,256.0);
            v_texCoord1 = uvuv2.wz / vec2(512.0,256.0);
            v_texCoord2 = uvuv2.yx / vec2(512.0,256.0);

            v_texCoord = a_texCoord;
        }
        `, `
        varying mediump vec2 v_position;
        varying mediump vec2 v_texCoord;
        varying mediump vec2 v_texCoord1;
        varying mediump vec2 v_texCoord2;

        uniform lowp sampler2D maskSampler;
        uniform lowp sampler2D baseSampler;

        uniform mediump float mask;
        uniform mediump vec2 texSize;


        void main() {
            highp vec2 uv = v_texCoord;

            lowp vec4 tile = texture2D(baseSampler, floor(v_texCoord)/texSize);
            lowp vec4 mask1 = texture2D(maskSampler, v_texCoord1);
            lowp vec4 mask2 = texture2D(maskSampler, v_texCoord2);

            lowp vec4 c;
            lowp vec3 mask0 = vec3(mask1.g,1.0,mask2.g);
            c.xyz = mix( vec3(0.0,1.0,1.0), mask0.xyz , step(1.0/256.0,tile.g + mask) );
            c.a = 1.0;
            gl_FragColor = c;

            gl_FragColor.xyz *= gl_FragColor.a;
        }
        `,
        null,
        {
            mask: 0
        }
    ),
    "shadow": new _engine_Shader__WEBPACK_IMPORTED_MODULE_0__.Shader(
        `
        precision mediump float;

        attribute vec2 a_position;
        attribute vec3 custom;
        attribute vec4 a_color;

        uniform mat4 u_viewMatrix;
        uniform mat4 u_worldMatrix;
        uniform vec2 u_anchor;

        uniform vec4 eyePos;


        varying mediump vec2 v_position;
        varying lowp vec4 v_colorOverride;

        void main() {
            mat4 anchorMat = mat4(1);

            anchorMat[3].xy = u_anchor;
            gl_Position = vec4((u_viewMatrix * u_worldMatrix * anchorMat * vec4(custom.xy, 0.0,1.0)).xy, 0, 1);

            mediump float scale;
            mediump vec2 s;
            mediump vec2 delta = gl_Position.xy - eyePos.xy;
            s = abs(delta);
            scale = max(s.x,s.y);

            gl_Position.xy += delta * custom.z / (scale+0.001);
            v_position = gl_Position.xy;
            v_colorOverride = vec4(0,1,1,1);
        }
        `, `
        varying mediump vec2 v_position;
        varying lowp vec4 v_colorOverride;

        void main() {
            gl_FragColor = v_colorOverride;
            gl_FragColor.xyz *= gl_FragColor.a;
        }
        `,
        null,
        {
            eyePos: [0, 0, 0, 0]
        }
    ),
    "tileMap": new _engine_Shader__WEBPACK_IMPORTED_MODULE_0__.Shader(
        defaultVertexSrc, `
        varying mediump vec2 v_position;
        varying mediump vec2 v_texCoord;
        varying lowp vec4 v_colorOverride;

        uniform lowp sampler2D fogSampler;
        uniform lowp sampler2D baseSampler;

        uniform highp vec4 offset;
        uniform highp vec4 viewInfo;
        uniform lowp vec4 color1;
        uniform lowp vec4 color2;
        uniform lowp vec4 glossy;
        uniform mediump vec2 texSize;

        void main() {
            mediump vec2 viewPos = viewInfo.xy;
            mediump vec2 viewSize = viewInfo.zw;
            mediump vec2 uv = v_texCoord;
            mediump vec2 a;

            highp vec2 uv2;
            mediump vec2 delta = (-glossy.xy+v_position.xy*0.5-viewPos.xy)*glossy.zw;
            lowp float fallOff = max(0.0,(1.0-dot(delta,delta)))*color1.a;

            uv2.x = (v_position.x*0.5+0.5)*viewSize.x+viewPos.x;
            uv2.y = (v_position.y*0.5+0.5)*viewSize.y+viewPos.y;
            uv/=texSize;
            if (uv.y>=408.0/512.0) uv += offset.xy; 

            lowp vec4 c = 	texture2D(baseSampler, uv) * v_colorOverride;
            lowp vec4 fog = texture2D(fogSampler, uv2);

            lowp vec3 fallOffColor = fallOff*color1.xyz*(1.0-min(1.0,c.g*1000.0));

            lowp float gray = dot(c.xyz,vec3(0.3,0.6,0.1)*0.5);
            c.xyz = c.xyz + fallOffColor.xyz;
            gl_FragColor.xyz =  mix(color2.xyz*gray,c.xyz,fog.r*color2.a) * c.a * fog.b;
            
            gl_FragColor.a = c.a;
            gl_FragColor.xyz *= gl_FragColor.a;
        }
        `,
        null,
        {
            offset:   [0, 0, 0, 0],
            viewInfo: [0, 0, 0, 0],
            color1:   [0, 0, 0, 0],
            color2:   [0, 0, 0, 0],
            glossy:   [0,0,0,0]
        }
    ),
    "light": new _engine_Shader__WEBPACK_IMPORTED_MODULE_0__.Shader(
        defaultVertexSrc, `
        varying mediump vec2 v_position;
        varying mediump vec2 v_texCoord;
        varying lowp vec4 v_colorOverride;

        uniform sampler2D fogSampler;
        uniform sampler2D baseSampler;

        uniform mediump vec4 viewInfo;

        void main() {
            mediump vec2 viewPos = viewInfo.xy;
            mediump vec2 viewSize = viewInfo.zw;
            mediump vec2 uv = v_texCoord;
            mediump vec2 a;

            mediump vec2 uv2;
            uv2.x = (v_position.x*0.5+0.5)*viewSize.x+viewPos.x;
            uv2.y = (v_position.y*0.5+0.5)*viewSize.y+viewPos.y;

            lowp vec4 c = texture2D(baseSampler, uv);
            lowp vec4 fog = texture2D(fogSampler, uv2);
            
            lowp float gray = dot(c.xyz,vec3(0.3,0.6,0.1))*0.05;

            c *= v_colorOverride;
            gl_FragColor = mix(vec4(gray,gray,gray,1),c,fog.x);
            gl_FragColor.a = c.a;
            gl_FragColor.xyz *= gl_FragColor.a;
            // gl_FragColor = vec4(c.www,1);
        }
        `,
        null,
        {
            viewInfo: [0,0,0,0]
        }
    ),
};


const shaderHelper = new ShaderHelper();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (shaderHelper);



/***/ }),

/***/ "./engine/src/lib/slideView.js":
/*!*************************************!*\
  !*** ./engine/src/lib/slideView.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SlideView)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");


/*

화면을 가로로 슬라이드해서 넘겨보는 뷰
최근에 짠 UI 코드라 이쪽을 참고해서 다음 작성을 하도록 하자.


"click" 클릭하면 발생
"indexChanged" 이미지 다른걸로 넘어갔을 때 발생
"indexChanging" 이미지 다른걸로 넘어갔을 때 손을 떼면 즉시 발생


options;
background = {image,color}
autoRotationTime = 초

*/

function onIndexChanging( self ) {
    let e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "indexChanging" );

    e.index = self.getIndex();
    self.dispatchEvent( e );
}

function onIndexChanged( self ) {
    let e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "indexChanged" );

    e.index = self.getIndex();
    self.dispatchEvent( e );
}

function onClick( self ) {
    let e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "click" );

    e.index = self.getIndex();
    self.dispatchEvent( e );
}

function onEnterFrame( self ) {
    if ( Math.abs( self.posX - self.targetPosX ) < 0.1 ) {
        self.posX = self.targetPosX;
        self.updateVisual();
        self.hitArea.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, self );
        if ( self.timer ) {
            self.timer.start();
        }
        onIndexChanged( self );
        return;
    }
    self.velX = ( self.targetPosX - self.posX ) / 8; // 상수
    self.posX = self.posX + self.velX;
    self.updateVisual();
}

function onMouseDown( self, e ) {
    if ( self.hitArea.hitTestPoint( e.x, e.y ) ) {
        if ( self.hitArea.hasEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME ) ) {
            self.hitArea.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, self );
        }
        let [ex, ey] = self.getParent().globalToLocal( e.x, e.y );

        self.mouse = {};
        self.mouse.x = ex;
        self.mouse.y = ey;
        self.mouse.posX = self.posX;
        self.mouse.lastX = ex;
        self.mouse.time = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now();
        self.mouse.isClick = true;
        self.velX = 0;
        e.stopPropagation();
        if ( self.timer ) {
            self.timer.stop();
        }
    }
}

function onMouseMove( self, e ) {
    if ( self.mouse ) {
        let [ex, ey] = self.getParent().globalToLocal( e.x, e.y );
        let dx = ex - self.mouse.x;
        let currentTime = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now();
        let ax = ex - self.mouse.lastX;	//가속도

        self.velX = self.velX / Math.pow( 3, ( ( currentTime - self.mouse.time ) / 1000 * 20 ) );	// 감쇄
        self.velX = self.velX + ax;
        self.mouse.time = currentTime;
        self.mouse.lastX = ex;
        self.posX = self.mouse.posX + dx;
        self.updateVisual();
        if ( Math.abs( self.mouse.x - ex ) > 20 || Math.abs( self.mouse.y - ey ) > 20 ) {
            self.mouse.isClick = false;
        }
        e.stopPropagation();
    }
}

function onMouseUp( self, e ) {
    if ( self.mouse ) {
        let [ex, _] = self.getParent().globalToLocal( e.x, e.y );
        //let dx = ex - self.mouse.x;
        let currentTime = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now();
        let ax = ex - self.mouse.lastX;	//가속도

        self.velX = self.velX / Math.pow( 3, ( ( currentTime - self.mouse.time ) / 1000 * 20 ) );	// 감쇄
        self.velX = self.velX + ax;
        //self.targetPosX = self.posX + self.velX * 3;
        self.targetPosX = Math.floor( ( self.posX + self.velX * 4 ) / self.width + 0.5 ) * self.width;
        onIndexChanging( self );
        if ( !self.hitArea.hasEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME ) ) {
            self.hitArea.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, self );
        }
        if ( self.mouse.isClick ) {
            onClick( self );
        }
        self.mouse = null;
        e.stopPropagation();
    }
}

function onAutoRotation( self ) {
    self.targetPosX = Math.floor( self.posX / self.width + 0.5 - 1 ) * self.width;
    if ( !self.hitArea.hasEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME ) ) {
        self.hitArea.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, self );
    }
}




class SlideView extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( width, height, imageList, options ) {
        super();
        this.imageList = imageList;
        this.width = width;
        this.height = height;
        this.options = options || {};
        this.numOfImage = this.imageList.length;
        this.totalWidth = this.imageList.length * this.width;
        {
            if ( this.options.background && this.options.background.image ) {
                this.options.background.image.setAnchorPoint( 0.5, 0.5 );
                this.options.background.image.setPosition( this.width / 2, this.height / 2 );
                this.addChild( this.options.background.image );
                //고해상도 배경이 주어질 경우 스케일
                let ratio = this.options.background.image.getWidth() / this.options.background.image.getHeight();

                if ( ratio > 1.0 ) {
                    //가로가 세로보다 큰 경우 세로에 맞춰서 스케일
                    this.options.background.image.setScale( this.height / this.options.background.image.getHeight() );
                } else {
                    this.options.background.image.setScale( this.width / this.options.background.image.getWidth() );
                }
            } else {
                let color = 0;

                if ( this.options.background && this.options.background.color ) {
                    color = this.options.background.color;
                }
                let m = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.createBox( 0, 0, width, height, color );

                this.addChild( m );
            }
        }

        {
            //hitArea;
            let m = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.createBox( 0, 0, width, height, 0 );

            this.addChild( m );
            m.setVisible( false );
            m.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.MOUSE_DOWN, onMouseDown, this );
            m.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.MOUSE_MOVE, onMouseMove, this );
            m.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.MOUSE_UP, onMouseUp, this );
            this.hitArea = m;
        }

        {
            let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();

            for ( let k in imageList ) {
                let v = imageList[k];
                let i = parseInt( k );

                if ( v ) {
                    //v.setAnchorPoint(0.5,0.5);
                    //v.setPosition((i-0.5)*width-v.getWidth()/2,height/2-v.getHeight()/2);
                    v.setPosition( ( i - 0.5 ) * width - v.getWidth() / 2, height / 2 - v.getHeight() / 2 );
                    b.addChild( v );
                }
            }
            this.parentSpr = b;
        }
        this.addChild( this.parentSpr );
        this.posX = 0;
        this.targetPosX = 0;
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 1, onIndexChanging, this );
        // 타이머 이벤트를 잘 처리하기 위해서 화면에 있을때만 붙임
        this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ADDED_TO_STAGE, () => {
            if ( this.options.autoRotationTime ) {
                if ( this.timer ) {
                    this.timer.stop();
                    this.timer.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.TIMER, onAutoRotation, this );
                    this.timer = null;
                }
                this.timer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer( this.options.autoRotationTime * 1000, 0 );
                this.timer.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.TIMER, onAutoRotation, this );
                this.timer.start();
            }
        } );
        this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.REMOVED_FROM_STAGE, () => {
            if ( this.options.autoRotationTime ) {
                if ( this.timer ) {
                    this.timer.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.TIMER, onAutoRotation, this );
                    this.timer.stop();
                    this.timer = null;
                }
            }
        } );
    }



    updateVisual() {
        this.parentSpr.setX( this.posX - this.getWidth() / 2 );
        let innerX = -this.posX % this.width;
        let i1 = Math.ceil( -this.posX / this.width );
        let i2 = i1 - 1;
        let i0 = i1;

        i1 = i1 % this.numOfImage;
        i2 = i2 % this.numOfImage;
        for ( let i in this.imageList ) {
            let v = this.imageList[i];

            if ( v ) {
                v.setVisible( false );
            }
        }
		
        if ( this.imageList[i1 + 1] ) {
            this.imageList[i1 + 1].setVisible( true );
            this.imageList[i1 + 1].setX( ( i0 + 0.5 ) * this.width );
        }
        if ( this.imageList[i2 + 1] ) {
            this.imageList[i2 + 1].setX( ( i0 - 0.5 ) * this.width );
            if ( innerX > 0 ) {
                this.imageList[i2 + 1].setVisible( true );
            }
        }
    }

    getIndex() {
        let index = Math.floor( -this.targetPosX  / this.width + 0.5 );

        return ( index % this.numOfImage ) + 1;
    }

    setIndex( v ) {
        if ( !this.mouse ) {
            this.targetPosX = -v * this.width;
            if ( !this.hitArea.hasEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME ) ) {
                this.hitArea.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME,onEnterFrame,this );
            }
        }
    }

    getWidth() {
        return this.width * this.getScaleX();
    }

    getHeight() {
        return this.height * this.getScaleY();
    }
}



/***/ }),

/***/ "./engine/src/lib/visibilityTile.js":
/*!******************************************!*\
  !*** ./engine/src/lib/visibilityTile.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ VisibilityTile)
/* harmony export */ });
/* harmony import */ var _engine_Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/Sprite */ "./engine/src/Sprite.js");


//const GameMap = require("../avalonika/world/gameMap");

const _BLOCK_VISION = 2;

function* rayCheckIterator( xStart, yStart, xEnd, yEnd ) {
    // change from step to step;
    let tValue, xGrid, yGrid, tForNextBorderX, tForNextBorderY;
    //print("input",xStart, yStart, xEnd, yEnd);
    // constant throughout raycast;
    let xDirection, yDirection, tForOneX, tForOneY, xStep, yStep;

    xDirection = xEnd - xStart;
    yDirection = yEnd - yStart;
    tForOneX = Math.abs( 1.0 / xDirection );
    tForOneY = Math.abs( 1.0 / yDirection );
    yStep = ( yDirection >= 0 ) ? 1 : - 1;
    xStep = ( xDirection >= 0 ) ? 1 : - 1;
    const xSign = ( xDirection >= 0 ) ? 0 : 1;
    const ySign = ( yDirection >= 0 ) ? 0 : 1;

    tValue = 0;
    xGrid = Math.floor( xStart );
    yGrid = Math.floor( yStart );
    const fracStartPosX = xStart - Math.floor( xStart );

    if ( xDirection > 0 ) {
        tForNextBorderX = ( 1 - fracStartPosX ) * tForOneX;
    } else {
        tForNextBorderX = fracStartPosX * tForOneX;
    }

    const fracStartPosY = yStart - Math.floor( yStart );

    if ( yDirection > 0 ) {
        tForNextBorderY = ( 1 - fracStartPosY ) * tForOneY;
    } else {
        tForNextBorderY = fracStartPosY * tForOneY;
    }
    let g;

    if ( xEnd == xStart ) {
        g = ( yEnd - yStart ) / ( xEnd - xStart + 0.00001 );
    } else {
        g = ( yEnd - yStart ) / ( xEnd - xStart );
    }
    const a = yStart - g * xStart;

    while ( true ) {
        let tileX, tileY, collideX, collideY, isLast;

        if ( Math.abs( tForNextBorderX - tForNextBorderY ) < 0.000001 ) {
            // diagonal step (normally not included in a raycast);
            tValue = tForNextBorderX;
            tForNextBorderX = tForNextBorderX + tForOneX;
            tForNextBorderY = tForNextBorderY + tForOneY;
            xGrid = xGrid + xStep;
            yGrid = yGrid + yStep;
            collideX = xGrid + xSign;
            collideY = yGrid + ySign;
        } else if ( tForNextBorderX <= tForNextBorderY ) {
            // step in x;
            tValue = tForNextBorderX;
            tForNextBorderX = tForNextBorderX + tForOneX;
            xGrid = xGrid + xStep;
            collideX = xGrid + xSign;
            collideY = g * ( xGrid + xSign ) + a;
        } else {
            // step in y;
            tValue = tForNextBorderY;
            tForNextBorderY = tForNextBorderY + tForOneY;
            yGrid = yGrid + yStep;
            collideX = ( ( yGrid + ySign ) - a ) / g;
            collideY = yGrid + ySign;
        }
        isLast = tValue > 1.0;
        if ( !isLast ) {
            //print("continue",tileX,tileY,collideX,collideY);
            [tileX, tileY] = [xGrid, yGrid];
            yield [tileX, tileY, collideX, collideY];
        } else {
            return;
        }
    }
}


function* bresenhamIterator( xStart, yStart, xEnd, yEnd ) {
    const deltaX = Math.floor( Math.abs( xEnd - xStart ) );
    const deltaY = Math.floor( Math.abs( yEnd - yStart ) );
    const xStep = xEnd >= xStart ? 1 : - 1;
    const yStep = yEnd >= yStart ? 1 : - 1;
    let error = deltaX - deltaY;
    let [xGrid, yGrid] = [xStart, yStart];

    while ( xGrid != xEnd || yGrid != yEnd ) {
        //let rx, ry = xGrid, yGrid;
        const twoError = 2 * error;

        if ( twoError > ( -1 * deltaY ) ) {
            error = error - deltaY;
            xGrid = xGrid + xStep;
        }
        if ( twoError < deltaX ) {
            error = error + deltaX;
            yGrid = yGrid + yStep;
        }
        yield [xGrid, yGrid];
    }
}


class VisibilityTile extends _engine_Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( width, height, wallTable ) {
        super();
        this.setWallTable( width, height, wallTable );
    }

    setWallTable( width, height, wallTable ) {
        this.width = width;
        this.height = height;
        this.wallTable = wallTable;
        this.isCleared = true;
        this.resultTable = new Array( width * height );
        this.resultTable.fill( -1 );
    }

    canBeSeen( x, y, targetX, targetY, wall, checkFunc ) {
        wall = ( wall != null ) ? wall : 2;
        let [lastX, lastY] = [x, y];

        for ( const [x3, y3] of bresenhamIterator( x, y, targetX, targetY ) ) {
            const v = this.wallTable[y3 * this.width + x3].wall;

            if ( ( v & wall ) != 0 ) {
                if ( targetX == x3 && targetY == y3 ) {
                    return [VisibilityTile.BLOCK_VISION, lastX, lastY];
                } else {
                    // 벽에 가림
                    return [VisibilityTile.SHADOW, lastX, lastY];
                }
            } else {
                if ( checkFunc ) {
                    if ( checkFunc( x3, y3 ) ) {
                        return [VisibilityTile.BLOCK_VISION, lastX, lastY];
                    }
                }
            }
            [lastX, lastY] = [x3, y3];
        }

        return [VisibilityTile.EMPTY, targetX, targetY];
    }

    clearResult() {
        this.isCleared = true;
    }

    getResult( cx = this.cx, cy = this.cy,radius = this.radius ) {
        if ( this.isCleared || this.cx != cx || this.cy != cy || this.radius != radius ) {
            // 시점이 달라지면 다시 계산해야한다.
            this.resultTable.fill( Number.NEGATIVE_INFINITY );
            this.fillResultQuick( cx, cy, radius );
            this.isCleared = false;
        }

        const result = this.resultTable;

        this.cx = cx;
        this.cy = cy;
        this.radius = radius;
        
        // if (x1 >= cx - 15 && x2 <= cx + 15 && y1 >= cy - 15 && y2 <= cy + 15) {
        //     //quick에서 mask로 이미 구한 부분
        //     return result;
        // }
		
        // for (let y = y1;y <= y2;y++) {
        //     for (let x = x1;x <= x2;x++) {
        //         if (result[x + "," + y] == null && (x - cx) ** 2 + (y - cy) ** 2 <= radius ** 2) {
        //             result[x + "," + y] = this.canBeSeen(cx,cy,x,y)[0];
        //         }
        //     }
        // }
		
        return result;
    }


    isVisible( x, y ) {
        let v = this.isCleared ? null : this.resultTable[y * this.width + x];

        if ( this.cx == null || this.cy == null || x < 0 || x >= this.width || y < 0 || y >= this.height ) {
            return 2;
        } else if ( v == Number.NEGATIVE_INFINITY ) {
            if ( ( ( x - this.cx ) ** 2 + ( y - this.cy ) ** 2 ) <= ( this.radius ** 2 ) ) {
                console.log( `시야체크중 없는 데이터 발견 ${x}, ${y}` );
                v = this.canBeSeen( this.cx, this.cy, x, y )[0];
                this.resultTable[y * this.width + x] = v;
            } else {
                return 2;
            }
        }

        return v;
    }

    fillResultQuick( centerX, centerY, radius ) {
        const result = this.resultTable;
        const wt = this.wallTable;
        const [w, h] = [this.width, this.height];
        const mask = VisibilityTile.mask;
        const r = Math.min( 15, Math.ceil( radius ) );
        const summedMask = new Uint32Array( [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] );
        let y1 = Math.max( 0, centerY - r );
        let y2 = Math.min( h - 1, centerY + r );
        let x1 = Math.max( 0, centerX - r );
        let x2 = Math.min( w - 1, centerX + r );

        for ( let y = y1; y <= y2; y++ ) {
            for ( let x = x1; x <= x2; x++ ) {
                const wall = wt[y * w + x].wall;

                if ( ( wall & _BLOCK_VISION ) != 0 ) {
                    // 해당위치가 가려져있으면 그 블록은 가려졌다고 표시함
                    result[y * w + x] = VisibilityTile.BLOCK_VISION;

                    // 마스크를 만든다
                    const index = ( ( centerY - y ) + 16 - 1 ) * 31 + ( centerX - x ) + 16 - 1;
                    const startIndex = mask.startIndex[index];
                    const skip = mask.skip[index];
                    const count = mask.count[index];

                    if ( startIndex > 0 ) {
                        // 마스크의 첫 값은 y축 시작 위치. 1부터 시작함
                        for ( let j = 0; j < count; j++ ) {
                            // 마스크 값을 모두 OR해서 합쳐둔다
                            summedMask[skip + j] |= mask.data[startIndex - 1 + j];
                        }
                    }
                } else {
                    result[y * w + x] = VisibilityTile.EMPTY;
                }
            }
        }
        // for ( const i in summedMask ) {
        //     console.log( summedMask[i].toString( 2 ) );
        // }
        // 이 단계에서 t에는 안보여야 하는 곳이 1비트이고 보여야하는 곳이 0비트
        y1 = Math.max( 0, centerY - 15 );
        y2 = Math.min( h - 1, centerY + 15 );
        x1 = Math.max( 0, centerX - 15 );
        x2 = Math.min( w - 1, centerX + 15 );
        for ( let y = y1; y <= y2; y++ ) {
            for ( let x = x1; x <= x2; x++ ) {
                if ( ( ( x - centerX ) ** 2 + ( y - centerY ) ** 2 ) <= radius ** 2 ) {
                    //t[y+16]에서 0인 비트에 칠해야함 
                    const checkTarget = ~( summedMask[( centerY - y ) + 15] );
                    const checkBit = ( 1 << ( centerX - x + 15 ) );

                    if ( ( checkTarget & checkBit ) == 0 ) {
                        result[y * w + x] = VisibilityTile.SHADOW;
                    }
                } else {
                    result[y * w + x] = VisibilityTile.SHADOW;
                }
            }
        }
        console.log( `시야데이터 ${centerX},${centerY} ${w} ${h} X:${Math.max( 0, centerX - 15 )}~${Math.min( w - 1, centerX + 15 )} Y:${Math.max( 0, centerY - 15 )}~${Math.min( h - 1, centerY + 15 )} ` );
    }

    traceRay( x1, y1, x2, y2, gridWidth, gridHeight, wall, checkFunc ) {
        // 타일계의 좌표를 픽셀계 좌표로 바꿔줘야한다.
        wall = wall != null ? wall : 1;
        for ( const [tx, ty, cx, cy] of rayCheckIterator( x1 / gridWidth, y1 / gridHeight, x2 / gridWidth, y2 / gridHeight ) ) {
            const w = this.wallTable[ty * this.width + tx].wall;

            if ( checkFunc && checkFunc( tx, ty ) ) {
                let r;

                if ( tx == Math.floor( x2 / gridWidth ) && ty == Math.floor( y2 / gridHeight ) ) {
                    // 충돌했지만 거기가 목적지임
                    r = VisibilityTile.EMPTY;
                } else {
                    // 무언가에 의해 막혔음
                    r = VisibilityTile.CREATURE;
                }

                //log(cx,cy);
                return [r, tx, ty, cx * gridWidth, cy * gridHeight];
            } else if ( ( w & wall ) != 0 ) {
                // 벽에 충돌
                return [VisibilityTile.BLOCK_VISION, tx, ty, cx * gridWidth, cy * gridHeight];
            }
        }

        return [VisibilityTile.EMPTY, Math.floor( x2 / gridWidth ), Math.floor( y2 / gridHeight ), x2, y2];
    }
}

VisibilityTile.EMPTY = 0;
VisibilityTile.BLOCK_VISION = 1;
VisibilityTile.SHADOW = 2;
VisibilityTile.CREATURE = 4;
VisibilityTile.mask = __webpack_require__( /*! ./visibilityTileMask */ "./engine/src/lib/visibilityTileMask.js" );



/***/ }),

/***/ "./engine/src/lib/visibilityTileMask.js":
/*!**********************************************!*\
  !*** ./engine/src/lib/visibilityTileMask.js ***!
  \**********************************************/
/***/ ((module) => {


// 32비트
// 좌우 15비트씩

/*
// function buildMask() {
//     let wt = [];
//     let vt = new VisibilityTile(31,31,wt);
//     for (let y = 1;y <= 31;i++) {
//         for (let x = 1;x <= 31;i++) {
//             let t = [];
//             for (let i = 1;i <= 31;i++) {
//                 wt[i] = { wall: 0 };
//             }
//             wt[(y - 1) * 31 + x].wall = 2;
//             vt.clearResult();
//             let rt = vt.getResult2(16,16,1,1,31,31,true);
//             for (let yy = 1;yy <= 31;yy++) {
//                 let v = 0;
//                 for (let xx = 1;xx <= 31;xx++) {
//                     if (rt[(yy - 1) * 31 + xx] && rt[(yy - 1) * 31 + xx] >= 2) {
//                         v = v | (1 << (xx - 1));
//                     }
//                 }
//                 t[yy] = v;
//             }
//             let s = "";
//             let notZero = 0;
//             for (let i in t) {
//                 let v = t[i];
//                 if (v != 0) {
//                     notZero = parseInt(i);
//                     break;
//                 }
//             }
//             if (notZero == 0) {
//                 s = "null,";
//                 console.log(s);
//             }
//             else {
//                 s = "{" + notZero + ", ";
//                 let lastNotZero;
//                 for (let j = t.length; j >= notZero;j--) {
//                     if (t[j] != 0) {
//                         lastNotZero = j;
//                         break;
//                     }
//                 }
//                 for (let k = notZero;k <= lastNotZero;k++) {
//                     s = s + t[k] + ",";
//                 }
//                 console.log(s.substr(0,s.length) + "},");
//             }
//         }
//     }
// }
// */



// //buildMask();


// const VisibilityTile_mask = [
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     new Uint32Array([ 1, 1]),
//     new Uint32Array([ 1, 2]),
//     new Uint32Array([ 1, 4]),
//     new Uint32Array([ 1, 8]),
//     new Uint32Array([ 1, 16]),
//     new Uint32Array([ 1, 32]),
//     new Uint32Array([ 1, 64]),
//     new Uint32Array([ 1, 384]),
//     new Uint32Array([ 1, 512]),
//     new Uint32Array([ 1, 1024]),
//     new Uint32Array([ 1, 2048]),
//     new Uint32Array([ 1, 4096]),
//     new Uint32Array([ 1, 8192]),
//     new Uint32Array([ 1, 16384]),
//     new Uint32Array([ 1, 32768]),
//     new Uint32Array([ 1, 65536]),
//     new Uint32Array([ 1, 131072]),
//     new Uint32Array([ 1, 262144]),
//     new Uint32Array([ 1, 524288]),
//     new Uint32Array([ 1, 1048576]),
//     new Uint32Array([ 1, 2097152]),
//     new Uint32Array([ 1, 12582912]),
//     new Uint32Array([ 1, 16777216]),
//     new Uint32Array([ 1, 33554432]),
//     new Uint32Array([ 1, 67108864]),
//     new Uint32Array([ 1, 134217728]),
//     new Uint32Array([ 1, 268435456]),
//     new Uint32Array([ 1, 536870912]),
//     new Uint32Array([ 1, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 2, 1]),
//     new Uint32Array([ 1, 1, 2]),
//     new Uint32Array([ 1, 2, 4]),
//     new Uint32Array([ 1, 4, 8]),
//     new Uint32Array([ 1, 24, 16]),
//     new Uint32Array([ 1, 32, 32]),
//     new Uint32Array([ 1, 64, 64]),
//     new Uint32Array([ 1, 128, 128]),
//     new Uint32Array([ 1, 256, 768]),
//     new Uint32Array([ 1, 512, 1024]),
//     new Uint32Array([ 1, 1024, 2048]),
//     new Uint32Array([ 1, 6144, 4096]),
//     new Uint32Array([ 1, 8192, 8192]),
//     new Uint32Array([ 1, 16384, 16384]),
//     new Uint32Array([ 1, 32768, 32768]),
//     new Uint32Array([ 1, 65536, 65536]),
//     new Uint32Array([ 1, 131072, 131072]),
//     new Uint32Array([ 1, 786432, 262144]),
//     new Uint32Array([ 1, 1048576, 524288]),
//     new Uint32Array([ 1, 2097152, 1048576]),
//     new Uint32Array([ 1, 4194304, 6291456]),
//     new Uint32Array([ 1, 8388608, 8388608]),
//     new Uint32Array([ 1, 16777216, 16777216]),
//     new Uint32Array([ 1, 33554432, 33554432]),
//     new Uint32Array([ 1, 201326592, 67108864]),
//     new Uint32Array([ 1, 268435456, 134217728]),
//     new Uint32Array([ 1, 536870912, 268435456]),
//     new Uint32Array([ 1, 1073741824, 536870912]),
//     new Uint32Array([ 2, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 3, 1]),
//     new Uint32Array([ 2, 1, 2]),
//     new Uint32Array([ 1, 1, 2, 4]),
//     new Uint32Array([ 1, 2, 4, 8]),
//     new Uint32Array([ 1, 12, 8, 16]),
//     new Uint32Array([ 1, 16, 48, 32]),
//     new Uint32Array([ 1, 32, 64, 64]),
//     new Uint32Array([ 1, 64, 128, 128]),
//     new Uint32Array([ 1, 384, 256, 768]),
//     new Uint32Array([ 1, 512, 512, 1024]),
//     new Uint32Array([ 1, 1024, 1024, 2048]),
//     new Uint32Array([ 1, 2048, 6144, 4096]),
//     new Uint32Array([ 1, 12288, 8192, 8192]),
//     new Uint32Array([ 1, 16384, 16384, 16384]),
//     new Uint32Array([ 1, 32768, 32768, 32768]),
//     new Uint32Array([ 1, 65536, 65536, 65536]),
//     new Uint32Array([ 1, 393216, 131072, 131072]),
//     new Uint32Array([ 1, 524288, 786432, 262144]),
//     new Uint32Array([ 1, 1048576, 1048576, 524288]),
//     new Uint32Array([ 1, 2097152, 2097152, 1048576]),
//     new Uint32Array([ 1, 12582912, 4194304, 6291456]),
//     new Uint32Array([ 1, 16777216, 8388608, 8388608]),
//     new Uint32Array([ 1, 33554432, 16777216, 16777216]),
//     new Uint32Array([ 1, 67108864, 100663296, 33554432]),
//     new Uint32Array([ 1, 402653184, 134217728, 67108864]),
//     new Uint32Array([ 1, 536870912, 268435456, 134217728]),
//     new Uint32Array([ 1, 1073741824, 536870912, 268435456]),
//     new Uint32Array([ 2, 1073741824, 536870912]),
//     new Uint32Array([ 3, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 4, 1]),
//     new Uint32Array([ 3, 1, 2]),
//     new Uint32Array([ 2, 1, 2, 4]),
//     new Uint32Array([ 1, 1, 2, 4, 8]),
//     new Uint32Array([ 1, 6, 4, 8, 16]),
//     new Uint32Array([ 1, 8, 24, 16, 32]),
//     new Uint32Array([ 1, 16, 32, 96, 64]),
//     new Uint32Array([ 1, 96, 64, 128, 128]),
//     new Uint32Array([ 1, 128, 128, 256, 256]),
//     new Uint32Array([ 1, 256, 768, 512, 1536]),
//     new Uint32Array([ 1, 1536, 1024, 1024, 2048]),
//     new Uint32Array([ 1, 2048, 2048, 6144, 4096]),
//     new Uint32Array([ 1, 4096, 12288, 8192, 8192]),
//     new Uint32Array([ 1, 24576, 16384, 16384, 16384]),
//     new Uint32Array([ 1, 32768, 32768, 32768, 32768]),
//     new Uint32Array([ 1, 196608, 65536, 65536, 65536]),
//     new Uint32Array([ 1, 262144, 393216, 131072, 131072]),
//     new Uint32Array([ 1, 524288, 524288, 786432, 262144]),
//     new Uint32Array([ 1, 3145728, 1048576, 1048576, 524288]),
//     new Uint32Array([ 1, 4194304, 6291456, 2097152, 3145728]),
//     new Uint32Array([ 1, 8388608, 8388608, 4194304, 4194304]),
//     new Uint32Array([ 1, 50331648, 16777216, 8388608, 8388608]),
//     new Uint32Array([ 1, 67108864, 33554432, 50331648, 16777216]),
//     new Uint32Array([ 1, 134217728, 201326592, 67108864, 33554432]),
//     new Uint32Array([ 1, 805306368, 268435456, 134217728, 67108864]),
//     new Uint32Array([ 1, 1073741824, 536870912, 268435456, 134217728]),
//     new Uint32Array([ 2, 1073741824, 536870912, 268435456]),
//     new Uint32Array([ 3, 1073741824, 536870912]),
//     new Uint32Array([ 4, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 5, 1]),
//     new Uint32Array([ 4, 1, 3]),
//     new Uint32Array([ 3, 1, 3, 4]),
//     new Uint32Array([ 2, 1, 3, 4, 8]),
//     new Uint32Array([ 1, 1, 2, 4, 8, 16]),
//     new Uint32Array([ 1, 6, 12, 8, 16, 32]),
//     new Uint32Array([ 1, 8, 16, 48, 32, 64]),
//     new Uint32Array([ 1, 48, 32, 64, 192, 128]),
//     new Uint32Array([ 1, 64, 192, 128, 256, 256]),
//     new Uint32Array([ 1, 384, 256, 768, 512, 1536]),
//     new Uint32Array([ 1, 512, 1536, 1024, 1024, 2048]),
//     new Uint32Array([ 1, 3072, 2048, 2048, 2048, 4096]),
//     new Uint32Array([ 1, 4096, 4096, 12288, 12288, 8192]),
//     new Uint32Array([ 1, 24576, 24576, 16384, 16384, 16384]),
//     new Uint32Array([ 1, 32768, 32768, 32768, 32768, 32768]),
//     new Uint32Array([ 1, 196608, 196608, 65536, 65536, 65536]),
//     new Uint32Array([ 1, 262144, 262144, 393216, 393216, 131072]),
//     new Uint32Array([ 1, 1572864, 524288, 524288, 524288, 262144]),
//     new Uint32Array([ 1, 2097152, 3145728, 1048576, 1048576, 524288]),
//     new Uint32Array([ 1, 12582912, 4194304, 6291456, 2097152, 3145728]),
//     new Uint32Array([ 1, 16777216, 25165824, 8388608, 4194304, 4194304]),
//     new Uint32Array([ 1, 100663296, 33554432, 16777216, 25165824, 8388608]),
//     new Uint32Array([ 1, 134217728, 67108864, 100663296, 33554432, 16777216]),
//     new Uint32Array([ 1, 805306368, 402653184, 134217728, 67108864, 33554432]),
//     new Uint32Array([ 1, 1073741824, 536870912, 268435456, 134217728, 67108864]),
//     new Uint32Array([ 2, 1073741824, 1610612736, 268435456, 134217728]),
//     new Uint32Array([ 3, 1073741824, 1610612736, 268435456]),
//     new Uint32Array([ 4, 1073741824, 1610612736]),
//     new Uint32Array([ 5, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 6, 1]),
//     new Uint32Array([ 6, 3]),
//     new Uint32Array([ 5, 3, 6]),
//     new Uint32Array([ 4, 3, 6, 8]),
//     new Uint32Array([ 2, 1, 3, 6, 8, 16]),
//     new Uint32Array([ 1, 1, 2, 4, 8, 16, 32]),
//     new Uint32Array([ 1, 6, 12, 24, 16, 32, 64]),
//     new Uint32Array([ 1, 24, 16, 32, 96, 192, 128]),
//     new Uint32Array([ 1, 32, 96, 192, 128, 256, 256]),
//     new Uint32Array([ 1, 192, 128, 256, 256, 512, 512]),
//     new Uint32Array([ 1, 768, 768, 512, 1536, 1024, 3072]),
//     new Uint32Array([ 1, 1024, 3072, 3072, 2048, 2048, 4096]),
//     new Uint32Array([ 1, 6144, 4096, 4096, 4096, 12288, 8192]),
//     new Uint32Array([ 1, 24576, 24576, 24576, 24576, 16384, 16384]),
//     new Uint32Array([ 1, 32768, 32768, 32768, 32768, 32768, 32768]),
//     new Uint32Array([ 1, 196608, 196608, 196608, 196608, 65536, 65536]),
//     new Uint32Array([ 1, 786432, 262144, 262144, 262144, 393216, 131072]),
//     new Uint32Array([ 1, 1048576, 1572864, 1572864, 524288, 524288, 262144]),
//     new Uint32Array([ 1, 6291456, 6291456, 2097152, 3145728, 1048576, 1572864]),
//     new Uint32Array([ 1, 25165824, 8388608, 4194304, 4194304, 2097152, 2097152]),
//     new Uint32Array([ 1, 33554432, 50331648, 25165824, 8388608, 4194304, 4194304]),
//     new Uint32Array([ 1, 201326592, 67108864, 33554432, 50331648, 25165824, 8388608]),
//     new Uint32Array([ 1, 805306368, 402653184, 201326592, 67108864, 33554432, 16777216]),
//     new Uint32Array([ 1, 1073741824, 536870912, 268435456, 134217728, 67108864, 33554432]),
//     new Uint32Array([ 2, 1073741824, 1610612736, 805306368, 134217728, 67108864]),
//     new Uint32Array([ 4, 1610612736, 805306368, 134217728]),
//     new Uint32Array([ 5, 1610612736, 805306368]),
//     new Uint32Array([ 6, 1610612736]),
//     new Uint32Array([ 6, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 7, 1]),
//     new Uint32Array([ 7, 3]),
//     new Uint32Array([ 6, 1, 6]),
//     new Uint32Array([ 5, 1, 6, 12]),
//     new Uint32Array([ 4, 1, 6, 12, 16]),
//     new Uint32Array([ 2, 1, 3, 6, 12, 16, 32]),
//     new Uint32Array([ 1, 1, 2, 4, 8, 16, 32, 64]),
//     new Uint32Array([ 1, 6, 12, 24, 48, 96, 64, 128]),
//     new Uint32Array([ 1, 24, 48, 96, 64, 128, 384, 256]),
//     new Uint32Array([ 1, 96, 192, 128, 384, 256, 512, 512]),
//     new Uint32Array([ 1, 384, 256, 768, 512, 1536, 1024, 3072]),
//     new Uint32Array([ 1, 1536, 1536, 1024, 3072, 2048, 2048, 4096]),
//     new Uint32Array([ 1, 6144, 6144, 6144, 4096, 4096, 12288, 8192]),
//     new Uint32Array([ 1, 24576, 24576, 24576, 24576, 24576, 16384, 16384]),
//     new Uint32Array([ 1, 32768, 32768, 32768, 32768, 32768, 32768, 32768]),
//     new Uint32Array([ 1, 196608, 196608, 196608, 196608, 196608, 65536, 65536]),
//     new Uint32Array([ 1, 786432, 786432, 786432, 262144, 262144, 393216, 131072]),
//     new Uint32Array([ 1, 3145728, 3145728, 1048576, 1572864, 524288, 524288, 262144]),
//     new Uint32Array([ 1, 12582912, 4194304, 6291456, 2097152, 3145728, 1048576, 1572864]),
//     new Uint32Array([ 1, 50331648, 25165824, 8388608, 12582912, 4194304, 2097152, 2097152]),
//     new Uint32Array([ 1, 201326592, 100663296, 50331648, 16777216, 8388608, 12582912, 4194304]),
//     new Uint32Array([ 1, 805306368, 402653184, 201326592, 100663296, 50331648, 16777216, 8388608]),
//     new Uint32Array([ 1, 1073741824, 536870912, 268435456, 134217728, 67108864, 33554432, 16777216]),
//     new Uint32Array([ 2, 1073741824, 1610612736, 805306368, 402653184, 67108864, 33554432]),
//     new Uint32Array([ 4, 1073741824, 805306368, 402653184, 67108864]),
//     new Uint32Array([ 5, 1073741824, 805306368, 402653184]),
//     new Uint32Array([ 6, 1073741824, 805306368]),
//     new Uint32Array([ 7, 1610612736]),
//     new Uint32Array([ 7, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 8, 1, 1]),
//     new Uint32Array([ 8, 3]),
//     new Uint32Array([ 7, 1, 6]),
//     new Uint32Array([ 6, 1, 3, 12]),
//     new Uint32Array([ 5, 1, 3, 12, 24]),
//     new Uint32Array([ 4, 1, 3, 12, 24, 48]),
//     new Uint32Array([ 2, 1, 3, 6, 12, 24, 48, 64]),
//     new Uint32Array([ 1, 3, 3, 4, 8, 16, 32, 64, 128]),
//     new Uint32Array([ 1, 12, 12, 24, 48, 96, 192, 128, 256]),
//     new Uint32Array([ 1, 48, 48, 96, 192, 128, 256, 768, 512]),
//     new Uint32Array([ 1, 192, 192, 384, 256, 768, 512, 1024, 1024]),
//     new Uint32Array([ 1, 768, 768, 1536, 1536, 3072, 3072, 2048, 6144]),
//     new Uint32Array([ 1, 3072, 3072, 6144, 6144, 4096, 4096, 12288, 8192]),
//     new Uint32Array([ 1, 12288, 12288, 24576, 24576, 24576, 24576, 16384, 16384]),
//     new Uint32Array([ 1, 114688, 114688, 32768, 32768, 32768, 32768, 32768, 32768]),
//     new Uint32Array([ 1, 393216, 393216, 196608, 196608, 196608, 196608, 65536, 65536]),
//     new Uint32Array([ 1, 1572864, 1572864, 786432, 786432, 262144, 262144, 393216, 131072]),
//     new Uint32Array([ 1, 6291456, 6291456, 3145728, 3145728, 1572864, 1572864, 524288, 786432]),
//     new Uint32Array([ 1, 25165824, 25165824, 12582912, 4194304, 6291456, 2097152, 1048576, 1048576]),
//     new Uint32Array([ 1, 100663296, 100663296, 50331648, 25165824, 8388608, 4194304, 6291456, 2097152]),
//     new Uint32Array([ 1, 402653184, 402653184, 201326592, 100663296, 50331648, 25165824, 8388608, 4194304]),
//     new Uint32Array([ 1, 1610612736, 1610612736, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608]),
//     new Uint32Array([ 2, 1073741824, 1610612736, 805306368, 402653184, 201326592, 100663296, 16777216]),
//     new Uint32Array([ 4, 1073741824, 1610612736, 402653184, 201326592, 100663296]),
//     new Uint32Array([ 5, 1073741824, 1610612736, 402653184, 201326592]),
//     new Uint32Array([ 6, 1073741824, 1610612736, 402653184]),
//     new Uint32Array([ 7, 1073741824, 805306368]),
//     new Uint32Array([ 8, 1610612736]),
//     new Uint32Array([ 8, 1073741824, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 10, 1]),
//     new Uint32Array([ 9, 3, 2]),
//     new Uint32Array([ 8, 1, 7, 4]),
//     new Uint32Array([ 8, 3, 12]),
//     new Uint32Array([ 7, 3, 6, 24]),
//     new Uint32Array([ 6, 3, 6, 12, 48]),
//     new Uint32Array([ 4, 1, 3, 6, 12, 48, 96]),
//     new Uint32Array([ 3, 3, 7, 12, 24, 48, 96, 128]),
//     new Uint32Array([ 1, 3, 7, 14, 12, 16, 32, 64, 128, 256]),
//     new Uint32Array([ 1, 12, 24, 48, 48, 96, 192, 384, 256, 512]),
//     new Uint32Array([ 1, 112, 96, 192, 192, 384, 768, 512, 1536, 1024]),
//     new Uint32Array([ 1, 384, 896, 768, 768, 1536, 1024, 3072, 2048, 6144]),
//     new Uint32Array([ 1, 3584, 3072, 3072, 3072, 6144, 6144, 4096, 4096, 8192]),
//     new Uint32Array([ 1, 12288, 12288, 12288, 12288, 24576, 24576, 24576, 24576, 16384]),
//     new Uint32Array([ 1, 114688, 114688, 114688, 114688, 32768, 32768, 32768, 32768, 32768]),
//     new Uint32Array([ 1, 393216, 393216, 393216, 393216, 196608, 196608, 196608, 196608, 65536]),
//     new Uint32Array([ 1, 3670016, 1572864, 1572864, 1572864, 786432, 786432, 262144, 262144, 131072]),
//     new Uint32Array([ 1, 12582912, 14680064, 6291456, 6291456, 3145728, 1048576, 1572864, 524288, 786432]),
//     new Uint32Array([ 1, 117440512, 50331648, 25165824, 25165824, 12582912, 6291456, 2097152, 3145728, 1048576]),
//     new Uint32Array([ 1, 402653184, 201326592, 100663296, 100663296, 50331648, 25165824, 12582912, 4194304, 2097152]),
//     new Uint32Array([ 1, 1610612736, 1879048192, 939524096, 402653184, 67108864, 33554432, 16777216, 8388608, 4194304]),
//     new Uint32Array([ 3, 1610612736, 1879048192, 402653184, 201326592, 100663296, 50331648, 8388608]),
//     new Uint32Array([ 4, 1073741824, 1610612736, 805306368, 402653184, 100663296, 50331648]),
//     new Uint32Array([ 6, 1610612736, 805306368, 402653184, 100663296]),
//     new Uint32Array([ 7, 1610612736, 805306368, 201326592]),
//     new Uint32Array([ 8, 1610612736, 402653184]),
//     new Uint32Array([ 8, 1073741824, 1879048192, 268435456]),
//     new Uint32Array([ 9, 1610612736, 536870912]),
//     new Uint32Array([ 10, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 11, 1]),
//     new Uint32Array([ 10, 1, 2]),
//     new Uint32Array([ 10, 3, 4]),
//     new Uint32Array([ 9, 3, 14, 8]),
//     new Uint32Array([ 8, 1, 7, 28, 16]),
//     new Uint32Array([ 7, 1, 3, 12, 48]),
//     new Uint32Array([ 6, 1, 3, 14, 24, 96]),
//     new Uint32Array([ 5, 3, 7, 12, 24, 96, 192]),
//     new Uint32Array([ 3, 1, 3, 14, 28, 48, 96, 192, 256]),
//     new Uint32Array([ 1, 3, 7, 14, 28, 56, 48, 64, 128, 256, 512]),
//     new Uint32Array([ 1, 28, 56, 48, 96, 192, 192, 384, 768, 1536, 1024]),
//     new Uint32Array([ 1, 224, 192, 448, 384, 768, 768, 1536, 1024, 2048, 2048]),
//     new Uint32Array([ 1, 1792, 1792, 3584, 3584, 3072, 3072, 6144, 6144, 4096, 12288]),
//     new Uint32Array([ 1, 14336, 14336, 12288, 12288, 12288, 12288, 24576, 24576, 24576, 16384]),
//     new Uint32Array([ 1, 114688, 114688, 114688, 114688, 114688, 114688, 32768, 32768, 32768, 32768]),
//     new Uint32Array([ 1, 917504, 917504, 393216, 393216, 393216, 393216, 196608, 196608, 196608, 65536]),
//     new Uint32Array([ 1, 7340032, 7340032, 3670016, 3670016, 1572864, 1572864, 786432, 786432, 262144, 393216]),
//     new Uint32Array([ 1, 58720256, 25165824, 29360128, 12582912, 6291456, 6291456, 3145728, 1048576, 524288, 524288]),
//     new Uint32Array([ 1, 469762048, 234881024, 100663296, 50331648, 25165824, 25165824, 12582912, 6291456, 3145728, 1048576]),
//     new Uint32Array([ 1, 1610612736, 1879048192, 939524096, 469762048, 234881024, 100663296, 16777216, 8388608, 4194304, 2097152]),
//     new Uint32Array([ 3, 1073741824, 1610612736, 939524096, 469762048, 100663296, 50331648, 25165824, 4194304]),
//     new Uint32Array([ 5, 1610612736, 1879048192, 402653184, 201326592, 50331648, 25165824]),
//     new Uint32Array([ 6, 1073741824, 1610612736, 939524096, 201326592, 50331648]),
//     new Uint32Array([ 7, 1073741824, 1610612736, 402653184, 100663296]),
//     new Uint32Array([ 8, 1073741824, 1879048192, 469762048, 67108864]),
//     new Uint32Array([ 9, 1610612736, 939524096, 134217728]),
//     new Uint32Array([ 10, 1610612736, 268435456]),
//     new Uint32Array([ 10, 1073741824, 536870912]),
//     new Uint32Array([ 11, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 12, 1]),
//     new Uint32Array([ 11, 1, 2]),
//     new Uint32Array([ 11, 3, 4]),
//     new Uint32Array([ 10, 1, 7, 8]),
//     new Uint32Array([ 10, 3, 14, 16]),
//     new Uint32Array([ 9, 3, 15, 56, 32]),
//     new Uint32Array([ 8, 1, 7, 28, 112, 64]),
//     new Uint32Array([ 7, 3, 7, 28, 48, 192]),
//     new Uint32Array([ 5, 1, 3, 15, 28, 48, 224, 384]),
//     new Uint32Array([ 3, 1, 3, 7, 14, 56, 112, 192, 384, 768]),
//     new Uint32Array([ 1, 3, 7, 14, 28, 56, 112, 224, 192, 256, 512, 1024]),
//     new Uint32Array([ 1, 60, 120, 112, 224, 448, 384, 768, 768, 1536, 3072, 2048]),
//     new Uint32Array([ 1, 960, 896, 1920, 1792, 1536, 3584, 3072, 3072, 6144, 4096, 12288]),
//     new Uint32Array([ 1, 15360, 15360, 14336, 14336, 14336, 12288, 12288, 12288, 24576, 24576, 16384]),
//     new Uint32Array([ 1, 114688, 114688, 114688, 114688, 114688, 114688, 114688, 114688, 32768, 32768, 32768]),
//     new Uint32Array([ 1, 1966080, 1966080, 917504, 917504, 917504, 393216, 393216, 393216, 196608, 196608, 65536]),
//     new Uint32Array([ 1, 31457280, 14680064, 15728640, 7340032, 3145728, 3670016, 1572864, 1572864, 786432, 262144, 393216]),
//     new Uint32Array([ 1, 503316480, 251658240, 117440512, 58720256, 29360128, 12582912, 6291456, 6291456, 3145728, 1572864, 524288]),
//     new Uint32Array([ 1, 1610612736, 1879048192, 939524096, 469762048, 234881024, 117440512, 58720256, 25165824, 4194304, 2097152, 1048576]),
//     new Uint32Array([ 3, 1073741824, 1610612736, 1879048192, 939524096, 234881024, 117440512, 25165824, 12582912, 6291456]),
//     new Uint32Array([ 5, 1073741824, 1610612736, 2013265920, 469762048, 100663296, 58720256, 12582912]),
//     new Uint32Array([ 7, 1610612736, 1879048192, 469762048, 100663296, 25165824]),
//     new Uint32Array([ 8, 1073741824, 1879048192, 469762048, 117440512, 16777216]),
//     new Uint32Array([ 9, 1610612736, 2013265920, 234881024, 33554432]),
//     new Uint32Array([ 10, 1610612736, 939524096, 67108864]),
//     new Uint32Array([ 10, 1073741824, 1879048192, 134217728]),
//     new Uint32Array([ 11, 1610612736, 268435456]),
//     new Uint32Array([ 11, 1073741824, 536870912]),
//     new Uint32Array([ 12, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 13, 1]),
//     new Uint32Array([ 12, 1, 3]),
//     new Uint32Array([ 12, 3, 6]),
//     new Uint32Array([ 12, 7, 12]),
//     new Uint32Array([ 11, 1, 15, 16]),
//     new Uint32Array([ 11, 7, 30, 32]),
//     new Uint32Array([ 10, 3, 15, 56, 64]),
//     new Uint32Array([ 9, 3, 15, 60, 240, 128]),
//     new Uint32Array([ 8, 3, 15, 30, 112, 448, 256]),
//     new Uint32Array([ 6, 1, 7, 15, 60, 112, 192, 768]),
//     new Uint32Array([ 3, 1, 3, 7, 15, 30, 56, 240, 448, 768, 1536]),
//     new Uint32Array([ 1, 7, 15, 31, 30, 60, 112, 224, 448, 896, 768, 1024, 2048]),
//     new Uint32Array([ 1, 248, 240, 480, 480, 960, 896, 1792, 1536, 3072, 3072, 6144, 4096]),
//     new Uint32Array([ 1, 7936, 7936, 7680, 7680, 15360, 15360, 14336, 14336, 12288, 12288, 24576, 24576]),
//     new Uint32Array([ 1, 253952, 253952, 253952, 253952, 114688, 114688, 114688, 114688, 114688, 114688, 32768, 32768]),
//     new Uint32Array([ 1, 8126464, 8126464, 3932160, 3932160, 1966080, 1966080, 917504, 917504, 393216, 393216, 196608, 196608]),
//     new Uint32Array([ 1, 260046848, 125829120, 62914560, 62914560, 31457280, 14680064, 7340032, 3145728, 1572864, 1572864, 786432, 262144]),
//     new Uint32Array([ 1, 1879048192, 2013265920, 2080374784, 1006632960, 503316480, 117440512, 58720256, 29360128, 14680064, 6291456, 1048576, 524288]),
//     new Uint32Array([ 3, 1073741824, 1610612736, 1879048192, 2013265920, 1006632960, 234881024, 125829120, 29360128, 6291456, 3145728]),
//     new Uint32Array([ 6, 1073741824, 1879048192, 2013265920, 503316480, 117440512, 25165824, 6291456]),
//     new Uint32Array([ 8, 1610612736, 2013265920, 1006632960, 117440512, 29360128, 4194304]),
//     new Uint32Array([ 9, 1610612736, 2013265920, 503316480, 125829120, 8388608]),
//     new Uint32Array([ 10, 1610612736, 2013265920, 234881024, 16777216]),
//     new Uint32Array([ 11, 1879048192, 1006632960, 33554432]),
//     new Uint32Array([ 11, 1073741824, 2013265920, 67108864]),
//     new Uint32Array([ 12, 1879048192, 402653184]),
//     new Uint32Array([ 12, 1610612736, 805306368]),
//     new Uint32Array([ 12, 1073741824, 1610612736]),
//     new Uint32Array([ 13, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 14, 1]),
//     new Uint32Array([ 14, 3]),
//     new Uint32Array([ 13, 1, 7]),
//     new Uint32Array([ 13, 3, 14]),
//     new Uint32Array([ 13, 15, 28]),
//     new Uint32Array([ 12, 1, 31, 48]),
//     new Uint32Array([ 12, 7, 63, 96]),
//     new Uint32Array([ 11, 3, 15, 124, 192]),
//     new Uint32Array([ 10, 1, 15, 63, 240, 256]),
//     new Uint32Array([ 9, 3, 15, 63, 252, 960, 512]),
//     new Uint32Array([ 7, 1, 7, 15, 63, 252, 480, 1792, 1024]),
//     new Uint32Array([ 4, 1, 3, 15, 31, 63, 124, 240, 960, 1792, 3072]),
//     new Uint32Array([ 1, 15, 31, 63, 63, 126, 252, 496, 480, 960, 1792, 3584, 3072, 4096]),
//     new Uint32Array([ 1, 4080, 4064, 4032, 4032, 8064, 7936, 7680, 7680, 15360, 14336, 12288, 12288, 24576]),
//     new Uint32Array([ 1, 520192, 520192, 520192, 520192, 253952, 253952, 253952, 253952, 114688, 114688, 114688, 114688, 32768]),
//     new Uint32Array([ 1, 133693440, 66584576, 33030144, 33030144, 16515072, 8126464, 3932160, 3932160, 1966080, 917504, 393216, 393216, 196608]),
//     new Uint32Array([ 1, 2013265920, 2080374784, 2113929216, 2113929216, 1056964608, 528482304, 130023424, 62914560, 31457280, 7340032, 3670016, 1572864, 262144]),
//     new Uint32Array([ 4, 1073741824, 1610612736, 2013265920, 2080374784, 2113929216, 520093696, 125829120, 31457280, 7340032, 1572864]),
//     new Uint32Array([ 7, 1073741824, 1879048192, 2013265920, 2113929216, 528482304, 62914560, 7340032, 1048576]),
//     new Uint32Array([ 9, 1610612736, 2013265920, 2113929216, 528482304, 31457280, 2097152]),
//     new Uint32Array([ 10, 1073741824, 2013265920, 2113929216, 125829120, 4194304]),
//     new Uint32Array([ 11, 1610612736, 2013265920, 520093696, 25165824]),
//     new Uint32Array([ 12, 1879048192, 2113929216, 50331648]),
//     new Uint32Array([ 12, 1073741824, 2080374784, 100663296]),
//     new Uint32Array([ 13, 2013265920, 469762048]),
//     new Uint32Array([ 13, 1610612736, 939524096]),
//     new Uint32Array([ 13, 1073741824, 1879048192]),
//     new Uint32Array([ 14, 1610612736]),
//     new Uint32Array([ 14, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 15, 1]),
//     new Uint32Array([ 15, 3]),
//     new Uint32Array([ 15, 7]),
//     new Uint32Array([ 14, 1, 15]),
//     new Uint32Array([ 14, 3, 31]),
//     new Uint32Array([ 14, 15, 63]),
//     new Uint32Array([ 14, 31, 127]),
//     new Uint32Array([ 13, 3, 63, 252]),
//     new Uint32Array([ 13, 15, 255, 496]),
//     new Uint32Array([ 12, 3, 63, 511, 960]),
//     new Uint32Array([ 11, 3, 31, 255, 1023, 1792]),
//     new Uint32Array([ 9, 3, 15, 63, 255, 1023, 4080, 3072]),
//     new Uint32Array([ 5, 1, 3, 15, 31, 63, 255, 511, 1023, 4080, 7936, 4096]),
//     new Uint32Array([ 1, 255, 255, 511, 511, 1023, 1023, 2047, 2047, 4092, 4080, 8128, 7936, 15360, 12288]),
//     new Uint32Array([ 1, 8388352, 8388352, 4193792, 4193792, 2096128, 2096128, 1046528, 1046528, 520192, 520192, 253952, 253952, 114688, 114688]),
//     new Uint32Array([ 1, 2139095040, 2139095040, 2143289344, 2143289344, 2145386496, 2145386496, 2146435072, 2146435072, 536346624, 133693440, 33292288, 8126464, 1966080, 393216]),
//     new Uint32Array([ 5, 1073741824, 1610612736, 2013265920, 2080374784, 2113929216, 2139095040, 2143289344, 2145386496, 133693440, 8126464, 262144]),
//     new Uint32Array([ 9, 1610612736, 2013265920, 2113929216, 2139095040, 2145386496, 133693440, 1572864]),
//     new Uint32Array([ 11, 1610612736, 2080374784, 2139095040, 2145386496, 7340032]),
//     new Uint32Array([ 12, 1610612736, 2113929216, 2143289344, 31457280]),
//     new Uint32Array([ 13, 2013265920, 2139095040, 130023424]),
//     new Uint32Array([ 13, 1610612736, 2113929216, 528482304]),
//     new Uint32Array([ 14, 2080374784, 2130706432]),
//     new Uint32Array([ 14, 2013265920, 2113929216]),
//     new Uint32Array([ 14, 1610612736, 2080374784]),
//     new Uint32Array([ 14, 1073741824, 2013265920]),
//     new Uint32Array([ 15, 1879048192]),
//     new Uint32Array([ 15, 1610612736]),
//     new Uint32Array([ 15, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 16, 1]),
//     new Uint32Array([ 16, 3]),
//     new Uint32Array([ 16, 7]),
//     new Uint32Array([ 16, 15]),
//     new Uint32Array([ 16, 31]),
//     new Uint32Array([ 16, 63]),
//     new Uint32Array([ 16, 127]),
//     new Uint32Array([ 15, 3, 255, 3]),
//     new Uint32Array([ 15, 15, 511, 15]),
//     new Uint32Array([ 15, 63, 1023, 63]),
//     new Uint32Array([ 15, 255, 2047, 255]),
//     new Uint32Array([ 14, 15, 1023, 4095, 1023, 15]),
//     new Uint32Array([ 13, 15, 255, 4095, 8191, 4095, 255, 15]),
//     new Uint32Array([ 9, 3, 15, 63, 255, 1023, 4095, 16383, 16383, 16383, 4095, 1023, 255, 63, 15, 3]),
//     null,
//     new Uint32Array([ 9, 1610612736, 2013265920, 2113929216, 2139095040, 2145386496, 2146959360, 2147352576, 2147352576, 2147352576, 2146959360, 2145386496, 2139095040, 2113929216, 2013265920, 1610612736]),
//     new Uint32Array([ 13, 2013265920, 2139095040, 2146959360, 2147221504, 2146959360, 2139095040, 2013265920]),
//     new Uint32Array([ 14, 2013265920, 2145386496, 2146959360, 2145386496, 2013265920]),
//     new Uint32Array([ 15, 2139095040, 2146435072, 2139095040]),
//     new Uint32Array([ 15, 2113929216, 2145386496, 2113929216]),
//     new Uint32Array([ 15, 2013265920, 2143289344, 2013265920]),
//     new Uint32Array([ 15, 1610612736, 2139095040, 1610612736]),
//     new Uint32Array([ 16, 2130706432]),
//     new Uint32Array([ 16, 2113929216]),
//     new Uint32Array([ 16, 2080374784]),
//     new Uint32Array([ 16, 2013265920]),
//     new Uint32Array([ 16, 1879048192]),
//     new Uint32Array([ 16, 1610612736]),
//     new Uint32Array([ 16, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 17, 1]),
//     new Uint32Array([ 17, 3]),
//     new Uint32Array([ 17, 7]),
//     new Uint32Array([ 17, 15, 1]),
//     new Uint32Array([ 17, 31, 3]),
//     new Uint32Array([ 17, 63, 15]),
//     new Uint32Array([ 17, 127, 31]),
//     new Uint32Array([ 17, 252, 63, 3]),
//     new Uint32Array([ 17, 496, 255, 15]),
//     new Uint32Array([ 17, 960, 511, 63, 3]),
//     new Uint32Array([ 17, 1792, 1023, 255, 31, 3]),
//     new Uint32Array([ 17, 3072, 4080, 1023, 255, 63, 15, 3]),
//     new Uint32Array([ 17, 4096, 7936, 4080, 1023, 511, 255, 63, 31, 15, 3, 1]),
//     new Uint32Array([ 18, 12288, 15360, 7936, 8128, 4080, 4092, 2047, 2047, 1023, 1023, 511, 511, 255, 255]),
//     new Uint32Array([ 18, 114688, 114688, 253952, 253952, 520192, 520192, 1046528, 1046528, 2096128, 2096128, 4193792, 4193792, 8388352, 8388352]),
//     new Uint32Array([ 18, 393216, 1966080, 8126464, 33292288, 133693440, 536346624, 2146435072, 2146435072, 2145386496, 2145386496, 2143289344, 2143289344, 2139095040, 2139095040]),
//     new Uint32Array([ 17, 262144, 8126464, 133693440, 2145386496, 2143289344, 2139095040, 2113929216, 2080374784, 2013265920, 1610612736, 1073741824]),
//     new Uint32Array([ 17, 1572864, 133693440, 2145386496, 2139095040, 2113929216, 2013265920, 1610612736]),
//     new Uint32Array([ 17, 7340032, 2145386496, 2139095040, 2080374784, 1610612736]),
//     new Uint32Array([ 17, 31457280, 2143289344, 2113929216, 1610612736]),
//     new Uint32Array([ 17, 130023424, 2139095040, 2013265920]),
//     new Uint32Array([ 17, 528482304, 2113929216, 1610612736]),
//     new Uint32Array([ 17, 2130706432, 2080374784]),
//     new Uint32Array([ 17, 2113929216, 2013265920]),
//     new Uint32Array([ 17, 2080374784, 1610612736]),
//     new Uint32Array([ 17, 2013265920, 1073741824]),
//     new Uint32Array([ 17, 1879048192]),
//     new Uint32Array([ 17, 1610612736]),
//     new Uint32Array([ 17, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 18, 1]),
//     new Uint32Array([ 18, 3]),
//     new Uint32Array([ 18, 7, 1]),
//     new Uint32Array([ 18, 14, 3]),
//     new Uint32Array([ 18, 28, 15]),
//     new Uint32Array([ 18, 48, 31, 1]),
//     new Uint32Array([ 18, 96, 63, 7]),
//     new Uint32Array([ 18, 192, 124, 15, 3]),
//     new Uint32Array([ 18, 256, 240, 63, 15, 1]),
//     new Uint32Array([ 18, 512, 960, 252, 63, 15, 3]),
//     new Uint32Array([ 18, 1024, 1792, 480, 252, 63, 15, 7, 1]),
//     new Uint32Array([ 19, 3072, 1792, 960, 240, 124, 63, 31, 15, 3, 1]),
//     new Uint32Array([ 19, 4096, 3072, 3584, 1792, 960, 480, 496, 252, 126, 63, 63, 31, 15]),
//     new Uint32Array([ 19, 24576, 12288, 12288, 14336, 15360, 7680, 7680, 7936, 8064, 4032, 4032, 4064, 4080]),
//     new Uint32Array([ 19, 32768, 114688, 114688, 114688, 114688, 253952, 253952, 253952, 253952, 520192, 520192, 520192, 520192]),
//     new Uint32Array([ 19, 196608, 393216, 393216, 917504, 1966080, 3932160, 3932160, 8126464, 16515072, 33030144, 33030144, 66584576, 133693440]),
//     new Uint32Array([ 19, 262144, 1572864, 3670016, 7340032, 31457280, 62914560, 130023424, 528482304, 1056964608, 2113929216, 2113929216, 2080374784, 2013265920]),
//     new Uint32Array([ 19, 1572864, 7340032, 31457280, 125829120, 520093696, 2113929216, 2080374784, 2013265920, 1610612736, 1073741824]),
//     new Uint32Array([ 18, 1048576, 7340032, 62914560, 528482304, 2113929216, 2013265920, 1879048192, 1073741824]),
//     new Uint32Array([ 18, 2097152, 31457280, 528482304, 2113929216, 2013265920, 1610612736]),
//     new Uint32Array([ 18, 4194304, 125829120, 2113929216, 2013265920, 1073741824]),
//     new Uint32Array([ 18, 25165824, 520093696, 2013265920, 1610612736]),
//     new Uint32Array([ 18, 50331648, 2113929216, 1879048192]),
//     new Uint32Array([ 18, 100663296, 2080374784, 1073741824]),
//     new Uint32Array([ 18, 469762048, 2013265920]),
//     new Uint32Array([ 18, 939524096, 1610612736]),
//     new Uint32Array([ 18, 1879048192, 1073741824]),
//     new Uint32Array([ 18, 1610612736]),
//     new Uint32Array([ 18, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 19, 1]),
//     new Uint32Array([ 19, 3, 1]),
//     new Uint32Array([ 19, 6, 3]),
//     new Uint32Array([ 19, 12, 7]),
//     new Uint32Array([ 19, 16, 15, 1]),
//     new Uint32Array([ 19, 32, 30, 7]),
//     new Uint32Array([ 19, 64, 56, 15, 3]),
//     new Uint32Array([ 19, 128, 240, 60, 15, 3]),
//     new Uint32Array([ 19, 256, 448, 112, 30, 15, 3]),
//     new Uint32Array([ 20, 768, 192, 112, 60, 15, 7, 1]),
//     new Uint32Array([ 20, 1536, 768, 448, 240, 56, 30, 15, 7, 3, 1]),
//     new Uint32Array([ 20, 2048, 1024, 768, 896, 448, 224, 112, 60, 30, 31, 15, 7]),
//     new Uint32Array([ 20, 4096, 6144, 3072, 3072, 1536, 1792, 896, 960, 480, 480, 240, 248]),
//     new Uint32Array([ 20, 24576, 24576, 12288, 12288, 14336, 14336, 15360, 15360, 7680, 7680, 7936, 7936]),
//     new Uint32Array([ 20, 32768, 32768, 114688, 114688, 114688, 114688, 114688, 114688, 253952, 253952, 253952, 253952]),
//     new Uint32Array([ 20, 196608, 196608, 393216, 393216, 917504, 917504, 1966080, 1966080, 3932160, 3932160, 8126464, 8126464]),
//     new Uint32Array([ 20, 262144, 786432, 1572864, 1572864, 3145728, 7340032, 14680064, 31457280, 62914560, 62914560, 125829120, 260046848]),
//     new Uint32Array([ 20, 524288, 1048576, 6291456, 14680064, 29360128, 58720256, 117440512, 503316480, 1006632960, 2080374784, 2013265920, 1879048192]),
//     new Uint32Array([ 20, 3145728, 6291456, 29360128, 125829120, 234881024, 1006632960, 2013265920, 1879048192, 1610612736, 1073741824]),
//     new Uint32Array([ 20, 6291456, 25165824, 117440512, 503316480, 2013265920, 1879048192, 1073741824]),
//     new Uint32Array([ 19, 4194304, 29360128, 117440512, 1006632960, 2013265920, 1610612736]),
//     new Uint32Array([ 19, 8388608, 125829120, 503316480, 2013265920, 1610612736]),
//     new Uint32Array([ 19, 16777216, 234881024, 2013265920, 1610612736]),
//     new Uint32Array([ 19, 33554432, 1006632960, 1879048192]),
//     new Uint32Array([ 19, 67108864, 2013265920, 1073741824]),
//     new Uint32Array([ 19, 402653184, 1879048192]),
//     new Uint32Array([ 19, 805306368, 1610612736]),
//     new Uint32Array([ 19, 1610612736, 1073741824]),
//     new Uint32Array([ 19, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 20, 1]),
//     new Uint32Array([ 20, 2, 1]),
//     new Uint32Array([ 20, 4, 3]),
//     new Uint32Array([ 20, 8, 7, 1]),
//     new Uint32Array([ 20, 16, 14, 3]),
//     new Uint32Array([ 20, 32, 56, 15, 3]),
//     new Uint32Array([ 20, 64, 112, 28, 7, 1]),
//     new Uint32Array([ 21, 192, 48, 28, 7, 3]),
//     new Uint32Array([ 21, 384, 224, 48, 28, 15, 3, 1]),
//     new Uint32Array([ 21, 768, 384, 192, 112, 56, 14, 7, 3, 1]),
//     new Uint32Array([ 21, 1024, 512, 256, 192, 224, 112, 56, 28, 14, 7, 3]),
//     new Uint32Array([ 21, 2048, 3072, 1536, 768, 768, 384, 448, 224, 112, 120, 60]),
//     new Uint32Array([ 21, 12288, 4096, 6144, 3072, 3072, 3584, 1536, 1792, 1920, 896, 960]),
//     new Uint32Array([ 21, 16384, 24576, 24576, 12288, 12288, 12288, 14336, 14336, 14336, 15360, 15360]),
//     new Uint32Array([ 21, 32768, 32768, 32768, 114688, 114688, 114688, 114688, 114688, 114688, 114688, 114688]),
//     new Uint32Array([ 21, 65536, 196608, 196608, 393216, 393216, 393216, 917504, 917504, 917504, 1966080, 1966080]),
//     new Uint32Array([ 21, 393216, 262144, 786432, 1572864, 1572864, 3670016, 3145728, 7340032, 15728640, 14680064, 31457280]),
//     new Uint32Array([ 21, 524288, 1572864, 3145728, 6291456, 6291456, 12582912, 29360128, 58720256, 117440512, 251658240, 503316480]),
//     new Uint32Array([ 21, 1048576, 2097152, 4194304, 25165824, 58720256, 117440512, 234881024, 469762048, 939524096, 1879048192, 1610612736]),
//     new Uint32Array([ 21, 6291456, 12582912, 25165824, 117440512, 234881024, 939524096, 1879048192, 1610612736, 1073741824]),
//     new Uint32Array([ 21, 12582912, 58720256, 100663296, 469762048, 2013265920, 1610612736, 1073741824]),
//     new Uint32Array([ 21, 25165824, 100663296, 469762048, 1879048192, 1610612736]),
//     new Uint32Array([ 20, 16777216, 117440512, 469762048, 1879048192, 1073741824]),
//     new Uint32Array([ 20, 33554432, 234881024, 2013265920, 1610612736]),
//     new Uint32Array([ 20, 67108864, 939524096, 1610612736]),
//     new Uint32Array([ 20, 134217728, 1879048192, 1073741824]),
//     new Uint32Array([ 20, 268435456, 1610612736]),
//     new Uint32Array([ 20, 536870912, 1073741824]),
//     new Uint32Array([ 20, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 21, 1]),
//     new Uint32Array([ 21, 2, 1]),
//     new Uint32Array([ 21, 4, 3]),
//     new Uint32Array([ 21, 8, 14, 3]),
//     new Uint32Array([ 21, 16, 28, 7, 1]),
//     new Uint32Array([ 22, 48, 12, 3, 1]),
//     new Uint32Array([ 22, 96, 24, 14, 3, 1]),
//     new Uint32Array([ 22, 192, 96, 24, 12, 7, 3]),
//     new Uint32Array([ 22, 256, 192, 96, 48, 28, 14, 3, 1]),
//     new Uint32Array([ 22, 512, 256, 128, 64, 48, 56, 28, 14, 7, 3]),
//     new Uint32Array([ 22, 1024, 1536, 768, 384, 192, 192, 96, 48, 56, 28]),
//     new Uint32Array([ 22, 2048, 2048, 1024, 1536, 768, 768, 384, 448, 192, 224]),
//     new Uint32Array([ 22, 12288, 4096, 6144, 6144, 3072, 3072, 3584, 3584, 1792, 1792]),
//     new Uint32Array([ 22, 16384, 24576, 24576, 24576, 12288, 12288, 12288, 12288, 14336, 14336]),
//     new Uint32Array([ 22, 32768, 32768, 32768, 32768, 114688, 114688, 114688, 114688, 114688, 114688]),
//     new Uint32Array([ 22, 65536, 196608, 196608, 196608, 393216, 393216, 393216, 393216, 917504, 917504]),
//     new Uint32Array([ 22, 393216, 262144, 786432, 786432, 1572864, 1572864, 3670016, 3670016, 7340032, 7340032]),
//     new Uint32Array([ 22, 524288, 524288, 1048576, 3145728, 6291456, 6291456, 12582912, 29360128, 25165824, 58720256]),
//     new Uint32Array([ 22, 1048576, 3145728, 6291456, 12582912, 25165824, 25165824, 50331648, 100663296, 234881024, 469762048]),
//     new Uint32Array([ 22, 2097152, 4194304, 8388608, 16777216, 100663296, 234881024, 469762048, 939524096, 1879048192, 1610612736]),
//     new Uint32Array([ 22, 4194304, 25165824, 50331648, 100663296, 469762048, 939524096, 1610612736, 1073741824]),
//     new Uint32Array([ 22, 25165824, 50331648, 201326592, 402653184, 1879048192, 1610612736]),
//     new Uint32Array([ 22, 50331648, 201326592, 939524096, 1610612736, 1073741824]),
//     new Uint32Array([ 22, 100663296, 402653184, 1610612736, 1073741824]),
//     new Uint32Array([ 21, 67108864, 469762048, 1879048192, 1073741824]),
//     new Uint32Array([ 21, 134217728, 939524096, 1610612736]),
//     new Uint32Array([ 21, 268435456, 1610612736]),
//     new Uint32Array([ 21, 536870912, 1073741824]),
//     new Uint32Array([ 21, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 22, 1]),
//     new Uint32Array([ 22, 2, 3]),
//     new Uint32Array([ 22, 4, 7, 1]),
//     new Uint32Array([ 23, 12, 3]),
//     new Uint32Array([ 23, 24, 6, 3]),
//     new Uint32Array([ 23, 48, 12, 6, 3]),
//     new Uint32Array([ 23, 96, 48, 12, 6, 3, 1]),
//     new Uint32Array([ 23, 128, 96, 48, 24, 12, 7, 3]),
//     new Uint32Array([ 23, 256, 128, 64, 32, 16, 12, 14, 7, 3]),
//     new Uint32Array([ 23, 512, 256, 384, 192, 96, 48, 48, 24, 12]),
//     new Uint32Array([ 23, 1024, 1536, 512, 768, 384, 192, 192, 96, 112]),
//     new Uint32Array([ 23, 6144, 2048, 3072, 1024, 1536, 768, 768, 896, 384]),
//     new Uint32Array([ 23, 8192, 4096, 4096, 6144, 6144, 3072, 3072, 3072, 3584]),
//     new Uint32Array([ 23, 16384, 24576, 24576, 24576, 24576, 12288, 12288, 12288, 12288]),
//     new Uint32Array([ 23, 32768, 32768, 32768, 32768, 32768, 114688, 114688, 114688, 114688]),
//     new Uint32Array([ 23, 65536, 196608, 196608, 196608, 196608, 393216, 393216, 393216, 393216]),
//     new Uint32Array([ 23, 131072, 262144, 262144, 786432, 786432, 1572864, 1572864, 1572864, 3670016]),
//     new Uint32Array([ 23, 786432, 524288, 1572864, 1048576, 3145728, 6291456, 6291456, 14680064, 12582912]),
//     new Uint32Array([ 23, 1048576, 3145728, 2097152, 6291456, 12582912, 25165824, 25165824, 50331648, 117440512]),
//     new Uint32Array([ 23, 2097152, 4194304, 12582912, 25165824, 50331648, 100663296, 100663296, 201326592, 402653184]),
//     new Uint32Array([ 23, 4194304, 8388608, 16777216, 33554432, 67108864, 402653184, 939524096, 1879048192, 1610612736]),
//     new Uint32Array([ 23, 8388608, 50331648, 100663296, 201326592, 402653184, 1879048192, 1610612736]),
//     new Uint32Array([ 23, 50331648, 100663296, 402653184, 805306368, 1610612736, 1073741824]),
//     new Uint32Array([ 23, 100663296, 402653184, 805306368, 1610612736]),
//     new Uint32Array([ 23, 201326592, 805306368, 1610612736]),
//     new Uint32Array([ 23, 402653184, 1610612736]),
//     new Uint32Array([ 22, 268435456, 1879048192, 1073741824]),
//     new Uint32Array([ 22, 536870912, 1610612736]),
//     new Uint32Array([ 22, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 23, 1, 1]),
//     new Uint32Array([ 24, 3]),
//     new Uint32Array([ 24, 6, 1]),
//     new Uint32Array([ 24, 12, 3, 1]),
//     new Uint32Array([ 24, 24, 12, 3, 1]),
//     new Uint32Array([ 24, 48, 24, 12, 3, 1]),
//     new Uint32Array([ 24, 64, 48, 24, 12, 6, 3, 1]),
//     new Uint32Array([ 24, 128, 64, 32, 16, 8, 4, 3, 3]),
//     new Uint32Array([ 24, 256, 128, 192, 96, 48, 24, 12, 12]),
//     new Uint32Array([ 24, 512, 768, 256, 128, 192, 96, 48, 48]),
//     new Uint32Array([ 24, 1024, 1024, 512, 768, 256, 384, 192, 192]),
//     new Uint32Array([ 24, 6144, 2048, 3072, 3072, 1536, 1536, 768, 768]),
//     new Uint32Array([ 24, 8192, 12288, 4096, 4096, 6144, 6144, 3072, 3072]),
//     new Uint32Array([ 24, 16384, 16384, 24576, 24576, 24576, 24576, 12288, 12288]),
//     new Uint32Array([ 24, 32768, 32768, 32768, 32768, 32768, 32768, 114688, 114688]),
//     new Uint32Array([ 24, 65536, 65536, 196608, 196608, 196608, 196608, 393216, 393216]),
//     new Uint32Array([ 24, 131072, 393216, 262144, 262144, 786432, 786432, 1572864, 1572864]),
//     new Uint32Array([ 24, 786432, 524288, 1572864, 1572864, 3145728, 3145728, 6291456, 6291456]),
//     new Uint32Array([ 24, 1048576, 1048576, 2097152, 6291456, 4194304, 12582912, 25165824, 25165824]),
//     new Uint32Array([ 24, 2097152, 6291456, 4194304, 8388608, 25165824, 50331648, 100663296, 100663296]),
//     new Uint32Array([ 24, 4194304, 8388608, 25165824, 50331648, 100663296, 201326592, 402653184, 402653184]),
//     new Uint32Array([ 24, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 1610612736, 1610612736]),
//     new Uint32Array([ 24, 16777216, 100663296, 201326592, 402653184, 805306368, 1610612736, 1073741824]),
//     new Uint32Array([ 24, 100663296, 201326592, 402653184, 1610612736, 1073741824]),
//     new Uint32Array([ 24, 201326592, 402653184, 1610612736, 1073741824]),
//     new Uint32Array([ 24, 402653184, 1610612736, 1073741824]),
//     new Uint32Array([ 24, 805306368, 1073741824]),
//     new Uint32Array([ 24, 1610612736]),
//     new Uint32Array([ 23, 1073741824, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 25, 1]),
//     new Uint32Array([ 25, 3]),
//     new Uint32Array([ 25, 6, 1]),
//     new Uint32Array([ 25, 12, 6, 1]),
//     new Uint32Array([ 25, 16, 12, 6, 1]),
//     new Uint32Array([ 25, 32, 16, 12, 6, 3, 1]),
//     new Uint32Array([ 25, 64, 32, 16, 8, 4, 2, 1]),
//     new Uint32Array([ 25, 128, 64, 96, 48, 24, 12, 6]),
//     new Uint32Array([ 25, 256, 384, 128, 64, 96, 48, 24]),
//     new Uint32Array([ 25, 512, 512, 256, 384, 128, 192, 96]),
//     new Uint32Array([ 25, 3072, 1024, 1536, 512, 768, 256, 384]),
//     new Uint32Array([ 25, 4096, 2048, 2048, 3072, 1024, 1536, 1536]),
//     new Uint32Array([ 25, 8192, 12288, 4096, 4096, 6144, 6144, 6144]),
//     new Uint32Array([ 25, 16384, 16384, 24576, 24576, 24576, 24576, 24576]),
//     new Uint32Array([ 25, 32768, 32768, 32768, 32768, 32768, 32768, 32768]),
//     new Uint32Array([ 25, 65536, 65536, 196608, 196608, 196608, 196608, 196608]),
//     new Uint32Array([ 25, 131072, 393216, 262144, 262144, 786432, 786432, 786432]),
//     new Uint32Array([ 25, 262144, 524288, 524288, 1572864, 1048576, 3145728, 3145728]),
//     new Uint32Array([ 25, 1572864, 1048576, 3145728, 2097152, 6291456, 4194304, 12582912]),
//     new Uint32Array([ 25, 2097152, 2097152, 4194304, 12582912, 8388608, 25165824, 50331648]),
//     new Uint32Array([ 25, 4194304, 12582912, 8388608, 16777216, 50331648, 100663296, 201326592]),
//     new Uint32Array([ 25, 8388608, 16777216, 50331648, 100663296, 201326592, 402653184, 805306368]),
//     new Uint32Array([ 25, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824]),
//     new Uint32Array([ 25, 33554432, 67108864, 402653184, 805306368, 1610612736, 1073741824]),
//     new Uint32Array([ 25, 67108864, 402653184, 805306368, 1073741824]),
//     new Uint32Array([ 25, 402653184, 805306368, 1073741824]),
//     new Uint32Array([ 25, 805306368, 1073741824]),
//     new Uint32Array([ 25, 1610612736]),
//     new Uint32Array([ 25, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 26, 1]),
//     new Uint32Array([ 26, 3]),
//     new Uint32Array([ 26, 6, 3]),
//     new Uint32Array([ 26, 8, 6, 3]),
//     new Uint32Array([ 26, 16, 8, 6, 3, 1]),
//     new Uint32Array([ 26, 32, 16, 8, 4, 2, 1]),
//     new Uint32Array([ 26, 64, 32, 16, 24, 12, 6]),
//     new Uint32Array([ 26, 128, 192, 96, 32, 16, 24]),
//     new Uint32Array([ 26, 256, 256, 128, 192, 96, 32]),
//     new Uint32Array([ 26, 512, 512, 256, 256, 128, 192]),
//     new Uint32Array([ 26, 3072, 1024, 1536, 512, 768, 768]),
//     new Uint32Array([ 26, 4096, 2048, 2048, 3072, 3072, 1024]),
//     new Uint32Array([ 26, 8192, 12288, 4096, 4096, 4096, 6144]),
//     new Uint32Array([ 26, 16384, 16384, 24576, 24576, 24576, 24576]),
//     new Uint32Array([ 26, 32768, 32768, 32768, 32768, 32768, 32768]),
//     new Uint32Array([ 26, 65536, 65536, 196608, 196608, 196608, 196608]),
//     new Uint32Array([ 26, 131072, 393216, 262144, 262144, 262144, 786432]),
//     new Uint32Array([ 26, 262144, 524288, 524288, 1572864, 1572864, 1048576]),
//     new Uint32Array([ 26, 1572864, 1048576, 3145728, 2097152, 6291456, 6291456]),
//     new Uint32Array([ 26, 2097152, 2097152, 4194304, 4194304, 8388608, 25165824]),
//     new Uint32Array([ 26, 4194304, 4194304, 8388608, 25165824, 50331648, 33554432]),
//     new Uint32Array([ 26, 8388608, 25165824, 50331648, 33554432, 67108864, 201326592]),
//     new Uint32Array([ 26, 16777216, 33554432, 67108864, 201326592, 402653184, 805306368]),
//     new Uint32Array([ 26, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824]),
//     new Uint32Array([ 26, 67108864, 134217728, 805306368, 1610612736, 1073741824]),
//     new Uint32Array([ 26, 134217728, 805306368, 1610612736]),
//     new Uint32Array([ 26, 805306368, 1610612736]),
//     new Uint32Array([ 26, 1610612736]),
//     new Uint32Array([ 26, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 27, 1]),
//     new Uint32Array([ 27, 3, 1]),
//     new Uint32Array([ 27, 4, 3, 1]),
//     new Uint32Array([ 27, 8, 4, 3, 1]),
//     new Uint32Array([ 27, 16, 8, 4, 2, 1]),
//     new Uint32Array([ 27, 32, 16, 8, 12, 6]),
//     new Uint32Array([ 27, 64, 32, 48, 16, 8]),
//     new Uint32Array([ 27, 128, 192, 64, 32, 48]),
//     new Uint32Array([ 27, 256, 256, 128, 192, 64]),
//     new Uint32Array([ 27, 1536, 512, 768, 256, 384]),
//     new Uint32Array([ 27, 2048, 1024, 1024, 1536, 512]),
//     new Uint32Array([ 27, 4096, 2048, 2048, 2048, 3072]),
//     new Uint32Array([ 27, 8192, 12288, 12288, 4096, 4096]),
//     new Uint32Array([ 27, 16384, 16384, 16384, 24576, 24576]),
//     new Uint32Array([ 27, 32768, 32768, 32768, 32768, 32768]),
//     new Uint32Array([ 27, 65536, 65536, 65536, 196608, 196608]),
//     new Uint32Array([ 27, 131072, 393216, 393216, 262144, 262144]),
//     new Uint32Array([ 27, 262144, 524288, 524288, 524288, 1572864]),
//     new Uint32Array([ 27, 524288, 1048576, 1048576, 3145728, 2097152]),
//     new Uint32Array([ 27, 3145728, 2097152, 6291456, 4194304, 12582912]),
//     new Uint32Array([ 27, 4194304, 4194304, 8388608, 25165824, 16777216]),
//     new Uint32Array([ 27, 8388608, 25165824, 16777216, 33554432, 100663296]),
//     new Uint32Array([ 27, 16777216, 33554432, 100663296, 67108864, 134217728]),
//     new Uint32Array([ 27, 33554432, 67108864, 134217728, 402653184, 805306368]),
//     new Uint32Array([ 27, 67108864, 134217728, 268435456, 536870912, 1073741824]),
//     new Uint32Array([ 27, 134217728, 268435456, 1610612736, 1073741824]),
//     new Uint32Array([ 27, 268435456, 1610612736, 1073741824]),
//     new Uint32Array([ 27, 1610612736, 1073741824]),
//     new Uint32Array([ 27, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 28, 1]),
//     new Uint32Array([ 28, 2, 1]),
//     new Uint32Array([ 28, 4, 2, 1]),
//     new Uint32Array([ 28, 8, 4, 2, 1]),
//     new Uint32Array([ 28, 16, 8, 4, 6]),
//     new Uint32Array([ 28, 32, 16, 24, 8]),
//     new Uint32Array([ 28, 64, 96, 32, 16]),
//     new Uint32Array([ 28, 128, 128, 64, 96]),
//     new Uint32Array([ 28, 256, 256, 128, 128]),
//     new Uint32Array([ 28, 1536, 512, 768, 256]),
//     new Uint32Array([ 28, 2048, 1024, 1024, 1536]),
//     new Uint32Array([ 28, 4096, 6144, 2048, 2048]),
//     new Uint32Array([ 28, 8192, 8192, 12288, 4096]),
//     new Uint32Array([ 28, 16384, 16384, 16384, 24576]),
//     new Uint32Array([ 28, 32768, 32768, 32768, 32768]),
//     new Uint32Array([ 28, 65536, 65536, 65536, 196608]),
//     new Uint32Array([ 28, 131072, 131072, 393216, 262144]),
//     new Uint32Array([ 28, 262144, 786432, 524288, 524288]),
//     new Uint32Array([ 28, 524288, 1048576, 1048576, 3145728]),
//     new Uint32Array([ 28, 3145728, 2097152, 6291456, 4194304]),
//     new Uint32Array([ 28, 4194304, 4194304, 8388608, 8388608]),
//     new Uint32Array([ 28, 8388608, 8388608, 16777216, 50331648]),
//     new Uint32Array([ 28, 16777216, 50331648, 33554432, 67108864]),
//     new Uint32Array([ 28, 33554432, 67108864, 201326592, 134217728]),
//     new Uint32Array([ 28, 67108864, 134217728, 268435456, 805306368]),
//     new Uint32Array([ 28, 134217728, 268435456, 536870912, 1073741824]),
//     new Uint32Array([ 28, 268435456, 536870912, 1073741824]),
//     new Uint32Array([ 28, 536870912, 1073741824]),
//     new Uint32Array([ 28, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 29, 1]),
//     new Uint32Array([ 29, 2, 1]),
//     new Uint32Array([ 29, 4, 2, 1]),
//     new Uint32Array([ 29, 8, 4, 2]),
//     new Uint32Array([ 29, 16, 8, 12]),
//     new Uint32Array([ 29, 32, 48, 16]),
//     new Uint32Array([ 29, 64, 64, 32]),
//     new Uint32Array([ 29, 128, 128, 64]),
//     new Uint32Array([ 29, 768, 256, 384]),
//     new Uint32Array([ 29, 1024, 512, 512]),
//     new Uint32Array([ 29, 2048, 1024, 1024]),
//     new Uint32Array([ 29, 4096, 6144, 2048]),
//     new Uint32Array([ 29, 8192, 8192, 12288]),
//     new Uint32Array([ 29, 16384, 16384, 16384]),
//     new Uint32Array([ 29, 32768, 32768, 32768]),
//     new Uint32Array([ 29, 65536, 65536, 65536]),
//     new Uint32Array([ 29, 131072, 131072, 393216]),
//     new Uint32Array([ 29, 262144, 786432, 524288]),
//     new Uint32Array([ 29, 524288, 1048576, 1048576]),
//     new Uint32Array([ 29, 1048576, 2097152, 2097152]),
//     new Uint32Array([ 29, 6291456, 4194304, 12582912]),
//     new Uint32Array([ 29, 8388608, 8388608, 16777216]),
//     new Uint32Array([ 29, 16777216, 16777216, 33554432]),
//     new Uint32Array([ 29, 33554432, 100663296, 67108864]),
//     new Uint32Array([ 29, 67108864, 134217728, 402653184]),
//     new Uint32Array([ 29, 134217728, 268435456, 536870912]),
//     new Uint32Array([ 29, 268435456, 536870912, 1073741824]),
//     new Uint32Array([ 29, 536870912, 1073741824]),
//     new Uint32Array([ 29, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 30, 1]),
//     new Uint32Array([ 30, 2, 1]),
//     new Uint32Array([ 30, 4, 2]),
//     new Uint32Array([ 30, 8, 4]),
//     new Uint32Array([ 30, 16, 24]),
//     new Uint32Array([ 30, 32, 32]),
//     new Uint32Array([ 30, 64, 64]),
//     new Uint32Array([ 30, 128, 128]),
//     new Uint32Array([ 30, 768, 256]),
//     new Uint32Array([ 30, 1024, 512]),
//     new Uint32Array([ 30, 2048, 1024]),
//     new Uint32Array([ 30, 4096, 6144]),
//     new Uint32Array([ 30, 8192, 8192]),
//     new Uint32Array([ 30, 16384, 16384]),
//     new Uint32Array([ 30, 32768, 32768]),
//     new Uint32Array([ 30, 65536, 65536]),
//     new Uint32Array([ 30, 131072, 131072]),
//     new Uint32Array([ 30, 262144, 786432]),
//     new Uint32Array([ 30, 524288, 1048576]),
//     new Uint32Array([ 30, 1048576, 2097152]),
//     new Uint32Array([ 30, 6291456, 4194304]),
//     new Uint32Array([ 30, 8388608, 8388608]),
//     new Uint32Array([ 30, 16777216, 16777216]),
//     new Uint32Array([ 30, 33554432, 33554432]),
//     new Uint32Array([ 30, 67108864, 201326592]),
//     new Uint32Array([ 30, 134217728, 268435456]),
//     new Uint32Array([ 30, 268435456, 536870912]),
//     new Uint32Array([ 30, 536870912, 1073741824]),
//     new Uint32Array([ 30, 1073741824]),
//     null,
//     null,
//     new Uint32Array([ 31, 1]),
//     new Uint32Array([ 31, 2]),
//     new Uint32Array([ 31, 4]),
//     new Uint32Array([ 31, 8]),
//     new Uint32Array([ 31, 16]),
//     new Uint32Array([ 31, 32]),
//     new Uint32Array([ 31, 64]),
//     new Uint32Array([ 31, 384]),
//     new Uint32Array([ 31, 512]),
//     new Uint32Array([ 31, 1024]),
//     new Uint32Array([ 31, 2048]),
//     new Uint32Array([ 31, 4096]),
//     new Uint32Array([ 31, 8192]),
//     new Uint32Array([ 31, 16384]),
//     new Uint32Array([ 31, 32768]),
//     new Uint32Array([ 31, 65536]),
//     new Uint32Array([ 31, 131072]),
//     new Uint32Array([ 31, 262144]),
//     new Uint32Array([ 31, 524288]),
//     new Uint32Array([ 31, 1048576]),
//     new Uint32Array([ 31, 2097152]),
//     new Uint32Array([ 31, 12582912]),
//     new Uint32Array([ 31, 16777216]),
//     new Uint32Array([ 31, 33554432]),
//     new Uint32Array([ 31, 67108864]),
//     new Uint32Array([ 31, 134217728]),
//     new Uint32Array([ 31, 268435456]),
//     new Uint32Array([ 31, 536870912]),
//     new Uint32Array([ 31, 1073741824]),
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
//     null,
// ];

// let sindex = [];
// let skip = [];
// let count = [];
// let buf = [];
// let cur = 0;
// for (let i in VisibilityTile_mask) {
//     let v = VisibilityTile_mask[i];
//     if (v != null) {
//         sindex[i] = cur + 1;
//         skip[i] = v[0] - 1;
//         count[i] = v.length - 1;
//         for (let j = 1; j < v.length; j++) {
//             buf.push("0x" + v[j].toString(16));
//             cur++;
//         }
//     } else {
//         sindex[i] = 0;
//         skip[i] = 0;
//         count[i] = 0;
//     }
// }
// console.log(sindex.join());
// console.log(skip.join());
// console.log(count.join());
// console.log(buf.join());


const VisibilityTile_mask = {
    startIndex: new Uint16Array([
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,0,0,30,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,0,0,86,87,89,92,95,98,101,104,107,110,113,116,119,122,125,128,131,134,137,140,143,146,149,152,155,158,161,164,166,0,0,167,168,170,173,177,181,185,189,193,197,201,205,209,213,217,221,225,229,233,237,241,245,249,253,257,261,265,268,270,0,0,271,272,274,277,281,286,291,296,301,306,311,316,321,326,331,336,341,346,351,356,361,366,371,376,381,386,390,393,395,0,0,396,397,398,400,403,408,414,420,426,432,438,444,450,456,462,468,474,480,486,492,498,504,510,516,522,527,530,532,533,0,0,534,535,536,538,541,545,551,558,565,572,579,586,593,600,607,614,621,628,635,642,649,656,663,670,676,680,683,685,686,0,0,687,689,690,692,695,699,704,711,719,727,735,743,751,759,767,775,783,791,799,807,815,823,831,838,843,847,850,852,853,0,0,855,856,858,861,863,866,870,876,883,892,901,910,919,928,937,946,955,964,973,982,991,1000,1007,1013,1017,1020,1022,1025,1027,0,0,1028,1029,1031,1033,1036,1040,1044,1049,1055,1063,1073,1083,1093,1103,1113,1123,1133,1143,1153,1163,1173,1181,1187,1192,1196,1200,1203,1205,1207,0,0,1208,1209,1211,1213,1216,1219,1223,1228,1233,1240,1249,1260,1271,1282,1293,1304,1315,1326,1337,1348,1357,1364,1369,1374,1378,1381,1384,1386,1388,0,0,1389,1390,1392,1394,1396,1399,1402,1406,1411,1417,1424,1434,1446,1458,1470,1482,1494,1506,1518,1528,1535,1541,1546,1550,1553,1556,1558,1560,1562,0,0,1563,1564,1565,1567,1569,1571,1574,1577,1581,1586,1592,1600,1610,1623,1636,1649,1662,1675,1685,1693,1699,1704,1708,1711,1714,1716,1718,1720,1721,0,0,1722,1723,1724,1725,1727,1729,1731,1733,1736,1739,1743,1748,1755,1766,1780,1794,1808,1819,1826,1831,1835,1838,1841,1843,1845,1847,1849,1850,1851,0,0,1852,1853,1854,1855,1856,1857,1858,1859,1862,1865,1868,1871,1876,1883,0,1898,1913,1920,1925,1928,1931,1934,1937,1938,1939,1940,1941,1942,1943,0,0,1944,1945,1946,1947,1949,1951,1953,1955,1958,1961,1965,1970,1977,1988,2002,2016,2030,2041,2048,2053,2057,2060,2063,2065,2067,2069,2071,2072,2073,0,0,2074,2075,2076,2078,2080,2082,2085,2088,2092,2097,2103,2111,2121,2134,2147,2160,2173,2186,2196,2204,2210,2215,2219,2222,2225,2227,2229,2231,2232,0,0,2233,2234,2236,2238,2240,2243,2246,2250,2255,2261,2268,2278,2290,2302,2314,2326,2338,2350,2362,2372,2379,2385,2390,2394,2397,2400,2402,2404,2406,0,0,2407,2408,2410,2412,2415,2418,2422,2427,2432,2439,2448,2459,2470,2481,2492,2503,2514,2525,2536,2547,2556,2563,2568,2573,2577,2580,2583,2585,2587,0,0,2588,2589,2591,2593,2596,2600,2604,2609,2615,2623,2633,2643,2653,2663,2673,2683,2693,2703,2713,2723,2733,2741,2747,2752,2756,2760,2763,2765,2767,0,0,2768,2769,2771,2774,2776,2779,2783,2789,2796,2805,2814,2823,2832,2841,2850,2859,2868,2877,2886,2895,2904,2913,2920,2926,2930,2933,2935,2938,2940,0,0,2941,2943,2944,2946,2949,2953,2958,2965,2973,2981,2989,2997,3005,3013,3021,3029,3037,3045,3053,3061,3069,3077,3085,3092,3097,3101,3104,3106,3107,0,0,3109,3110,3111,3113,3116,3120,3126,3133,3140,3147,3154,3161,3168,3175,3182,3189,3196,3203,3210,3217,3224,3231,3238,3245,3251,3255,3258,3260,3261,0,0,3262,3263,3264,3266,3269,3274,3280,3286,3292,3298,3304,3310,3316,3322,3328,3334,3340,3346,3352,3358,3364,3370,3376,3382,3388,3393,3396,3398,3399,0,0,3400,3401,3403,3406,3410,3415,3420,3425,3430,3435,3440,3445,3450,3455,3460,3465,3470,3475,3480,3485,3490,3495,3500,3505,3510,3515,3519,3522,3524,0,0,3525,3526,3528,3531,3535,3539,3543,3547,3551,3555,3559,3563,3567,3571,3575,3579,3583,3587,3591,3595,3599,3603,3607,3611,3615,3619,3623,3626,3628,0,0,3629,3630,3632,3635,3638,3641,3644,3647,3650,3653,3656,3659,3662,3665,3668,3671,3674,3677,3680,3683,3686,3689,3692,3695,3698,3701,3704,3707,3709,0,0,3710,3711,3713,3715,3717,3719,3721,3723,3725,3727,3729,3731,3733,3735,3737,3739,3741,3743,3745,3747,3749,3751,3753,3755,3757,3759,3761,3763,3765,0,0,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    ]),
    skip: new Uint8Array([
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,5,5,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,5,5,0,0,6,6,5,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,5,6,6,0,0,7,7,6,5,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,5,6,7,7,0,0,9,8,7,7,6,5,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,5,6,7,7,8,9,0,0,10,9,9,8,7,6,5,4,2,0,0,0,0,0,0,0,0,0,0,0,2,4,5,6,7,8,9,9,10,0,0,11,10,10,9,9,8,7,6,4,2,0,0,0,0,0,0,0,0,0,2,4,6,7,8,9,9,10,10,11,0,0,12,11,11,11,10,10,9,8,7,5,2,0,0,0,0,0,0,0,2,5,7,8,9,10,10,11,11,11,12,0,0,13,13,12,12,12,11,11,10,9,8,6,3,0,0,0,0,0,3,6,8,9,10,11,11,12,12,12,13,13,0,0,14,14,14,13,13,13,13,12,12,11,10,8,4,0,0,0,4,8,10,11,12,12,13,13,13,13,14,14,14,0,0,15,15,15,15,15,15,15,14,14,14,14,13,12,8,0,8,12,13,14,14,14,14,15,15,15,15,15,15,15,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,17,17,17,17,17,17,17,17,17,17,17,0,0,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,18,18,18,18,18,18,18,18,18,0,0,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,19,19,19,19,19,19,19,0,0,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,20,20,20,20,20,0,0,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,21,21,21,0,0,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,22,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    ]),
    count: new Uint8Array([
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,0,0,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,2,1,0,0,1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,3,2,1,0,0,1,1,2,3,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,3,2,1,1,0,0,1,1,2,3,4,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,4,3,2,1,1,0,0,2,1,2,3,4,5,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,5,4,3,2,1,2,0,0,1,2,3,2,3,4,6,7,9,9,9,9,9,9,9,9,9,9,9,9,9,7,6,4,3,2,3,2,1,0,0,1,2,2,3,4,4,5,6,8,10,10,10,10,10,10,10,10,10,10,10,8,6,5,4,4,3,2,2,1,0,0,1,2,2,3,3,4,5,5,7,9,11,11,11,11,11,11,11,11,11,9,7,5,5,4,3,3,2,2,1,0,0,1,2,2,2,3,3,4,5,6,7,10,12,12,12,12,12,12,12,10,7,6,5,4,3,3,2,2,2,1,0,0,1,1,2,2,2,3,3,4,5,6,8,10,13,13,13,13,13,10,8,6,5,4,3,3,2,2,2,1,1,0,0,1,1,1,2,2,2,2,3,3,4,5,7,11,14,14,14,11,7,5,4,3,3,2,2,2,2,1,1,1,0,0,1,1,1,1,1,1,1,3,3,3,3,5,7,15,0,15,7,5,3,3,3,3,1,1,1,1,1,1,1,0,0,1,1,1,2,2,2,2,3,3,4,5,7,11,14,14,14,11,7,5,4,3,3,2,2,2,2,1,1,1,0,0,1,1,2,2,2,3,3,4,5,6,8,10,13,13,13,13,13,10,8,6,5,4,3,3,2,2,2,1,1,0,0,1,2,2,2,3,3,4,5,6,7,10,12,12,12,12,12,12,12,10,7,6,5,4,3,3,2,2,2,1,0,0,1,2,2,3,3,4,5,5,7,9,11,11,11,11,11,11,11,11,11,9,7,5,5,4,3,3,2,2,1,0,0,1,2,2,3,4,4,5,6,8,10,10,10,10,10,10,10,10,10,10,10,8,6,5,4,4,3,2,2,1,0,0,1,2,3,2,3,4,6,7,9,9,9,9,9,9,9,9,9,9,9,9,9,7,6,4,3,2,3,2,1,0,0,2,1,2,3,4,5,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,5,4,3,2,1,2,0,0,1,1,2,3,4,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,4,3,2,1,1,0,0,1,1,2,3,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,3,2,1,1,0,0,1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,3,2,1,0,0,1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,2,1,0,0,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,1,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    ]),
    data: new Uint32Array([
        0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x180,0x200,0x400,0x800,0x1000,0x2000,0x4000,0x8000,0x10000,0x20000,0x40000,0x80000,0x100000,0x200000,0xc00000,0x1000000,0x2000000,0x4000000,0x8000000,0x10000000,0x20000000,0x40000000,0x1,0x1,0x2,0x2,0x4,0x4,0x8,0x18,0x10,0x20,0x20,0x40,0x40,0x80,0x80,0x100,0x300,0x200,0x400,0x400,0x800,0x1800,0x1000,0x2000,0x2000,0x4000,0x4000,0x8000,0x8000,0x10000,0x10000,0x20000,0x20000,0xc0000,0x40000,0x100000,0x80000,0x200000,0x100000,0x400000,0x600000,0x800000,0x800000,0x1000000,0x1000000,0x2000000,0x2000000,0xc000000,0x4000000,0x10000000,0x8000000,0x20000000,0x10000000,0x40000000,0x20000000,0x40000000,0x1,0x1,0x2,0x1,0x2,0x4,0x2,0x4,0x8,0xc,0x8,0x10,0x10,0x30,0x20,0x20,0x40,0x40,0x40,0x80,0x80,0x180,0x100,0x300,0x200,0x200,0x400,0x400,0x400,0x800,0x800,0x1800,0x1000,0x3000,0x2000,0x2000,0x4000,0x4000,0x4000,0x8000,0x8000,0x8000,0x10000,0x10000,0x10000,0x60000,0x20000,0x20000,0x80000,0xc0000,0x40000,0x100000,0x100000,0x80000,0x200000,0x200000,0x100000,0xc00000,0x400000,0x600000,0x1000000,0x800000,0x800000,0x2000000,0x1000000,0x1000000,0x4000000,0x6000000,0x2000000,0x18000000,0x8000000,0x4000000,0x20000000,0x10000000,0x8000000,0x40000000,0x20000000,0x10000000,0x40000000,0x20000000,0x40000000,0x1,0x1,0x2,0x1,0x2,0x4,0x1,0x2,0x4,0x8,0x6,0x4,0x8,0x10,0x8,0x18,0x10,0x20,0x10,0x20,0x60,0x40,0x60,0x40,0x80,0x80,0x80,0x80,0x100,0x100,0x100,0x300,0x200,0x600,0x600,0x400,0x400,0x800,0x800,0x800,0x1800,0x1000,0x1000,0x3000,0x2000,0x2000,0x6000,0x4000,0x4000,0x4000,0x8000,0x8000,0x8000,0x8000,0x30000,0x10000,0x10000,0x10000,0x40000,0x60000,0x20000,0x20000,0x80000,0x80000,0xc0000,0x40000,0x300000,0x100000,0x100000,0x80000,0x400000,0x600000,0x200000,0x300000,0x800000,0x800000,0x400000,0x400000,0x3000000,0x1000000,0x800000,0x800000,0x4000000,0x2000000,0x3000000,0x1000000,0x8000000,0xc000000,0x4000000,0x2000000,0x30000000,0x10000000,0x8000000,0x4000000,0x40000000,0x20000000,0x10000000,0x8000000,0x40000000,0x20000000,0x10000000,0x40000000,0x20000000,0x40000000,0x1,0x1,0x3,0x1,0x3,0x4,0x1,0x3,0x4,0x8,0x1,0x2,0x4,0x8,0x10,0x6,0xc,0x8,0x10,0x20,0x8,0x10,0x30,0x20,0x40,0x30,0x20,0x40,0xc0,0x80,0x40,0xc0,0x80,0x100,0x100,0x180,0x100,0x300,0x200,0x600,0x200,0x600,0x400,0x400,0x800,0xc00,0x800,0x800,0x800,0x1000,0x1000,0x1000,0x3000,0x3000,0x2000,0x6000,0x6000,0x4000,0x4000,0x4000,0x8000,0x8000,0x8000,0x8000,0x8000,0x30000,0x30000,0x10000,0x10000,0x10000,0x40000,0x40000,0x60000,0x60000,0x20000,0x180000,0x80000,0x80000,0x80000,0x40000,0x200000,0x300000,0x100000,0x100000,0x80000,0xc00000,0x400000,0x600000,0x200000,0x300000,0x1000000,0x1800000,0x800000,0x400000,0x400000,0x6000000,0x2000000,0x1000000,0x1800000,0x800000,0x8000000,0x4000000,0x6000000,0x2000000,0x1000000,0x30000000,0x18000000,0x8000000,0x4000000,0x2000000,0x40000000,0x20000000,0x10000000,0x8000000,0x4000000,0x40000000,0x60000000,0x10000000,0x8000000,0x40000000,0x60000000,0x10000000,0x40000000,0x60000000,0x40000000,0x1,0x3,0x3,0x6,0x3,0x6,0x8,0x1,0x3,0x6,0x8,0x10,0x1,0x2,0x4,0x8,0x10,0x20,0x6,0xc,0x18,0x10,0x20,0x40,0x18,0x10,0x20,0x60,0xc0,0x80,0x20,0x60,0xc0,0x80,0x100,0x100,0xc0,0x80,0x100,0x100,0x200,0x200,0x300,0x300,0x200,0x600,0x400,0xc00,0x400,0xc00,0xc00,0x800,0x800,0x1000,0x1800,0x1000,0x1000,0x1000,0x3000,0x2000,0x6000,0x6000,0x6000,0x6000,0x4000,0x4000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x30000,0x30000,0x30000,0x30000,0x10000,0x10000,0xc0000,0x40000,0x40000,0x40000,0x60000,0x20000,0x100000,0x180000,0x180000,0x80000,0x80000,0x40000,0x600000,0x600000,0x200000,0x300000,0x100000,0x180000,0x1800000,0x800000,0x400000,0x400000,0x200000,0x200000,0x2000000,0x3000000,0x1800000,0x800000,0x400000,0x400000,0xc000000,0x4000000,0x2000000,0x3000000,0x1800000,0x800000,0x30000000,0x18000000,0xc000000,0x4000000,0x2000000,0x1000000,0x40000000,0x20000000,0x10000000,0x8000000,0x4000000,0x2000000,0x40000000,0x60000000,0x30000000,0x8000000,0x4000000,0x60000000,0x30000000,0x8000000,0x60000000,0x30000000,0x60000000,0x40000000,0x1,0x3,0x1,0x6,0x1,0x6,0xc,0x1,0x6,0xc,0x10,0x1,0x3,0x6,0xc,0x10,0x20,0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x6,0xc,0x18,0x30,0x60,0x40,0x80,0x18,0x30,0x60,0x40,0x80,0x180,0x100,0x60,0xc0,0x80,0x180,0x100,0x200,0x200,0x180,0x100,0x300,0x200,0x600,0x400,0xc00,0x600,0x600,0x400,0xc00,0x800,0x800,0x1000,0x1800,0x1800,0x1800,0x1000,0x1000,0x3000,0x2000,0x6000,0x6000,0x6000,0x6000,0x6000,0x4000,0x4000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x30000,0x30000,0x30000,0x30000,0x30000,0x10000,0x10000,0xc0000,0xc0000,0xc0000,0x40000,0x40000,0x60000,0x20000,0x300000,0x300000,0x100000,0x180000,0x80000,0x80000,0x40000,0xc00000,0x400000,0x600000,0x200000,0x300000,0x100000,0x180000,0x3000000,0x1800000,0x800000,0xc00000,0x400000,0x200000,0x200000,0xc000000,0x6000000,0x3000000,0x1000000,0x800000,0xc00000,0x400000,0x30000000,0x18000000,0xc000000,0x6000000,0x3000000,0x1000000,0x800000,0x40000000,0x20000000,0x10000000,0x8000000,0x4000000,0x2000000,0x1000000,0x40000000,0x60000000,0x30000000,0x18000000,0x4000000,0x2000000,0x40000000,0x30000000,0x18000000,0x4000000,0x40000000,0x30000000,0x18000000,0x40000000,0x30000000,0x60000000,0x40000000,0x1,0x1,0x3,0x1,0x6,0x1,0x3,0xc,0x1,0x3,0xc,0x18,0x1,0x3,0xc,0x18,0x30,0x1,0x3,0x6,0xc,0x18,0x30,0x40,0x3,0x3,0x4,0x8,0x10,0x20,0x40,0x80,0xc,0xc,0x18,0x30,0x60,0xc0,0x80,0x100,0x30,0x30,0x60,0xc0,0x80,0x100,0x300,0x200,0xc0,0xc0,0x180,0x100,0x300,0x200,0x400,0x400,0x300,0x300,0x600,0x600,0xc00,0xc00,0x800,0x1800,0xc00,0xc00,0x1800,0x1800,0x1000,0x1000,0x3000,0x2000,0x3000,0x3000,0x6000,0x6000,0x6000,0x6000,0x4000,0x4000,0x1c000,0x1c000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x60000,0x60000,0x30000,0x30000,0x30000,0x30000,0x10000,0x10000,0x180000,0x180000,0xc0000,0xc0000,0x40000,0x40000,0x60000,0x20000,0x600000,0x600000,0x300000,0x300000,0x180000,0x180000,0x80000,0xc0000,0x1800000,0x1800000,0xc00000,0x400000,0x600000,0x200000,0x100000,0x100000,0x6000000,0x6000000,0x3000000,0x1800000,0x800000,0x400000,0x600000,0x200000,0x18000000,0x18000000,0xc000000,0x6000000,0x3000000,0x1800000,0x800000,0x400000,0x60000000,0x60000000,0x10000000,0x8000000,0x4000000,0x2000000,0x1000000,0x800000,0x40000000,0x60000000,0x30000000,0x18000000,0xc000000,0x6000000,0x1000000,0x40000000,0x60000000,0x18000000,0xc000000,0x6000000,0x40000000,0x60000000,0x18000000,0xc000000,0x40000000,0x60000000,0x18000000,0x40000000,0x30000000,0x60000000,0x40000000,0x40000000,0x1,0x3,0x2,0x1,0x7,0x4,0x3,0xc,0x3,0x6,0x18,0x3,0x6,0xc,0x30,0x1,0x3,0x6,0xc,0x30,0x60,0x3,0x7,0xc,0x18,0x30,0x60,0x80,0x3,0x7,0xe,0xc,0x10,0x20,0x40,0x80,0x100,0xc,0x18,0x30,0x30,0x60,0xc0,0x180,0x100,0x200,0x70,0x60,0xc0,0xc0,0x180,0x300,0x200,0x600,0x400,0x180,0x380,0x300,0x300,0x600,0x400,0xc00,0x800,0x1800,0xe00,0xc00,0xc00,0xc00,0x1800,0x1800,0x1000,0x1000,0x2000,0x3000,0x3000,0x3000,0x3000,0x6000,0x6000,0x6000,0x6000,0x4000,0x1c000,0x1c000,0x1c000,0x1c000,0x8000,0x8000,0x8000,0x8000,0x8000,0x60000,0x60000,0x60000,0x60000,0x30000,0x30000,0x30000,0x30000,0x10000,0x380000,0x180000,0x180000,0x180000,0xc0000,0xc0000,0x40000,0x40000,0x20000,0xc00000,0xe00000,0x600000,0x600000,0x300000,0x100000,0x180000,0x80000,0xc0000,0x7000000,0x3000000,0x1800000,0x1800000,0xc00000,0x600000,0x200000,0x300000,0x100000,0x18000000,0xc000000,0x6000000,0x6000000,0x3000000,0x1800000,0xc00000,0x400000,0x200000,0x60000000,0x70000000,0x38000000,0x18000000,0x4000000,0x2000000,0x1000000,0x800000,0x400000,0x60000000,0x70000000,0x18000000,0xc000000,0x6000000,0x3000000,0x800000,0x40000000,0x60000000,0x30000000,0x18000000,0x6000000,0x3000000,0x60000000,0x30000000,0x18000000,0x6000000,0x60000000,0x30000000,0xc000000,0x60000000,0x18000000,0x40000000,0x70000000,0x10000000,0x60000000,0x20000000,0x40000000,0x1,0x1,0x2,0x3,0x4,0x3,0xe,0x8,0x1,0x7,0x1c,0x10,0x1,0x3,0xc,0x30,0x1,0x3,0xe,0x18,0x60,0x3,0x7,0xc,0x18,0x60,0xc0,0x1,0x3,0xe,0x1c,0x30,0x60,0xc0,0x100,0x3,0x7,0xe,0x1c,0x38,0x30,0x40,0x80,0x100,0x200,0x1c,0x38,0x30,0x60,0xc0,0xc0,0x180,0x300,0x600,0x400,0xe0,0xc0,0x1c0,0x180,0x300,0x300,0x600,0x400,0x800,0x800,0x700,0x700,0xe00,0xe00,0xc00,0xc00,0x1800,0x1800,0x1000,0x3000,0x3800,0x3800,0x3000,0x3000,0x3000,0x3000,0x6000,0x6000,0x6000,0x4000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x8000,0x8000,0x8000,0x8000,0xe0000,0xe0000,0x60000,0x60000,0x60000,0x60000,0x30000,0x30000,0x30000,0x10000,0x700000,0x700000,0x380000,0x380000,0x180000,0x180000,0xc0000,0xc0000,0x40000,0x60000,0x3800000,0x1800000,0x1c00000,0xc00000,0x600000,0x600000,0x300000,0x100000,0x80000,0x80000,0x1c000000,0xe000000,0x6000000,0x3000000,0x1800000,0x1800000,0xc00000,0x600000,0x300000,0x100000,0x60000000,0x70000000,0x38000000,0x1c000000,0xe000000,0x6000000,0x1000000,0x800000,0x400000,0x200000,0x40000000,0x60000000,0x38000000,0x1c000000,0x6000000,0x3000000,0x1800000,0x400000,0x60000000,0x70000000,0x18000000,0xc000000,0x3000000,0x1800000,0x40000000,0x60000000,0x38000000,0xc000000,0x3000000,0x40000000,0x60000000,0x18000000,0x6000000,0x40000000,0x70000000,0x1c000000,0x4000000,0x60000000,0x38000000,0x8000000,0x60000000,0x10000000,0x40000000,0x20000000,0x40000000,0x1,0x1,0x2,0x3,0x4,0x1,0x7,0x8,0x3,0xe,0x10,0x3,0xf,0x38,0x20,0x1,0x7,0x1c,0x70,0x40,0x3,0x7,0x1c,0x30,0xc0,0x1,0x3,0xf,0x1c,0x30,0xe0,0x180,0x1,0x3,0x7,0xe,0x38,0x70,0xc0,0x180,0x300,0x3,0x7,0xe,0x1c,0x38,0x70,0xe0,0xc0,0x100,0x200,0x400,0x3c,0x78,0x70,0xe0,0x1c0,0x180,0x300,0x300,0x600,0xc00,0x800,0x3c0,0x380,0x780,0x700,0x600,0xe00,0xc00,0xc00,0x1800,0x1000,0x3000,0x3c00,0x3c00,0x3800,0x3800,0x3800,0x3000,0x3000,0x3000,0x6000,0x6000,0x4000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x8000,0x8000,0x8000,0x1e0000,0x1e0000,0xe0000,0xe0000,0xe0000,0x60000,0x60000,0x60000,0x30000,0x30000,0x10000,0x1e00000,0xe00000,0xf00000,0x700000,0x300000,0x380000,0x180000,0x180000,0xc0000,0x40000,0x60000,0x1e000000,0xf000000,0x7000000,0x3800000,0x1c00000,0xc00000,0x600000,0x600000,0x300000,0x180000,0x80000,0x60000000,0x70000000,0x38000000,0x1c000000,0xe000000,0x7000000,0x3800000,0x1800000,0x400000,0x200000,0x100000,0x40000000,0x60000000,0x70000000,0x38000000,0xe000000,0x7000000,0x1800000,0xc00000,0x600000,0x40000000,0x60000000,0x78000000,0x1c000000,0x6000000,0x3800000,0xc00000,0x60000000,0x70000000,0x1c000000,0x6000000,0x1800000,0x40000000,0x70000000,0x1c000000,0x7000000,0x1000000,0x60000000,0x78000000,0xe000000,0x2000000,0x60000000,0x38000000,0x4000000,0x40000000,0x70000000,0x8000000,0x60000000,0x10000000,0x40000000,0x20000000,0x40000000,0x1,0x1,0x3,0x3,0x6,0x7,0xc,0x1,0xf,0x10,0x7,0x1e,0x20,0x3,0xf,0x38,0x40,0x3,0xf,0x3c,0xf0,0x80,0x3,0xf,0x1e,0x70,0x1c0,0x100,0x1,0x7,0xf,0x3c,0x70,0xc0,0x300,0x1,0x3,0x7,0xf,0x1e,0x38,0xf0,0x1c0,0x300,0x600,0x7,0xf,0x1f,0x1e,0x3c,0x70,0xe0,0x1c0,0x380,0x300,0x400,0x800,0xf8,0xf0,0x1e0,0x1e0,0x3c0,0x380,0x700,0x600,0xc00,0xc00,0x1800,0x1000,0x1f00,0x1f00,0x1e00,0x1e00,0x3c00,0x3c00,0x3800,0x3800,0x3000,0x3000,0x6000,0x6000,0x3e000,0x3e000,0x3e000,0x3e000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x8000,0x8000,0x7c0000,0x7c0000,0x3c0000,0x3c0000,0x1e0000,0x1e0000,0xe0000,0xe0000,0x60000,0x60000,0x30000,0x30000,0xf800000,0x7800000,0x3c00000,0x3c00000,0x1e00000,0xe00000,0x700000,0x300000,0x180000,0x180000,0xc0000,0x40000,0x70000000,0x78000000,0x7c000000,0x3c000000,0x1e000000,0x7000000,0x3800000,0x1c00000,0xe00000,0x600000,0x100000,0x80000,0x40000000,0x60000000,0x70000000,0x78000000,0x3c000000,0xe000000,0x7800000,0x1c00000,0x600000,0x300000,0x40000000,0x70000000,0x78000000,0x1e000000,0x7000000,0x1800000,0x600000,0x60000000,0x78000000,0x3c000000,0x7000000,0x1c00000,0x400000,0x60000000,0x78000000,0x1e000000,0x7800000,0x800000,0x60000000,0x78000000,0xe000000,0x1000000,0x70000000,0x3c000000,0x2000000,0x40000000,0x78000000,0x4000000,0x70000000,0x18000000,0x60000000,0x30000000,0x40000000,0x60000000,0x40000000,0x1,0x3,0x1,0x7,0x3,0xe,0xf,0x1c,0x1,0x1f,0x30,0x7,0x3f,0x60,0x3,0xf,0x7c,0xc0,0x1,0xf,0x3f,0xf0,0x100,0x3,0xf,0x3f,0xfc,0x3c0,0x200,0x1,0x7,0xf,0x3f,0xfc,0x1e0,0x700,0x400,0x1,0x3,0xf,0x1f,0x3f,0x7c,0xf0,0x3c0,0x700,0xc00,0xf,0x1f,0x3f,0x3f,0x7e,0xfc,0x1f0,0x1e0,0x3c0,0x700,0xe00,0xc00,0x1000,0xff0,0xfe0,0xfc0,0xfc0,0x1f80,0x1f00,0x1e00,0x1e00,0x3c00,0x3800,0x3000,0x3000,0x6000,0x7f000,0x7f000,0x7f000,0x7f000,0x3e000,0x3e000,0x3e000,0x3e000,0x1c000,0x1c000,0x1c000,0x1c000,0x8000,0x7f80000,0x3f80000,0x1f80000,0x1f80000,0xfc0000,0x7c0000,0x3c0000,0x3c0000,0x1e0000,0xe0000,0x60000,0x60000,0x30000,0x78000000,0x7c000000,0x7e000000,0x7e000000,0x3f000000,0x1f800000,0x7c00000,0x3c00000,0x1e00000,0x700000,0x380000,0x180000,0x40000,0x40000000,0x60000000,0x78000000,0x7c000000,0x7e000000,0x1f000000,0x7800000,0x1e00000,0x700000,0x180000,0x40000000,0x70000000,0x78000000,0x7e000000,0x1f800000,0x3c00000,0x700000,0x100000,0x60000000,0x78000000,0x7e000000,0x1f800000,0x1e00000,0x200000,0x40000000,0x78000000,0x7e000000,0x7800000,0x400000,0x60000000,0x78000000,0x1f000000,0x1800000,0x70000000,0x7e000000,0x3000000,0x40000000,0x7c000000,0x6000000,0x78000000,0x1c000000,0x60000000,0x38000000,0x40000000,0x70000000,0x60000000,0x40000000,0x1,0x3,0x7,0x1,0xf,0x3,0x1f,0xf,0x3f,0x1f,0x7f,0x3,0x3f,0xfc,0xf,0xff,0x1f0,0x3,0x3f,0x1ff,0x3c0,0x3,0x1f,0xff,0x3ff,0x700,0x3,0xf,0x3f,0xff,0x3ff,0xff0,0xc00,0x1,0x3,0xf,0x1f,0x3f,0xff,0x1ff,0x3ff,0xff0,0x1f00,0x1000,0xff,0xff,0x1ff,0x1ff,0x3ff,0x3ff,0x7ff,0x7ff,0xffc,0xff0,0x1fc0,0x1f00,0x3c00,0x3000,0x7fff00,0x7fff00,0x3ffe00,0x3ffe00,0x1ffc00,0x1ffc00,0xff800,0xff800,0x7f000,0x7f000,0x3e000,0x3e000,0x1c000,0x1c000,0x7f800000,0x7f800000,0x7fc00000,0x7fc00000,0x7fe00000,0x7fe00000,0x7ff00000,0x7ff00000,0x1ff80000,0x7f80000,0x1fc0000,0x7c0000,0x1e0000,0x60000,0x40000000,0x60000000,0x78000000,0x7c000000,0x7e000000,0x7f800000,0x7fc00000,0x7fe00000,0x7f80000,0x7c0000,0x40000,0x60000000,0x78000000,0x7e000000,0x7f800000,0x7fe00000,0x7f80000,0x180000,0x60000000,0x7c000000,0x7f800000,0x7fe00000,0x700000,0x60000000,0x7e000000,0x7fc00000,0x1e00000,0x78000000,0x7f800000,0x7c00000,0x60000000,0x7e000000,0x1f800000,0x7c000000,0x7f000000,0x78000000,0x7e000000,0x60000000,0x7c000000,0x40000000,0x78000000,0x70000000,0x60000000,0x40000000,0x1,0x3,0x7,0xf,0x1f,0x3f,0x7f,0x3,0xff,0x3,0xf,0x1ff,0xf,0x3f,0x3ff,0x3f,0xff,0x7ff,0xff,0xf,0x3ff,0xfff,0x3ff,0xf,0xf,0xff,0xfff,0x1fff,0xfff,0xff,0xf,0x3,0xf,0x3f,0xff,0x3ff,0xfff,0x3fff,0x3fff,0x3fff,0xfff,0x3ff,0xff,0x3f,0xf,0x3,0x60000000,0x78000000,0x7e000000,0x7f800000,0x7fe00000,0x7ff80000,0x7ffe0000,0x7ffe0000,0x7ffe0000,0x7ff80000,0x7fe00000,0x7f800000,0x7e000000,0x78000000,0x60000000,0x78000000,0x7f800000,0x7ff80000,0x7ffc0000,0x7ff80000,0x7f800000,0x78000000,0x78000000,0x7fe00000,0x7ff80000,0x7fe00000,0x78000000,0x7f800000,0x7ff00000,0x7f800000,0x7e000000,0x7fe00000,0x7e000000,0x78000000,0x7fc00000,0x78000000,0x60000000,0x7f800000,0x60000000,0x7f000000,0x7e000000,0x7c000000,0x78000000,0x70000000,0x60000000,0x40000000,0x1,0x3,0x7,0xf,0x1,0x1f,0x3,0x3f,0xf,0x7f,0x1f,0xfc,0x3f,0x3,0x1f0,0xff,0xf,0x3c0,0x1ff,0x3f,0x3,0x700,0x3ff,0xff,0x1f,0x3,0xc00,0xff0,0x3ff,0xff,0x3f,0xf,0x3,0x1000,0x1f00,0xff0,0x3ff,0x1ff,0xff,0x3f,0x1f,0xf,0x3,0x1,0x3000,0x3c00,0x1f00,0x1fc0,0xff0,0xffc,0x7ff,0x7ff,0x3ff,0x3ff,0x1ff,0x1ff,0xff,0xff,0x1c000,0x1c000,0x3e000,0x3e000,0x7f000,0x7f000,0xff800,0xff800,0x1ffc00,0x1ffc00,0x3ffe00,0x3ffe00,0x7fff00,0x7fff00,0x60000,0x1e0000,0x7c0000,0x1fc0000,0x7f80000,0x1ff80000,0x7ff00000,0x7ff00000,0x7fe00000,0x7fe00000,0x7fc00000,0x7fc00000,0x7f800000,0x7f800000,0x40000,0x7c0000,0x7f80000,0x7fe00000,0x7fc00000,0x7f800000,0x7e000000,0x7c000000,0x78000000,0x60000000,0x40000000,0x180000,0x7f80000,0x7fe00000,0x7f800000,0x7e000000,0x78000000,0x60000000,0x700000,0x7fe00000,0x7f800000,0x7c000000,0x60000000,0x1e00000,0x7fc00000,0x7e000000,0x60000000,0x7c00000,0x7f800000,0x78000000,0x1f800000,0x7e000000,0x60000000,0x7f000000,0x7c000000,0x7e000000,0x78000000,0x7c000000,0x60000000,0x78000000,0x40000000,0x70000000,0x60000000,0x40000000,0x1,0x3,0x7,0x1,0xe,0x3,0x1c,0xf,0x30,0x1f,0x1,0x60,0x3f,0x7,0xc0,0x7c,0xf,0x3,0x100,0xf0,0x3f,0xf,0x1,0x200,0x3c0,0xfc,0x3f,0xf,0x3,0x400,0x700,0x1e0,0xfc,0x3f,0xf,0x7,0x1,0xc00,0x700,0x3c0,0xf0,0x7c,0x3f,0x1f,0xf,0x3,0x1,0x1000,0xc00,0xe00,0x700,0x3c0,0x1e0,0x1f0,0xfc,0x7e,0x3f,0x3f,0x1f,0xf,0x6000,0x3000,0x3000,0x3800,0x3c00,0x1e00,0x1e00,0x1f00,0x1f80,0xfc0,0xfc0,0xfe0,0xff0,0x8000,0x1c000,0x1c000,0x1c000,0x1c000,0x3e000,0x3e000,0x3e000,0x3e000,0x7f000,0x7f000,0x7f000,0x7f000,0x30000,0x60000,0x60000,0xe0000,0x1e0000,0x3c0000,0x3c0000,0x7c0000,0xfc0000,0x1f80000,0x1f80000,0x3f80000,0x7f80000,0x40000,0x180000,0x380000,0x700000,0x1e00000,0x3c00000,0x7c00000,0x1f800000,0x3f000000,0x7e000000,0x7e000000,0x7c000000,0x78000000,0x180000,0x700000,0x1e00000,0x7800000,0x1f000000,0x7e000000,0x7c000000,0x78000000,0x60000000,0x40000000,0x100000,0x700000,0x3c00000,0x1f800000,0x7e000000,0x78000000,0x70000000,0x40000000,0x200000,0x1e00000,0x1f800000,0x7e000000,0x78000000,0x60000000,0x400000,0x7800000,0x7e000000,0x78000000,0x40000000,0x1800000,0x1f000000,0x78000000,0x60000000,0x3000000,0x7e000000,0x70000000,0x6000000,0x7c000000,0x40000000,0x1c000000,0x78000000,0x38000000,0x60000000,0x70000000,0x40000000,0x60000000,0x40000000,0x1,0x3,0x1,0x6,0x3,0xc,0x7,0x10,0xf,0x1,0x20,0x1e,0x7,0x40,0x38,0xf,0x3,0x80,0xf0,0x3c,0xf,0x3,0x100,0x1c0,0x70,0x1e,0xf,0x3,0x300,0xc0,0x70,0x3c,0xf,0x7,0x1,0x600,0x300,0x1c0,0xf0,0x38,0x1e,0xf,0x7,0x3,0x1,0x800,0x400,0x300,0x380,0x1c0,0xe0,0x70,0x3c,0x1e,0x1f,0xf,0x7,0x1000,0x1800,0xc00,0xc00,0x600,0x700,0x380,0x3c0,0x1e0,0x1e0,0xf0,0xf8,0x6000,0x6000,0x3000,0x3000,0x3800,0x3800,0x3c00,0x3c00,0x1e00,0x1e00,0x1f00,0x1f00,0x8000,0x8000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x3e000,0x3e000,0x3e000,0x3e000,0x30000,0x30000,0x60000,0x60000,0xe0000,0xe0000,0x1e0000,0x1e0000,0x3c0000,0x3c0000,0x7c0000,0x7c0000,0x40000,0xc0000,0x180000,0x180000,0x300000,0x700000,0xe00000,0x1e00000,0x3c00000,0x3c00000,0x7800000,0xf800000,0x80000,0x100000,0x600000,0xe00000,0x1c00000,0x3800000,0x7000000,0x1e000000,0x3c000000,0x7c000000,0x78000000,0x70000000,0x300000,0x600000,0x1c00000,0x7800000,0xe000000,0x3c000000,0x78000000,0x70000000,0x60000000,0x40000000,0x600000,0x1800000,0x7000000,0x1e000000,0x78000000,0x70000000,0x40000000,0x400000,0x1c00000,0x7000000,0x3c000000,0x78000000,0x60000000,0x800000,0x7800000,0x1e000000,0x78000000,0x60000000,0x1000000,0xe000000,0x78000000,0x60000000,0x2000000,0x3c000000,0x70000000,0x4000000,0x78000000,0x40000000,0x18000000,0x70000000,0x30000000,0x60000000,0x60000000,0x40000000,0x40000000,0x1,0x2,0x1,0x4,0x3,0x8,0x7,0x1,0x10,0xe,0x3,0x20,0x38,0xf,0x3,0x40,0x70,0x1c,0x7,0x1,0xc0,0x30,0x1c,0x7,0x3,0x180,0xe0,0x30,0x1c,0xf,0x3,0x1,0x300,0x180,0xc0,0x70,0x38,0xe,0x7,0x3,0x1,0x400,0x200,0x100,0xc0,0xe0,0x70,0x38,0x1c,0xe,0x7,0x3,0x800,0xc00,0x600,0x300,0x300,0x180,0x1c0,0xe0,0x70,0x78,0x3c,0x3000,0x1000,0x1800,0xc00,0xc00,0xe00,0x600,0x700,0x780,0x380,0x3c0,0x4000,0x6000,0x6000,0x3000,0x3000,0x3000,0x3800,0x3800,0x3800,0x3c00,0x3c00,0x8000,0x8000,0x8000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x10000,0x30000,0x30000,0x60000,0x60000,0x60000,0xe0000,0xe0000,0xe0000,0x1e0000,0x1e0000,0x60000,0x40000,0xc0000,0x180000,0x180000,0x380000,0x300000,0x700000,0xf00000,0xe00000,0x1e00000,0x80000,0x180000,0x300000,0x600000,0x600000,0xc00000,0x1c00000,0x3800000,0x7000000,0xf000000,0x1e000000,0x100000,0x200000,0x400000,0x1800000,0x3800000,0x7000000,0xe000000,0x1c000000,0x38000000,0x70000000,0x60000000,0x600000,0xc00000,0x1800000,0x7000000,0xe000000,0x38000000,0x70000000,0x60000000,0x40000000,0xc00000,0x3800000,0x6000000,0x1c000000,0x78000000,0x60000000,0x40000000,0x1800000,0x6000000,0x1c000000,0x70000000,0x60000000,0x1000000,0x7000000,0x1c000000,0x70000000,0x40000000,0x2000000,0xe000000,0x78000000,0x60000000,0x4000000,0x38000000,0x60000000,0x8000000,0x70000000,0x40000000,0x10000000,0x60000000,0x20000000,0x40000000,0x40000000,0x1,0x2,0x1,0x4,0x3,0x8,0xe,0x3,0x10,0x1c,0x7,0x1,0x30,0xc,0x3,0x1,0x60,0x18,0xe,0x3,0x1,0xc0,0x60,0x18,0xc,0x7,0x3,0x100,0xc0,0x60,0x30,0x1c,0xe,0x3,0x1,0x200,0x100,0x80,0x40,0x30,0x38,0x1c,0xe,0x7,0x3,0x400,0x600,0x300,0x180,0xc0,0xc0,0x60,0x30,0x38,0x1c,0x800,0x800,0x400,0x600,0x300,0x300,0x180,0x1c0,0xc0,0xe0,0x3000,0x1000,0x1800,0x1800,0xc00,0xc00,0xe00,0xe00,0x700,0x700,0x4000,0x6000,0x6000,0x6000,0x3000,0x3000,0x3000,0x3000,0x3800,0x3800,0x8000,0x8000,0x8000,0x8000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x1c000,0x10000,0x30000,0x30000,0x30000,0x60000,0x60000,0x60000,0x60000,0xe0000,0xe0000,0x60000,0x40000,0xc0000,0xc0000,0x180000,0x180000,0x380000,0x380000,0x700000,0x700000,0x80000,0x80000,0x100000,0x300000,0x600000,0x600000,0xc00000,0x1c00000,0x1800000,0x3800000,0x100000,0x300000,0x600000,0xc00000,0x1800000,0x1800000,0x3000000,0x6000000,0xe000000,0x1c000000,0x200000,0x400000,0x800000,0x1000000,0x6000000,0xe000000,0x1c000000,0x38000000,0x70000000,0x60000000,0x400000,0x1800000,0x3000000,0x6000000,0x1c000000,0x38000000,0x60000000,0x40000000,0x1800000,0x3000000,0xc000000,0x18000000,0x70000000,0x60000000,0x3000000,0xc000000,0x38000000,0x60000000,0x40000000,0x6000000,0x18000000,0x60000000,0x40000000,0x4000000,0x1c000000,0x70000000,0x40000000,0x8000000,0x38000000,0x60000000,0x10000000,0x60000000,0x20000000,0x40000000,0x40000000,0x1,0x2,0x3,0x4,0x7,0x1,0xc,0x3,0x18,0x6,0x3,0x30,0xc,0x6,0x3,0x60,0x30,0xc,0x6,0x3,0x1,0x80,0x60,0x30,0x18,0xc,0x7,0x3,0x100,0x80,0x40,0x20,0x10,0xc,0xe,0x7,0x3,0x200,0x100,0x180,0xc0,0x60,0x30,0x30,0x18,0xc,0x400,0x600,0x200,0x300,0x180,0xc0,0xc0,0x60,0x70,0x1800,0x800,0xc00,0x400,0x600,0x300,0x300,0x380,0x180,0x2000,0x1000,0x1000,0x1800,0x1800,0xc00,0xc00,0xc00,0xe00,0x4000,0x6000,0x6000,0x6000,0x6000,0x3000,0x3000,0x3000,0x3000,0x8000,0x8000,0x8000,0x8000,0x8000,0x1c000,0x1c000,0x1c000,0x1c000,0x10000,0x30000,0x30000,0x30000,0x30000,0x60000,0x60000,0x60000,0x60000,0x20000,0x40000,0x40000,0xc0000,0xc0000,0x180000,0x180000,0x180000,0x380000,0xc0000,0x80000,0x180000,0x100000,0x300000,0x600000,0x600000,0xe00000,0xc00000,0x100000,0x300000,0x200000,0x600000,0xc00000,0x1800000,0x1800000,0x3000000,0x7000000,0x200000,0x400000,0xc00000,0x1800000,0x3000000,0x6000000,0x6000000,0xc000000,0x18000000,0x400000,0x800000,0x1000000,0x2000000,0x4000000,0x18000000,0x38000000,0x70000000,0x60000000,0x800000,0x3000000,0x6000000,0xc000000,0x18000000,0x70000000,0x60000000,0x3000000,0x6000000,0x18000000,0x30000000,0x60000000,0x40000000,0x6000000,0x18000000,0x30000000,0x60000000,0xc000000,0x30000000,0x60000000,0x18000000,0x60000000,0x10000000,0x70000000,0x40000000,0x20000000,0x60000000,0x40000000,0x1,0x1,0x3,0x6,0x1,0xc,0x3,0x1,0x18,0xc,0x3,0x1,0x30,0x18,0xc,0x3,0x1,0x40,0x30,0x18,0xc,0x6,0x3,0x1,0x80,0x40,0x20,0x10,0x8,0x4,0x3,0x3,0x100,0x80,0xc0,0x60,0x30,0x18,0xc,0xc,0x200,0x300,0x100,0x80,0xc0,0x60,0x30,0x30,0x400,0x400,0x200,0x300,0x100,0x180,0xc0,0xc0,0x1800,0x800,0xc00,0xc00,0x600,0x600,0x300,0x300,0x2000,0x3000,0x1000,0x1000,0x1800,0x1800,0xc00,0xc00,0x4000,0x4000,0x6000,0x6000,0x6000,0x6000,0x3000,0x3000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x1c000,0x1c000,0x10000,0x10000,0x30000,0x30000,0x30000,0x30000,0x60000,0x60000,0x20000,0x60000,0x40000,0x40000,0xc0000,0xc0000,0x180000,0x180000,0xc0000,0x80000,0x180000,0x180000,0x300000,0x300000,0x600000,0x600000,0x100000,0x100000,0x200000,0x600000,0x400000,0xc00000,0x1800000,0x1800000,0x200000,0x600000,0x400000,0x800000,0x1800000,0x3000000,0x6000000,0x6000000,0x400000,0x800000,0x1800000,0x3000000,0x6000000,0xc000000,0x18000000,0x18000000,0x800000,0x1000000,0x2000000,0x4000000,0x8000000,0x10000000,0x60000000,0x60000000,0x1000000,0x6000000,0xc000000,0x18000000,0x30000000,0x60000000,0x40000000,0x6000000,0xc000000,0x18000000,0x60000000,0x40000000,0xc000000,0x18000000,0x60000000,0x40000000,0x18000000,0x60000000,0x40000000,0x30000000,0x40000000,0x60000000,0x40000000,0x40000000,0x1,0x3,0x6,0x1,0xc,0x6,0x1,0x10,0xc,0x6,0x1,0x20,0x10,0xc,0x6,0x3,0x1,0x40,0x20,0x10,0x8,0x4,0x2,0x1,0x80,0x40,0x60,0x30,0x18,0xc,0x6,0x100,0x180,0x80,0x40,0x60,0x30,0x18,0x200,0x200,0x100,0x180,0x80,0xc0,0x60,0xc00,0x400,0x600,0x200,0x300,0x100,0x180,0x1000,0x800,0x800,0xc00,0x400,0x600,0x600,0x2000,0x3000,0x1000,0x1000,0x1800,0x1800,0x1800,0x4000,0x4000,0x6000,0x6000,0x6000,0x6000,0x6000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x10000,0x10000,0x30000,0x30000,0x30000,0x30000,0x30000,0x20000,0x60000,0x40000,0x40000,0xc0000,0xc0000,0xc0000,0x40000,0x80000,0x80000,0x180000,0x100000,0x300000,0x300000,0x180000,0x100000,0x300000,0x200000,0x600000,0x400000,0xc00000,0x200000,0x200000,0x400000,0xc00000,0x800000,0x1800000,0x3000000,0x400000,0xc00000,0x800000,0x1000000,0x3000000,0x6000000,0xc000000,0x800000,0x1000000,0x3000000,0x6000000,0xc000000,0x18000000,0x30000000,0x1000000,0x2000000,0x4000000,0x8000000,0x10000000,0x20000000,0x40000000,0x2000000,0x4000000,0x18000000,0x30000000,0x60000000,0x40000000,0x4000000,0x18000000,0x30000000,0x40000000,0x18000000,0x30000000,0x40000000,0x30000000,0x40000000,0x60000000,0x40000000,0x1,0x3,0x6,0x3,0x8,0x6,0x3,0x10,0x8,0x6,0x3,0x1,0x20,0x10,0x8,0x4,0x2,0x1,0x40,0x20,0x10,0x18,0xc,0x6,0x80,0xc0,0x60,0x20,0x10,0x18,0x100,0x100,0x80,0xc0,0x60,0x20,0x200,0x200,0x100,0x100,0x80,0xc0,0xc00,0x400,0x600,0x200,0x300,0x300,0x1000,0x800,0x800,0xc00,0xc00,0x400,0x2000,0x3000,0x1000,0x1000,0x1000,0x1800,0x4000,0x4000,0x6000,0x6000,0x6000,0x6000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x10000,0x10000,0x30000,0x30000,0x30000,0x30000,0x20000,0x60000,0x40000,0x40000,0x40000,0xc0000,0x40000,0x80000,0x80000,0x180000,0x180000,0x100000,0x180000,0x100000,0x300000,0x200000,0x600000,0x600000,0x200000,0x200000,0x400000,0x400000,0x800000,0x1800000,0x400000,0x400000,0x800000,0x1800000,0x3000000,0x2000000,0x800000,0x1800000,0x3000000,0x2000000,0x4000000,0xc000000,0x1000000,0x2000000,0x4000000,0xc000000,0x18000000,0x30000000,0x2000000,0x4000000,0x8000000,0x10000000,0x20000000,0x40000000,0x4000000,0x8000000,0x30000000,0x60000000,0x40000000,0x8000000,0x30000000,0x60000000,0x30000000,0x60000000,0x60000000,0x40000000,0x1,0x3,0x1,0x4,0x3,0x1,0x8,0x4,0x3,0x1,0x10,0x8,0x4,0x2,0x1,0x20,0x10,0x8,0xc,0x6,0x40,0x20,0x30,0x10,0x8,0x80,0xc0,0x40,0x20,0x30,0x100,0x100,0x80,0xc0,0x40,0x600,0x200,0x300,0x100,0x180,0x800,0x400,0x400,0x600,0x200,0x1000,0x800,0x800,0x800,0xc00,0x2000,0x3000,0x3000,0x1000,0x1000,0x4000,0x4000,0x4000,0x6000,0x6000,0x8000,0x8000,0x8000,0x8000,0x8000,0x10000,0x10000,0x10000,0x30000,0x30000,0x20000,0x60000,0x60000,0x40000,0x40000,0x40000,0x80000,0x80000,0x80000,0x180000,0x80000,0x100000,0x100000,0x300000,0x200000,0x300000,0x200000,0x600000,0x400000,0xc00000,0x400000,0x400000,0x800000,0x1800000,0x1000000,0x800000,0x1800000,0x1000000,0x2000000,0x6000000,0x1000000,0x2000000,0x6000000,0x4000000,0x8000000,0x2000000,0x4000000,0x8000000,0x18000000,0x30000000,0x4000000,0x8000000,0x10000000,0x20000000,0x40000000,0x8000000,0x10000000,0x60000000,0x40000000,0x10000000,0x60000000,0x40000000,0x60000000,0x40000000,0x40000000,0x1,0x2,0x1,0x4,0x2,0x1,0x8,0x4,0x2,0x1,0x10,0x8,0x4,0x6,0x20,0x10,0x18,0x8,0x40,0x60,0x20,0x10,0x80,0x80,0x40,0x60,0x100,0x100,0x80,0x80,0x600,0x200,0x300,0x100,0x800,0x400,0x400,0x600,0x1000,0x1800,0x800,0x800,0x2000,0x2000,0x3000,0x1000,0x4000,0x4000,0x4000,0x6000,0x8000,0x8000,0x8000,0x8000,0x10000,0x10000,0x10000,0x30000,0x20000,0x20000,0x60000,0x40000,0x40000,0xc0000,0x80000,0x80000,0x80000,0x100000,0x100000,0x300000,0x300000,0x200000,0x600000,0x400000,0x400000,0x400000,0x800000,0x800000,0x800000,0x800000,0x1000000,0x3000000,0x1000000,0x3000000,0x2000000,0x4000000,0x2000000,0x4000000,0xc000000,0x8000000,0x4000000,0x8000000,0x10000000,0x30000000,0x8000000,0x10000000,0x20000000,0x40000000,0x10000000,0x20000000,0x40000000,0x20000000,0x40000000,0x40000000,0x1,0x2,0x1,0x4,0x2,0x1,0x8,0x4,0x2,0x10,0x8,0xc,0x20,0x30,0x10,0x40,0x40,0x20,0x80,0x80,0x40,0x300,0x100,0x180,0x400,0x200,0x200,0x800,0x400,0x400,0x1000,0x1800,0x800,0x2000,0x2000,0x3000,0x4000,0x4000,0x4000,0x8000,0x8000,0x8000,0x10000,0x10000,0x10000,0x20000,0x20000,0x60000,0x40000,0xc0000,0x80000,0x80000,0x100000,0x100000,0x100000,0x200000,0x200000,0x600000,0x400000,0xc00000,0x800000,0x800000,0x1000000,0x1000000,0x1000000,0x2000000,0x2000000,0x6000000,0x4000000,0x4000000,0x8000000,0x18000000,0x8000000,0x10000000,0x20000000,0x10000000,0x20000000,0x40000000,0x20000000,0x40000000,0x40000000,0x1,0x2,0x1,0x4,0x2,0x8,0x4,0x10,0x18,0x20,0x20,0x40,0x40,0x80,0x80,0x300,0x100,0x400,0x200,0x800,0x400,0x1000,0x1800,0x2000,0x2000,0x4000,0x4000,0x8000,0x8000,0x10000,0x10000,0x20000,0x20000,0x40000,0xc0000,0x80000,0x100000,0x100000,0x200000,0x600000,0x400000,0x800000,0x800000,0x1000000,0x1000000,0x2000000,0x2000000,0x4000000,0xc000000,0x8000000,0x10000000,0x10000000,0x20000000,0x20000000,0x40000000,0x40000000,0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x180,0x200,0x400,0x800,0x1000,0x2000,0x4000,0x8000,0x10000,0x20000,0x40000,0x80000,0x100000,0x200000,0xc00000,0x1000000,0x2000000,0x4000000,0x8000000,0x10000000,0x20000000,0x40000000
    ]),
};

module.exports = VisibilityTile_mask;



/***/ }),

/***/ "./games/Avalonika/src/config.js":
/*!***************************************!*\
  !*** ./games/Avalonika/src/config.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/*

    ▄████████  ▄█    █▄     ▄████████  ▄█        ▄██████▄  ███▄▄▄▄    ▄█     ▄█   ▄█▄    ▄████████
    ███    ███ ███    ███   ███    ███ ███       ███    ███ ███▀▀▀██▄ ███    ███ ▄███▀   ███    ███
    ███    ███ ███    ███   ███    ███ ███       ███    ███ ███   ███ ███▌   ███▐██▀     ███    ███
    ███    ███ ███    ███   ███    ███ ███       ███    ███ ███   ███ ███▌  ▄█████▀      ███    ███
  ▀███████████ ███    ███ ▀███████████ ███       ███    ███ ███   ███ ███▌ ▀▀█████▄    ▀███████████
    ███    ███ ███    ███   ███    ███ ███       ███    ███ ███   ███ ███    ███▐██▄     ███    ███
    ███    ███ ███    ███   ███    ███ ███▌    ▄ ███    ███ ███   ███ ███    ███ ▀███▄   ███    ███
    ███    █▀   ▀██████▀    ███    █▀  █████▄▄██  ▀██████▀   ▀█   █▀  █▀     ███   ▀█▀   ███    █▀
    ▀                                     ▀

    ███ ▀▄    ▄     ██▄     ▄      ▄     ▄▀  ▄███▄   ████▄    ▄   █  █▀ ▄█ █▀▄▀█
    █  █  █  █      █  █     █      █  ▄▀    █▀   ▀  █   █     █  █▄█   ██ █ █ █
    █ ▀ ▄  ▀█       █   █ █   █ ██   █ █ ▀▄  ██▄▄    █   █ ██   █ █▀▄   ██ █ ▄ █
    █  ▄▀  █        █  █  █   █ █ █  █ █   █ █▄   ▄▀ ▀████ █ █  █ █  █  ▐█ █   █
    ███  ▄▀         ███▀  █▄ ▄█ █  █ █  ███  ▀███▀         █  █ █   █    ▐    █
    ▀▀▀  █   ██             █   ██  ▀         ▀                ▀

*/




class AppData {
    constructor() {
        this._RANDOM = 0;

        this.World = {
            tileWidth:                  16,
            tileHeight:                 24,
            tilePerRow:                 16,
            shadowScale:                2,      // 시야 그림자의 해상도:타일의 해상도 비율
            shadowWidth:                1024,
            shadowHeight:               1024,
            textureToScreenMagicNumber: 0.9594726,	// 이게 왜 필요한지 나도 모른다. 픽셀퍼펙트하기 위해서 보정하다 알아낸 값
            zoomMin:                    1.0,
            zoomMax:                    1.8,
            turnPerDay:                 200,

            tileTextureName:       "tile1624.png",
            lightTextureName:      "Light.png",
            shadowMaskTextureName: "shadowMask1624.png",
            
            timeTable: [
                { time: 0, radius: 3, c1: [0.1, 0.3, 1, 0.1], c2: [0.25, 0.4, 1, 0.7] },
                { time: 3, radius: 3, c1: [0.1, 0.3, 1, 0.12], c2: [0.5, 0.75, 1, 1] },
                { time: 5, radius: 6, c1: [0.5, 0.5, 1.0, 0.15], c2: [0.5, 1, 1, 1] },
                { time: 10, radius: 14, c1: [0.4, 0.7, 0.9, 0.16], c2: [1, 1, 1, 1] },
                { time: 11, radius: 15, c1: [1, 1, 0.8, 0.21], c2: [1, 1, 1, 1] },
                { time: 18, radius: 15, c1: [1, 0.6, 0.5, 0.21], c2: [1, 0.7, 0.7, 1] },
                { time: 19, radius: 14, c1: [1, 0, 0.2, 0.16], c2: [1, 1, 0.5, 1] },
                { time: 21, radius: 6, c1: [1, 0, 1, 0.2], c2: [1.0, 0.6, 0.2, 1] },
                { time: 24, radius: 3, c1: [0.1, 0.3, 1, 0.1], c2: [0.25, 0.4, 1, 0.7] },
            ],
        };


        this.Entity = {
            width:     16,
            height:    24,
            walkSpeed: 220,
        };

        this.Interface = {
            margin: 8
        };
    }

    get PARTICLE_SCALE() {
        return _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.deviceViewport.width / _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.deviceViewport.height;
    }
}

const CONFIG = new AppData();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CONFIG);


/***/ }),

/***/ "./games/Avalonika/src/effect.js":
/*!***************************************!*\
  !*** ./games/Avalonika/src/effect.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Effect)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ "./games/Avalonika/src/global.js");







class Effect extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( type, ...args ) {
        super();
        this.returnValue = Effect.funcTable[type]( this, ...args );
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( this.returnValue[0], this.removeFromParent, this );
    }

    getDuration() {
        return this.returnValue;
    }
}

Effect.funcTable = {};
let _FT = Effect.funcTable;

_FT["arrow"] = ( self,x1,y1,x2,y2,isHit ) => {
    let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Arrow.png",true,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );
    let angle = Math.atan2( y2 - y1,x2 - x1 ) / Math.PI * 180;
    let dist = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( x1,y1,x2,y2 );

    b.setAnchorPoint( 0.5,0.5 );
    b.setRotation( angle );
    b.setColorMultiplier( 1,1,1 );
    b.setPosition( x1,y1 );
    self.addChild( b );
    _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityLayer.addChild( self );
    x2 = x2 - ( x2 - x1 ) / dist * 6;
    y2 = y2 - ( y2 - y1 ) / dist * 6;
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/bow_shoot.wav" );
    let dur = dist * 2;

    new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( b,dur,{ x: x2,y: y2 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } )
        .onComplete( () => {
            if ( !isHit ) {
                console.log( "화살튕김" );
                new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( b, 200, {
                    x:        x2 + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -15, 15 ),
                    y:        y2 + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -15, 15 ),
                    rotation: angle + 360
                }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } )
                    .onCompleteRemoveFromParent();
            } else {
                b.removeFromParent();
            }
        } );
    if ( !isHit ) {
        dur = dur + 200;
    }

    return [dur];
};

_FT["swing"] = ( self,x1,y1,x2,y2,isHit,weaponImage,attacker ) => {
    let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "swordSwing.png",true,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );
    let angle = ( Math.atan2( y2 - y1,x2 - x1 ) ) / Math.PI * 180;
    let dist = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( x1,y1,x2,y2 );

    b.setAnchorPoint( -0.4,0.5 );
    self.addChild( b );
    b.setRotation( angle + 70 );
    b.setColorMultiplier( 1,1,1 );
    b.setPosition( x1,y1 );
    b.setAlpha( 0.5 );
    self.addChild( b );
    _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityLayer.addChild( self );
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/swing_0.wav" );
    let dur = 300;
    let hitDur;

    if ( attacker.__effectTween ) {
        attacker.__effectTween.stop();
        attacker.resetPositionAndColor();
    }

    let attX = x1 + ( x2 - x1 ) / dist * 5;
    let attY = y1 + ( y2 - y1 ) / dist * 5;
    let attX0 = attacker.getX();
    let attY0 = attacker.getY();

    hitDur = 100;
    let tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( attacker,100,{ x: attX,y: attY },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inBack } )
        .onComplete( () => {
            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( attacker, dur - 100, { x: attX0, y: attY0 }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inCubic } );
        } );

    attacker.__effectTween = tw;
    let weaponSpr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();

    weaponImage.setRotation( 135 );
    weaponImage.setPosition( 12,0 );
    weaponSpr.addChild( weaponImage );
    self.addChild( weaponSpr );
    weaponSpr.setRotation( angle + 160 );
    weaponSpr.setPosition( x1,y1 );
    new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( b,dur,{ blueMultiplier: 1,rotation: angle - 90,alpha: 0 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } )
        .onCompleteRemoveFromParent();
    new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( weaponSpr,dur - 100,{ rotation: angle - 130 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } )
        .onComplete( () => {
            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( weaponSpr, 100, { rotation: angle - 150, scaleX: 0.5, scaleY: 0.5 } )
                .onCompleteRemoveFromParent();
        } );

    return [dur,hitDur];
};

_FT["pickaxe"] = ( self,x1,y1,x2,y2,isHit,weaponImage,attacker ) => {
    let angle = ( Math.atan2( y2 - y1, x2 - x1 ) ) / Math.PI * 180;
    let dist = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( x1,y1,x2,y2 );
    let dirX = x2 - x1 > 0 ? 1 : -1;

    _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityLayer.addChild( self );
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/swing_0.wav" );
    let dur = 400;
    let hitDur;

    if ( attacker.__effectTween ) {
        attacker.__effectTween.stop();
        attacker.resetPositionAndColor();
    }

    let attX = x1 + ( x2 - x1 ) / dist * 5;
    let attY = y1 + ( y2 - y1 ) / dist * 5;
    let attX0 = attacker.getX();
    let attY0 = attacker.getY();

    hitDur = dur - 100;
    let tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( attacker,100,{ x: attX,y: attY },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inBack } )
        .onComplete( () => {
            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( attacker, dur - 100, { x: attX0, y: attY0 }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inCubic } );
        } );

    attacker.__effectTween = tw;
    let weaponSpr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();

    weaponImage.setRotation( 135 );
    weaponImage.setPosition( 12,0 );
    weaponSpr.addChild( weaponImage );
    self.addChild( weaponSpr );
    weaponSpr.setRotation( angle - 200 * dirX );
    weaponSpr.setPosition( x1,y1 );
    new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( weaponSpr,dur - 100,{ rotation: angle + 5 * dirX,x: x1 + 2 * dirX,y: y1 + 5 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inCubic } )
        .onComplete( () => {
            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( weaponSpr,100,{ rotation: angle + 5 * dirX,y: y1 } )
                .onCompleteRemoveFromParent();
        } );

    return [dur,hitDur];
};


_FT["stab"] = ( self,x1,y1,x2,y2,isHit,weaponImage,attacker ) => {
    let angle = ( Math.atan2( y2 - y1, x2 - x1 ) ) / Math.PI * 180;
    let dist = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( x1,y1,x2,y2 );

    _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityLayer.addChild( self );
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/swing_0.wav" );
    let dur = 300;
    let hitDur;
    let weaponSpr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();

    weaponImage.setRotation( 135 );
    weaponImage.setPosition( 12,0 );
    weaponSpr.addChild( weaponImage );
    self.addChild( weaponSpr );
    weaponSpr.setRotation( angle );
    weaponSpr.setPosition( x1,y1 );
    let x = x1 + ( x2 - x1 ) / dist * 3;
    let y = y1 + ( y2 - y1 ) / dist * 3;

    if ( attacker.__effectTween ) {
        attacker.__effectTween.stop();
        attacker.resetPositionAndColor();
    }

    let attX = x1 + ( x2 - x1 ) / dist * 5;
    let attY = y1 + ( y2 - y1 ) / dist * 5;
    let attX0 = attacker.getX();
    let attY0 = attacker.getY();

    hitDur = 100;
    let tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( attacker,100,{ x: attX,y: attY },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inBack } )
        .onComplete( () => {
            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( attacker,dur - 100,{ x: attX0,y: attY0 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inCubic } );
        } );

    attacker.__effectTween = tw;
    new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( weaponSpr,dur - 100,{ x: x + ( y2 == y1 ? 0 : 3 ),y: y },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outBounce } )
        .onComplete( () => {
            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( weaponSpr,100,{ x: x1 + ( y2 == y1 ? 0 : 3 ),y: y1,rotation: angle,scaleX: 0.5,scaleY: 0.5 } )
                .onCompleteRemoveFromParent();
        } );

    return [dur,hitDur];
};

_FT["hand"] = ( self,x1,y1,x2,y2,isHit,weaponImage,attacker ) => {
    let angle = ( Math.atan2( y2 - y1, x2 - x1 ) ) / Math.PI * 180;
    let dist = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( x1,y1,x2,y2 );

    _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityLayer.addChild( self );
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/swing_0.wav" );
    let dur = 300;
    let hitDur;
    let weaponSpr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();

    weaponImage.setRotation( 90 );
    weaponImage.setPosition( 12,0 );
    weaponImage.setScale( 0.5 );
    weaponSpr.addChild( weaponImage );
    self.addChild( weaponSpr );
    weaponSpr.setRotation( angle );
    weaponSpr.setPosition( x1,y1 );
    let x = x1 + ( x2 - x1 ) / dist * 2 + ( y2 == y1 ? 0 : 3 );
    let y = y1 + ( y2 - y1 ) / dist * 2;

    if ( attacker.__effectTween ) {
        attacker.__effectTween.stop();
        attacker.resetPositionAndColor();
    }

    let attX = x1 + ( x2 - x1 ) / dist * 5;
    let attY = y1 + ( y2 - y1 ) / dist * 5;
    let attX0 = attacker.getX();
    let attY0 = attacker.getY();

    hitDur = 100;
    let tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( attacker,100,{ x: attX,y: attY },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inBack } )
        .onComplete( () => {
            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( attacker,dur - 100,{ x: attX0,y: attY0 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inCubic } );
        } );

    attacker.__effectTween = tw;
    new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( weaponSpr,dur - 100,{ x: x,y: y },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inOutBack } )
        .onComplete( () => {
            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( weaponSpr,100,{ x: x1,y: y1 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inCubic } )
                .onCompleteRemoveFromParent();
        } );

    return [dur,hitDur];
};

_FT["claw"] = ( self,x1,y1,x2,y2,isHit,weaponImage,attacker ) => {
    let angle = ( Math.atan2( y2 - y1, x2 - x1 ) ) / Math.PI * 180;
    let dist = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( x1,y1,x2,y2 );

    _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityLayer.addChild( self );
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/swing_0.wav" );
    let dur = 300;
    let hitDur;
    let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Claw.png",false,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

    b.setAnchorPoint( 0.5,0.5 );
    b.setScale( 0.8 );
    b.setOverrideColor( 0xff0000 );
    b.setPosition( x2 + 10,y2 - 10 );
    let x = x1 + ( x2 - x1 ) / dist * 1;
    let y = y1 + ( y2 - y1 ) / dist * 1;

    if ( attacker.__effectTween ) {
        attacker.__effectTween.stop();
        attacker.resetPositionAndColor();
    }

    let attX = x1 + ( x2 - x1 ) / dist * 7;
    let attY = y1 + ( y2 - y1 ) / dist * 7;
    let attX0 = attacker.getX();
    let attY0 = attacker.getY();

    hitDur = 100;
    let tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( attacker,100,{ x: attX,y: attY },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inOutBack } )
        .onComplete( () => {
            self.addChild( b );
            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( b,100,{ x: x2 - 5,y: y2 + 5,alpha: 0.5 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } )
                .onCompleteRemoveFromParent();
            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( attacker,dur - 100,{ x: attX0,y: attY0 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inCubic } );
        } );

    attacker.__effectTween = tw;

    return [dur,hitDur];
};

_FT["damage"] = ( self,x1,y1,x2,y2,target,attacker,hitDur ) => {
    x2 = x2 != null ? x2 : target.getX();
    y2 = y2 != null ? y2 :  target.getY();
    x1 = x1 != null ? x1 :  x2;
    y1 = y1 != null ? y1 :  y2;
    attacker = attacker != null ? attacker : target;
    hitDur = hitDur || 0;
    let angle = ( Math.atan2( y2 - y1, x2 - x1 ) ) / Math.PI * 180;
    let dist = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( x1,y1,x2,y2 );

    _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityLayer.addChild( self );
    let dur = 300;
    let targetX = target.getX();
    let targetY = target.getY();
    let x = targetX + ( x2 - x1 ) / dist * 0;
    let y = targetY + ( y2 - y1 ) / dist * 0;

    if ( target.__effectTween ) {
        target.__effectTween.stop();
        target.resetPositionAndColor();
    }
    let tick = 0;

    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( hitDur, () => {
        target.setOverrideColor( 0xff0000 );
        target.setScale( 1.5 );
        let tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( target,100,{ color: 0xa00000 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outBounce } )
            .onChange( () => {
                target.setScale( 1.5 + Math.floor( tick / 2 ) * 0.3 );
                tick = ( tick + 1 ) % 4;
            } )
            .onComplete( () => {
                new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( target,dur - hitDur - 50,{ scaleX: 1,scaleY: 1,color: 0xffffff },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inCubic } );
            } );

        target.__effectTween = tw;
    } );

    return [dur,hitDur];
};

_FT["death"] = ( self,x1,y1,x2,y2,target,attacker,hitDur ) => {
    x2 = x2 != null ? x2 : target.getX();
    y2 = y2 != null ? y2 : target.getY();
    x1 = x1 != null ? x1 : x2;
    y1 = y1 != null ? y1 : y2;
    attacker = attacker != null ? attacker : target;
    hitDur = hitDur || 0;
    let angle = ( Math.atan2( y2 - y1, x2 - x1 ) ) / Math.PI * 180;
    let dist = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( x1,y1,x2,y2 );

    _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityLayer.addChild( self );
    let dur = 1000;
    let targetX = target.getX();
    let targetY = target.getY();
    let speed = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 10,14 );

    angle = angle + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -5,5 );
    let x = targetX + Math.cos( ( angle / 180 * Math.PI ) ) * speed;
    let y = targetY + Math.sin( ( angle / 180 * Math.PI ) ) * speed + 5;

    if ( target.__effectTween ) {
        target.__effectTween.stop();
        target.resetPositionAndColor();
    }
    let targetAngle = Math.sign( x2 - x1 ) * 90;

    if ( y2 - y1 > 0 ) {
        targetAngle = 180;
    }
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( hitDur, () => {
        target.setOverrideColor( 0xff0000 );
        //target.setScale(1.5);
        target.setRotation( targetAngle );
        target.setPosition( targetX,targetY + 5 );
        if ( target.__animationTimer ) {
            target.__animationTimer.stop();
        }
        let tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( target,200,{ color: 0xa00000,x: x,y: y },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } )
            .onComplete( () => {
                new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( target,dur - hitDur - 50,{ alpha: 0 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inCubic } );
            } );

        target.__effectTween = tw;
    } );

    return [dur,hitDur];
};

_FT["boom"] = ( self,x,y,scale,dur,hitDur,color ) => {
    hitDur = hitDur || 0;
    _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityLayer.addChild( self );
    let tex = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "boom.png",false,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );
    let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( tex );
    let sc1 = scale / ( tex.width / 2 );

    b.setAnchorPoint( 0.5,0.5 );
    b.setOverrideColor( color != null ? color : 0xffffff );
    b.setPosition( x,y );
    b.setBlendMode( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite.BlendModes.ADD );
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( hitDur, () => {
        self.addChild( b );
        b.setScale( 0.0 );
        new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( b,dur * 0.6,{ scaleX: sc1 * 0.95,scaleY: sc1 * 0.95,alpha: 0.4 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCircular } )
            .onComplete( () => {
                new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( b,dur * 0.4,{ scaleX: sc1,scaleY: sc1,alpha: 0.0 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );
            } );
    } );

    return [dur,hitDur];
};

// 프랍을 부수는 이펙트
// 해당 프랍이미지의 13번~16번까지는 파티클이라고 가정한다.
_FT["breakProp"] = ( self,x1,y1,x2,y2,target,attacker,hitDur ) => {
    x2 = x2 != null ? x2 : target.getX();
    y2 = y2 != null ? y2 : target.getY();
    x1 = x1 != null ? x1 : x2;
    y1 = y1 != null ? y1 : y2;
    attacker = attacker != null ? attacker : target;
    hitDur = hitDur || 0;
    let angle = ( Math.atan2( y2 - y1, x2 - x1 ) ) / Math.PI * 180;
    let dist = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( x1,y1,x2,y2 );

    _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityLayer.addChild( self );
    let targetX = target.getX();
    let targetY = target.getY();
    let dur = 2000;
    let speed = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 10,14 );

    angle = angle + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -2,2 );
    let x = targetX + Math.cos( ( angle / 180 * Math.PI ) ) * speed;
    let y = targetY + Math.sin( ( angle / 180 * Math.PI ) ) * speed;
    let fx = Math.cos( ( angle / 180 * Math.PI ) ) * 10;
    let fy = Math.sin( ( angle / 180 * Math.PI ) ) * 10;

    if ( target.__effectTween ) {
        target.__effectTween.stop();
        target.resetPositionAndColor();
    }
    let m = [];

    if ( target.property.slice != false ) {
        [m[0],m[1],m[2],m[3]] = target.mesh.sliceMesh();
    }
    for ( let i = 0; i < ( target.property.particle != null ? target.property.particle : 4 ); i++ ) {
        let [col,row] = target.mesh.getColRow();

        m.push( target.mesh.clone( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 13,16 ),row ) );
    }
    let t = [];

    for ( let i = 0; i < m.length; i++ ) {
        let f1 = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 200,300 );
        let f2 = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 10,40 );
        let h1 = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -14,-2 );
        let h2 = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 4,7 );

        t.push( [0, f1, m[i], { x: [ 0, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -15 - fx * 3, 15 ), "outCubic"] }] );
        t.push( [0, f2, m[i],{ y: [ 0, h1, "outCubic" ] }] );
        t.push( [f2 + 1, f2 * 3, m[i], { y: [ h1, h2, "outBounce"] }] );
        t.push( [0, f2 * 2, m[i], { rotation: [ 0, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -720, 720 ), "outCubic"] }] );
    }
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( hitDur, () => {
        let mc = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MovieClip( t );

        self.addChild( mc );
        mc.setPosition( targetX,targetY );
        target.setVisible( false );
        if ( target.__animationTimer ) {
            target.__animationTimer.stop();
        }
        let tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( mc,300,{ x: targetX + fx,y: targetY + fy,scaleX: 0.9,scaleY: 0.9 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.linear } )
            .onComplete( () => {
                new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( mc,dur - hitDur - 50,{ scaleX: 1.0,scaleY: 1.0,alpha: 0 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inCubic } );
            } );

        target.__effectTween = tw;
    } );

    return [dur,hitDur];
};


_FT["hitProp"] = ( self,x1,y1,x2,y2,target,attacker,hitDur ) => {
    x2 = x2 != null ? x2 : target.getX();
    y2 = y2 != null ? y2 : target.getY();
    x1 = x1 != null ? x1 : x2;
    y1 = y1 != null ? y1 : y2;
    attacker = attacker != null ? attacker : target;
    hitDur = hitDur || 0;
    let angle = ( Math.atan2( y2 - y1, x2 - x1 ) ) / Math.PI * 180;
    let dist = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( x1,y1,x2,y2 );

    _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityLayer.addChild( self );
    let dur = 300;
    let targetX = target.getX();
    let targetY = target.getY();
    let x = targetX + ( x2 - x1 ) / dist * 0;
    let y = targetY + ( y2 - y1 ) / dist * 0;

    if ( target.__effectTween ) {
        target.__effectTween.stop();
        target.resetPositionAndColor();
    }
    let tick = 0;

    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( hitDur, () => {
        target.setOverrideColor( 0x808080 );
        let tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( target,100,{ color: 0xffffff },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outBounce } )
            .onChange( () => {
                target.setX( x + Math.floor( tick ) * 4 - 2 );
                tick = ( tick + 0.5 ) % 2;
            } )
            .onComplete( () => {
                target.setX( x );
                new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( target,dur - hitDur - 50,{ color: 0xffffff },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inCubic } );
            } );

        target.__effectTween = tw;
    } );

    return [dur,hitDur];
};



/***/ }),

/***/ "./games/Avalonika/src/entity/buff.js":
/*!********************************************!*\
  !*** ./games/Avalonika/src/entity/buff.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Buff)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");










class Buff {
    constructor( type, power, cr ) {
        this.type = type;
        this.creature = cr;
        this.power = power;
        const b = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_2__["default"]( Buff.texture, Buff.data[this.type].iconCol, Buff.data[this.type].iconRow, 16, 16, Buff.data[this.type].iconColor );

        this.icon = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MovieClip( [
            [0, 30, b, { redMultiplier: [1, 0, "linear"], greenMultiplier: [1, 0, "linear"], blueMultiplier: [1, 0, "linear"] }],
            [0,"goto",0]
        ] );
        _global__WEBPACK_IMPORTED_MODULE_3__["default"].world.addLog( Buff.data[this.type].addLog, this.creatureName() );
    }

    renew( power ) {
        this.power = power;
        _global__WEBPACK_IMPORTED_MODULE_3__["default"].world.addLog( Buff.data[this.type].renewLog, this.creatureName() );
    }


    static addBuff( cr, type, power ) {
        let buff;

        if ( cr.buffs[type] ) {
            buff = cr.buffs[type];
            buff.renew( power );
        } else {
            buff = new Buff( type, power, cr );
        }

        return buff;
    }

    process() {
        if ( Buff.data[this.type].processFunc ) {
            Buff.data[this.type].processFunc( this );
        }
        if ( Buff.data[this.type].removeFunc ) {
            const r = Buff.data[this.type].removeFunc( this );

            if ( r ) {
                this.remove();
            }
        }
    }

    decreasePower() {
        this.power = this.power - 1;

        return this.power <= 0;
    }

    remove() {
        _global__WEBPACK_IMPORTED_MODULE_3__["default"].world.addLog( Buff.data[this.type].removeLog, this.creatureName() );
        this.creature.buffs[this.type] = null;
    }

    showProcessLog( ...args ) {
        _global__WEBPACK_IMPORTED_MODULE_3__["default"].world.addLog( Buff.data[this.type].processLog, ...args );
    }

    creatureName() {
        return this.creature.getName();
    }

    damage( dmg ) {
        this.creature.damage( dmg, this.creature, this.creature.getX(), this.creature.getY(), 0, Buff.data[this.type].processSound );
    }
}

Buff.texture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "buff.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );
Buff.FIRE = "F";
Buff.POISON = "P";
Buff.FROZEN = "f";
Buff.BLIND = "B";
Buff.SILENCE = "S";
Buff.STONE = "O";
Buff.CURSE = "c";
Buff.BLESS = "b";
Buff.BLEED = "L";
Buff.CONFUSE = "C";
Buff.STUN = "T";
Buff.BERSERK = "K";
Buff.WEAKEN = "W";
Buff.SHOCK = "E";

Buff.data = {

    [Buff.FIRE]: {
        iconCol:    1, iconRow:    1, iconColor:  0xff0000,
        addLog:     "%s에게 불이 붙었다!",
        renewLog:   "%s에게 불이 또 붙었다!",
        removeLog:  "%s에게 붙은 불이 꺼졌다!",
        removeFunc: function ( self ) {
            return self.decreasePower();
        },
        processLog:   "%s{는} 불로 인해 %d 대미지를 입었다!",
        processSound: "sound/damage_fire.wav",
        processFunc:  function ( self ) {
            const dmg = _global__WEBPACK_IMPORTED_MODULE_3__["default"].world.random( 1, 3 );

            this.showProcessLog( this.creatureName(), dmg );
            this.damage( dmg );
        },
    },
    [Buff.POISON]: {
        iconCol:    2, iconRow:    1, iconColor:  0xff00ff,
        addLog:     "%s{는} 독에 걸렸다!",
        renewLog:   "%s{는} 독에 또 노출됐다!",
        removeLog:  "%s의 몸에서 독이 사라졌다!",
        removeFunc: function ( self ) {
            return _global__WEBPACK_IMPORTED_MODULE_3__["default"].world.random( 5 ) == 1;
        },
        processLog:   "%s{는} 독으로 인해 %d 대미지를 입었다!",
        processSound: "sound/damage_poison.wav",
        processFunc:  function ( self ) {
            const dmg = _global__WEBPACK_IMPORTED_MODULE_3__["default"].world.random( 1, 2 );

            this.showProcessLog( this.creatureName(), dmg );
            this.damage( dmg );
        },
    },
    [Buff.FROZEN]:  {},
    [Buff.BLIND]:   {},
    [Buff.SILENCE]: {},
    [Buff.STONE]:   {},
    [Buff.CURSE]:   {},
    [Buff.BLESS]:   {},
    [Buff.BLEED]:   {},
    [Buff.CONFUSE]: {},
    [Buff.STUN]:    {},
    [Buff.BERSERK]: {},
    [Buff.WEAKEN]:  {},
    [Buff.SHOCK]:   {},

};



/***/ }),

/***/ "./games/Avalonika/src/entity/creature.js":
/*!************************************************!*\
  !*** ./games/Avalonika/src/entity/creature.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Creature)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entity */ "./games/Avalonika/src/entity/entity.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _buff__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./buff */ "./games/Avalonika/src/entity/buff.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");











const moodToNumber = {
    ["!"]:         1,
    ["?"]:         2,
    ["♥"]:         3,
    ["fear"]:      4,
    ["nearDeath"]: 5,
};


/**
 *
 *
 * @class Creature
 * @extends {Entity}
 */
class Creature extends _entity__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor( name, tileX, tileY, options ) {
        super( name, tileX, tileY, options );
        this.isCreature = true;
        this.follow = null;
        this.hp = 1;
        this.maxHp = 1;
        if ( tileY && _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.entityManager.getEntity( tileX,tileY ) ) {
            // 해당 위치에 다른 오브젝트가 있다.
            const t = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.pathManager.getSummonFloor( tileX,tileY,1 );

            if ( t.length == 0 ) {
                console.log( "소환할 자리가 없음", tileX, tileY );
            } else {
                tileX = t[0].x;
                tileY = t[0].y;
                const { x: wx, y: wy } = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.tileCenterToWorld( tileX, tileY );

                this.setPosition( wx,wy );
                [this.tileX,this.tileY] = [tileX,tileY];
                [this.lastTileX,this.lastTileY] = [tileX,tileY];
            }
        }
        this.postInit( Creature );
    }

    addBuff( type,power ) {
        this.buffs[type] = _buff__WEBPACK_IMPORTED_MODULE_3__["default"].addBuff( this,type,power );
        this.buffLayer.clearChildren();
        let numOfActiveBuff = 0;

        for ( const k in this.buffs ) {
            const v = this.buffs[k];

            numOfActiveBuff = numOfActiveBuff + 1;
        }
        let i = 0;

        for ( const k in this.buffs ) {
            const v = this.buffs[k];

            v.icon.setPosition( -( numOfActiveBuff - 1 ) * 16 / 2 + i * 16,-25 );
            this.buffLayer.addChild( v.icon );
            i = i + 1;
        }
    }


    processBuff() {
        for ( const k in this.buffs ) {
            const v = this.buffs[k];

            v.process();
        }
        this.buffLayer.clearChildren();
        let numOfActiveBuff = 0;

        for ( const k in this.buffs ) {
            const v = this.buffs[k];

            numOfActiveBuff = numOfActiveBuff + 1;
        }
        let i = 0;

        for ( const k in this.buffs ) {
            const v = this.buffs[k];

            v.icon.setPosition( -( numOfActiveBuff - 1 ) * 16 / 2 + i * 16,-25 );
            this.buffLayer.addChild( v.icon );
            i = i + 1;
        }
    }

    showMood( mood ) {
        if ( this.__moodSprite != null ) this.__moodSprite.removeFromParent();
        if ( mood ) {
            const moodNum = moodToNumber[mood];
            const b = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_4__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "fx.png",false,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ),moodNum,5,16,24 );

            b.setY( this.gaugeLayer.isVisible() && -24 || -16 );
            const mc = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MovieClip( [
                [0,15,b,{ scaleX: [1,0.7,"outCubic"],scaleY: [1,0.7,"outCubic"] }],
                [16, 30, b, { scaleX: [0.7, 1, "inCubic"], scaleY: [0.7, 1, "inCubic"] }],
                [30,"goto",0]
            ] );

            this.addChild( mc );
            this.__moodSprite = mc;
        }
    }


    refreshGauge() {
        const v = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( this.hp / this.hpMax,0,1 );

        if ( v == 1 || v == 0 || this.isPlayer ) {
            this.gaugeLayer.setVisible( false );
        } else {
            this.gaugeLayer.setVisible( true );
        }
        const w = this.mesh.getWidth();
        const h = this.mesh.getHeight();

        if ( !this.__gaugeBackSprite ) {
            const back = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( 0x000000,1,w,4 );

            back.setPosition( -w / 2,-h / 2 - 7 );
            this.gaugeLayer.addChild( back );
            this.__gaugeBackSprite = back;
        }
        if ( !this.__gaugeSprite ) {
            const gauge = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( 0xff0000,1,w - 2,2 );

            gauge.setPosition( 1,1 );
            this.__gaugeBackSprite.addChild( gauge );
            this.__gaugeSprite = gauge;
        }
        if ( this.__gaugeLastValue != v ) {
            const gaugeDelta = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( 0xa00000,1,w - 2,2 );

            gaugeDelta.setScaleX( ( this.__gaugeLastValue || 1 ) - v );
            gaugeDelta.setPosition( 1 + v * ( w - 2 ),1 );
            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( gaugeDelta,1000,{ scaleX: 0,alpha: 0 },{ ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inCubic } )
                .onCompleteRemoveFromParent();
            this.__gaugeBackSprite.addChild( gaugeDelta );
            this.__gaugeSprite.setScaleX( v );
            this.__gaugeLastValue = v;
        }
    }


    getFactionRelation( target ) {
        const myFaction = this.property.faction || "M";
        const targetFaction = target.property.faction || "M";
	
        const ft = Creature.factionTable[myFaction][0];
        const i = Creature.factionTable[targetFaction][1] * 2;

        return ft.substr( i, 1 );
    }

    // 범위 안의 타겟을 찾음
    // F>R>f>r 의 순서로 찾는다
    // f,r은 senseDistance의 절반에 들어올 경우 동작함
    // 리턴값은 {관계,개체,중요도} 순으로된 어레이 1번을 읽으면 된다.

    searchTarget( range ) {
        if ( !range ) {
            if ( this.isPlayer ) {
                range = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.viewRadius;
            } else {
                range = this.senseDistance;
            }
        }
	
        // 오브젝트 목록을 얻어온다
        const t = this.getNearEntities( range );
        const t2 = [];
	
        for ( const i in t ) {
            const v = t[i];

            if ( v.isCreature && this.follow != v && this.canSee( v.tileX, v.tileY, _world_gameMap__WEBPACK_IMPORTED_MODULE_2__["default"].BLOCK_VISION )[0] ) {
                const relation = this.getFactionRelation( v );
                //log(relation);
                const importantPoint = relation == "F" ? 4 :
                    relation == "R" ? 3 :
                        relation == "f" ? 2 :
                            relation == "r" ? 1 : 0;

                t2[t2.length + 1] = [relation, v, importantPoint - _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.getDistanceBetweenEntities( this, v ) * 0.001];
            }
        }
        t2.sort( ( a, b )=>  b[3] - a[3] );

        return [t2[1],t2];
    }



    //--------------------------------------------------------------------------------------
    // 펫에게 명령을 전달한다.
    // 타겟을 생략하면 모든 펫
    //--------------------------------------------------------------------------------------
    commandFollower( command,options,target ) {
        if ( target ) {
            if ( this == target.follow ) {
                target.receiveCommand( command, options );
            } else {
                throw new Error( "자신의 펫이 아닌데 명령을 전달하려함" );
            }
        } else {
            const t = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.entityManager.getAllEntities();

            for ( const i in t ) {
                const v = t[i];

                if ( this == v.follow ) {
                    console.log( this.getName(),command,"명령을 전달함",v.getName() );
                    v.receiveCommand( command,options );
                }
            }
        }
    }

    receiveCommand( command,options ) {
        console.log( this.getName(),command,"명령을 받음" );
        if ( command == "dance" ) {
            this.enableDefaultAnimation( false );
            options.mml
                .on( "note", () => {
                    const [tw, th] = [this.tileWidth, this.tileHeight];

                    this.__animationTick = ( this.__animationTick + 1 ) % 2;
                    const [tx, ty] = [this._textureX,this._textureY + this.__animationTick * th];
                    const [w, h] = [_config__WEBPACK_IMPORTED_MODULE_6__["default"].Entity.width, _config__WEBPACK_IMPORTED_MODULE_6__["default"].Entity.height];

                    this.mesh.setTextureCoordinateArray( [tx, ty, tx + tw, ty, tx, ty + th, tx + tw, ty + th] );
                    this.shadowMesh.setTextureCoordinateArray( [ tx, ty + h, tx + w, ty + h, tx, ty, tx + w, ty ] );
                } )
                .on( "complete", () => {
                    this.enableDefaultAnimation( true );
                } );
        }
    }
}


Creature.texture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Character.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );
Creature.width = 18;
Creature.height = 24;
Creature.tileWidth = 18;
Creature.tileHeight = 24;
Creature.walkSpeed = 200;
Creature.perRow = Math.floor( Creature.texture.width / Creature.tileWidth );
Creature.factionTable = {
    /*
	
		faction;
		O Order;
		C Chaos;
		L Liberty;
		H Human;
		G Guard;
		R Raider;
		A Animal;
		P Predetor Animal;
		M Monster;
		V Vampire;
		U Outter universe;
			세로축은 자신, 가로축은 대상
			F 적극적 전투, f 소극적 전투 
			R 적극적 도망, r 소극적 도망
			O가 A를 만나면 f소극적으로 싸움
	*/
    //O C L H G R A P M V U;
    O: [ ": f       F f   F   R", 0],
    C: [ "F : f       f   f   R", 1],
    L: [ "    :     f     f f R", 2],
    H: [ "      :   f f r f   R", 3],
    G: [ "        : F   f F   R", 4],
    R: [ "F f F F r : f r f r R", 5],
    A: [ "            : R r r R", 6],
    P: [ "f f f f   f F : r r R", 7],
    M: [ "F F F F F f   f : r R", 8],
    V: [ "f f f F   f f     : r", 9],
    U: [ "F F F f f f f f f f :", 10],

};



/***/ }),

/***/ "./games/Avalonika/src/entity/entity.js":
/*!**********************************************!*\
  !*** ./games/Avalonika/src/entity/entity.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Entity)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");
/*

	월드에 올라가는 개체는 전부 Entity;
	Entity는 기데로스가 사용하기 때문에 Entity라고 한다

	Entity;
	|
	+-Creature-----Player;
	|       |
	|		+------Monster-------Pet;
	|		            |
	|					+--------Npc;
	+-Prop;
    |
	+-Item;
    |
	+-Skill;
*/







const goldAni = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MovieClip( [
    [0, 10, "@t", { redMultiplier: [1, 1, "linear"], greenMultiplier: [1, 0.8, "linear"], blueMultiplier: [0, 0, "linear"] }],
    [10, "goto", 0]
] );

const dropAni = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MovieClip( {
    default: [[0, 0, "@t"]],
    hide:    [[0, 0, "@t", { alpha: 0 }]],
    drop:    [
        [0, 30, "@t", { alpha: 1, y: [0, -10, "outCubic"], rotation: [-360 * 2, 0, "linear"] }],
        [31, 60, "@t", { y: [-10, 0, "outBounce"] }]
    ],
} );


// 숨쉬기 애니메이션
// 이후에 다른 것으로 교체될 수 있으므로 루즈하게 둔다.


/**
 * @this Entity
 */
function onTimer() {
    const [tw, th] = [this.tileWidth, this.tileHeight];

    this.__animationTick = ( this.__animationTick + 1 ) % 2;
    const [tx, ty] = [this._textureX, this._textureY + this.__animationTick * th];
    const [w, h] = [_config__WEBPACK_IMPORTED_MODULE_3__["default"].Entity.width, _config__WEBPACK_IMPORTED_MODULE_3__["default"].Entity.height];

    //this.mesh.setTextureCoordinates(0, tx, ty, 1, tx + tw, ty, 2, tx, ty + th, 3, tx + tw, ty + th);
    this.mesh.setTextureCoordinateArray( [tx, ty, tx + tw, ty, tx, ty + th, tx + tw, ty + th] );
    if ( this.shadowMesh ) {
        this.shadowMesh.setTextureCoordinateArray( [ tx, ty + h, tx + w, ty + h, tx, ty, tx + w, ty ] );
    }
}

/**
 * @this Entity
 */
function onEnterFrame() {
    const { x, y } = this.getPosition();

    this.shadowMesh.setPosition( x,y );
    this.shadowMesh.setAlpha( this.getAlpha() );
    this.shadowMesh.setVisible( this.isVisible() );
}

/** 
 * @typedef {object|undefined} EntityProperty
 * @property {number[]=} image
 * @property {[[number,number]]=} images
 * @property {number=} color
 * @property {string=} desc
 * @property {string=} type
 * */



class Entity extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    //--------------------------------------------------------------------------------------
    // 초기화
    //--------------------------------------------------------------------------------------
    /**
     *Creates an instance of Entity.
     * @param {string} name
     * @param {number|object=} tileX
     * @param {number=} tileY
     * @param {object=} options
     * @memberof Entity
     */
    constructor( name, tileX, tileY, options ) {
        super();
        if ( typeof tileX == "object" && tileY == null && options == null ) {
            options = tileX;
            tileX = null;
        }
        /**
         * 유니크 ID 
         * @type {number} 
         * @readonly
        */
        this.id = Entity.generateNewId();
        this.isEntity = true;
        this.walkSpeed = _config__WEBPACK_IMPORTED_MODULE_3__["default"].Entity.walkSpeed;
        this.options = options != null ? options : {};

        if ( typeof tileX == "number" ) {
            this.position = _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.tileCenterToWorld( tileX, tileY );
            this.tileX = tileX;
            this.tileY = tileY;
            this.lastTileX = tileX;
            this.lastTileY = tileY;
        }
		
        this.name = name;
        /** @type {EntityProperty} */
        this.property = undefined;
        /** @type {Mesh} */
        this.mesh = undefined;
        /** @type {MovieClip} */
        this.movieClip = undefined;
        /** @type {boolean} */
        this.addedToWorld = undefined;
        /** @type {number} */
        this.tileWidth = undefined;
        /** @type {number} */
        this.tileHeight = undefined;
        /** @type {boolean} */
        this.isItem = undefined;
        /** @type {boolean} */
        this.isCreature = undefined;
        /** @type {boolean} */
        this.isProp = undefined;
        /** @type {boolean} */
        this.isSkill = undefined;
        /** @type {boolean} */
        this.isPlayer = undefined;

        /** @type {TextureBase} */
        this.texture = undefined;

        this.imageNum = undefined;
        this.imageCol = undefined;
        this.imageRow = undefined;
        this.colorNum = undefined;
    }


    /**
     *
     *
     * @param {object} baseTable
     * @param {string} key
     * @memberof Entity
     */
    fillProperties( baseTable, key ) {
        this.__key = key;
        console.assert( baseTable[key], `베이스테이블에 키가 없음 ${baseTable},${key}` );
        this.property = new Proxy( {}, {
            get: ( target, name ) => {
                return name in target ? target[name] : baseTable[key][name];
            }
        } );
    }


    postInit( currentClass ) {
        if ( this.constructor != currentClass ) {
            return;
        }
        const options = this.options;
        const pr = this.property;
        const [tileX, tileY] = [this.tileX, this.tileY];
        let imageCol, imageRow;

        if ( pr.image ) {
            [imageCol, imageRow] = pr.image;
        } else if ( pr.images ) {
            [imageCol, imageRow] = pr.images[this.imageNum];
        }

        [this.imageCol, this.imageRow] = [imageCol, imageRow];
        this.color = this.color || this.options.color || pr.color;
        if ( pr.colors && this.color == null ) {
            this.color = pr.colors[this.colorNum];
        } else if ( !this.color ) {
            this.color = 0xffffff;
        }
		
        if ( this.isCreature ) {
            imageRow = imageRow * 2 - 1;
        }

        const [w, h] = [_config__WEBPACK_IMPORTED_MODULE_3__["default"].Entity.width, _config__WEBPACK_IMPORTED_MODULE_3__["default"].Entity.height];
        const [tw, th] = [this.tileWidth, this.tileHeight];
        const [tx, ty] = [( imageCol - 1 ) * tw, ( imageRow - 1 ) * th];
        let m = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_1__["default"]( this.texture, imageCol, imageRow, tw, th, this.color, 1 );

        this.mesh = m;
        m.setFlip( options.flip );
        if ( tileX && tileY && _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.map.getVisibility( tileX, tileY ) > 0 ) {
            this.setVisible( false );
        } else {
            this.setVisible( true );
        }

        if ( this.isProp || this.isCreature || this.isSkill ) {
            this.addChild( m );
            const m3 = m.clone();
            const sh = h * 0.8;

            m3.setVertexArray( [
                0 - w / 2, 0 - h / 2 + sh,
                w - w / 2, 0 - h / 2 + sh,
                0 - w / 2, h - h / 2 + sh,
                w - w / 2, h - h / 2 + sh
            ] );
            m3.setTextureCoordinateArray( [tx, ty + h, tx + w, ty + h, tx, ty, tx + w, ty] );
            m3.setColorArray( [0x000000, 0.5, 0x000000, 0.5, 0x000000, 0.5, 0x000000, 0.5] );
            this.shadowMesh = m3;
            this.addEventListenerOnStage( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, this );
        }
        if ( this.isCreature ) {
            this._textureX = tx;
            this._textureY = ty;
            this.__animationTick = 0;
            this.__animationTimer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer( 500, 0 );
            this.__animationTimer.start();
            this.__animationTimer.addEventListenerOnStage( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.TIMER, onTimer, this, this );
            this.buffs = {};
            this.buffLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
            this.gaugeLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
            this.addChild( this.gaugeLayer );
            this.addChild( this.buffLayer );
        }
		
        //-------------------------------------------------------
        // 아이템 전용
        //-------------------------------------------------------

        if ( this.isItem ) {
            if ( this.property.effect == "gold" ) {
                const mc = goldAni.instance();

                mc.setTarget( "@t", m );
                //mc.setGotoAction(10, 0);
                //@ts-ignore
                m = mc;
            }
            const mc = dropAni.instance();

            mc.setTarget( "@t", m );
            this.addChild( mc );
            this.movieClip = mc;
            if ( tileX ) {
                const { x, y } = _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.tileCenterToWorld( tileX, tileY );

                this.setPosition( x,y );
                [this.tileX, this.tileY] = [tileX, tileY];
            }

            if ( options.drop == true ) {
                if ( options.dropX ) {
                    const { x: tx, y: ty } = _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.tileCenterToWorld( options.dropX, options.dropY );

                    mc.setPosition( tx - this.getX(), ty - this.getY() );
                    new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( mc, 300, { x: 0, y: 0 } );
                }
                if ( options.dropDelay ) {
                    mc.gotoAndPlay( "hide" );
                    this.dropAnimationTimer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( options.dropDelay, () => {
                        this.dropAnimationTimer = null;
                        // @ts-ignore
                        this.showDrop();
                    } );
                } else {
                    // @ts-ignore
                    this.showDrop();
                }
            }

            if ( this.property.bundle ) {
                this.amount = options.amount || 1;
                if ( this.property.bundle == "gold" ) {
                    if ( this.amount <= 5 ) {
                        this.changeImage( 1, 14 );
                    } else if ( this.amount <= 20 ) {
                        this.changeImage( 2, 14 );
                    } else if ( this.amount <= 100 ) {
                        this.changeImage( 3, 14 );
                    } else {
                        this.changeImage( 4, 14 );
                    }
                }
            }
        }
    }

    changeImage( col, row ) {
        const [w, h] = [_config__WEBPACK_IMPORTED_MODULE_3__["default"].Entity.width, _config__WEBPACK_IMPORTED_MODULE_3__["default"].Entity.height];
        const [tx, ty] = [( col - 1 ) * this.tileWidth, ( row - 1 ) * this.tileHeight];
        const m = this.mesh;

        m.setTextureCoordinateArray( [tx, ty, tx + w, ty, tx, ty + h, tx + w, ty + h] );
    }

    //--------------------------------------------------------------------------------------
    // 월드내부의 위치바꾸기
    // tileX,tileY는 각종 상호작용에서 참고하는 위치이다. 
    //--------------------------------------------------------------------------------------

    // Item은 다른 오브젝트와 같은 위치에 있을 수 있으므로
    // 아래의 메소드를 오버라이드한다.
    setTileXy( tileX, tileY ) {
        if ( this.lastTileX != this.tileX && this.lastTileY != this.tileY ) {
            [this.lastTileX, this.lastTileY] = [this.tileX, this.tileY]; // 이동방향 측정을 위해서 보관함
        }
        if ( this.addedToWorld ) {
            delete _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.entityManager.entitiesByXy[this.tileX + "," + this.tileY];
            [this.tileX, this.tileY] = [tileX, tileY];
            if ( _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.entityManager.entitiesByXy[tileX + "," + tileY] != null ) {
                throw new Error( "☞☞☞ 오브젝트가 있는 위치에 오브젝트를 이동하려함" );
            }
            _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.entityManager.entitiesByXy[tileX + "," + tileY] = this;
        } else {
            [this.tileX, this.tileY] = [tileX, tileY];
        }
    }

    enableDefaultAnimation( v ) {
        if ( this.__animationTimer ) {
            if ( v ) {
                onTimer.call( this );
                this.__animationTimer.start();
            } else {
                this.__animationTimer.stop();
            }
        }
    }

    stopPreviousAction( reason ) {
        this.enableDefaultAnimation( true );
        this.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "stopAction", { reason } ) );
    }

    //--------------------------------------------------------------------------------------
    // 애니메이션하면서 이동하기
    // 외부에서는 이걸 불러서 이동한다
    //--------------------------------------------------------------------------------------

    moveTo( tileX, tileY ) {
        if ( _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.entityManager.getEntity( tileX, tileY ) ) {
            // 다른 오브젝트가 있다.
            // 벽인지도 검사해야하나?
            return null;
        } else {
            this.stopPreviousAction( "move" );
            if ( this.__walkTween ) {
                this.__walkTween.stop();
            }
            const { x, y } = _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.tileCenterToWorld( tileX, tileY );

            this.setTileXy( tileX, tileY );
            const tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, this.walkSpeed, { x, y }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inOutCubic } );

            this.__walkTween = tw;

            return tw;
        }
    }

    // 상대좌표를 사용하는 타입
    moveToRel( ax, ay ) {
        this.moveTo( this.tileX + ax, this.tileY + ay );
    }

    swapLocation( target ) {
        console.assert( this.addedToWorld && target.addedToWorld, "☞☞☞ 월드에 없는 오브젝트의 위치를 바꾸려함" );
        {
            if ( this.__walkTween ) {
                this.__walkTween.stop();
            }
            const { x, y } = _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.tileCenterToWorld( target.tileX, target.tileY );
            //this.setTileXy(tileX,tileY);
            const tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, this.walkSpeed, { x, y }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inOutCubic } );

            this.__walkTween = tw;
        }
        {
            if ( target.__walkTween ) {
                target.__walkTween.stop();
            }
            const { x, y } = _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.tileCenterToWorld( this.tileX, this.tileY );
            //this.setTileXy(tileX,tileY);
            const tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( target, target.walkSpeed, { x, y }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inOutCubic } );

            target.__walkTween = tw;
        }

        _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.entityManager.entitiesByXy[this.tileX + "," + this.tileY] = target;
        _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.entityManager.entitiesByXy[target.tileX + "," + target.tileY] = this;
        [this.tileX, this.tileY, target.tileX, target.tileY] = [target.tileX, target.tileY, this.tileX, this.tileY];
    }

    //--------------------------------------------------------------------------------------
    // 맵정보 읽기
    //--------------------------------------------------------------------------------------

    getPropertyRel( ax, ay ) {
        return _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.getProperty( this.tileX + ax, this.tileY + ay );
    }

    //--------------------------------------------------------------------------------------
    // 오브젝트 정보 읽기
    //--------------------------------------------------------------------------------------

    getEntityRel( ax, ay ) {
        return _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.entityManager.getEntity( this.tileX + ax, this.tileY + ay );
    }

    getEntityPropertyRel( ax, ay ) {
        const entity = _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.entityManager.getEntity( this.tileX + ax, this.tileY + ay );

        return entity != null ? entity.property : null;
    }

    //--------------------------------------------------------------------------------------
    // 자기자신을 삭제하기
    // 스프라이트도 즉시 사라짐
    //--------------------------------------------------------------------------------------

    removeFromWorld() {
        _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.entityManager.removeEntity( this );
    }

    //--------------------------------------------------------------------------------------
    // 자기자신을 삭제하는데 스프라이트는 그대로 둔다
    //--------------------------------------------------------------------------------------

    detachFromWorld() {
        _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.entityManager.detachEntity( this );
    }


    //--------------------------------------------------------------------------------------
    // 시야검사
    //--------------------------------------------------------------------------------------

    /**
     *
     *
     * @param {*=} wall
     * @returns {number[]}
     * @memberof Entity
     */
    canBeSeen( wall ) {
        return _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.sightManager.canBeSeen( this.tileX, this.tileY, wall );
    }

    canSee( x, y, wall ) {
        if ( typeof x == "number" ) {
            return _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.sightManager.canSee( this.tileX, this.tileY, x, y, wall );
        } else {
            //x가 entity라고 가정
            //item도 가능하다
            //log("보기체크",this.tileX,this.tileY,x.tileX,x.tileY,y);
            //log(GLOBAL.world.canSee(this.tileX,this.tileY,x.tileX,x.tileY,y));
            return _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.sightManager.canSee( this.tileX, this.tileY, x.tileX, x.tileY, y );
        }
    }

    //--------------------------------------------------------------------------------------
    // 트윈 애니메이션을 중단
    //--------------------------------------------------------------------------------------

    resetPositionAndColor() {
        //if (this.__walkTween) {
        //this.__walkTween.stop();
        //}
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween.stopTarget( this );
        const { x, y } = _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.tileCenterToWorld( this.tileX, this.tileY );

        this.setPosition( x,y );
        this.setOverrideColor( 0xffffff );
        this.setScale( 1 );
        this.setAlpha( 1 );
    }

    //--------------------------------------------------------------------------------------
    // 근처의 상호작용 대상 목록을 얻기
    //--------------------------------------------------------------------------------------

    /**
     *
     *
     * @param {number} radius
     * @param {number=} angleLimit
     * @param {number=} targetX
     * @param {number=} targetY
     * @returns {Entity[]}
     * @memberof Entity
     */
    getNearEntities( radius, angleLimit, targetX, targetY ) {
        const [tx, ty] = [this.tileX, this.tileY];
        // 범위안의 엔티티를 일단 모두 얻어옴
        const entities = _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.entityManager.getEntitiesInRect( tx - radius, ty - radius, tx + radius, ty + radius );
        const entityInfos = [];
        let angle0;

        if ( targetX != null && targetY != null ) {
            angle0 = ( Math.atan2( targetY - this.y, targetX - this.x ) / Math.PI * 180 ) + 360;
        } else {
            angle0 = 0;
        }
        //log("발견한 크리쳐수",t.length,x,y,angle0);
        for ( const i in entities ) {
            const entity = entities[i];
            const dist = _global__WEBPACK_IMPORTED_MODULE_2__["default"].world.getDistanceBetweenEntities( this, entity );

            if ( this != entity && dist <= radius ) {
                const angle = Math.floor( Math.abs( ( Math.atan2( entity.tileY - this.tileY, entity.tileX - this.tileX ) / Math.PI * 180 ) + 360 - angle0 ) );

                if ( angleLimit == null || angle <= angleLimit ) {
                    entityInfos.push( {
                        dist:   dist,
                        angle:  angle,
                        entity: entity
                    } );
                }
                //log("크리쳐",v.tileX,v.tileY,dist,angle);
            }
        }
        entityInfos.sort( ( a, b ) => {
            if ( a.dist == b.dist ) {
                return a.angle - b.angle;
            } else {
                return a.dist - b.dist;
            }
        } );
        if ( entities.length > 0 ) {
            const resultEntities = [];

            for ( const i in entityInfos ) {
                const v = entityInfos[i];

                resultEntities.push( v.entity );
            }

            return resultEntities;
        } else {
            return null;
        }
    }


    //--------------------------------------------------------------------------------------
    // 이름과 설명 얻기
    //--------------------------------------------------------------------------------------

    getName() {
        return this.name || "이름 없는 무언가";
    }


    getDesc() {
        let desc;

        desc = this.property.desc;
        if ( !desc ) {
            return "설명이 없습니다";
        } else {
            return desc;
        }
    }


    static generateNewId() {
        return ++this.nextId;
    }
}

Entity.nextId = 0;



/***/ }),

/***/ "./games/Avalonika/src/entity/entityComponents.js":
/*!********************************************************!*\
  !*** ./games/Avalonika/src/entity/entityComponents.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Props": () => (/* binding */ Props),
/* harmony export */   "WorldEntity": () => (/* binding */ WorldEntity)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");




class Props extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Component {
    /**
     *Creates an instance of Props.
     * @param {object} DB
     * @param {string} key
     * @memberof Props
     */
    constructor( DB, key ) {
        super();

        this.id = undefined;
        this.tileX = undefined;
        this.tileY = undefined;

        return new Proxy( this,{
            get: ( t,k ) => {
                //@ts-ignore
                return t[k] !== undefined ? t[k] : DB[key][k];
            }
        } );
    }
}

class WorldEntity extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Component {
    constructor( world,props ) {
        super();
        this.world = world;
        this.entityManager = world.getComponent( "EntityManager" );
        this.props = props;
    }

    setTileXy( x,y ) {

    }

    moveTo( x,y ) {

    }

    swapLocation( target ) {

    }
}





/***/ }),

/***/ "./games/Avalonika/src/entity/item.js":
/*!********************************************!*\
  !*** ./games/Avalonika/src/entity/item.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Item)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entity */ "./games/Avalonika/src/entity/entity.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");






const EntityComponents = __webpack_require__( /*! ./entityComponents */ "./games/Avalonika/src/entity/entityComponents.js" );


/*
export default class Entity {
    EntityLogic
    World
}

*/

class Item extends _entity__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor( name,tileX,tileY,options ) {
        super( name,tileX,tileY,options );
        this.isItem = true;
        this.fillProperties( Item.property,name );

        this.props = this.addComponent( new EntityComponents.Props( Item.property, name ) );
        this.controller = this.addComponent( new EntityComponents.WorldEntity( _global__WEBPACK_IMPORTED_MODULE_4__["default"].world,this.props ) );
        const pr = this.property;

        this.name = pr.name || name;
        this.rarity = this.options.rarity || this.property.rarity || 0;
        this.color = ( this.options.color != null ) ? this.options.color : Item.rarityColor[this.rarity];
        this.texture = this.options.filtering ? Item.textureFiltered : Item.texture;
        this.tileWidth = Item.tileWidth;
        this.tileHeight = Item.tileHeight;

        this.postInit( Item );
    }


    showDrop() {
        this.movieClip.gotoAndPlay( "drop" );
        if ( this.property.dropSoundImm ) {
            if ( this.property.dropSound ) {
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/" + this.property.dropSound );
            } else {
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/drop_default.wav" );
            }
        } else {
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/drop_spin.wav" );
            if ( this.property.dropSound ) {
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 900, ()=> {
                    if ( this.getParent() ) {
                        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/" + this.property.dropSound );
                    }
                } );
            } else {
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 900, () => {
                    if ( this.getParent() ) {
                        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/drop_default.wav" );
                    }
                } );
            }
        }
    }



    // Item은 다른 오브젝트와 같은 위치에 있을 수 있다
    setTileXy( tileX,tileY ) {
        if ( this.lastTileX !=  this.tileX && this.lastTileY !=  this.tileY ) {
            [this.lastTileX, this.lastTileY] = [this.tileX, this.tileY]; // 이동방향 측정을 위해서 보관함
        }
        if ( this.addedToWorld ) {
            const x1 = this.tileX;
            const y1 = this.tileY;

            _global__WEBPACK_IMPORTED_MODULE_4__["default"].world.entityManager.removeEntity( this );
            this.tileX = tileX;
            this.tileY = tileY;
            _global__WEBPACK_IMPORTED_MODULE_4__["default"].world.entityManager.addEntity( this );
        } else {
            [this.tileX, this.tileY] = [tileX, tileY];
        }
    }

    getIcon( filtering,flip ) {
        const item = new Item( this.__key,{ filtering: filtering,flip: flip } );

        return item;
    }

    getTypeIcon() {
        const type = this.property.type || "etc";
        const [col,row] = Item.typeToIcon[type];
        const item = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_3__["default"]( Item.textureEquipSlot,col,row,16,16 );

        return item;
    }

    drop( x,y ) {
        this.equipped = false;
        const { x: px, y: py } = _global__WEBPACK_IMPORTED_MODULE_4__["default"].world.tileCenterToWorld( x, y );

        this.setPosition( px,py );
        this.tileX = x;
        this.tileY = y;
        _global__WEBPACK_IMPORTED_MODULE_4__["default"].world.entityManager.addEntity( this );
        this.showDrop();
    }

    isEquippable() {
        const type = this.property.type;

        if ( Item.typeEquipMax[type] && Item.typeEquipMax[type] > 0 ) {
            return Item.typeEquipMax[type];
        } else {
            return false;
        }
    }

    isRanged() {
        if ( this.property.type == "ranged" ) {
            return true;
        } else {
            return false;
        }
    }



    equip() {
        console.log( "장비장착",this.name );
        this.equipped = true;
    }

    unequip() {
        console.log( "장비해제",this.name );
        this.equipped = false;
    }

    getInventorySprite() {
        const spr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        const b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "itemPanel.png",false,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

        b.setAnchorPoint( 0.5,0.5 );
        const icon = this.getIcon();

        icon.setPosition( -60 + 16,1 );
        b.addChild( icon );
        b.setOverrideColor( this.color );
        const tw = _global__WEBPACK_IMPORTED_MODULE_4__["default"]["interface"].getHiresTextWrap( this.name );

        tw.setPosition( -60 + 29,-7 );
        tw.setTextColor( this.color );
        spr.addChild( b );
        spr.addChild( tw );

        if ( this.isEquippable() ) {
            spr.updateEquip = () => {
                if ( spr.equipIcon ) {
                    spr.equipIcon.removeFromParent();
                }
                const b1 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "itemTypeBack.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

                b1.setAnchorPoint( 0.5, 0.5 );
                b1.setPosition( 60 - 16, 0 );
                if ( this.equipped ) {
                    b1.setOverrideColor( 0xffffff );
                } else {
                    b1.setOverrideColor( 0x202020 );
                }
                const typeIcon = this.getTypeIcon();

                typeIcon.setOverrideColor( 0x000000 );
                b1.addChild( typeIcon );
                spr.addChild( b1 );
                spr.equipIcon = b1;
            };
            spr.updateEquip();
        } else {
            const typeIcon = this.getTypeIcon();

            typeIcon.setOverrideColor( 0x202020 );
            typeIcon.setPosition( 60 - 16,0 );
            spr.addChild( typeIcon );
        }

        return spr;
    }


    /*

	대미지 스트링
	최소값[~최대값][밸런스][바이아스] [/ 대형대상최소값[~최대값][밸런스][바이아스] ]

	1~10B+/2~10C-
	소형에 대해서 1~10대미지 밸런스는 B(==2.0)이고 bias는 0.6;
	대형에 대해서 2~10대미지 밸런스는 C(==1.75)이고 bias는 0.4;
	*/
    static parseDamageString( str ) {
        //string.match(str, "([^/]+)/?(.*)"
        let [, small, big] = /([^/]+)\/?(.*)/.exec( str );

        function parse( s ) {
            //let min,max,bal,bi = string.match(s,"(%d+)~?(%d*)(%a?)([%+%-]*)");
            let [, min, max, bal, bi] = /(\d+)~?(\d*)([A-E]?)([+-]*)/.exec( s );
            const balTable = {
                ["A"]: 3.0,
                ["B"]: 2.0,
                ["C"]: 1.75,
                ["D"]: 1.5,
                ["E"]: 1.25,
            };

            bal = bal ? balTable[bal.toUpperCase()] : 1.0;
            const biTable = {
                ["+++"]: 1.0,
                ["++"]:  0.75,
                ["+"]:   0.6,
                ["//-"]: 0.0,
                ["//"]:  0.25,
                ["-"]:   0.4,
            };

            bi = biTable[bi] != null ? biTable[bi] : 0.5;
            const _min = parseFloat( min );
            const _max = max == "" ? min : parseFloat( max );

            return [_min,_max,bal,bi];
        }
        big = big == "" ? small : big;
        const [min,max,bal,bi] = parse( small );

        return [min,max,bal,bi,...parse( big )];
    }

    calculateDamage() {
        const [min,max,bal,bi,min2,max2,bal2,bi2] = Item.parseDamageString( this.property.attack );
        const damage = _global__WEBPACK_IMPORTED_MODULE_4__["default"].world.randomGenerator.getDamage( bal,bi,min,max );

        return damage;
    }
}

/*
//테스트
Timer.delayedCall(100,function();
	log(Item.parseDamageString("1~30Z++"));
end);
*/

Item.property = {

    ["롱소드"]: {
        image:  [1, 1], type:   "melee",
        attack: "4~8B/4~9C",
    },
    ["브로드소드"]: {
        image:  [2, 1], type:   "melee",
        attack: "4~9C/4~9B",
    },
    ["도끼"]: {
        image:  [3, 1], type:   "melee",
        attack: "3~10E/3~10D",
    },
    ["크로우바"]: {
        image:  [4, 1], type:   "melee",
        attack: "2~6",
    },
    ["숏소드"]: {
        image:  [5, 1], type:   "melee",
        attack: "3~6B",
    },
    ["완드"]: {
        image:  [6, 1], type:   "melee",
        attack: "2~5",
    },
    ["완드2"]: {
        image:  [7, 1], type:   "melee",
        attack: "2~5",
    },
    ["전투도끼"]: {
        image:  [8, 1], type:   "melee",
        attack: "3~11E/3~11D",
    },
    ["손도끼"]: {
        image:  [10, 1], type:   "melee",
        attack: "3~11E/3~10D",
    },
    ["몽둥이"]: {
        image:  [11, 1], type:   "melee",
        attack: "2~8/2~7",
    },
    ["망치"]: {
        image:  [12, 1], type:   "melee",
        attack: "2~9/1~10",
    },
    ["나이프"]: {
        image:  [13, 1], type:   "melee", anim:   "stab",
        attack: "3~7C",
        desc:   "두 뼘 정도 길이의 칼. 턱이나 옆구리 등의 적의 급소를 찌르기 좋도록 되어있다.",
    },
    ["삼지창"]: {
        image:  [14, 1], type:   "melee", anim:   "stab",
        attack: "3~9C/2~10B",
    },
    ["대형망치"]: {
        image:  [15, 1], type:   "melee",
        attack: "3~9/2~10",
    },
    ["손에끼는"]: {
        image:  [16, 1], type:   "melee", anim:   "hand",
        attack: "1~6",
    },
    ["완드3"]: {
        image:  [17, 1], type:   "melee",
        attack: "2~5",
    },
    ["숏보우"]: {
        image:  [18, 1], type:   "ranged",
        attack: "2~7D/1~7C",
        desc:   "나무와 활시위의 탄성을 이용해 멀리 있는 적을 맞추는 무기. 서서 빠르게 쏠 수 있을 정도의 적당한 크기의 활이다.",
    },
    ["십자궁"]: {
        image:  [19, 1], type:   "ranged",
        attack: "2~7C/1~6B",
    },
    ["완드4"]: {
        image:  [2, 2], type:   "melee",
        attack: "2~5",
    },
    ["헬버드"]: {
        image:  [4, 2], type:   "melee",
        attack: "1~11C/2~12B",
    },
    ["지팡이2"]: {
        image:  [5, 2], type:   "melee",
        attack: "1~8",
    },
    ["새총"]: {
        image:  [6, 2], type:   "ranged",
        attack: "1~4",
    },
    ["창"]: {
        image:  [7, 2], type:   "melee", anim:   "stab",
        attack: "2~10C/2~10C",
    },
    ["창2"]: {
        image:  [8, 2], type:   "melee", anim:   "stab",
        attack: "2~10C/3~11C",
    },
    ["렌스"]: {
        image:  [9, 2], type:   "melee", anim:   "stab",
        attack: "4~10D/5~11C",
    },
    ["시미터"]: {
        image:  [10, 2], type:   "melee",
        attack: "5~8B",
    },
    ["팔시온"]: {
        image:  [11, 2], type:   "melee",
        attack: "4~9B",
    },
    ["모닝스타"]: {
        image:  [12, 2], type:   "melee",
        attack: "2~9",
    },
    ["철퇴"]: {
        image:  [13, 2], type:   "melee",
        attack: "3~9",
    },
    ["채찍"]: {
        image:  [14, 2], type:   "melee",
        attack: "1~10/1~12",
    },
    ["프레일"]: {
        image:  [15, 2], type:   "melee",
        attack: "1~11/2~13",
    },
    ["대형표창"]: {
        image:  [16, 2], type:   "melee",
        attack: "1~5E/1~4D",
    },
    ["표창"]: {
        image:  [17, 2], type:   "melee",
        attack: "1~4E/1~3",
    },
    ["부메랑"]: {
        image:  [18, 2], type:   "melee",
        attack: "1~6/1~5",
    },
    ["지팡이"]: {
        image:  [19, 2], type:   "melee",
        attack: "1~8",
    },
    ["맨손"]: {
        image:  [5, 3], type:   "hand", anim:   "hand",
        attack: "1~2/1",
    },
    ["채광삽"]: {
        image: [16, 5], type: "pickaxe", anim: "pickaxe", hitSound: "pickaxe_0.wav",
    },
    ["곡괭이"]: {
        image:    [20, 5], type:     "pickaxe", anim:     "pickaxe", hitSound: "pickaxe_0.wav",
        desc:     "광석을 부숴서 캐낼 수 있도록 만들어진 도구. 이것이 있으면 광물을 빨리 캘 수 있다.",
    },
    ["만돌린"]: {
        image:      [1, 15], type:       "instrument",
        desc:       "음유시인들이 많이 사용하는 소형의 악기이다. 울림통이 둥글고 8줄의 현을 가졌다.",
        instrument: "sound/mml_mandolin-a4.wav",
    },
    ["하프"]: {
        image:      [1, 15], type:       "instrument",
        desc:       "켈틱 하프, 이미지는 없어서 일단 만돌린처럼 생긴걸로 하자.",
        instrument: "sound/mml_celtic-harp-a4.wav",
    },
    ["레트로MSX"]: {
        image:      [1, 15], type:       "instrument",
        desc:       "8Bit FM 사운드가 나는 신묘한 악기",
        instrument: "sound/mml_retro-a4.wav",
    },
    ["레트로APPLE"]: {
        image:      [1, 15], type:       "instrument",
        desc:       "APPLE ][의 사운드가 연상되는 악기",
        instrument: "sound/mml_retro-apple-a4.wav",
    },
    ["악보1"]: {
        image: [2, 15], type:  "note",
        name:  '악보 "아추"',
        desc:  "재채기와 짝사랑은 숨길 수 없다는 내용의 가사가 담긴 노래의 악보",
        mml:   `
			MML@t128v15>>L4F2E2D.L8C16<B-16>C<B-AGG>C<F2ECD2<CDDD16E16v14o1G>GL16>EFGArGD<B-GD<B-GL8>C2C#2rA>DEFA>C4L16rv15FG>C<FG>L32C.<C.FG>CFG>C<CFG>CFG>C2&C8&C&C2L8ro4FF4v14o1B-4>B-<B-B->B-rC4.>C<CrCB-4<A4>A<AA4>A4D4>D<DrD>D4<<B-4>B-<B-B->B-rC4.>C<CrC>C4<C#4>C#<C#C#4>C#<D4>D4<AD>D<D4<B4>B<BB4>B4<B-4>B-<B-B-4>B-4<A4>A<AA4>A4D4>D<DD4>D4<<G>G<GA4A>A4<B->B-<B-B4B>B4C4>C<GCG>C<Cr>C<C4r4>C<C<B-4B-4>C4C4D-4D-A->E-4<E-.<A-.>A-<A-4A->A-<A-4A->A-<A-4A->A-<A-4G>G<G4G>G<G>C4>C<C>C<C>C<C>C<F>F<F>F<F>F<FE-4>E-<E->E-<E->E-<E-D4>D<DF#4>F#<F#G4>G<G-4F4<B-.A-.>A-<A-4A->A-<A-4A->A-<A-4A->A-<A-4G>G<G4G>G<G>C4>C<C>C<C>C<C>C<F>F<F>F<F>F<FE-4>E-<E->E-<E->E-<E-D4>D<DF#4>F#<F#F4>F<B->B-C4<B4v15o5C#4C#>C#4<<EEEED#D#>C#C#<BBA#16B.&BB>B<BA#B>C#DDC#C#16<G#.GG#>C#16<B.A4rAG#AB16>C#.&C#r4.C#D#E4EEED#<A#>D#C#4<BB4A#4B.>C#.&C#<G#.G#16rEEEED#D#>C#C#<BBA#16B.&BB.B16BA#B>C#DDC#C#16<G#.GG#>C#16<B.AA.A16AG#AB16>C#.&C#rC#C#C#D#E4EEED#<A#>D#C#4<BB4B4B4t76L16>>C#.<C#.F#B.<B.>EA.<A.>EL32o3rF#A>>CG#2.&G#&G#16.o2E.B.>EF#.G#16&G#64&G#2.&G#2.,
			v14>B-2G2F.r.rCr2<GF2r2v15F2E2D2E.E16F16G2F.E8C1.&&C2L8rCC4rEEFF4rEF4A4E4F4r4GFFEEDDCC4G4F4rEEFF4rEF4A4E4F4rB-B-B-B-AAGGFF4EEF4A4A.A16AGF16G16G4rEEEG>DC4.C.C16C<B-AG4AF4.AAAF4.G4.rF16G16AGFG4A4B-4.r4AGFG4.r2.F4E4F4G4A-4G4A-4B-.>C.&C<G.G16rE-E-E-E-DD>CC<B-B-A16B-.&B-B-.B-16B-AB->CD-D-CC16<G.F#G>C16<B-.A-A-.A-16A-GA-B-16>C.&C<A-.A-16r>CDE-4E-E-E-D<A>DC4<B-B-4A-4B-.>C.&C<G.G16rE-E-E-E-DD>CC<B-B-A16B-.&B-B-.B-16B-AB->CD-D-CC16<G.F#G>C16<B-.A-A-.A-16A-GA-B-16>C.&CrCCCDE-4E-E-E-D<A>DC4<B-B-2B.>C#16v14L4o2A1A1G#1>C#<C#C#C#8>C#16<F#8.F#F#F#8F#8EEEE8E8D#>L8D#<D#G4>G<GG#4>G#<G4F#4<B.A.>A<A4A>A<A4A>A<A4A>A<A4G#>G#<G#4G#>G#<G#>C#4>C#<C#>C#<C#>C#<C#>C#<F#>F#<F#>F#<F#>F#<F#E4>E<E>E<E>E<ED#4>D#<D#G4>G<GF#4F#F#4BF#<B4L16>>A.>E.A<G#.>E.F#<F#.>C#.E<<B1L32r8r.r.>>Et54<B>G#B>E>E1&E4.,
			v14<B-1C1<A2>F2<B->F8B-.&B-B-2B-2F2A2<D1&D1&D1L8rDD4>>rC2.CrC4CC4C4rC2.ArB-4AD4C4rC2.CrC4CC4C4rE2.DD4C4C2F2rD4E4.G.G16r>D4<G4.G4r>CCF4.F.F16rFEC<D4.E2rD4.D2rF4.F4DD<B-r1L4B-B-B-B->D-D-D-L8D-.E-.&E-C4rGGF4.F.F.rF.F.&FF.F.FFF4.E4F4E.E-.&E-C4rCCC4.E-4rA-GF#2L4ArF.G-E-L8F.G.&GC4rCC<B-4.>F.F.rF.F.&FF4rFFF4.E4D-4E.E-.&E-C.C.E-E-E-4.A-.A-.A-GF#2A4r4L4E-.FGrE.>G#r.<<B.r.rB.>>F#.r<F#FD#F8.E2&E16L8rEEE2r4AG#G2A#4r4F#4.G4E4F#.G#.&G#C#4rG#G#F#4.r2F#.F#2.r.F#4.F4D#4F.E.&EE4.EEE4.A4.AG#G2A#4r4A4EE4F#4F#4;
			`
    },
    ["악보2"]: {
        image: [2, 15], type:  "note",
        name:  '악보 "데스티니"',
        desc:  "에린을 바라보기만하는 이웨카의 안타까움이 담긴 노래의 악보",
        mml:   `
			MML@t106v15L8r16G#.ABB>C16C.&C<E.F#.&F#A.B.>D<B.BB16B16B16BAAG16GF#.r.D#16AGGA16B.G#ABB>C16C.&Cr16E.DCC<B16B.&BF#E16EB16B16B16BA16A.GGF#AG16G16E2>F#.E.<B>G.F#.&F#A.G.<A16>e16F.E.<A>F.E.<A>G.F.&F<G32>C#32E32A4.&A32r<FFF16F.<AB->CC<B-16>F.&FrB-.B-16D16E16FFFF16F.GEDDE16C.&CrG.A.FDDE16F.DEFDA16A.&ArF.A16F16G16AAAA16A.B-GF16G.&Gr4A4>E4F<FFF16F.<AB->CC<B-16>F.&F>C<A.B-16D16E16FFFF16F.EFG16A2&A16rAB-F#o1B>B<B>B<B->B-<B->B-<A>A<A>AD>D<D>D<G#>G#<G#>G#<A>A<A>A<D4>D<D4A>D<DG.>D16G4<CG>C<CF.>C16F<F<B->FB-<B-B.B16r4B.>BB.E>E<F#>F#<G#>G#<E4o4B>C16C.&Cr<F#GAAB16B.&Br4r16B16B16B16BAAG16GF#.r.D#16AGGA16B.G#ABB>C16C.&Cr16E.DCC<B16B.&Br4r16B16B16B16BA16A.GGF#AG16G16o2E>E<E>E<D>D<D>D<C>C<C>C<<B>B<B>BD>D<D>D<C>C<C>C<B->B-<B->B-<A2L32DA1.r4.r16.,
			v14r16L8D.DEG#.G.&GC.C.&CF#.F#.rG.G.&GE4E4D#4F#4r16E.ED#D4D4<<A.>AE16<AD.>D.<DG.>GD16<GCG>C<CF#4>F#<F#<B.>B.<B>E>E<E>E<D>D<D>D<C>C<C>C<<B>B<B>BD>D<D>D<C>C<C>C<<B->B-<B->B-<A2>D4>D4<DA>D4<G4>G.D16<G>DG<GC4>C.<G16C4>C4<F4>F.C16<F>CF4<<B-4>B-4<B->FB-<B-B4>B4<BB>B4C4>C.<G16C4>C4<C#4>C#.<A16C#A>C#<C#D4>D4<DA>D4<G4>G..D16<G>DG<GC4>C.<G16C4>C4<E-4>E-.<E-16DD>D<D>>v15A.G.GrGAEG.F.F4.DEFF16E.EFEGF16F16D2rAB-F#A.G.GrGAEG.F.F4FGFE.E.ED#.B.AAG#G#A16BG#.ABo1A4>A4DA>D<DG4>G<GCG>C<CF#4>F#4<<B4>B4E16>E<E16>E<F#G#>EG#<G#<A4>A4DA>D<DF4>F<FEB>E<E<A.>E16A4<B>F#B<Bo5F#.E.<B>F#.E.<B>G.F#.&F#A.G.<A16>E16F.E.<A>F.E.<A>G.F.&FL32rC#EA4.&Arr<<F#A>CE1&E4.r4.rrr,
			v14r16<L8E.F#G#<A2>D4.<F#G2>C2<F#4.AB2r16E.EF#G#.>E.&E>L4EGF#AAGL8<AG16G.&G>E.E<A.>E4D#4>F#.E.<BB.B.GB.B.&B>D#.D#.r<A.A.rA.A.rA.A.&Ar2<A.>C4r.F.A.B-.D16r4.F.F.<B-.B-16r4.>D.<B-.>C2rC.E.C.<A16r4.>A4.F2rD.D.F.C16r4.G.F.B-.C16r4E4A4A4r4.>C.<A.B-2rF.F.D2r<B-.>E-.F.D-16r4F#4C4>A.G.&GA.B-.&B->C.<F.&FE.F.&FF.E.&EF.E.&ED.<A.A.B-.><F4L2DDE-D<AB>E<B4>E4L8E-.G.CE-.E-.CE.F#.>D<B4E4E.CC.<B.>D.rE16>E.ED#D<E.G.D.G.CF#.F#.DA.F.AA.G#.&G#E4ECD#<B.B.L2>GGBAAAAG;
			`
    },
    ["악보3"]: {
        image: [2, 15], type:  "note",
        name:  '악보 "안녕"',
        desc:  "언제나 너의 뒤에서 몰래 바라봤다는 노래의 악보",
        mml:   `
			MML@t90t125>L4GFL8E-.G.C4.>C4.<FGA-2&A->C2<C4.<B16>C16DCDE-4.GF4.CD4.FE-4G4A-2&A-A-GE-<B-2&B-r<B-L16>E-FGB-v13L8o1A-rA->A-<A->A-<A->A-<B->B-<B->B-<B->B-<B-A-G>G<G>G<G>G<G>GC>C<C>C<C>C<C<B-A->A-<A->A-<A->A-<A->A-<B->B-<B->B-<B->B-<B->B-C>C<C>C<C>C<C>C<<G>G<G>G<G>G<G>G<A->A-<A->A-<A->A-<A->A-<B->B-<B->B-<B->B-<B-A-G>G<G>G<G>G<G>GC>C<C>C<C>C<C<B-A->A-<A->A-<A->A-<A->A-<B->B-<B->B-<B->B-<B->B-C>C<C>C<C>C<C>C<<G>G<G>G<G>G<G>G<A-4A-4A->A-GF4.F4FCFC4.C4C4C4<B-4.>CrC>C4<F4F>F<F>F<F4<B->B-<B->B-<B->B-<B-4>E>E<E>E<E>E<EA4A<A>A<AB>C+<A>D4D<B4>B<B>C4.C<A4>A<AG4>G<G>G<G>G<G>C4>C<C>C<C>C<C>C<F4F>F<F>F<F4<B->B-<B->B-<B->B-<B-4>E>E<E>E<E>E<EA4A<A>A<AB>C+<A>D4D<B4>B<B>C4.C<A4>A<AG4>G<G>G<G>G<G>C4>C<C>C<C>C<C>C<<B->B-<B->B-<B->B-16<B-.>B-<B->B-<B->FB-4<B-4A>A<A>A<A>A16<A.>A<A->A-<A->FA-4<A-4G>G<GA4>A<AB-4>B<B-B4>B<B>C4.>C<C>C<C>C<C4.r2.o5v14F4ACACAB-2&B-B-4.E4<G>EB-2D4<A>D<G4.L16AB>CEF4L4A8GDE.G8F>C8<A8B-.&B->D.<<L16v12C8.<B>CDEDEFGFGA>C4v14o2L8><F4F>F<F>F<F4<B->B-<B->B-<B->B-<B-4>E>E<E>E<E>E<EA4A<A>A<AB>C+<A>D4D<B4>B<B>C4.C<A4>A<AG4>G<G>G<G>G<G>C4>C<C16>C<C16>C<G16>C16<C4o6v15DEFCEF<B>EF<B-2&B-<A1&A4F1.&F1&F1r1,
			v14B-A-L8G.B-.E-4.>C4.r4C2&CF2<F2FE-FG4.GF4.CB-4.FB-4B-4>C2&C<A-GE-<B-2&B-<B-<B->B-16F16<B-o5E-rv15<B-4B-4A-GGFE-16F.r4E-FGA-GFrE-E-FGE-F4G4B-4B-rB-B-B-4B-B-B-A-G4r4FE-G4GA-GFF4r4E-FGE-E-4>E-r<B-B-B-4B-B-B-4B-4r4E-FGA-GFFE-E-E->C4<G4F4G4B-rB-B-B-4B->E-DC<B-4r4E-FGA-GFF4E-E->E-4DCC4D4G4<B->E-4D<A-A-4.A->E-4D<GG4.G>E-4D<FF4.rF4G4.>>C4<<AAAAB->C4C<B-B-AB-16AFG.&GGGGGAB-4B-B->C<AGFF4.AG4D4E4.GF4>C<AB-2&B-<B->DFB-4B-AAGFGGA4AAAAB->C4C<B-B-AB-16AFG.&GGGGGAB-4B-B->C<A>DEEF4<AGG4>FEE4<GF4>ECCD4r16D.DC<B-A4B-G2<B-4>>F4<AAA4AB-AGG4>C4<FFAAAB-AGGFF4G4E-4F4DEFF4GAA4GFFr>D<AG2&GFG>D<F4.r2.>C4<AAAAB->C4C<B-B-AB-16AFG.rGGGGAB-4B-B->C<AGFF4.AG4D4E4.GF4>C<AB-2&B-<B->DFB-4B-AAGFGGA4AAAAB->C4C<B-B-AB-16AFG.&GGGGGAB-4B-B->C<A>DEEF4<AG4.>FE4.<GF4>ECCD4r16D<F16>DC<B-A4B-G4>C2o3L4B-.A.A-.G.&GC1&C<F1.&F1&F1,
			v14<L8E-2.&E-E-1D1&D<G1>C4.<A2B-2G2F2&F>F4.<B-2&B-r2>>B-rE-2.r<B-2.rB-rB-rB-2rB-2.r>E-rE-2.rE-2.rE-rE-2.r<B-2r>B-4B-rE-2.rE-2.rE-rE-4<B-2r>Gr2B-4E-rE-2.rE-2.rE-1rF2.r>C4.A-2F1&F<E-1<L4B-.>CC.>A2<F.>F.DCr8G.&G<D.>D.&DA2F.GDE2F2B-.r16D8.D.>C.r16<F8.F2>C2.r8<F.DC.G.&G<D>D2&DA2<A.>GD<G2>F2B-.r2r8>C.r16<F8.FrA2&A.G.&G>C<AG2&G.<C.Dr2<B-.>C2D2D2>C1C.r2.o2Fo4F2C8<B->GG.&Go2Er.r>A.&A2.<D.<B2>>C8<C.<A2>G8<G>GL8GAB->C<C4r4.C16G16>C4o6L4C2<<F.>F.DC.G1D.rA2<A.>GD<G2>F2B-.r<B-.>B-.&B->C2<F.F.F.D.&D<E1r<A1.;
			`
	
    },
    ["악보4"]: {
        image: [2, 15], type:  "note",
        name:  '악보 "너무너무너무"',
        desc:  "너무너무너무 자꾸자꾸자꾸 보고 싶어지라는 염원을 담은 노래의 악보",
        mml:   `
			MML@t190v12<cegel8cegec2r2.b4ggggggr2ggggggggggggr2g4.gggbbaaggf+f+ee<bbaal4ggab>ed16el8&e.r4bbggggggr2ggggggggggggr2g4.gggbbaaggf+f+ee<bbaal4ggab>ed16el8&e.r2.f+gggg4gee4r4gggel4ere8d8egbarl8ef+f+f+f+4f+dl4drd8d8degggal8agg4r4f+ggggggee4r4gggel4ere8d8egbarl8ef+f+f+f+4f+dl4drd8d8bb+bbag8f+8f+grbggl8gggggga4a4.br1r4ggf+d4dr4ggf+d4dr4ddl4bb+bbagf+gd16b8.>bggl8ggggggl4aa.ba8r1g<c-32f+8&f+16.>d8d8rgf+d8d8rd8d8bb+bbagf+gl8<ggggggr2ggggggggggggr2g4.gggbbaaggf+f+ee<bbaal4ggab>ed16el8&e.r4bbggggggr2ggggggggggggr2g4.gggbbaaggf+f+ee<bbaal4ggab>ed16e2.&e8.,
			l16<<c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&c&cr2l4r.v9<<e8>c.>g.c<c2cc<a.>>e.<a<a2aab.>>f+.<b<b2>bde2eeeeee8e8c2>g8c8r<c2>gc<<a2>>e8c8r<<a2aab2n30>b<b2>bde2eeeeel8ee>cgb2.g2g4c4<<a4.>>e4<a>er<a>egeb4a4c-f+a2.f+4.<bbl4c-.ebd+>d+8<d+8dac+>c+8<c+8c8.r16c>g2g2gc<<a.>>e<a8>e8r8n9e<a.>a8<<bb>>f+2l4.f+<b8b8c-ebl8>e<eeb>e4.e<e4>cgl2b.<cl4>ee<<a32>a&a16.>e32g&g16.<a<a.>a.rg1>dagf+l8<eb>e2gel4.<e>ec-8e8<c>gl4c<ccc2<a32>a&a16.>e32g&g16.<a<a8>a>e32g8&g16.<ar8g2>g8<g.<g2>>f+8d8<g<e.>>e.<eeeee8e8c.>e.c<c2cc<a.>>e.<a<a2aab.>>f+.<b<b2>bde2eeeeeec2>g8c8r<c2>gc<<a2>>e8c8r<<a2aav12l8o4bbaaggf+f+ee<bbaal4ggab>ed16e2.&e8.,
			r1.r1rv10<<b8<e8>c.b.rc2cc<a.>g.r<a2aab.>a.rc-2f+de2eeeee>e8e8<c2b8r.c2br<a2>a8r.<a2aab2>arc-2f+de2eeeeel8eer4>deer4.<b2b4r4<a>>cc<g4rgrl4>ccecr1<a.r2r.er2.dr2c8.r16c32l16.>de8c-32er4.<b2b4r4<a8>>c8c8<g4r8g32b+r8<a32>>c8&c<g32>c8&cl4<ba<bb>a2a.r1e.rb32>e8&e16.<babr>eee<c2ggr1r1f+1r1>dddddddd<c32l8>e&e16.bc-g4g4ggggggl4aa.ba8r1g<g>d8d8rgf+d8d8rdbb+bbagf+gl8ccccccl4r<c>c8c8<cc<a.>g8>c8c8r<<an36aab.>a.rc-2f+de2eeeeel8>>bbggggggr4<<c4>>ggggggggggggl4rn21g.g8g8g8o0b2n30>b<b2>bde2eeeee2;
		`
    },
    ["악보5"]: {
        image: [2, 15], type:  "note",
        name:  '악보 "픽미"',
        desc:  "많은 사람들 중에서 나를 뽑아 달라는 내용의 노래의 악보",
        mml:   `
			MML@t90v15L32E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&E&Et128v14L8rEo2E>ErErErErErErErE<E>ErErErErErErErE<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<Er2.rE>E<E>E<E>E<E>E<E>E<E>E<E>E<E16B16>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E16B16>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E16B16>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E16B16>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E16B16>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E16B16>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E16B16>E<E>E<E>E<E>E<E>E<E>E<E16>E.<ErE4L8EEEEEEEE<AAAABBL16B>B<B>BL8EEEEEEEE<AAAABBL16B>B<B>BE8E8E>E<E>E<E8E8E>E<E>E<<A>A<A>A<A>A<A>A<B>B<B>BB4E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<r1L8E>E<E>E<E>E<E16B16>E<E>E<E>E<E>E<E16B16>E<E>E<E>E<E>E<E16B16>E<E>E<E>E<E>ErE<E>E<E>E<E>E<E16B16>E<E>E<E>E<E>E<E16B16>E<E>E<E>E<E>E<E16B16>Er1<F#F#GGG#G#AAAAA#A#BB>CC#DD#EFF#GG#Ar1L4<EEEEEEEEEEEEEEEEL8E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<L16E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<r1L8E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<L16E>E<E>E<E>E<E>E<L32E>E<E>E<E>E<E>E<E>E<E>E<E>E<E>E<L8E,
			r1.v15L8BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#BG#r1rBBBBBAG#AB4Br4.ErBBBBBAG#AB4Br4.ErBBBBBAG#AB4BrBABG#4B4BB4BrB4BBBB4rBBBBBAG#AB4Br4.ErBBBBBAG#AB4Br4.ErBBBBBAG#AB4B4BABG#4B4BB4BrB4BBBB4E4F#4G#EEA4A4G#ABB4E4F#4G#EEA4A4G#ABB4E4F#4G#EEA4A4G#A4BG#G#2rBrBrEEEG#EE4BG#BG#EF#G#4BG#BG#EF#G#4BG#BG#BG#BG#BG#BG#EF#G#4BG#BG#EF#G#4BG#BG#EF#G#4BG#BG#BG#BG#rBBAA4BG#v14C#C#DDD#D#EEEEFFF#F#GG#AA#B>CC#DD#Ev15r<BBAA4B4E4E4E.E.ErE4EE.E.&EE4E4E.E.E>E4E4F#4EF#<E4E4E.E.ErE4EE.E.&EE4E4E.E.ErBBBA4B4E>E<E>E<E.>E.<ErEE>E<E.>E.<EE>E<E>E<E.>E.<E>E4E4F#4EF#<E>E<F>F<F#.>G.<GG#>G#<A>A<A#.>B.<B>C>C<C#>C#<D.>D#.<D#r<BBBA4B4L4G#rG#rG#rv13G#rv11G#rv9G#rv7G#rv5G#r2.,
			r1.v14r1.rE8E8r1.r.E8r1.rE8E8r1.r1r.E8r1.r.E8r1.r.E8r2r.E8r2r.E8r2r.E8r.E8r.E8r.E8r.E8r.E8r.E8r.E8r2r.E8r.E8r.E8r.E8r.E8r.E8r.E8r2L8r>ErErErErErErErErErErErErErErErErErErErErErErErErErErErEr1<rErErErErErErErErErErErErErErErErErErErErErErErErErErErEr1v15L4G#rArBr>C#rL8DD#EFF#GG#Ar1<<B4B4B.B.BrB4BB.B.&BB4B4B.B.B>L4GGAB<BBL8B.B.BrB4BB.B.&BB4B4B.B.Br1r2r.>E.r2r.rE.r2r.rE.rG4G4A4B>Cr2F#.<G.r2r>A#.<B.r2r>>D.<D#.rr1;
		`
    },
    ["골드"]:        { image: [1, 14], effect: "gold", dropSound: "drop_gold.wav", dropSoundImm: true, getSound: "get_gold.wav", bundle: "gold" },
    ["물"]:         { image: [1, 1], type: "potion", desc: "투명한 액체이다.", uname: "투명한 물약" },
    ["파이어볼트 스크롤"]: { image: [1, 1], type: "scroll", desc: "투명한 액체이다.", uname: '스크롤:"제오스라"' },
    ["파이어볼트 지팡이"]: { image: [1, 1], type: "melee", desc: "투명한 액체이다.", uname: "커브가 새겨진 지팡이" },
    ["파이어볼트 마법책"]: { image: [1, 1], type: "book", desc: "투명한 액체이다.", uname: "화려한 커버의 책" },

};


Item.texture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Items.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );
Item.textureFiltered = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Items.png", true, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );
Item.textureEquipSlot = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "equipSlot.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );
Item.width = 16;
Item.height = 24;
Item.tileWidth = 16;
Item.tileHeight = 24;
Item.perRow = Math.floor( Item.texture.width / Item.tileWidth );
Item.rarityColor = [
    0xffffff,  	// 회색
    0x00a651,	// 녹색
    0x00aeef,	// 파랑
    0x9e005d,	// 보라색
    0xfff200,	// 노랑색
];

Item.typeToIcon = {
    ammor:      [1, 1],
    helm:       [2, 1],
    boots:      [3, 1],
    pants:      [4, 1],
    melee:      [5, 1],
    ranged:     [6, 1],
    shield:     [7, 1],
    belt:       [8, 1],
    accessory:  [9, 1],
    ring:       [10, 1],
    pickaxe:    [11, 1],
    instrument: [12, 1],
    note:       [13, 1],
    food:       [12, 1],
    potion:     [13, 1],
    scroll:     [14, 1],
    key:        [15, 1],
    book:       [16, 1],
    usable:     [1, 2],
    etc:        [2, 2],
    hand:       [3, 2],
};

Item.typeEquipMax = {
    ammor:      1,
    helm:       1,
    boots:      1,
    pants:      1,
    melee:      1,
    ranged:     1,
    shield:     1,
    belt:       1,
    accessory:  1,
    ring:       2,
    pickaxe:    1,
    instrument: 1,
    note:       1,
};



Item.gold = "골드";
Item.bareHand = "맨손";




Item.validIdList = [];
for ( const k in Item.property ) {
    const v = Item.property[k];

    if ( k ) {
        Item.validIdList.push( k );
    }
}



/***/ }),

/***/ "./games/Avalonika/src/entity/monster.js":
/*!***********************************************!*\
  !*** ./games/Avalonika/src/entity/monster.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Monster)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _effect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../effect */ "./games/Avalonika/src/effect.js");
/* harmony import */ var _world_elemental__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../world/elemental */ "./games/Avalonika/src/world/elemental.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _lib_mabiMML__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lib/mabiMML */ "./engine/src/lib/mabiMML.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _lib_colors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lib/colors */ "./engine/src/lib/colors.js");
/* harmony import */ var _creature__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./creature */ "./games/Avalonika/src/entity/creature.js");
/* harmony import */ var _entity__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./entity */ "./games/Avalonika/src/entity/entity.js");
/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./item */ "./games/Avalonika/src/entity/item.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");

















// 몬스터를 상속한 클래스들이 모두 AI를 사용한다.
const AI = {};

/**
 * @this Monster
 *
 * @param {Entity} target
 * @param {number} dist
 */
function decideFollow( target, dist ) {
    // 난 따라다니는 중이다
    const followDist = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getDistanceBetweenEntities( this, this.follow );

    if ( followDist > this.senseDistance ) {
        // 너무 머니까 정확히 따라가야해
        console.log( this.mode );

        if ( this.mode != "followExatly" ) {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.addLog( "%s{가} %s{를} 찾아 나섰다.", this.getName(), this.follow.getName() );
        }

        this.mode = "followExatly";
    } else if ( followDist > this.senseDistance * 0.5 ) {
        // 너무 머니까 따라가야해
        if ( this.mode != "followFast" ) {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.addLog( "%s{가} %s{를} 따라온다.", this.getName(), this.follow.getName() );
        }

        this.mode = "followFast";
    } else if ( followDist > 1 ) {
        // 따라가야해
        this.mode = "followSlow";
    } else {
        // 아니면 방황
        this.mode = "roaming";
    }
}

/**
 *
 *
 * @this Monster
 * @param {Entity} target
 * @param {number} dist
 */
function decideSchedule( target, dist ) {
    const sc = this.getSchdule();
    let place = this.places[sc.place];

    if ( !place ) {
        // 못찾았으면 월드에서 찾아본다
        place = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.places[sc.place];
    }

    if ( !place ) {
        console.log( this.places );
        console.log( "장소를 찾을 수가 없다.", sc.place );
    }

    if ( this.mode != "moveToPlace" ) {
        const dist = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getDistance( this.tileX, this.tileY, place.x, place.y );

        if ( dist <= ( sc.radius || this.senseDistance * 0.5 ) && this.canSee( place.x, place.y )[0] ) {
            // 도착
            this.mode = sc.action;
        } else {
            console.log( sc.place, "로 이동시작" );
            this.mode = "moveToPlace";

            if ( this.path == null || this.path.length == 0 ) {
                this.path = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.pathManager.findPath( this.tileX, this.tileY, place.x, place.y, true );
            }
        }
    }
}


class Monster extends _creature__WEBPACK_IMPORTED_MODULE_8__["default"] {
    constructor( name, tileX, tileY, options ) {
        super( name, tileX, tileY, options );
        this.isMonster = true;
        console.assert( Monster.property[name],`${name}이라는 몬스터의 정보가 없다.` );
        this.fillProperties( Monster.property, name );
        const pr = this.property;

        this.senseDistance = pr.senseDistance || 6;
        this.weaponRange = pr.weaponRange || 1;
        this.AI = pr.AI || "default";
        this.hpMax = pr.hp || 1;
        this.hp = this.hpMax;
        this.texture = _creature__WEBPACK_IMPORTED_MODULE_8__["default"].texture;
        this.tileWidth = _creature__WEBPACK_IMPORTED_MODULE_8__["default"].tileWidth;
        this.tileHeight = _creature__WEBPACK_IMPORTED_MODULE_8__["default"].tileHeight;
        this.mode = undefined;

        this.postInit( Monster );
    }

    getWeaponImage( flipX,flipY ) {
        return null;
    }


    processAI() {
        if ( this.target && !this.target.addedToWorld ) {
            this.target = null;
        }

        if ( this.follow && !this.follow.addedToWorld ) {
            this.follow = null;
        }

        const dist = this.target && _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getDistanceBetweenEntities( this, this.target );
        // 타겟과 거리를 미리 계산해서 넣어준다.
        const mode = this.mode;

        AI[this.AI]( this, this.target, dist );
        this.lastMode = mode;
    }

    calculateDamage() {
        const [min, max, bal, bi, min2, max2, bal2, bi2] = _item__WEBPACK_IMPORTED_MODULE_10__["default"].parseDamageString( this.property.attack );
        const damage = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.randomGenerator.getDamage( bal, bi, min, max );

        return damage;
    }

    stop() {
		
    }

    attack( cr, dmg ) {
        this.stopPreviousAction( "attack" );
        const { x: x1, y: y1 } = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.tileCenterToWorld( this.tileX, this.tileY );
        const { x: x2, y: y2 } = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.tileCenterToWorld( cr.tileX, cr.tileY );
        const [dur, hitDur] = new _effect__WEBPACK_IMPORTED_MODULE_2__["default"]( "claw", x1, y1, x2, y2, true, this.getWeaponImage( true, true ), this ).getDuration();

        cr.stop();
        cr.damage( dmg, this, x1, y1, hitDur || dur );
        _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.wait( 300 );
    }

    death( dmg, attacker, fromX, fromY, hitDur, sound ) {
        hitDur = hitDur || 0;
        //dmg는 이미 hp에 적용이 된 상태
        this.enableDefaultAnimation( false );
        this.shadowMesh.removeFromParent();
        this.detachFromWorld();
        new _effect__WEBPACK_IMPORTED_MODULE_2__["default"]( "death", fromX, fromY, this.getX(), this.getY(), this, attacker, hitDur );
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( hitDur, () => {
            this.stopPreviousAction( "death" );
            this.enableDefaultAnimation( false );
            _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].addLog( "%s{를} 공격하여 <yellow>%d</yellow> 대미지!", this.getName(), dmg );
            _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].addLog( "%s{를} 쓰러뜨렸다!", this.getName() );
            this.refreshGauge();
            const p = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Particles();

            p.setTexture( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Blood.png", false ) );
            console.log( "사망", this.getPosition() );

            for ( let i = 1; i <= 10; i++ ) {
                //p.addParticles(0,0,50,90,60,10,10);
                const angle = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,359 );
                const speed = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,6 );
                let x, y = this.getPosition();

                //x = x; // GLOBAL.world.viewWidth/2;
                //y = y; // GLOBAL.world.viewHeight/2;
                p.addParticles( [
                    {
                        x:            x, y:            y, size:         _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 4, 30 ),//this.getX(),y=this.getY(),size=20,
                        angle:        angle,
                        ttl:          60 + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,100 ),
                        speedX:       Math.cos( angle ) * speed,
                        speedY:       Math.sin( angle ) * speed,
                        speedAngular: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,30 ) - 15,
                        decay:        0.5,
                        color:        0x400000,
                        alpha:        1.0,
                    }
                ]
                );
            }

            _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.floorLayer.addChild( p );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( sound || "sound/damage_0.wav" );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/finish_1.wav" );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 5000, () => {
                p.removeFromParent();
                this.removeFromWorld();
            } );
        } );

        if ( this.property.explosion ) {
            if ( this.property.explosion == "water" ) {
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/explosion_water.wav" );
                new _effect__WEBPACK_IMPORTED_MODULE_2__["default"]( "boom", this.getX(), this.getY(), 20, 350, hitDur, 0x0000ff );
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.elemental.addElemental( _world_elemental__WEBPACK_IMPORTED_MODULE_3__["default"].WATER, this.tileX, this.tileY, 10 );
            } else if ( this.property.explosion == "fire" ) {
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/explosion_fire.wav" );
                new _effect__WEBPACK_IMPORTED_MODULE_2__["default"]( "boom", this.getX(), this.getY(), 50, 300, hitDur, 0xff9000 );
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.elemental.addElemental( _world_elemental__WEBPACK_IMPORTED_MODULE_3__["default"].FIRE, this.tileX, this.tileY, 10 );
            } else if ( this.property.explosion == "poison" ) {
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/explosion_gas.wav" );
                new _effect__WEBPACK_IMPORTED_MODULE_2__["default"]( "boom", this.getX(), this.getY(), 30, 400, hitDur, 0xff00ff );
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.elemental.addElemental( _world_elemental__WEBPACK_IMPORTED_MODULE_3__["default"].POISON, this.tileX, this.tileY, 10 );
            }
        }

        // 이걸 오버라이드해서 쓴다
        this.afterDeath( dmg, attacker, fromX, fromY, hitDur, sound );
    }

    afterDeath( dmg, attacker, fromX, fromY, hitDur, sound ) {
        _global__WEBPACK_IMPORTED_MODULE_11__["default"].player.exp = _global__WEBPACK_IMPORTED_MODULE_11__["default"].player.exp + 1;
        const numOfDrop = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,4 );
        const floorList = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.pathManager.getSplashFloor( this.tileX, this.tileY, numOfDrop );

        for ( let i = 0; i < numOfDrop; i++ ) {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.addEntity( new _item__WEBPACK_IMPORTED_MODULE_10__["default"]( _item__WEBPACK_IMPORTED_MODULE_10__["default"].gold, floorList[i].x, floorList[i].y, {
                amount:    _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,30 ),
                drop:      true, dropX:     this.tileX, dropY:     this.tileY,
                dropDelay: ( numOfDrop - i ) * 100 + hitDur,
            } ) );
        }

        if ( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,3 ) == 1 ) {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.addEntity(
                new _item__WEBPACK_IMPORTED_MODULE_10__["default"]( _item__WEBPACK_IMPORTED_MODULE_10__["default"].validIdList[_global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 0,_item__WEBPACK_IMPORTED_MODULE_10__["default"].validIdList.length - 1 )], this.tileX, this.tileY, {
                    drop:      true, dropX:     this.tileX, dropY:     this.tileY,
                    dropDelay: 100 + hitDur,
                } ) );
        }
    }


    damage( dmg, attacker, fromX, fromY, hitDur, sound ) {
        hitDur = hitDur || 0;
        this.hp = this.hp - dmg;

        if ( this.hp <= 0 ) {
            this.death( dmg, attacker, fromX, fromY, hitDur, sound );
        } else {
            let mood;

            if ( !this.target ) {
                this.target = attacker;
                mood = "!";
            } else if ( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,Math.floor( this.hp / 10 ) + 1 ) == 1 ) {
                this.target = attacker;
            }

            new _effect__WEBPACK_IMPORTED_MODULE_2__["default"]( "damage", fromX, fromY, this.getX(), this.getY(), this, attacker, hitDur );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( hitDur, () => {
                this.showMood( mood );
                this.stopPreviousAction( "damage" );
                _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].addLog( "%s{를} 공격하여 <yellow>%d</yellow> 대미지!", this.getName(), dmg );

                if ( attacker == this.follow ) {
                    _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.addLog( "%s{가} %s의 공격을 받고 화가 났다!", this.getName(), attacker.getName() );
                }

                this.refreshGauge();

                if ( sound ) {
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/" + sound );
                } else {
                    console.log( "사운드 지정 안됨" );
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( sound || "sound/damage_0.wav" );
                }
            } );
        }
    }


    //---------------------------------------------------------------

    getSchdule( hour, min ) {
        if ( this.property.schedule == null ) {
            return;
        }

        let ti;

        if ( hour ) {
            ti = { hour: hour, min: min || 0 };
        } else {
            ti = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getDateTime();
        }

        let sc;

        console.log( `게임 내의 시간 ${ti.hour}시 ${ti.min}분` );

        for ( let i = this.property.schedule.length - 1; i >= 0; i-- ) {
            const v = this.property.schedule[i];

            if ( v.hour < ti.hour || ( v.hour == ti.hour && v.min <= ti.min ) ) {
                // 약속시간
                sc = v;
                console.log( "스케쥴 결정", sc.hour, sc.min, "부터", sc.place, "에 있어야 한다." );
                break;
            }
        }

        if ( sc == null ) {
            sc = this.property.schedule[this.property.schedule.length - 1];

            if ( sc == null ) {
                console.log( "스케쥴을 찾을 수가 없다. 이건 데이터를 잘못 작성한 것임." );
            }
        }

        return sc;
    }


    // 가능한 몬스터 목록
    static pickMonsters( attrib ) {
        const t = [];

        for ( const k in Monster.property ) {
            const v = Monster.property[k];

            if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.filterAttrib( attrib, v.whiteAttrib, v.blackAttrib ) ) {
                t.push( k );
            }
        }

        return t;
    }

    static parseMonsterList( str ) {
        const t = str.split( "," );
        let mustCount = 0;

        for ( const i in t ) {
            const v = t[i];
            //let [,type, name] = string.match(v, "([%a%?]?)(.*)");
            const [, type, name] = /([a-zA-Z?]?)(.*)/.exec( v );

            t[i] = { name: name, type: ( type == "" ? null : type ) };

            if ( type != "?" ) {
                mustCount = mustCount + 1;
            }
        }

        return [t, mustCount];
    }
}

//---------------------------------------------------------------


AI.trackFast = function ( self, target, dist, dir ) {
    dir = dir || 1;
    // 매턴 추적
    let [ax, ay] = [Math.sign( target.tileX - self.tileX ), Math.sign( target.tileY - self.tileY )];
    const mpH = self.getPropertyRel( ax, 0 );
    const cpH = self.getEntityPropertyRel( ax, 0 );
    const mpV = self.getPropertyRel( 0, ay );
    const cpV = self.getEntityPropertyRel( 0, ay );

    if ( mpH.wall > 0 || cpH ) { // 가야되는데 막힌 경우
        if ( ay == 0 ) { // 같은 줄이면 랜덤하게 우회
            ay = ( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,2 ) - 1 ) * 2 - 1;
        }
    }

    if ( mpV.wall > 0 || cpV ) {
        if ( ax == 0 ) { // 같은 줄이면 랜덤하게 우회
            ax = ( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,2 ) - 1 ) * 2 - 1;
        }
    }

    if ( ax == 0 || ay == 0 ) {
        //
    } else {
        if ( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,2 ) == 1 ) {
            ax = 0;
        } else {
            ay = 0;
        }
    }

    const mp = self.getPropertyRel( ax * dir, ay * dir );
    const cp = self.getEntityPropertyRel( ax * dir, ay * dir );

    if ( mp.wall > 0 || cp ) {
        //log("move",ax,ay,"blocked");
    } else {
        self.moveToRel( ax * dir, ay * dir );
    }
};

AI.trackSlow = function( self,target,dist,dir ) {
    // 좀 천천히 트랙함
    if ( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,4 ) > 1 ) {
        AI.trackFast( self,target,dist,dir );
    }
};

AI.trackExactly = function( self,target,dist,dir ) {
    if ( dist <= self.senseDistance && self.canSee( target.tileX, target.tileY ) ) {
        // 보이는 거리이므로 여기까지
    } else {
        if ( !self.path || self.path.length == 0 ) {
            self.path = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.pathManager.findPath( self.tileX,self.tileY,target.tileX,target.tileY,true );
        }

        if ( self.path && self.path.length > 0 ) {
            const [tx, ty] = [self.path[0].x, self.path[0].y];

            self.path.shift();

            if ( self.path.length == 0 ) {
                self.path = null;
            }

            if ( !self.moveTo( tx, ty ) ) {
                // 못찾음
                console.log( self.getName(), "길이 막혔음", target.getName() );
                self.path = null;
            }
        } else {
            // 이동 못함
            console.log( self.getName(),"타겟에 이르는 길을 못찾음",target.getName() );
        }
    }
};

AI.followFast = function( self,target,dist,dir ) {
    AI.trackFast( self,self.follow,dist,dir );
};

AI.followSlow = function( self,target,dist,dir ) {
    if ( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,4 ) > 1 ) {
        AI.trackFast( self,self.follow,dist,dir );
    }
};

AI.followExatly = function( self,target,dist,dir ) {
    dist = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getDistanceBetweenEntities( self,self.follow );
    AI.trackExactly( self,self.follow,dist,dir );
};

AI.retreatSlow = function( self,target,dist ) {
    // trackSlow의 반대
    return AI.trackSlow( self,target,dist,-1 );
};

AI.retreatFast = function( self,target,dist ) {
    // trackFast의 반대
    return AI.trackFast( self,target,dist,-1 );
};

AI.moveToPlace = function( self,target,dist ) {
    if ( self.path && self.path.length > 0 ) {
        // 이동한다.
        const [tx, ty] = [self.path[0].x, self.path[0].y];

        self.path.shift();

        if ( self.path.length == 0 ) {
            self.path = null;
        }

        if ( !self.moveTo( tx, ty ) ) {
            // 이동을 못하면. 플레이어라든가 프랍이라든가 각종 여러 이유로 못감
            console.log( self.getName(), "길이 막혔음" );
            self.path = null;
        }
    } else {
        // 한번 더 디사이드를 불러주면 action을 수행할 것이다.
        self.mode = null;
        decideSchedule.call( self,target,dist );

        if ( !self.mode ) {
            self.mode = "roaming";
        }

        console.log( self.getName(),"path가 끝났음. 다음은 ",self.mode );
    }
};

AI.roaming = function( self,target,dist ) {
    // 의미 없이 돌아 다님
    // 벽이 있으면 그냥 안감
    const [ax,ay] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.dirToOffset( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,4 ) );
    const mp = self.getPropertyRel( ax,ay );
    const cr = self.getEntityPropertyRel( ax, ay );

    if ( mp.wall > 0 || cr ) {
    } else {
        self.moveToRel( ax,ay );
    }
};
	
AI.stop = function( self,target,dist ) {
    // 아무 것도 안함
};

AI.attack = function( self,target,dist ) {
    // 그냥 적을 때림
    self.attack( target,self.calculateDamage() );
};

AI.searchTarget = function( self,target,dist ) {
    // 타겟을 수색
    AI.roaming( self,target,dist );
};

AI.sleep = function( self,target,dist ) {
    if ( self.lastMode == self.mode ) {
        return;
    }

    self.enableDefaultAnimation( false );
    //self.changeImage(14,23);
    const timer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer( 1000 );

    timer.start();
    timer.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.TIMER, () => {
        const b = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_4__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "fx.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ), 11, 4, 16, 24 );
        const mc = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MovieClip( [
            [0, 60, b, { y: [-4, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -30, -15 ), "outCubic"], scaleX: [0.2, 1], scaleY: [0.2, 1] }],
            [50, 60, b, { alpha: [1, 0, "outCubic"] }],
        ] );

        self.addChild( mc );
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 1000, () => {
            mc.removeFromParent();
        } );
    } );
    self.once( "stopAction", () => {
        timer.stop();
    } );
};

AI.shop = function( self,target,dist ) {
    AI.roaming( self,target,dist );
};

AI.playMusic = function( self,target,dist ) {
    if ( self.lastMode == self.mode ) {
        return;
    }

    _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].addLog( "%s{는} 노래를 부르기 시작했다.",self.getName() );
    self.enableDefaultAnimation( false );
    //self.changeImage(1,5);
    const instrument = "sound/mml_celtic-harp-a4.wav";
    const ahchoo = `
	MML@t128v15>>L4F2E2D.L8C16<B-16>C<B-AGG>C<F2ECD2<CDDD16E16v14o1G>GL16>EFGArGD<B-GD<B-GL8>C2C2rA.length>DEFA>C4L16rv15FG>C<FG>L32C.<C.FG>CFG>C<CFG>CFG>C2&C8&C&C2L8ro4FF4v14o1B-4>B-<B-B->B-rC4.>C<CrCB-4<A4>A<AA4>A4D4>D<DrD>D4<<B-4>B-<B-B->B-rC4.>C<CrC>C4<C4.length>C#<CC.length4.length>C#<D4>D4<AD>D<D4<B4>B<BB4>B4<B-4>B-<B-B-4>B-4<A4>A<AA4>A4D4>D<DD4>D4<<G>G<GA4A>A4<B->B-<B-B4B>B4C4>C<GCG>C<Cr>C<C4r4>C<C<B-4B-4>C4C4D-4D-A->E-4<E-.<A-.>A-<A-4A->A-<A-4A->A-<A-4A->A-<A-4G>G<G4G>G<G>C4>C<C>C<C>C<C>C<F>F<F>F<F>F<FE-4>E-<E->E-<E->E-<E-D4>D<DF4.length>F#<FG4.length>G<G-4F4<B-.A-.>A-<A-4A->A-<A-4A->A-<A-4A->A-<A-4G>G<G4G>G<G>C4>C<C>C<C>C<C>C<F>F<F>F<F>F<FE-4>E-<E->E-<E->E-<E-D4>D<DF4.length>F#<FF4.length>F<B->B-C4<B4v15o5C4C.length#>C4.length<<EEEEDD.length#>CC.length#<BBA16B.length.&BB>B<BAB.length>CDDC.lengthC.length16.length<G#.GG#>C16.length<B.A4rAGAB16.length>C#.&Cr4.CD.length.lengthE4EEED.length#<A#>DC.length4.length<BB4A4B.length.>C#.&C#<G#.G16rEEEED.lengthD.length#>CC.length#<BBA16B.length.&BB.B16BAB.length>CDDC.lengthC.length16.length<G#.GG#>C16.length<B.AA.A16AGAB16.length>C#.&CrC.lengthC.lengthC.lengthD.lengthE4EEED.length#<A#>DC.length4.length<BB4B4B4t76L16>>C#.<C#.FB.length.<B.>EA.<A.>EL32o3rFA.length>>CG2.length.&G#&G16.o2E.length.B.>EF#.G16.length&G64.length&G2.length.&G2.length.,
	v14>B-2G2F.r.rCr2<GF2r2v15F2E2D2E.E16F16G2F.E8C1.&&C2L8rCC4rEEFF4rEF4A4E4F4r4GFFEEDDCC4G4F4rEEFF4rEF4A4E4F4rB-B-B-B-AAGGFF4EEF4A4A.A16AGF16G16G4rEEEG>DC4.C.C16C<B-AG4AF4.AAAF4.G4.rF16G16AGFG4A4B-4.r4AGFG4.r2.F4E4F4G4A-4G4A-4B-.>C.&C<G.G16rE-E-E-E-DD>CC<B-B-A16B-.&B-B-.B-16B-AB->CD-D-CC16<G.FG.length>C16<B-.A-A-.A-16A-GA-B-16>C.&C<A-.A-16r>CDE-4E-E-E-D<A>DC4<B-B-4A-4B-.>C.&C<G.G16rE-E-E-E-DD>CC<B-B-A16B-.&B-B-.B-16B-AB->CD-D-CC16<G.FG.length>C16<B-.A-A-.A-16A-GA-B-16>C.&CrCCCDE-4E-E-E-D<A>DC4<B-B-2B.>C16v14L4o2A1A1G.length1.length>C#<CC.lengthC.length8.length>C16.length<F8.FF.length.lengthF.length8F.length8EEEE8E8D.length#>L8D#<DG4.length>G<GG4.length>G#<G4F4.length<B.A.>A<A4A>A<A4A>A<A4A>A<A4G#>G#<G4G.length#>G#<G#>C4.length>C#<C#>C#<C#>C#<C#>C#<F#>F#<F#>F#<F#>F#<FE4.length>E<E>E<E>E<ED4.length>D#<DG4.length>G<GF4F.lengthF.length4BF.length#<B4L16>>A.>E.A<G#.>E.F#<F#.>C#.E<<B1L32r8r.r.>>Et54<B>GB.length>E>E1&E4.,
	v14<B-1C1<A2>F2<B->F8B-.&B-B-2B-2F2A2<D1&D1&D1L8rDD4>>rC2.CrC4CC4C4rC2.ArB-4AD4C4rC2.CrC4CC4C4rE2.DD4C4C2F2rD4E4.G.G16r>D4<G4.G4r>CCF4.F.F16rFEC<D4.E2rD4.D2rF4.F4DD<B-r1L4B-B-B-B->D-D-D-L8D-.E-.&E-C4rGGF4.F.F.rF.F.&FF.F.FFF4.E4F4E.E-.&E-C4rCCC4.E-4rA-GF2L4ArF.G.length-E-L8F.G.&GC4rCC<B-4.>F.F.rF.F.&FF4rFFF4.E4D-4E.E-.&E-C.C.E-E-E-4.A-.A-.A-GF2A4r4L4E.length-.FGrE.>Gr.length.<<B.r.rB.>>F#.r<FFD.lengthF8.E2.length&E16L8rEEE2r4AGG2A.length4r4F.length4.G4E4F.length#.G#.&GC.length4rG.lengthG.lengthF.length4.r2F.length#.F2.r.length.F4.F4D4F.length.length.E.&EE4.EEE4.A4.AGG2A.length4r4A4EE4F.length4F.length4.length;
	`;

    const mml = new _lib_mabiMML__WEBPACK_IMPORTED_MODULE_5__["default"]( ahchoo,instrument );

    self.commandFollower( "dance",{ mml: mml } );
    const { x, y } = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.worldToTile( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.viewX,_global__WEBPACK_IMPORTED_MODULE_11__["default"].world.viewY );

    dist = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getDistance( x,y,self.tileX,self.tileY );
    mml.setVolume( 0.5 - _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( dist / 16,0,1 ) * 0.5 );
    mml.play();
    mml.on( "note", () => {
        self.__animationTick = ( self.__animationTick + 1 ) % 2;
        self.changeImage( self.imageCol, self.imageRow + self.__animationTick );
        const b = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_4__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "fx.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ), _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 9, 10 ), 4, 16, 24 );
        const mc = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MovieClip( [
            [0, 60, b, { y: [-2, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -30, -15 ), "outBack"], x: [7, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -5, 20 ), "inOutSine"] }],
            [50, 60, b, { alpha: [1, 0, "outCubic"] }],
        ] );

        self.addChild( mc );
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 1000, () => {
            mc.removeFromParent();
        } );
    } );

    // 거리가 멀면 소리를 줄인다
    function onViewChanged( e ) {
        const { x, y } = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.worldToTile( e.viewX,e.viewY );
        const dist = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getDistance( x,y,self.tileX,self.tileY );

        mml.setVolume( 0.5 - _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( dist / 16,0,1 ) * 0.5 );
    }

    _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.on( "viewChanged",onViewChanged );
    mml.on( "complete", () => {
        _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.removeEventListener( "viewChanged", onViewChanged );
    } );
    self.once( "stopAction", () => {
        mml.stop();
        _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.removeEventListener( "viewChanged", onViewChanged );
    } );
};


//---------------------------------------------------------------
// 기본 AI;
//---------------------------------------------------------------

AI.default = function( self,target,dist,dir ) {
    if ( !target ) {
        // 난 아직 타겟이 없어
        const t = self.searchTarget();

        if ( t ) {
            const [relation, target] = t;

            if ( relation == "f" ) {
                self.showMood( "!" );
                self.target = target;
                self.mode = "trackSlow";
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.addLog( "%s{가} %s에게 적대감을 드러냈다!", self.getName(), self.target.getName() );
            } else if ( relation == "F" ) {
                self.showMood( "!" );
                self.target = target;
                self.mode = "trackFast";
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.addLog( "%s{가} %s에게 강한 적대감을 드러냈다!", self.getName(), self.target.getName() );
            } else if ( relation == "r" ) {
                self.showMood( "fear" );
                self.target = target;
                self.mode = "retreatSlow";
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.addLog( "%s{가} %s{를} 보고 뒷걸음질치기 시작했다!", self.getName(), self.target.getName() );
            } else if ( relation == "R" ) {
                self.showMood( "fear" );
                self.target = target;
                self.mode = "retreatFast";
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.addLog( "%s{가} %s{를} 보고 도망치기 시작했다!", self.getName(), self.target.getName() );
            } else if ( relation == "=" ) {
                // 동족
            } else {
            }
        }

        if ( !self.target ) {
            if ( self.follow ) {
                decideFollow.call( self, target, dist );
            } else if ( self.property.schedule ) {
                decideSchedule.call( self, target, dist );
            }
        }

        if ( !self.mode ) {
            console.log( "아무것도 결정되지 않아서 로밍" );
            self.mode = "roaming";
        }
    } else {
        // 타겟이 있어
        if ( self.mode == "searchTarget" ) {
            // 경계
            if ( dist <= self.senseDistance && self.canSee( target.tileX, self.tileY ) ) {
                if ( target == _global__WEBPACK_IMPORTED_MODULE_11__["default"].player ) {
                    self.showMood( "!" );
                    _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].addLog( "%s{가} %s{를} 발견했다!", target.getName(), self.getName() );
                }

                self.mode = "trackFast";
            } else if ( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,20 ) == 1 ) {
                self.target = null;
                self.mode = "roaming";
            }
        } else if ( dist >= self.senseDistance * 1.5 ) {
            // 느끼는 거리의 150% 보다 멀어지면 놓친다.
            if ( target == _global__WEBPACK_IMPORTED_MODULE_11__["default"].player ) {
                _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].addLog( "%s{는} %s의 추적에서 벗어났다.", target.getName(), self.getName() );
            }

            self.mode = "searchTarget";
        } else if ( dist <= self.weaponRange ) {
            // 공격하자
            if ( self.mode == "retreatFast" && _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,6 ) == 1 ) {
                self.mode = "attack";
            } else if ( self.mode == "retreatSlow" && _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,3 ) == 1 ) {
                self.mode = "attack";
            } else {
                self.mode = "attack";
            }
        } else if ( !self.canSee( target.tileX, target.tileY ) ) {
            const dice = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,10 );

            if ( dice == 10 ) {
                // 시야밖에 있으면 놓침
                if ( target == _global__WEBPACK_IMPORTED_MODULE_11__["default"].player ) {
                    _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].addLog( "%s{는} %s의 추적에서 벗어났다.", target.getName(), self.getName() );
                }

                self.mode = "searchTarget";
            } else if ( dice <= 5 ) {
                self.path = null;
                self.mode = "trackExactly";
            } else if ( self.mode != "trackFast" || self.mode != "trackSlow" ) {
                self.mode = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,2 ) == 1 ? "trackSlow" : "trackFast";
            }
        } else {
            if ( self.hp / self.hpMax <= 0.2 ) {
                if ( self.mode != "retreatSlow" ) {
                    self.showMood( "fear" );
                    _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.addLog( "%s{가} 도망치기 시작했다!", self.getName() );
                    self.mode = "retreatSlow";
                }
            } else {
                self.mode = "trackSlow";
            }
        }
    }

    if ( self.mode == null ) {
        console.log( self.getName(),self.mode,self.target );
        console.log( "모드설정이 잘못되었음",self.getName() );
    }

    AI[self.mode]( self,self.target,dist );

    // 플레이어가 실수로 때린 경우 정신차리기
    if ( self.follow && self.follow == target ) {
        if ( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.random( 1,5 ) == 1 ) {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.addLog( "%s{가} 정신을 차렸다.",self.getName() );
            self.target = null;
        }
    }
};

AI.citizen = function ( self, target, dist, dir ) {
    AI.default( self, target, dist );
};

AI.cat = function ( self, target, dist,dir ) {
    AI.default( self, target, dist,dir );
};


Monster.property = {
    ["쥐"]: {
        image:       [2, 3], color:       _lib_colors__WEBPACK_IMPORTED_MODULE_7__["default"].Orange,
        faction:     "A", attack:      "1~3", hp:          5, whiteAttrib: "*", blackAttrib: "",
    },

    ["쥐가족"]: {
        list:        "K쥐,쥐,쥐,쥐,?쥐,?쥐",
        whiteAttrib: "cave,dungeon", blackAttrib: "",
    },

};

Monster.AI = AI;





/***/ }),

/***/ "./games/Avalonika/src/entity/npc.js":
/*!*******************************************!*\
  !*** ./games/Avalonika/src/entity/npc.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Npc)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _world_elemental__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../world/elemental */ "./games/Avalonika/src/world/elemental.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _lib_colors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lib/colors */ "./engine/src/lib/colors.js");
/* harmony import */ var _creature__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./creature */ "./games/Avalonika/src/entity/creature.js");
/* harmony import */ var _monster__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./monster */ "./games/Avalonika/src/entity/monster.js");
/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./item */ "./games/Avalonika/src/entity/item.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _effect__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../effect */ "./games/Avalonika/src/effect.js");















class Npc extends _monster__WEBPACK_IMPORTED_MODULE_6__["default"] {
    constructor( name, tileX, tileY, options ) {
        super( name, tileX, tileY, options );
        this.isNpc = true;
        this.AI = "roaming";

        this.fillProperties( Npc.property, name );
        let pr = this.property;

        // 스케쥴이 있는 NPC는 아래의 장소를 참고한다.
        this.places = [];

        this.senseDistance = pr.senseDistance || 6;
        this.weaponRange = pr.weaponRange || 1;
        this.AI = pr.AI || "default";
        this.hpMax = pr.hp || 1;
        this.hp = this.hpMax;
        this.texture = _creature__WEBPACK_IMPORTED_MODULE_5__["default"].texture;
        this.tileWidth = _creature__WEBPACK_IMPORTED_MODULE_5__["default"].tileWidth;
        this.tileHeight = _creature__WEBPACK_IMPORTED_MODULE_5__["default"].tileHeight;

        this.postInit( Npc );
    }


    attack( cr, dmg ) {
        let { x: x1, y: y1 } = _global__WEBPACK_IMPORTED_MODULE_8__["default"].world.tileCenterToWorld( this.tileX, this.tileY );
        let { x: x2, y: y2 } = _global__WEBPACK_IMPORTED_MODULE_8__["default"].world.tileCenterToWorld( cr.tileX, cr.tileY );
        let [dur, hitDur] = new _effect__WEBPACK_IMPORTED_MODULE_9__["default"]( "claw", x1, y1, x2, y2, true, this.getWeaponImage( true, true ), this ).getDuration();

        cr.stop();
        cr.damage( dmg, this, x1, y1, hitDur || dur );
        _global__WEBPACK_IMPORTED_MODULE_8__["default"].world.entityManager.wait( 300 );
    }


    damage( dmg, attacker, fromX, fromY, hitDur, sound ) {
        hitDur = hitDur || 0;
        this.hp = this.hp - dmg;
        if ( this.hp <= 0 ) {
            this.removeFromWorld();
            new _effect__WEBPACK_IMPORTED_MODULE_9__["default"]( "death", fromX, fromY, this.getX(), this.getY(), this, attacker, hitDur );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( hitDur, () => {
                let p = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Particles();

                p.setTexture( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Blood.png" ) );
                console.log( "사망", this.getPosition() );
                for ( let i = 1; i <= 10; i++ ) {
                    //p.addParticles(0,0,50,90,60,10,10);
                    let angle = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 360 );
                    let speed = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 6 );
                    let { x, y } = this.getPosition();

                    // x = x; // GLOBAL.world.viewWidth/2;
                    // y = y; // GLOBAL.world.viewHeight/2;
                    p.addParticles( [{
                        x:            x, y:            y, size:         _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 4, 30 ),//this.getX(),y=this.getY(),size=20,
                        angle:        angle,
                        ttl:          60 + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 100 ),
                        speedX:       _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.cos( angle ) * speed,
                        speedY:       _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.sin( angle ) * speed,
                        speedAngular: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 30 ) - 15,
                        decay:        0.5,
                        color:        0x400000,
                        alpha:        1.0,
                    }] );
                }
                _global__WEBPACK_IMPORTED_MODULE_8__["default"].world.floorLayer.addChild( p );
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( sound || "sound/damage_0.wav" );
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/finish_1.wav" );
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 5000, () => {
                    p.removeFromParent();
                    this.removeFromWorld();
                } );
            } );
            _global__WEBPACK_IMPORTED_MODULE_8__["default"]["interface"].addLog( "%s{를} 공격하여 %d 대미지!", this.getName(), dmg );
            _global__WEBPACK_IMPORTED_MODULE_8__["default"]["interface"].addLog( "%s{를} 쓰러뜨렸다!", this.getName() );
            _global__WEBPACK_IMPORTED_MODULE_8__["default"].player.exp = _global__WEBPACK_IMPORTED_MODULE_8__["default"].player.exp + 1;
            let numOfDrop = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 4 );
            let floorList = _global__WEBPACK_IMPORTED_MODULE_8__["default"].world.pathManager.getSplashFloor( this.tileX, this.tileY, numOfDrop );

            for ( let i = 1; i <= numOfDrop; i++ ) {
                _global__WEBPACK_IMPORTED_MODULE_8__["default"].world.entityManager.addEntity( new _item__WEBPACK_IMPORTED_MODULE_7__["default"]( floorList[i].x, floorList[i].y, {
                    id:        _item__WEBPACK_IMPORTED_MODULE_7__["default"].gold,
                    amount:    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 30 ),
                    drop:      true, dropX:     this.tileX, dropY:     this.tileY,
                    dropDelay: ( numOfDrop - i ) * 100,
                } ) );
            }
            if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 3 ) == 1 ) {
                _global__WEBPACK_IMPORTED_MODULE_8__["default"].world.entityManager.addEntity( new _item__WEBPACK_IMPORTED_MODULE_7__["default"]( this.tileX, this.tileY, {
                    id:        _item__WEBPACK_IMPORTED_MODULE_7__["default"].validIdList[_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( _item__WEBPACK_IMPORTED_MODULE_7__["default"].validIdList.length )],
                    //amount:Math.random(30),
                    drop:      true, dropX:     this.tileX, dropY:     this.tileY,
                    dropDelay: 100,
                } ) );
            }
            if ( this.property.explosion ) {
                if ( this.property.explosion == "water" ) {
                    new _effect__WEBPACK_IMPORTED_MODULE_9__["default"]( "boom", this.getX(), this.getY(), 20, 350, hitDur, 0x0000ff );
                    _global__WEBPACK_IMPORTED_MODULE_8__["default"].world.elemental.addElemental( _world_elemental__WEBPACK_IMPORTED_MODULE_2__["default"].WATER, this.tileX, this.tileY, 10 );
                } else if ( this.property.explosion == "fire" ) {
                    new _effect__WEBPACK_IMPORTED_MODULE_9__["default"]( "boom", this.getX(), this.getY(), 50, 300, hitDur, 0xff9000 );
                    _global__WEBPACK_IMPORTED_MODULE_8__["default"].world.elemental.addElemental( _world_elemental__WEBPACK_IMPORTED_MODULE_2__["default"].FIRE, this.tileX, this.tileY, 10 );
                } else if ( this.property.explosion == "poison" ) {
                    new _effect__WEBPACK_IMPORTED_MODULE_9__["default"]( "boom", this.getX(), this.getY(), 30, 400, hitDur, 0xff00ff );
                    _global__WEBPACK_IMPORTED_MODULE_8__["default"].world.elemental.addElemental( _world_elemental__WEBPACK_IMPORTED_MODULE_2__["default"].POISON, this.tileX, this.tileY, 10 );
                }
            }
        } else {
            new _effect__WEBPACK_IMPORTED_MODULE_9__["default"]( "damage", fromX, fromY, this.getX(), this.getY(), this, attacker, hitDur );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( hitDur, () => {
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( sound || "sound/damage_0.wav" );
            } );
            _global__WEBPACK_IMPORTED_MODULE_8__["default"]["interface"].addLog( "%s{를} 공격하여 %d 대미지!", this.getName(), dmg );
        }
    }
}

// 상속받았기 때문에 Monster.property를 파괴할 수 있음
Object.assign( Npc.property, {
    ["나오"]: {
        image:    [17, 1], color:    _lib_colors__WEBPACK_IMPORTED_MODULE_4__["default"].Yellow,
        faction:  "H", attack:   "2~5", hp:       25, AI:       "citizen",
        schedule: [
            { hour: 7, min: 0, place: "room" },
            { hour: 8, min: 30, place: "work", action: "playMusic" },
            { hour: 17, min: 0, place: "room" },
            { hour: 21, min: 0, place: "bed", radius: 0, action: "sleep" },
        ],
    }
} );







/***/ }),

/***/ "./games/Avalonika/src/entity/pet.js":
/*!*******************************************!*\
  !*** ./games/Avalonika/src/entity/pet.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Pet)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _lib_colors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/colors */ "./engine/src/lib/colors.js");
/* harmony import */ var _creature__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./creature */ "./games/Avalonika/src/entity/creature.js");
/* harmony import */ var _monster__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./monster */ "./games/Avalonika/src/entity/monster.js");
/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./item */ "./games/Avalonika/src/entity/item.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");












/*

Pet은 몬스터의 일종이다

플레이어와 적절한 거리를 유지하면서 공격함

pet_cat = 선공하지 않음. 자신이 공격 받거나 플레이어 공격 받으면 공격함. 라이프가 줄어들면 도망침. 
pet_dog = 선공하지 않음. 자신이 공격 받거나 플레이어 공격 받으면 공격함. 
pet_wolf = 선공함.


남은 작업
follow가 공격 받을 때 공격하기
프랍이 가로막아 타겟에 도달하지 못할 때 프랍을 공격하기

*/





class Pet extends _monster__WEBPACK_IMPORTED_MODULE_5__["default"] {
    constructor( name, tileX, tileY, options ) {
        super( name, tileX, tileY, options );
        this.isPet = true;
        //this.isMonster = false;
        if ( tileY == null ) {
            // pet은 위치를 지정하지 않으면 플레이어 바로 옆에 소환한다.
            const t = _global__WEBPACK_IMPORTED_MODULE_7__["default"].world.pathManager.getSummonFloor( _global__WEBPACK_IMPORTED_MODULE_7__["default"].player.tileX, _global__WEBPACK_IMPORTED_MODULE_7__["default"].player.tileY, 1 );

            if ( t.length == 0 ) {
                console.log( "소환할 자리가 없음" );
                // 몬스터가 플레이어 바로 옆까지 소환된 경우
            } else {
                tileX = t[0].x;
                tileY = t[0].y;
                this.position = _global__WEBPACK_IMPORTED_MODULE_7__["default"].world.tileCenterToWorld( tileX, tileY );
                [this.tileX, this.tileY] = [tileX, tileY];
                [this.lastTileX, this.lastTileY] = [tileX, tileY];
            }
        }

        this.fillProperties( Pet.property, name );
        const pr = this.property;

        this.senseDistance = pr.senseDistance || 6;
        this.weaponRange = pr.weaponRange || 1;
        this.follow = _global__WEBPACK_IMPORTED_MODULE_7__["default"].player; // 펫이니까

        this.AI = pr.AI || "default";
        this.hpMax = pr.hp || 1;
        this.hp = this.hpMax;
        this.texture = _creature__WEBPACK_IMPORTED_MODULE_4__["default"].texture;
        this.tileWidth = _creature__WEBPACK_IMPORTED_MODULE_4__["default"].tileWidth;
        this.tileHeight = _creature__WEBPACK_IMPORTED_MODULE_4__["default"].tileHeight;
        this.postInit( Pet );
    }

    called( from ) {
        const dist = _global__WEBPACK_IMPORTED_MODULE_7__["default"].world.getDistanceBetweenEntities( this, from );

        if ( dist == 1 ) {
            if ( _global__WEBPACK_IMPORTED_MODULE_7__["default"].world.random( 1,2 ) == 1 ) {
                _global__WEBPACK_IMPORTED_MODULE_7__["default"]["interface"].addLog( "%s{는} 풀쩍 뛰어 올랐다.", this.getName() );
                this.swapLocation( from );
            } else {
                _global__WEBPACK_IMPORTED_MODULE_7__["default"]["interface"].addLog( "%s{는} 매우 좋아했다.", this.getName() );
            }
        } else {
            _global__WEBPACK_IMPORTED_MODULE_7__["default"]["interface"].addLog( "%s{는} 울음 소리를 냈다.", this.getName() );
            // 불러서 돌아가야함
        }
    }

    afterDeath( dmg, attacker, fromX, fromY, hitDur, sound ) {
    }
}



Object.assign( Pet.property, {
    ["고양이"]: {
        image:   [ 12, 3], color:   _lib_colors__WEBPACK_IMPORTED_MODULE_3__["default"].Yellow,
        faction: "P", attack:  "2~5", hp:      13, AI:      "cat",
    },
} );

Pet.maxPet = 5; // 플레이어가 가질 수 있는 최대 펫의 수. 이 숫자만큼 계단 옆을 비워야한다.



/***/ }),

/***/ "./games/Avalonika/src/entity/player.js":
/*!**********************************************!*\
  !*** ./games/Avalonika/src/entity/player.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Player)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _effect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../effect */ "./games/Avalonika/src/effect.js");
/* harmony import */ var _interface_inventory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interface/inventory */ "./games/Avalonika/src/interface/inventory.js");
/* harmony import */ var _world_elemental__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../world/elemental */ "./games/Avalonika/src/world/elemental.js");
/* harmony import */ var _skill__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./skill */ "./games/Avalonika/src/entity/skill.js");
/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./item */ "./games/Avalonika/src/entity/item.js");
/* harmony import */ var _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lib/visibilityTile */ "./engine/src/lib/visibilityTile.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _creature__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./creature */ "./games/Avalonika/src/entity/creature.js");
/* harmony import */ var _lib_mabiMML__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @lib/mabiMML */ "./engine/src/lib/mabiMML.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");
/* harmony import */ var _pet__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./pet */ "./games/Avalonika/src/entity/pet.js");
/* harmony import */ var _monster__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./monster */ "./games/Avalonika/src/entity/monster.js");
/* harmony import */ var _prop__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./prop */ "./games/Avalonika/src/entity/prop.js");





















//--------------------------------------------------------------------------------------
// Player는 GLOBAL.player 글로벌 변수에 할당된다
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
// 이동처리
// GLOBAL.player.findPathAndMoveTo 만 신경쓰면 된다
//--------------------------------------------------------------------------------------

function endMove( self ) {
    self.path = null;
    if ( self.interactX ) {
        // 이동후 인터랙션
        if ( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getDistance( self.tileX, self.tileY, self.interactX, self.interactY ) == 1 ) {
            self.interact( self.interactX, self.interactY );
        }
        self.interactX = null;
        self.interactY = null;
    }
    _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].cursor.snapToPlayer();
    _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.showMapInfo( self.tileX, self.tileY );
    self.targetX = null;
    self.targetY = null;
}

function movePathStep( self ) {
    if ( self.path && self.path.length > 0 ) {
        const { x: nextX, y: nextY } = self.path[0];

        self.path.shift();
        const c = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.getEntity( nextX, nextY );

        if ( c ) {
            // 크리쳐에 의해서 도중에 길이 막혔다
            // 목적지를 다시 찾는다.
            console.log( "한번더 찾기" );
            self.stop();
            self.findPathAndMoveTo( self.targetX, self.targetY, self.interactX, self.interactY );
        } else {
            self.doTurn( ()=>{
                console.log( `이동 ${_global__WEBPACK_IMPORTED_MODULE_11__["default"].world.turn}, ${nextX}, ${nextY}, ${self.targetX}, ${self.targetY}` );
                // 적턴을 처리해서 이동이 막힐 가능성이 있다
                if ( _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.getEntity( nextX, nextY ) ) {
                    if ( self.targetX != null ) {
                        self.findPathAndMoveTo( self.targetX, self.targetY, self.interactX, self.interactY );
                    }
                } else {
                    self.moveTo( nextX, nextY )
                        .onChange( () => {
                            const { x, y } = self.getPosition();

                            _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.sightManager.moveEyeTo( x,y );
                        } );
                    self.pickUpGold();
                    const pr = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.map.getProperty( nextX, nextY );
                    const footstep = pr.sound || 0;

                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/footstep_" + footstep + ".wav" );
                    self.playPositionSound( nextX, nextY );
                }

                return [_creature__WEBPACK_IMPORTED_MODULE_8__["default"].walkSpeed, 1];
            } );
        }
    }
}

function startMove( self ) {
    movePathStep( self );
}


//--------------------------------------------------------------------------------------
// 공격: interact에서 호출해주기 때문에 이걸 직접 부르면 안된다.
//--------------------------------------------------------------------------------------

/**
 *
 * @this Player
 * 
 * @param {number} x
 * @param {number} y
 * @param {boolean} isRanged
 * @param {number} px
 * @param {number} py
 */
function attack( x, y, isRanged, px, py ) {
    let cr;

    if ( isRanged ) {
        const { x: x1, y: y1 } = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.tileCenterToWorld( this.tileX, this.tileY );
        const [x2, y2] = [px, py];
        const [r, tx, ty, cx, cy] = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.map.visibilityTileChecker.traceRay( x1, y1, x2, y2,
                                                                                     _config__WEBPACK_IMPORTED_MODULE_12__["default"].World.tileWidth, _config__WEBPACK_IMPORTED_MODULE_12__["default"].World.tileHeight, _world_gameMap__WEBPACK_IMPORTED_MODULE_7__["default"].BLOCK_VISION | _world_gameMap__WEBPACK_IMPORTED_MODULE_7__["default"].BLOCK_ARROW, ( x, y ) => {
                                                                                         return _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.getEntity( x, y );
                                                                                     } );

        console.log( x2, y2, r, tx, ty, cx, cy, _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.stageToWorld( ...this.getPosition().xy ) );
        if ( r == _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_6__["default"].EMPTY || r == _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_6__["default"].CREATURE ) {
            cr = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.getEntity( tx, ty );
            [px, py] = [cx, cy];
        } else {
            cr = null;
            [px, py] = [cx, cy];
        }
    }
    //GLOBAL.interface.hideInfo();
    console.log( " 플레이어 공격" );
    //맵검토가 여기에 들어가야한다
    const angle = ( Math.atan2( y - this.tileY, x - this.tileX ) ) / Math.PI * 180;
    const dir = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.angleToDir( angle );
    let ax, ay;
    let dur, hitDur;
    let weapon = this.getSelectedWeapon()[0];
    let damage = weapon.calculateDamage();

    if ( isRanged ) {
        if ( cr ) {
            [dur, hitDur] = new _effect__WEBPACK_IMPORTED_MODULE_1__["default"]( "arrow", this.getX(), this.getY(), px, py, true ).getDuration();
        } else {
            [dur, hitDur] = new _effect__WEBPACK_IMPORTED_MODULE_1__["default"]( "arrow", this.getX(), this.getY(), px, py, false ).getDuration();
        }
        console.log( "화살발사", px, py );
    } else {
        [ax, ay] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.dirToOffset( dir );
        cr = this.getEntityRel( ax, ay );
        let weaponAnimation;

        if ( cr && cr.isProp && cr.property.needPickAxe ) {
            const pickaxe = this.getEquippedItem( "pickaxe" );

            if ( pickaxe ) {
                weapon = pickaxe;
            }
        }
        weaponAnimation = weapon.property.anim || "swing";
        const { x: x1, y: y1 } = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.tileCenterToWorld( this.tileX, this.tileY );

        if ( cr ) {
            [dur, hitDur] = new _effect__WEBPACK_IMPORTED_MODULE_1__["default"](
                weaponAnimation,
                x1, y1, x1 + ax * _config__WEBPACK_IMPORTED_MODULE_12__["default"].World.tileWidth, y1 + ay * _config__WEBPACK_IMPORTED_MODULE_12__["default"].World.tileHeight,
                true,
                weapon.getIcon( true, true ),
                this ).getDuration();
        } else {
            [dur, hitDur] = new _effect__WEBPACK_IMPORTED_MODULE_1__["default"](
                weaponAnimation,
                x1, y1, x1 + ax * _config__WEBPACK_IMPORTED_MODULE_12__["default"].World.tileWidth, y1 + ay * _config__WEBPACK_IMPORTED_MODULE_12__["default"].World.tileHeight,
                false,
                weapon.getIcon( true, true ),
                this ).getDuration();
        }
    }
    //log("angle",angle,dir,ax,ay);
    //log("target",c);
    hitDur = hitDur || dur;
    if ( cr ) {
        if ( cr.isProp ) {
            if ( weapon.property.type == "pickaxe" ) {
                damage = 5;
            } else {
                damage = 1; // 프랍 때릴 때는 무조건 1;
            }
        }
        _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].cursor.lock( hitDur || dur );
        const { x: x1, y: y1 } = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.tileCenterToWorld( this.tileX, this.tileY );
        const { x: x2, y: y2 } = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.tileCenterToWorld( cr.tileX, cr.tileY );

        if ( cr instanceof _monster__WEBPACK_IMPORTED_MODULE_14__["default"] || cr instanceof _prop__WEBPACK_IMPORTED_MODULE_15__["default"] ) {
            cr.damage( damage, this, x1, y1, hitDur );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( Math.max( 0, hitDur - 50 ), () => {
            // 공격할 때 나는 무기 소리
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/" + ( weapon.property.hitSound || "damage_0.wav" ) );
            } );
        }
    } else {
        _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].cursor.lock( 100 );
    }
}


//--------------------------------------------------------------------------------------
// 펫부르기
// 거리가 멀면 부른다
//--------------------------------------------------------------------------------------

/**
 * @this Player
 *
 * @param {Pet} target
 * @param {number} dist
 */
function callPet( target, dist ) {
    if ( dist == 1 ) {
        _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].addLog( "%s{는} %s{를} 쓰다듬었다.",this.getName(),target.getName() );
        target.called( this );
    } else {
        _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].addLog( "%s{는} %s{를} 불렀다.", this.getName(),target.getName() );
        target.called( this );
    }
}



/**
 *
 *
 * @class Player
 * @extends {Creature}
 */
class Player extends _creature__WEBPACK_IMPORTED_MODULE_8__["default"] {
//--------------------------------------------------------------------------------------
// 플레이어 초기화
//--------------------------------------------------------------------------------------
    constructor( name, tileX, tileY, options ) {
        super( name, tileX, tileY, options );
        this.isPlayer = true;
        this.faction = "player";

        this.texture = Player.texture;
        this.tileWidth = Player.tileWidth;
        this.tileHeight = Player.tileHeight;
        this.property = { image: [ 1, 1], faction: "O" };
        this.name = "나크";
        this.hp = 30;
        this.hpMax = 30;
        this.mp = 20;
        this.mpMax = 20;
        this.level = 1;
        this.exp = 0;
        this.expMax = 30;
        this.gold = 0;
        this.inventory = new _interface_inventory__WEBPACK_IMPORTED_MODULE_2__["default"]( 20 );
        this.str = 0;	// 힘
        this.dex = 0;	// 솜씨
        this.int = 0;	// 지능
        this.luck = 0;	// 행운
        // hp = 레벨 str;
        // mp = 레벨 int;
        // matk = int;
        // normal = str + dex;
        // heavy weapon = str;
        // technical weapon = dex;
        // shield = str + dex;
        // dodge = dex;
        // critical = int+lck;
        // trap dodge = lck;
        // untrap = dex+lck;
        this.skills = [
            new _skill__WEBPACK_IMPORTED_MODULE_4__["default"]( "근접무기" ),
            new _skill__WEBPACK_IMPORTED_MODULE_4__["default"]( "원거리무기" ),
        ];
        this.baseWeapon = new _item__WEBPACK_IMPORTED_MODULE_5__["default"]( _item__WEBPACK_IMPORTED_MODULE_5__["default"].bareHand );
        this.selectedAction = this.baseWeapon;

        this.startX = undefined;
        this.startY = undefined;
        this.postInit( Player );
    }


    selectAction( skill ) {
        _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].actionSelector.select( skill );
    }

    getSelectedWeapon() {
        const sa = this.selectedAction;
        let item;

        if ( sa.property.type == "melee" ) {
            item = this.inventory.findEquippedItemByType( "melee" );
        } else if ( sa.property.type == "ranged" ) {
            item = this.inventory.findEquippedItemByType( "ranged" );
        }

        return item || this.baseWeapon;
    }



    selectSkillByType( type ) {
        let skill;
		
        for ( const i in this.skills ) {
            const v = this.skills[i];

            if ( v.property.type == type ) {
                skill = v;
                break;
            }
        }
        if ( _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"] ) {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].actionSelector.select( skill );
        }
    }

    selectSkill( name ) {
        let skill;

        for ( const i in this.skills ) {
            const v = this.skills[i];

            if ( v.name == name ) {
                skill = v;
                break;
            }
        }
        if ( _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"] ) {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].actionSelector.select( skill );
        }
    }

    getSelectedAction() {
        return this.selectedAction;
    }

    getWeaponImage( filtering,flip ) {
        return this.selectedAction.getIcon( filtering,flip );
    }

    getEquippedItem( type ) {
        const item = this.inventory.findEquippedItemByType( type );

        return item[0];
    }

    getEquippedItemImage( type ) {
        const item = this.getEquippedItem( type );

        return item != null ? item.getIcon() : null;
    }

    processAutoMove() {
        if ( this.path && this.path.length > 0 ) {
            console.log( "자동이동 남은 숫자", this.path.length );
            movePathStep( this );
        } else {
            if ( this.targetX != null && ( this.targetX != this.tileX || this.targetY != this.tileY ) ) {
                // 그 사이에 길이 났을 수도 있으니까 다시 이동한다
                //log("한번더 찾기");
                this.findPathAndMoveTo( this.targetX,this.targetY,this.interactX,this.interactY );
            }
            if ( !( this.path && this.path.length > 0 ) ) {
                endMove( this );
            }
        }
    }


    //--------------------------------------------------------------------------------------
    // GLOBAL.player.findPathAndMoveTo;
    //--------------------------------------------------------------------------------------

    findPathAndMoveTo( x,y,interactX,interactY ) {
        _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].hideInfo();
        let moving;

        if ( this.path && this.path.length > 0 ) {
            moving = true;
        }
        if ( this.tileX == x && this.tileY == y ) {
            // 이동할 필요가 없음
            endMove( this );

            return;
        }
        // 이동 중인 경우 멈춤
        this.stop();
        [this.startX, this.startY] = [this.tileX, this.tileY];
        [this.targetX, this.targetY] = [x,y];
        this.interactX = interactX;
        this.interactY = interactY;
        const path = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.pathManager.findPath( this.tileX,this.tileY,x,y );

        this.path = path;
        //log("찾기 결과",path,path and path.length);
        if ( moving ) {
            //
        } else if ( path && path.length > 0 ) {
            startMove( this );
        } else {
            endMove( this );
        }
    }

    stop() {
        this.path = null;
        this.targetX = this.tileX;
        this.targetY = this.tileY;
    }

    //--------------------------------------------------------------------------------------
    // 턴을 안먹는 행동
    //--------------------------------------------------------------------------------------

    pickUpGold() {
        // 골드 줍기는 턴을 안먹음
        const items = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.getItems( this.tileX,this.tileY );

        if ( items != null ) {
            for ( let i = 0; i < items.length; i++ ) {
                const item = items[i];

                if ( item.property.bundle == "gold" ) {
                    this.pickUpItem( item );
                }
            }
        }
    }


    //--------------------------------------------------------------------------------------
    // 턴을 먹는 행동
    //--------------------------------------------------------------------------------------

    // doTurn으로 감싸서 처리하면 턴이 된다

    doTurn( func,data ) {
        let [delay,turn] = [0, 1];

        _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.doDelayedEnemyTurnIfExist( () => {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.clearMonsterMood();
            if ( func ) {
                console.log( `▶플레이어턴 ${_global__WEBPACK_IMPORTED_MODULE_11__["default"].world.turn}` );
                [delay, turn] = func( data );
                // 플레이어의 행동의 delay. 그리고 적은 몇 턴 행동을 하게 되는가
            } else {
                console.log( `▶플레이어턴(아무 것도 안함) ${_global__WEBPACK_IMPORTED_MODULE_11__["default"].world.turn}` );
            }
            for ( let i = 0; i < turn; i++ ) {
                this.processBuff();
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.turn = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.turn + 1;
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.doEnemyTurn( delay );
            }
        } );
    }


    pickUpItem( item ) {
        if ( item.property.bundle == "gold" ) {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.removeEntity( item );
            this.gold = this.gold + item.amount;
            _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.addLog( "<yellow>%d 골드</yellow>를 주웠다.", item.amount );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/" + item.property.getSound );
        } else {
            if ( this.inventory.isFull() ) {
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.removeEntity( item );
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.addLog( "소지품이 가득차서 %s{를} 주을 수 없었다.", item.name );
                item.drop( item.tileX, item.tileY );
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.showMapInfo( this.tileX, this.tileY );
            } else {
                this.doTurn( () => {
                    _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.removeEntity( item );
                    _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.addLog( "%s{를} 주웠다.", item.name );
                    this.inventory.addItem( item );
                    if ( item.property.getSound ) {
                        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/" + item.property.getSound );
                    } else {
                        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/get_default.wav" );
                    }

                    return [0, 1];
                } );
            }
        }
    }

    openDoor( x,y ) {
        this.doTurn( () => {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.openDoor( x, y );

            return [300, 1];
        } );
    }


    doNothing( text ) {
        if ( text ) {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].addLog( text );
        }
        this.doTurn();
    }


    //--------------------------------------------------------------------------------------
    // 상호작용
    // 해당 위치에 대해 알맞는 상호작용을 한다.
    // 위치에 여러 상호작용이 가능한 경우는 없음
    //--------------------------------------------------------------------------------------


    interact( tx,ty,isRanged,px,py ) {
        this.doTurn( () => {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].hideInfo();
            console.log( "인터랙션", _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.turn );
            //맵검토가 여기에 들어가야한다
            this.stop();
            const cr = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.entityManager.getEntity( tx, ty );
            const pr = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getProperty( tx, ty );
            const dist = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getDistance( tx, ty, this.tileX, this.tileY );

            if ( dist == 1 && pr.char == "E" ) {
                console.log( "문열기 시도" );
                _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.openDoor( tx, ty );
            } else if ( cr && cr.isPet && cr.follow == this ) {
                callPet.call( this, cr, dist );
            } else {
                attack.call( this, tx, ty, isRanged, px, py );
            }

            return [300, 1];
        } );
    }



    //--------------------------------------------------------------------------------------
    // 대미지를 입는 연출
    // 실제로 hp도 여기서 조작한다
    //--------------------------------------------------------------------------------------

    damage( dmg,attacker,fromX,fromY,hitDur,sound ) {
        hitDur = hitDur || 0;
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( hitDur, () => {
            _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].addLog( "%s로부터 <yellow>%d</yellow> 대미지를 받았다!", attacker.getName(), dmg );
            if ( sound ) {
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/" + sound );
            } else {
                console.log( "사운드 지정 안됨" );
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( sound || "sound/damage_0.wav" );
            }
        } );
        this.hp = this.hp - dmg;
        _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].cursor.snapToPlayer();
        new _effect__WEBPACK_IMPORTED_MODULE_1__["default"]( "damage",fromX,fromY,this.getX(),this.getY(),this,attacker,hitDur );
    }


    //--------------------------------------------------------------------------------------
    // 위치에 따른 사운드를 틀어준다
    // 월드가 호출함 직접 불러줄 필요 없음
    //--------------------------------------------------------------------------------------

    playPositionSound( x,y ) {
        const pr = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.map.getProperty( x,y );
        const l = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getProperty( x - 1,y );
        const r = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getProperty( x + 1,y );
        const u = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getProperty( x,y - 1 );
        const d = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getProperty( x,y + 1 );
        const c = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getProperty( x,y );
        const le = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.elemental.getElemental( x - 1,y );
        const re = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.elemental.getElemental( x + 1,y );
        const ue = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.elemental.getElemental( x,y - 1 );
        const de = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.elemental.getElemental( x,y + 1 );
        const ce = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.elemental.getElemental( x,y );
        const torch = ( l.fire || 0 ) + ( r.fire || 0 ) + ( u.fire || 0 ) + ( d.fire || 0 ) + ( c.fire || 0 );
        const fire =  ( ( le && le.type == _world_elemental__WEBPACK_IMPORTED_MODULE_3__["default"].FIRE ) ? 1 : 0 );

        + ( ( re && re.type == _world_elemental__WEBPACK_IMPORTED_MODULE_3__["default"].FIRE ) ? 1 : 0 );
        + ( ( ue && ue.type == _world_elemental__WEBPACK_IMPORTED_MODULE_3__["default"].FIRE ) ? 1 : 0 );
        + ( ( de && de.type == _world_elemental__WEBPACK_IMPORTED_MODULE_3__["default"].FIRE ) ? 1 : 0 );
        + ( ( ce && ce.type == _world_elemental__WEBPACK_IMPORTED_MODULE_3__["default"].FIRE ) ? 1 : 0 );
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSingleSound( "sound/loop_torch.wav",Math.min( 1,torch * 0.7 ),true );
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSingleSound( "sound/loop_fire.wav",Math.min( 1,fire ),true );
        if ( ce && ce.type == _world_elemental__WEBPACK_IMPORTED_MODULE_3__["default"].WATER ) {
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/env_water.wav" );
        }
		
        for ( const i in _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.map.envSounds ) {
            const v = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.map.envSounds[i];
            const dist = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.getDistance( v.x,v.y,x,y ) / 10 + 1;
            const vol = 1 / ( dist * dist );

            //log(v.x,v.y,x,y,dist,vol);
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSingleSound( "sound/loop_" + v.sound + ".wav",vol,true,v );
        }
		
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( Player.walkSpeed, () => {
            const waterVol = _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.waterAmount / 10;

            //log("물볼륨",waterVol);
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSingleSound( "sound/loop_water.wav", Math.min( 1, waterVol ), true );
        } );
    }



    //--------------------------------------------------------------------------------------
    // 음악을 연주한다
    //--------------------------------------------------------------------------------------

    playMusic( mml ) {
        _global__WEBPACK_IMPORTED_MODULE_11__["default"]["interface"].cursor.hideAutoAction();
        this.enableDefaultAnimation( false );
        this.changeImage( 1,5 );
        const item = this.getEquippedItem( "instrument" );
        let instrument;

        if ( item ) {
            instrument = item.property.instrument;
        } else {
            instrument = "sound/mml_celtic-harp-a4.wav";
        }
        mml = new _lib_mabiMML__WEBPACK_IMPORTED_MODULE_9__["default"]( mml,instrument );
        this.commandFollower( "dance",{ mml: mml } );
        mml.setVolume( 0.5 );
        mml.on( "note", () => {
            this.__animationTick = ( this.__animationTick + 1 ) % 2;
            this.changeImage( 1, 5 + this.__animationTick );
            const b = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_10__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "fx.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ), _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 9, 10 ), 4, 16, 24 );
            const mc = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MovieClip( [
                [0, 60, b, { y: [-2, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -30, -15 ), "outBack"], x: [7, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -5, 20 ), "inOutSine"] }],
                [50, 60, b, { alpha: [1, 0, "outCubic"] }],
            ] );

            this.addChild( mc );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 1000, () => {
                mc.removeFromParent();
            } );
        } );
        mml.play();
        _global__WEBPACK_IMPORTED_MODULE_11__["default"].world.once( "enemyTurn", () => {
            mml.stop();
            this.enableDefaultAnimation( true );
        } );
    }
}

Player.texture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Player.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );
Player.width = 18;
Player.height = 24;



/***/ }),

/***/ "./games/Avalonika/src/entity/prop.js":
/*!********************************************!*\
  !*** ./games/Avalonika/src/entity/prop.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Prop)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entity */ "./games/Avalonika/src/entity/entity.js");
/* harmony import */ var _item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./item */ "./games/Avalonika/src/entity/item.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _effect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../effect */ "./games/Avalonika/src/effect.js");
/* harmony import */ var _world_elemental__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../world/elemental */ "./games/Avalonika/src/world/elemental.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");









/*

프랍은 공간을 차지하면 오브젝트이면서 생물이 아닌 것이다.
AI도 없고 buff도 없다.

*/

class Prop extends _entity__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor( name, tileX, tileY, options ) {
        super( name, tileX, tileY, options );
        this.isProp = true;
        this.char = name;
        this.fillProperties( Prop.property, name );
        const pr = this.property;

        this.name = pr.name;
        this.imageNum = _global__WEBPACK_IMPORTED_MODULE_6__["default"].world.random( 0,pr.images.length - 1 );
        this.colorNum = _global__WEBPACK_IMPORTED_MODULE_6__["default"].world.random( 0,pr.colors.length - 1 );
        this.hp = pr.hp;
        this.hpMax = this.hp;
        this.texture = Prop.texture;
        this.tileWidth = Prop.tileWidth;
        this.tileHeight = Prop.tileHeight;

        this.postInit( Prop );
    }


    damage( dmg, attacker, fromX, fromY, hitDur, sound ) {
        hitDur = hitDur || 0;
        this.hp = this.hp - dmg;
        if ( this.hp <= 0 ) {
            this.detachFromWorld();
            new _effect__WEBPACK_IMPORTED_MODULE_4__["default"]( "breakProp", fromX, fromY, this.getX(), this.getY(), this, attacker, hitDur );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( hitDur, () => {
                const p = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Particles();

                p.setTexture( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Blood.png", false ) );
                console.log( "사망", this.getPosition() );
                for ( let i = 1; i <= 10; i++ ) {
                    //p.addParticles(0,0,50,90,60,10,10);
                    const angle = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,359 );
                    const speed = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,6 );
                    const { x, y } = this.getPosition();

                    //x = x; // GLOBAL.world.viewWidth/2;
                    //y = y; // GLOBAL.world.viewHeight/2;
                    p.addParticles( [{
                        x:            x, y:            y, size:         _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 4, 30 ),//this.getX(),y=this.getY(),size=20,
                        angle:        angle,
                        ttl:          60 + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,100 ),
                        speedX:       Math.cos( angle ) * speed,
                        speedY:       Math.sin( angle ) * speed,
                        speedAngular: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,30 ) - 15,
                        decay:        0.5,
                        color:        0x404040,
                        alpha:        1.0,
                    }] );
                }
                _global__WEBPACK_IMPORTED_MODULE_6__["default"].world.floorLayer.addChild( p );
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/" + this.property.breakSound );
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 5000, () => {
                    p.removeFromParent();
                    this.removeFromWorld();
                } );
            } );
            _global__WEBPACK_IMPORTED_MODULE_6__["default"]["interface"].addLog( "%s{를} 부쉈다!", this.name );
            _global__WEBPACK_IMPORTED_MODULE_6__["default"].player.exp = _global__WEBPACK_IMPORTED_MODULE_6__["default"].player.exp + 1;
            const numOfDrop = _global__WEBPACK_IMPORTED_MODULE_6__["default"].world.random( 1,4 );
            const floorList = _global__WEBPACK_IMPORTED_MODULE_6__["default"].world.pathManager.getSplashFloor( this.tileX, this.tileY, numOfDrop );

            for ( let i = 0; i < numOfDrop; i++ ) {
                _global__WEBPACK_IMPORTED_MODULE_6__["default"].world.entityManager.addEntity(
                    new _item__WEBPACK_IMPORTED_MODULE_2__["default"]( _item__WEBPACK_IMPORTED_MODULE_2__["default"].gold, floorList[i].x, floorList[i].y, {
                        amount:    _global__WEBPACK_IMPORTED_MODULE_6__["default"].world.random( 1,30 ),
                        drop:      true, dropX:     this.tileX, dropY:     this.tileY,
                        dropDelay: ( numOfDrop - i ) * 100 + hitDur,
                    } ) );
            }
            if ( _global__WEBPACK_IMPORTED_MODULE_6__["default"].world.random( 1,3 ) == 1 ) {
                _global__WEBPACK_IMPORTED_MODULE_6__["default"].world.entityManager.addEntity(
                    new _item__WEBPACK_IMPORTED_MODULE_2__["default"]( _item__WEBPACK_IMPORTED_MODULE_2__["default"].validIdList[_global__WEBPACK_IMPORTED_MODULE_6__["default"].world.random( 0,_item__WEBPACK_IMPORTED_MODULE_2__["default"].validIdList.length - 1 )], this.tileX, this.tileY, {
                        drop:      true, dropX:     this.tileX, dropY:     this.tileY,
                        dropDelay: 100 + hitDur,
                    } ) );
            }
            if ( this.property.explosion ) {
                if ( this.property.explosion == "water" ) {
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/explosion_water.wav" );
                    new _effect__WEBPACK_IMPORTED_MODULE_4__["default"]( "boom", this.getX(), this.getY(), 20, 350, hitDur, 0x0000ff );
                    _global__WEBPACK_IMPORTED_MODULE_6__["default"].world.elemental.addElemental( _world_elemental__WEBPACK_IMPORTED_MODULE_5__["default"].WATER, this.tileX, this.tileY, 10 );
                } else if ( this.property.explosion == "fire" ) {
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/explosion_fire.wav" );
                    new _effect__WEBPACK_IMPORTED_MODULE_4__["default"]( "boom", this.getX(), this.getY(), 50, 300, hitDur, 0xff9000 );
                    _global__WEBPACK_IMPORTED_MODULE_6__["default"].world.elemental.addElemental( _world_elemental__WEBPACK_IMPORTED_MODULE_5__["default"].FIRE, this.tileX, this.tileY, 10 );
                } else if ( this.property.explosion == "poison" ) {
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/explosion_gas.wav" );
                    new _effect__WEBPACK_IMPORTED_MODULE_4__["default"]( "boom", this.getX(), this.getY(), 30, 400, hitDur, 0xff00ff );
                    _global__WEBPACK_IMPORTED_MODULE_6__["default"].world.elemental.addElemental( _world_elemental__WEBPACK_IMPORTED_MODULE_5__["default"].POISON, this.tileX, this.tileY, 10 );
                }
            }
        } else {
            new _effect__WEBPACK_IMPORTED_MODULE_4__["default"]( "hitProp", fromX, fromY, this.getX(), this.getY(), this, attacker, hitDur );
            _global__WEBPACK_IMPORTED_MODULE_6__["default"]["interface"].addLog( "%s{를} 공격하여 %d 대미지!", this.getName(), dmg );
        }
    }
}

Prop.texture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "prop.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );
Prop.width = 16;
Prop.height = 24;
Prop.tileWidth = 16;
Prop.tileHeight = 24;
Prop.perRow = Math.floor( Prop.texture.width / Prop.tileWidth );

Prop.property = {
    ["@"]: {
        name:       "항아리",  hp:         1, hitSound:   null, breakSound: "break_2.wav",
        colors:     [0xcfb78a],
        images:     [[ 1, 1 ], [ 2, 1 ], [ 3, 1 ], [ 4, 1 ], [ 5, 1 ], [ 6, 1 ], [ 7, 1 ]] 
    },
    ["#"]: {
        name:       "나무상자", hp:         1, hitSound:   null, breakSound: "break_1.wav",
        colors:     [0x91451c],
        images:     [ [ 1, 2 ], [ 2, 2 ], [ 3, 2 ] ]
    },
    ["&"]: {
        name:        "광물", hp:          5, hitSound:    null, breakSound:  "break_1.wav", slice:       false, particle:    15, needPickAxe: true,
        colors:      [0x4c2348],
        images:      [ [ 1, 3 ], [ 2, 3 ], [ 3, 3 ], [ 4, 3 ] ]
    },
};




/***/ }),

/***/ "./games/Avalonika/src/entity/skill.js":
/*!*********************************************!*\
  !*** ./games/Avalonika/src/entity/skill.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Skill)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entity */ "./games/Avalonika/src/entity/entity.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");








class Skill extends _entity__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor( name, tileX, tileY, options ) {
        super( name, tileX, tileY, options );
        this.isSkill = true;
        this.fillProperties( Skill.property,name );
        const pr = this.property;

        this.name = pr.name || name;
        this.color = Skill.color[pr.type];

        this.texture = this.options.filtering ? Skill.textureFiltered : Skill.texture;
        this.tileWidth = Skill.tileWidth;
        this.tileHeight = Skill.tileHeight;
        this.postInit( Skill );
    }

    getIcon( filtering,flip ) {
        let icon;

        if ( this.property.type == "melee" ) {
            icon = _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.getEquippedItem( "melee" );
            if ( !icon ) {
                icon = _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.baseWeapon.getIcon();
            } else {
                icon = icon.getIcon();
            }
        } else if ( this.property.type == "ranged" ) {
            icon = _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.getEquippedItem( "ranged" );
            if ( !icon ) {
                icon = _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.baseWeapon.getIcon();
            } else {
                icon = icon.getIcon();
            }
        } else {
            icon = new Skill( this.__key,{ filtering: filtering,flip: flip } );
        }

        return icon;
    }

    getInventorySprite() {
        const base = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        const b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "skillPanel.png",false,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );
        const color = this.color;

        b.setOverrideColor( color );
        b.setAnchorPoint( 0.5,0.5 );
        base.addChild( b );
        const icon = this.getIcon();

        icon.setPosition( -60 + 16,1 );
        base.addChild( icon );
        const tw = _global__WEBPACK_IMPORTED_MODULE_3__["default"]["interface"].getHiresTextWrap( this.name );

        tw.setPosition( -60 + 35,-7 );
        tw.setTextColor( this.color );
        base.addChild( tw );

        return base;
    }

    isEquippable() {
        return false;
    }
}


Skill.property = {
    ["근접무기"]:  { image: [1,1], type: "melee",  },
    ["원거리무기"]: { image: [1,1], type: "ranged", },
    ["스매시"]:   { image: [1,1], type: "active",  },
    ["쌍검난타"]:  { image: [2, 1], type: "magic", },

};

Skill.texture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Skills.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );
Skill.textureFiltered = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Skills.png", true, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );
Skill.width = 32;
Skill.height = 32;
Skill.tileWidth = 32;
Skill.tileHeight = 32;
Skill.perRow = Math.floor( Skill.texture.width / Skill.width );
Skill.color = {
    melee: 	 0xee145b,  	// 근접
    ranged: 	0xee145b,  	// 원거리
    active: 	0xee145b,  	// 액티브
    passive: 0xa0a0a0,	// 패시브
    magic: 	 0x00aeef,	// 마법
};




/***/ }),

/***/ "./games/Avalonika/src/global.js":
/*!***************************************!*\
  !*** ./games/Avalonika/src/global.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _engine_SceneManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/SceneManager */ "./engine/src/SceneManager.js");
/* harmony import */ var _engine_Stage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @engine/Stage */ "./engine/src/Stage.js");
/* harmony import */ var _interface_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interface/interface */ "./games/Avalonika/src/interface/interface.js");
/* harmony import */ var _saveLoad__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./saveLoad */ "./games/Avalonika/src/saveLoad.js");
/* harmony import */ var _world_world__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./world/world */ "./games/Avalonika/src/world/world.js");
/* harmony import */ var _entity_player__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./entity/player */ "./games/Avalonika/src/entity/player.js");







class AppData {
    constructor() {
        /** @type {World} */
        this.world = null;
        /** @type {Interface} */
        this.interface = null;
        /** @type {Stage} */
        this.stage = null;
        /** @type {SceneManager} */
        this.sceneManager = null;
        /** @type {SaveLoad} */
        this.saveLoad = null;
        /** @type {Player} */
        this.player = null;
    }
}

const GLOBAL = new AppData();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GLOBAL);


/***/ }),

/***/ "./games/Avalonika/src/interface/actionSelector.js":
/*!*********************************************************!*\
  !*** ./games/Avalonika/src/interface/actionSelector.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ActionSelector)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _autoMap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./autoMap */ "./games/Avalonika/src/interface/autoMap.js");
/* harmony import */ var _cursor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cursor */ "./games/Avalonika/src/interface/cursor.js");
/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./interface */ "./games/Avalonika/src/interface/interface.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _lib_button2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lib/button2 */ "./engine/src/lib/button2.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _lib_colors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lib/colors */ "./engine/src/lib/colors.js");
/* harmony import */ var _lib_grid9__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @lib/grid9 */ "./engine/src/lib/grid9.js");
/* harmony import */ var _lib_listView__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @lib/listView */ "./engine/src/lib/listView.js");
/* harmony import */ var _entity_prop__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../entity/prop */ "./games/Avalonika/src/entity/prop.js");
/* harmony import */ var _entity_monster__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../entity/monster */ "./games/Avalonika/src/entity/monster.js");
/* harmony import */ var _entity_npc__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../entity/npc */ "./games/Avalonika/src/entity/npc.js");
/* harmony import */ var _entity_item__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../entity/item */ "./games/Avalonika/src/entity/item.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");





















/*

스킬과 아이템을 고른다.

*/


function spriteFunc( lv, lvItem, index, owner ) {
    let _world = owner;
    let item = lvItem.data.item;
    let spr = item.getInventorySprite();

    // spr.enableMouseDrag(true, {
    //     verticalLock:      true,
    //     mouseDownCallback: (this, e) => {
    //         e.drag.cancel = true;
    //     },
    //     mouseMoveCallback: (this, e) => {
    //         if (item.isItem && item != GLOBAL.player.baseWeapon) {
    //             e.drag.x = Math.max(e.drag.x, e.drag.ox);
    //             if (e.drag.dx > 60) { // 버리기
    //                 spr.setAlpha(0.5);
    //             } else {
    //                 spr.setAlpha(1);
    //             }
    //         } else {
    //             e.drag.x = Utils.clamp(e.drag.x, e.drag.ox, e.drag.ox + 10);
    //         }
    //         e.drag.cancel = true;
    //     },
    //     mouseUpCallback: (this, e) => {
    //         if (item.isItem && item != GLOBAL.player.baseWeapon) {
    //             e.drag.x = Math.max(e.drag.x, e.drag.ox);
    //             if (e.drag.dx > 60) { // 버리기
    //                 _world.addLog("%s{을} 바닥에 버렸다.", item.name);
    //                 GLOBAL.interface.actionSelector.unselect(item);
    //                 lv.remove(lvItem);
    //                 GLOBAL.player.inventory.removeItem(item);
    //                 item.drop(GLOBAL.player.tileX, GLOBAL.player.tileY);
    //             } else {
    //                 new Tween(spr, 100, { x: e.drag.ox }, { ease: easing.outCubic });
    //             }
    //         } else {
    //             e.drag.x = Utils.clamp(e.drag.x, e.drag.ox, e.drag.ox + 10);
    //             new Tween(spr, 100, { x: e.drag.ox }, { ease: easing.outCubic });
    //         }
    //         e.drag.cancel = true;
    //     },
    // });
    return [spr,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.width,spr.getHeight() - 3];
}


/**
 * @this ActionSelector
 *
 * @param {*} e
 */
function onClick( e ) {
    let item = e.item.data.item;

    if ( item.isEquippable() ) {
        _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.inventory.tryEquip( item,true );
    }
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/changer_select.wav" );
    this.select( item );
    this.close();
}


/**
 * @this ActionSelector
 *
 */
function showEquips() {
    let items = [];

    //t[t.length+1] = GLOBAL.player.baseWeapon;
    {
        let t0 = _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.skills;

        if ( t0.length > 0 ) {
            for ( let i in t0 ) {
                let v = t0[i];

                items.push( v );
            }
        }
    }
    /*
    if (false) {
        let t0 = [GLOBAL.player.inventory.findEquippedItemByType("ranged")];
        if (t0.length > 0) { 
            for (let i in t0) {
                let v = t0[i];
                t.push(v);
            }
        }
    }
    if (false) {
        let t0 = [GLOBAL.player.inventory.findEquippedItemByType("melee")];
        if (t0.length > 0) { 
            for (let i in t0) {
                let v = t0[i];
                t.push(v);
                console.log(v.name);
            }
        }
    }
	*/
    for ( let i in items ) {
        let v = items[i];

        if ( !this.actions.includes( v ) ) {
            this.actions.unshift( v ); // 없는 것이면 맨위에 추가
        }
    }
    for ( let i = this.actions.length - 1; i >= 0; i-- ) {
        if ( !items.includes( this.actions[i] ) ) {
            this.actions.splice( i,1 );
        }
    }
	
    //this.select() -- 주먹이라도 선택
	
    let lvItems = [];

    for ( let i in this.actions ) {
        let v = this.actions[i];

        lvItems.push( [v.name, { item: v }] );
    }

    let lv = new _lib_listView__WEBPACK_IMPORTED_MODULE_10__["default"](
        lvItems,
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.width,
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.height - 40,
        {
            owner:         _global__WEBPACK_IMPORTED_MODULE_15__["default"].world,
            align:         "bottom",
            //clip:          true,
            //cutOffsetBottom = 40,
            stickOnBorder: true,
            spriteFunc:    spriteFunc,
            animationFunc: ( self, spr, i ) => {
                let i2 = self.getNumOfItems() - i + 1;
                let x = spr.getX();

                spr.setX( x - 10 );
                spr.setAlpha( 0 );
                new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( spr, 100, { x: x, alpha: 1 }, { delay: i2 * 0.02, ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );
            },
        }
    );

    lv.setPosition( _config__WEBPACK_IMPORTED_MODULE_16__["default"].Interface.margin,0 );
    lv.addEventListener( "click",onClick,this );
    lv.addEventListener( "close",this.close,this );
    this.baseSpr.addChild( lv );
    this.listView = lv;
}

class ActionSelector extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( selectedIcon ) {
        super();
        this.listView = undefined;
        this.selectedIcon = selectedIcon;
        this.actions = [];
        let [x, y, w, h] = [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.left, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.top, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height];
        let m = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();//helper.createBox(x,y,w,h,0xff0000,0.5);

        m.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN, ( e ) => {
            if ( this.isVisible() ) {
                this.close();
                e.stopPropagation();
            }
        } );
        this.addChild( m );
        this.setVisible( false );
        this.baseSpr = m;
    }

    refresh() {
        let action = _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.selectedAction;

        this.selectedIcon.setColRow( 1, 1 );
        let icon = action.getIcon();

        if ( action.property.type == "melee" ||
			action.property.type == "ranged" ) {
            _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].cursor.setMode( icon.property.type );
        } else {
            _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].cursor.setMode( action.property.type );
        }
        this.selectedIcon.clearChildren();
        icon.setX( -8 );
        this.selectedIcon.addChild( icon );
    }

    select( action ) {
        action = action || _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.selectedAction;
        _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.selectedAction = action;
        this.refresh();
        // 마지막에 쓴걸 맨아래로
        let idx;

        for ( let i = 0; i < this.actions.length; i++ ) {
            let v = this.actions[i];

            console.log( v.name );
            if ( v == action ) {
                idx = i;
                break;
            }
        }
        this.actions.splice( idx );
        this.actions.push( action );
    }


    // 장비중인 아이템을 버리거나 할 경우
    unselect( item ) {
        if ( item == _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.selectedAction ) {
            if ( _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].cursor.mode == "hybrid" ) {
                let equipRanged = _global__WEBPACK_IMPORTED_MODULE_15__["default"].player && _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.inventory.findEquippedItemByType( "ranged" );
                let equipMelee = _global__WEBPACK_IMPORTED_MODULE_15__["default"].player && _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.inventory.findEquippedItemByType( "melee" );

                if ( equipRanged ) {
                    this.select( equipRanged );
                } else {
                    this.select( equipMelee );
                }
            } else {
                this.select( _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.baseWeapon );
            }
        }
        this.refresh();
    }

    open() {
        _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].hudLayer.addChild( this );
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/changer_open.wav" );
        _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].hideInfo();
        showEquips.call( this );
        this.setVisible( true );
    }

    close() {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/changer_close.wav" );
        this.setVisible( false );
        this.baseSpr.clearChildren();
        this.removeFromParent();
        _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.showMapInfo( _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.tileX, _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.tileY );
    }

    isOpen() {
        return this.isVisible();
    }
}




/***/ }),

/***/ "./games/Avalonika/src/interface/autoMap.js":
/*!**************************************************!*\
  !*** ./games/Avalonika/src/interface/autoMap.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AutoMap)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _lib_grid9__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/grid9 */ "./engine/src/lib/grid9.js");
/* harmony import */ var _world_world__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../world/world */ "./games/Avalonika/src/world/world.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lib/visibilityTile */ "./engine/src/lib/visibilityTile.js");












let clipWidth = 100;
let clipHeight = 100;
// 그리기용
let p0 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( 0xffffff,1,1,1 );
let p1 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( 0xffffff,1,1,1 );
let p2 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( 0xffffff,1,1,1 );
let p3 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( 0xffffff,1,1,1 );
let p4 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( 0xffffff,1,1,1 );

p1.setPosition( 0,-1 );
p2.setPosition( 1,0 );
p3.setPosition( 0,1 );
p4.setPosition( -1,0 );
p0.addChild( p1 );
p0.addChild( p2 );
p0.addChild( p3 );
p0.addChild( p4 );

/**
 * @this AutoMap
 *
 * @param {Event} e
 */
function onPointerDown( e ) {
    if ( this.hitTestPointPixel( e.x,e.y ) ) {
        let { x: ex, y: ey } = this.getParent().globalToLocal( e.x, e.y );//stageSprite.globalToLocal(e.x,e.y);

        this.__drag = { ox: this.getX(), oy: this.getY(), ex: ex, ey: ey };
        e.stopPropagation();
    }
}

/**
 * @this AutoMap
 *
 * @param {Event} e
 */
function onPointerUp( e ) {
    if ( this.__drag ) {
        let { x: ex, y: ey } = this.getParent().globalToLocal( e.x, e.y );//stageSprite.globalToLocal(e.x,e.y);
        let x = ex + this.__drag.ox - this.__drag.ex;
        let y = ey + this.__drag.oy - this.__drag.ey;

        this.setPosition( x,y );
        this.__drag = null;
        e.stopPropagation();
    }
}

/**
 * @this AutoMap
 *
 * @param {Event} e
 */
function onPointerMove( e ) {
    if ( this.__drag ) {
        let { x: ex, y: ey } = this.getParent().globalToLocal( e.x, e.y );//stageSprite.globalToLocal(e.x,e.y);
        let x = ex + this.__drag.ox - this.__drag.ex;
        let y = ey + this.__drag.oy - this.__drag.ey;

        this.setPosition( x,y );
        e.stopPropagation();
    }
}

/**
 *
 *
 * @class AutoMap
 * @extends {Sprite}
 */
class AutoMap extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor() {
        super();
        this.mapScale = 2;
        this.clear();
        let p = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( 0xffffff,1 );

        p.setScale( this.mapScale );
        let mc = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MovieClip( [
            [0,30,p,{ alpha:  [1,0],
                      scaleX: [this.mapScale * 2,this.mapScale],
                      scaleY: [this.mapScale * 2,this.mapScale],
                      x:      [-this.mapScale,-this.mapScale / 2],
                      y:      [-this.mapScale, -this.mapScale / 2]
            }],
            [30,"goto",0]
        ] );

        this.mapLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.mapLayer.addChild( mc );
        this.addChild( this.mapLayer );
        this.relX = 0;
        this.relY = 0;
        this.xMin = Number.MAX_VALUE;
        this.xMax = Number.MIN_VALUE;
        this.yMin = Number.MAX_VALUE;
        this.yMax = Number.MIN_VALUE;
        this.mapLayer
            .on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN,onPointerDown,this )
            .on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP,onPointerUp,this )
            .on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_MOVE,onPointerMove,this );
    }

    clear() {
        if ( this.bitmap ) this.bitmap.removeFromParent();
        if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world && _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.map ) {
            this.rtt = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.RenderTarget( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.map.width, _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.map.height );
            this.bitmap = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( this.rtt );
            this.addChildAt( this.bitmap, 0 );
            this.bitmap.setScale( this.mapScale );
            this.bitmap.setBlendMode( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite.BlendModes.SCREEN );
        }
    }



    setPlayerPosition( x, y ) {
        this.bitmap.setPosition( Math.floor( -x * this.mapScale + 1 ),Math.floor( -y * this.mapScale + 1 ) );
        [this.relX, this.relY] = [x, y];
        this.setClip( -clipWidth / 2, -clipHeight / 2, clipWidth, clipHeight );
    }

    drawTile( x,y,forceReveal ) {
        let pr = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getProperty( x,y );

        p1.setColor( 0xff0000,0 );
        p2.setColor( 0xff0000,0 );
        p3.setColor( 0xff0000,0 );
        p4.setColor( 0xff0000,0 );
        if ( forceReveal || pr.revealed ) {
            if ( ( pr.wall & _world_gameMap__WEBPACK_IMPORTED_MODULE_5__["default"].BLOCK_PASS ) != 0 ) {
                if ( forceReveal ) {
                    if ( pr.char == "E" ) {
                        p0.setColor( 0xa00000,1 );
                    } else {
                        p0.setColor( pr.mapColor != null ? pr.mapColor : 0x606060,1 );
                    }
                } else {
                    if ( pr.char == "E" ) {
                        p0.setColor( 0xff4000,1 );
                    } else {
                        p0.setColor( pr.mapColor != null ? pr.mapColor : 0x808080,1 );
                    }
                }
            } else {
                p0.setColor( pr.mapColor != null ? pr.mapColor : 0x202020,1 );
                if ( !forceReveal ) {
                    if ( !_global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getProperty( x,y - 1 ).revealed ) {
                        p1.setColor( 0xff4000,1 );
                    }
                    if ( !_global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getProperty( x + 1,y ).revealed ) {
                        p2.setColor( 0xff4000,1 );
                    }
                    if ( !_global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getProperty( x,y + 1 ).revealed ) {
                        p3.setColor( 0xff4000,1 );
                    }
                    if ( !_global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getProperty( x - 1,y ).revealed ) {
                        p4.setColor( 0xff4000,1 );
                    }
                }
            }
            p0.setPosition( x - 1,y - 1 );
            this.rtt.draw( p0 );
        }
        this.xMin = Math.min( this.xMin,x );
        this.xMax = Math.max( this.xMax,x );
        this.yMin = Math.min( this.yMin,y );
        this.yMax = Math.max( this.yMax,y );
        let mw = this.xMax - this.xMin;
        let mh = this.yMax - this.yMin;

        this.mapScale = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( 50 / Math.max( mw,mh ),1,2 );
        this.bitmap.setScale( this.mapScale );
        this.bitmap.setPosition( Math.floor( -this.relX * this.mapScale + 1 ),Math.floor( -this.relY * this.mapScale + 1 ) );
    }

    drawAll( forceReveal ) {
        this.rtt.clear( 0x000000,1 );
        for ( let y = 0; y < _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.map.height; y++ ) {
            for ( let x = 0; x < _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.map.width; x++ ) {
                this.drawTile( x,y,forceReveal );
            }
        }

        return this.bitmap;
    }



    hitTestPointPixel( x, y ) {
        if ( !this.hitTestPoint( x, y ) ) {
            return false;
        } else {
            let { x: ex, y: ey } = this.bitmap.globalToLocal( x, y );
            let tx = Math.floor( ex );
            let ty = Math.floor( ey );

            console.log( x,y,ex,ey,this.relX,this.relY );
            if ( tx >= this.relX - 5 && tx <= this.relX + 5 && ty >= this.relY - 5 && ty <= this.relY + 5 ) {
                return true;
            } else if ( ex < this.relX - clipWidth / 2 || ex > this.relX + clipWidth / 2 ||
				ey < this.relY - clipHeight / 2 || ey > this.relY + clipHeight / 2 ) {
                return false;
            } else if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getProperty( tx, ty ).revealed ) {
                return true;
            } else {
                return false;
            }
        }
    }
}





/***/ }),

/***/ "./games/Avalonika/src/interface/cursor.js":
/*!*************************************************!*\
  !*** ./games/Avalonika/src/interface/cursor.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Cursor)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _lib_grid9__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lib/grid9 */ "./engine/src/lib/grid9.js");
/* harmony import */ var _world_world__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../world/world */ "./games/Avalonika/src/world/world.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lib/visibilityTile */ "./engine/src/lib/visibilityTile.js");
/* harmony import */ var _entity_monster__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../entity/monster */ "./games/Avalonika/src/entity/monster.js");
/* harmony import */ var _entity_pet__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../entity/pet */ "./games/Avalonika/src/entity/pet.js");
/* harmony import */ var _entity_npc__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../entity/npc */ "./games/Avalonika/src/entity/npc.js");












/*

게임의 조작계에 해당하는 부분
플레이어 캐릭터에게 interact나 moveTo 등을 불러주게 된다.

여기 코드 때 되면 대수술 정리 해야할 것 같다.
처음엔 커서였는데 모든 조작이 여기에 의존하고 있음.
_controller 같은게 되어야 하지 않을까 싶은 생각이 듬

*/



const typeToCol = {
    ["tile"]:     1,
    ["door"]:     2,
    ["interact"]: 3,
    ["talk"]:     4,
    ["attack"]:   5,
    ["aim"]:      6,
    ["player"]:   7,
    ["target"]:   8,
};

//-------------------------------------------------------------------------------------------------------------------
// 마우스 이벤트 처리
//-------------------------------------------------------------------------------------------------------------------

/**
 * @this Cursor
 *
 * @param {*} e
 */
function onMouseWheel( e ) {
    //log(e.wheel);
    if ( this.isVisibleDeeply() ) {
        _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.sightManager.setZoom( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.sightManager.getZoom() - e.wheel / 1000 );
    }
    //this.setType("tile");
}

/**
 * @this Cursor
 *
 * @param {number} ex
 * @param {number} ey
 * @param {boolean} immediatly
 */
function onPointerHold( ex,ey,immediatly ) {
    this.holdTimer = null;

    if ( this.__drag ) {
        console.log( "홀드" );
        this.__drag.dragCursor = true;
        const { x: tx, y: ty } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.stageToTile( ex,ey );
        let { x: ex2, y: ey2 } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToStage( tx,ty );
        const sx = 1 / _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.zoom;
        const sy = 1 / _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.zoom;

        [ex2,ey2] = [ex2 * sx,ey2 * sy];
        this.__drag.ex = ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.width / 2 - ex2 + ex );
        this.__drag.ey = ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.height / 2 - ey2 + ey );

        if ( this.twCursor ) {
            this.twCursor.stop();
        }

        if ( immediatly ) {
            this.x = ex2;
            this.y = ey2;
            this.twCursor = null;
        } else {
            this.twCursor = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, 300, { x: ex2, y: ey2 }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } )
                .onComplete( () => {
                    this.twCursor = null;
                } );
        }

        this.__drag.click = false;
        this.__drag.holded = true;
    }
}



/**
 * @this Cursor
 * @param {*} e 
 */
function onPointerDown( e ) {
    if ( !this.isVisibleDeeply() ) {
        return;
    }

    console.log( "커서" + this.getPath( true ) );
    this.hideAutoAction();
    const { x: ex, y: ey } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].stage.globalToLocal( e.x,e.y );

    this.__drag = { ox: _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.viewX, oy: _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.viewY, ex: ex, ey: ey, click: true, cx: this.x, cy: this.y };

    if ( !this.locked ) {
        if ( e.type == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.MOUSE_DOWN ) {
            this.__drag.dragCursor = true;
            onPointerHold.call( this,ex, ey,true );
        } else {
            if ( this.mesh.hitTestPoint( e.x, e.y ) ) {
                //log("커서 눌림");
                this.__drag.dragCursor = true;
            }

            this.holdTimer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer( 500, 1 ).on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.TIMER, () => {
                onPointerHold.call( this, ex, ey );
            } );
            this.holdTimer.start();
        }
    }
}

/**
 * @this Cursor
 * @param {*} e 
 */
function onPointerMove( e ) {
    if ( this.__drag ) {
        if ( this.aimLine ) {
            this.aimLine.removeFromParent();
        }

        const { x: ex, y: ey } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].stage.globalToLocal( e.x,e.y );
        // const { x: ex, y: ey } = { x: e.x,y: e.y };// GLOBAL.stage.globalToLocal( e.x,e.y );
        const sx = 1 / _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.zoom;
        const sy = 1 / _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.zoom;
        const dx = ( this.__drag.ex - ex ) / sx;
        const dy = ( this.__drag.ey - ey ) / sy;
        const x = this.__drag.ox + this.moveDir * dx;
        const y = this.__drag.oy + this.moveDir * dy;
        const { x: x1, y: y1 } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.stageToWorld( this.__drag.ex, this.__drag.ey );
        const pos = this.getPosition();
        const { x: x2, y: y2 } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.stageToWorld( pos.x,pos.y );

        if ( !this.locked ) {
            this.stopSnap();

            if ( this.__drag.dragCursor ) {
                if ( this.twCursor == null ) {
                    this.setPosition( this.__drag.cx - dx * this.mesh.getScaleX(),this.__drag.cy - dy * this.mesh.getScaleY() );
                }
            } else {
                _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.sightManager.moveViewTo( x,y );
            }

            if ( Math.abs( dx ) > _config__WEBPACK_IMPORTED_MODULE_2__["default"].World.tileWidth / 2 ||
                Math.abs( dy ) > _config__WEBPACK_IMPORTED_MODULE_2__["default"].World.tileHeight / 2 ) {
                this.__drag.click = false;
                _global__WEBPACK_IMPORTED_MODULE_1__["default"]["interface"].hideInfo();

                if ( this.holdTimer ) {
                    this.holdTimer.stop();
                    this.holdTimer = null;
                }
            }

            this.dragging( x1,y1,x2,y2 );
            e.stopPropagation();
        } else {
            console.log( "락" );
        }
    }
}

/**
 * @this Cursor
 * @param {*} e 
 */
function onPointerUp( e ) {
    console.log( "커서UP " + this.getPath( true ) );

    if ( this.holdTimer ) {
        this.holdTimer.stop();
        this.holdTimer = null;
    }

    if ( this.__drag ) {
        if ( this.aimLine ) {
            this.aimLine.removeFromParent();
        }

        const { x: ex, y: ey } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].stage.globalToLocal( e.x,e.y );
        const sx = 1 / _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.zoom;
        const sy = 1 / _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.zoom;
        const dx = ( this.__drag.ex - ex ) / sx;
        const dy = ( this.__drag.ey - ey ) / sy;
        const x = this.__drag.ox + this.moveDir * dx;
        const y = this.__drag.oy + this.moveDir * dy;
        const { x: x1, y: y1 } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.stageToWorld( this.__drag.ex, this.__drag.ey );
        const pos = this.getPosition();
        const { x: x2, y: y2 } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.stageToWorld( pos.x,pos.y );

        if ( this.locked ) {
            if ( this.__drag.click ) {
                const { x: rcx, y: rcy } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.stageToWorld( ex,ey );

                this.reservedClick.push( [rcx, rcy, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now()] );
                console.log( "선입력 저장",this.reservedClick.length );
            }
        } else {
            if ( this.__drag.dragCursor ) {
            } else {
                _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.sightManager.moveViewTo( x,y );
            }

            if ( !this.__drag.holded ) this.snapToWorld();

            if ( this.__drag.click ) {
                this.__drag = null;
                const { x: tx, y: ty } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.stageToWorld( ex, ey );

                this.click( tx,ty );
            } else {
                this.__drag = null;
                this.drag( x1,y1,x2,y2 );
            }

            e.stopPropagation();
        }
    }
}



//-------------------------------------------------------------------------------------------------------------------
// 터치 핸들러
//-------------------------------------------------------------------------------------------------------------------

/**
 * @this Cursor
 * @param {*} e 
 */
function onTouchesBegin( e ) {
    const te = e.touches;

    if ( te.length == 2 && this.isVisibleDeeply() ) {
        if ( this.aimLine ) {
            this.aimLine.removeFromParent();
        }

        this.__drag = null;
        const [x1,y1,x2,y2] = [te[0].x,te[0].y,te[1].x,te[1].y];

        this.__touches = { dist: Math.sqrt( ( x2 - x1 ) * ( x2 - x1 ) + ( y2 - y1 ) * ( y2 - y1 ) ), zoom: _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.sightManager.getZoom() };
        e.stopPropagation();
        /*	} else if (te.length==1) {
		e.x, e.y = e.touch.x, e.touch.y;
		onMouseDown(self,e)*/
    }
}

/**
 * @this Cursor
 * @param {*} e 
 */
function onTouchesMove( e ) {
    const te = e.touches;

    if ( this.__touches && te.length == 2 ) {
        const [x1,y1,x2,y2] = [te[0].x,te[0].y,te[1].x,te[1].y];
        const dist = Math.sqrt( ( x2 - x1 ) * ( x2 - x1 ) + ( y2 - y1 ) * ( y2 - y1 ) );
        const delta = this.__touches.dist / ( dist + 0.00001 );

        //log("핀치줌델타",delta);
        _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.sightManager.setZoom( this.__touches.zoom *  delta );
        this.setType( "tile" );
        e.stopPropagation();
        /*	} else if (te.length==1) {
		e.x, e.y = e.touch.x, e.touch.y;
		onMouseMove(self,e)*/
    }
}

/**
 * @this Cursor
 * @param {*} e 
 */
function onTouchesEnd( e ) {
    const te = e.allTouches;

    if ( this.__touches ) {
        this.__touches = null;
        this.snapToPlayer();
        e.stopPropagation();
        /*	} else if (te.length==1) {
		e.x, e.y = e.touch.x, e.touch.y;
		onMouseUp(self,e)*/
    }
}


/**
 * @this Cursor
 * @param {*} e 
 */
function onKeyDown( e ) {
    if ( this.locked ) {
        return;
    }

    console.log( e.keyCode );
    const [rx,ry] = [_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.tileX, _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.tileY];

    this.__drag = null;
    let ax,ay;

    if ( e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.LEFT ) {
        [ax, ay] = [-1, 0];
    } else if ( e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.RIGHT ) {
        [ax, ay] = [1, 0];
    } else if ( e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.UP ) {
        [ax, ay] = [0, -1];
    } else if ( e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.DOWN ) {
        [ax, ay] = [0, 1];
    } else if ( e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.S ) {
        _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityManager.safeExecute( () => {
            _global__WEBPACK_IMPORTED_MODULE_1__["default"].saveLoad.save();
        } );
    } else if ( e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.L ) {
        _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityManager.safeExecute( () => {
            _global__WEBPACK_IMPORTED_MODULE_1__["default"].saveLoad.load();
        } );
    } else if ( e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.P ) {
        // GLOBAL.player.playMusic( `
        // MML@t106v15L8r16G#.ABB>C16C.&C<E.F#.&F#A.B.>D<B.,
        // v0r16L8D.DEG#.G.&GC.C.&CF#.F#.rG.G.&GE4E4D#4F#4,
        // v0r16<L8E.F#G#<A2>D4.<F#G2>C2<F#4.AB2r16E.EF#G#.;
        // ` );
        _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.playMusic( `
        MML@t106L8r16G#.ABB>C16C.&C<E.F#.&F#A.B.>D<B.BB16B16B16BAAG16GF#.r.D#16AGGA16B.G#ABB>C16C.&Cr16E.DCC<B16B.&BF#E16EB16B16B16BA16A.GGF#AG16G16E2>F#.E.<B>G.F#.&F#A.G.<A16>e16F.E.<A>F.E.<A>G.F.&F<G32>C#32E32A4.&A32r<FFF16F.<AB->CC<B-16>F.&FrB-.B-16D16E16FFFF16F.GEDDE16C.&CrG.A.FDDE16F.DEFDA16A.&ArF.A16F16G16AAAA16A.B-GF16G.&Gr4A4>E4F<FFF16F.<AB->CC<B-16>F.&F>C<A.B-16D16E16FFFF16F.EFG16A2&A16rAB-F#o1B>B<B>B<B->B-<B->B-<A>A<A>AD>D<D>D<G#>G#<G#>G#<A>A<A>A<D4>D<D4A>D<DG.>D16G4<CG>C<CF.>C16F<F<B->FB-<B-B.B16r4B.>BB.E>E<F#>F#<G#>G#<E4o4B>C16C.&Cr<F#GAAB16B.&Br4r16B16B16B16BAAG16GF#.r.D#16AGGA16B.G#ABB>C16C.&Cr16E.DCC<B16B.&Br4r16B16B16B16BA16A.GGF#AG16G16o2E>E<E>E<D>D<D>D<C>C<C>C<<B>B<B>BD>D<D>D<C>C<C>C<B->B-<B->B-<A2L32DA1.r4.r16.,
        v14r16L8D.DEG#.G.&GC.C.&CF#.F#.rG.G.&GE4E4D#4F#4r16E.ED#D4D4<<A.>AE16<AD.>D.<DG.>GD16<GCG>C<CF#4>F#<F#<B.>B.<B>E>E<E>E<D>D<D>D<C>C<C>C<<B>B<B>BD>D<D>D<C>C<C>C<<B->B-<B->B-<A2>D4>D4<DA>D4<G4>G.D16<G>DG<GC4>C.<G16C4>C4<F4>F.C16<F>CF4<<B-4>B-4<B->FB-<B-B4>B4<BB>B4C4>C.<G16C4>C4<C#4>C#.<A16C#A>C#<C#D4>D4<DA>D4<G4>G..D16<G>DG<GC4>C.<G16C4>C4<E-4>E-.<E-16DD>D<D>>v15A.G.GrGAEG.F.F4.DEFF16E.EFEGF16F16D2rAB-F#A.G.GrGAEG.F.F4FGFE.E.ED#.B.AAG#G#A16BG#.ABo1A4>A4DA>D<DG4>G<GCG>C<CF#4>F#4<<B4>B4E16>E<E16>E<F#G#>EG#<G#<A4>A4DA>D<DF4>F<FEB>E<E<A.>E16A4<B>F#B<Bo5F#.E.<B>F#.E.<B>G.F#.&F#A.G.<A16>E16F.E.<A>F.E.<A>G.F.&FL32rC#EA4.&Arr<<F#A>CE1&E4.r4.rrr,
        v14r16<L8E.F#G#<A2>D4.<F#G2>C2<F#4.AB2r16E.EF#G#.>E.&E>L4EGF#AAGL8<AG16G.&G>E.E<A.>E4D#4>F#.E.<BB.B.GB.B.&B>D#.D#.r<A.A.rA.A.rA.A.&Ar2<A.>C4r.F.A.B-.D16r4.F.F.<B-.B-16r4.>D.<B-.>C2rC.E.C.<A16r4.>A4.F2rD.D.F.C16r4.G.F.B-.C16r4E4A4A4r4.>C.<A.B-2rF.F.D2r<B-.>E-.F.D-16r4F#4C4>A.G.&GA.B-.&B->C.<F.&FE.F.&FF.E.&EF.E.&ED.<A.A.B-.><F4L2DDE-D<AB>E<B4>E4L8E-.G.CE-.E-.CE.F#.>D<B4E4E.CC.<B.>D.rE16>E.ED#D<E.G.D.G.CF#.F#.DA.F.AA.G#.&G#E4ECD#<B.B.L2>GGBAAAAG;
        ` );
        // GLOBAL.player.playMusic( `
        // MML@t106v10cr>d,v10er>e,v10gr>a;` );
        // GLOBAL.player.playMusic( `MML@t106v15cdefgab>c,>c<bafedc;` );
    }

    if ( ax != null ) {
        e.stopPropagation();
        const isInteractTile = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getProperty( rx + ax,ry + ay ).char == "E";
 
        if ( isInteractTile || _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityManager.getEntity( rx + ax,ry + ay ) ) {
            _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.interact( rx + ax,ry + ay );
        } else {
            _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.findPathAndMoveTo( rx + ax,ry + ay );
        }
    }
}

/**
 * @this Cursor
 * @param {number} x
 * @param {number} y
 */
function snapToXy( x, y ) {
    if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"]["interface"].isSidePanelOpened() ) {
        return;
    }

    if ( this.tw ) {
        this.tw.stop();
    }

    if ( this.twCursor ) {
        this.twCursor.stop();
    }

    //log("Snap",x,y);
    this.twCursor = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, 500, { x: _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.viewWidth / 2, y: _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.viewHeight / 2 }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );
    const tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world, 500, { viewX: x, viewY: y }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } )
        .onChange( () => {
            console.assert( !Number.isNaN( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.viewX ) );

            if ( !_global__WEBPACK_IMPORTED_MODULE_1__["default"]["interface"].isSidePanelOpened() ) {
                _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.sightManager.moveViewTo( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.viewX + _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getX() / 2, _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.viewY + _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getY() / 2 );
            }
        } )
        .onComplete( () => {
            this.tw = null;
        } );

    this.tw = tw;
}

/**
 *
 * @this Cursor
 * @param {Sprite} icon1
 * @param {Sprite} icon2
 * @returns {Sprite}
 */
function getActionBox( icon1, icon2 ) {
    const m = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh();
    const wf = new _lib_grid9__WEBPACK_IMPORTED_MODULE_4__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "BlackFrame.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );
    const w = icon1.getWidth() + icon2.getWidth() + 40;
    const h = Math.max( icon1.getHeight(), icon2.getHeight() ) + 10;
    const baseSpr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();

    wf.setRect( -w / 2, -h / 2, w, h );
    wf.setAlpha( 0.8 );
    const b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "useTo.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

    b.setOverrideColor( 0xff9000 );
    b.setAnchorPoint( 0.5, 0.5 );
    b.setPosition( 0, 0 );
    b.setBlendMode( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite.BlendModes.ADD );
    const mc = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MovieClip( [
        [ 0, 60, b,{ alpha: [ 0, 1] }],
        [61, 120, b, { alpha: [1, 0] }],
        [120,"goto",0]
    ] );

    baseSpr.addChild( wf );
    baseSpr.addChild( mc );
    icon1.setPosition( -w / 2 / 2.1, -2 );
    baseSpr.addChild( icon1 );
    icon2.setPosition( w / 2 / 2.1, -2 );

    baseSpr.addChild( icon2 );

    return baseSpr;
}





class Cursor extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
//-------------------------------------------------------------------------------------------------------------------
// 초기화
//-------------------------------------------------------------------------------------------------------------------

    constructor() {
        super();
        this.mesh = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_3__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "cursors.png",false,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA4444 } ),1,1,32,32 );
        this.addChild( this.mesh );
        this.setType( "player" );
        this.moveDir = 1;
        this.mode = "melee";
        this.reservedClick = [];
        this.__touches = null;
        this.setPosition( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.viewWidth / 2,_global__WEBPACK_IMPORTED_MODULE_1__["default"].world.viewHeight / 2 );
        this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN,onPointerDown,this );
        this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP,onPointerUp,this );
        this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_MOVE,onPointerMove,this );
        this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_DOWN, onKeyDown, this );
        this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.MOUSE_WHEEL,onMouseWheel,this );
        this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.TOUCHES_BEGIN,onTouchesBegin,this );
        this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.TOUCHES_END,onTouchesEnd,this );
        this.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.TOUCHES_MOVE,onTouchesMove,this );
    }

	
    holded() {
        if ( this.__drag && this.__drag.holded ) {
            return true;
        }
    }

    cancelHold() {
        if ( this.holdTimer ) {
            this.holdTimer.stop();
            this.holdTimer = null;
        }

        this.__drag = null;
    }

    setType( type,color ) {
        this.mesh.setColRow( typeToCol[type],1 );

        if ( color ) {
            this.mesh.setOverrideColor( color );
        } else {
            this.mesh.setOverrideColor( 0xffffff,1 );
        }
    }

    resetScale() {
        const sx = 1 / _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.zoom;
        const sy = 1 / _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.zoom;

        this.mesh.setScale( sx,sy );
    }

    snapToWorld() {
        const pos = this.getPosition();
        const { x: tx, y: ty } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.stageToTile( pos.x,pos.y );

        if ( !this.tw ) {
            const { x: px, y: py } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToWorld( tx,ty );

            snapToXy.call( this,px,py );
        }

        return [tx,ty];
    }

    snapToPlayer() {
        const [tx,ty] = [_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.tileX, _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.tileY];

        if ( !this.__drag ) {
            const { x: px, y: py } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToWorld( tx,ty );

            snapToXy.call( this,px,py );
        }

        this.setType( "player" );

        return [tx,ty];
    }

    stopSnap() {
        if ( this.tw ) {
            this.tw.stop();
            this.tw = null;
        }

        if ( !this.holded() && this.twCursor ) {
            this.twCursor.stop();
            this.twCursor = null;
        }
    }

    setTileXy( x,y ) {
        const { x: tx, y: ty } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToStage( x,y );

        this.setPosition( tx,ty );
    }

    getTileXy() {
        const { x: tx, y: ty } = this.getPosition();

        return _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.stageToTile( tx,ty );
    }


    lock( time ) {
        if ( this.unlockTimer ) {
            this.unlockTimer.stop();
        }

        this.locked = true;
        //this.__drag = null;
        this.setVisible( false );

        if ( time ) {
            this.unlockTimer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( time,this.unlock,this );
        }
    }

    unlock() {
        if ( this.unlockTimer ) {
            this.unlockTimer.stop();
        }

        this.unlockTimer = null;
        this.locked = false;
        this.setVisible( true );
    }

    processReservedClick() {
        while ( this.reservedClick.length > 0 && this.reservedClick[0][2] < _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now() - 500 ) {
            //log("0.5초 전 클릭 버림",this.reservedClick[1][3],os.timer());
            this.reservedClick.shift();
        }

        if ( this.reservedClick.length > 0 ) {
            console.log( "선입력처리", this.reservedClick.length );
            this.click( this.reservedClick[0][0],this.reservedClick[0][1] );
            this.reservedClick.shift();
        }
    }

    setMode( mode ) {
        this.mode = mode;
    }

    click( x,y ) {
        let { x: tx, y: ty } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.worldToTile( x,y );
        let c = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityManager.getEntity( tx,ty );
        const isAttackableCreature = c && ( c instanceof _entity_monster__WEBPACK_IMPORTED_MODULE_8__["default"] && !( c instanceof _entity_pet__WEBPACK_IMPORTED_MODULE_9__["default"] ) && !( c instanceof _entity_npc__WEBPACK_IMPORTED_MODULE_10__["default"] ) ) && c.canBeSeen();
        const isProp = c && c.isProp && c.canBeSeen();
        const isNormalProp = isProp && !c.property.needPickAxe;
        const isStoneProp = isProp && c.property.needPickAxe;
        const dist =  _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.tileX,_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.tileY,tx,ty );

        //log(tx,ty,x,y);
        _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.stop();
        //플레이어 클릭 = 쉬기
        //몬스터클릭 = 레인지이면 레인지 공격
        //         = 밀리 범위이면 밀리 공격
        //땅클릭 = 근거리 적있으면 밀리 공격
        //      = 레인지, 범위에 적있으면 레인지 공격
        //      = 떨어진 아이템이 있으면 걸어가서 집기
        //      = 없으면 쉬기

        if ( c == _global__WEBPACK_IMPORTED_MODULE_1__["default"].player ) {
            this.setType( "player" );
            _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.doNothing( "아무 행동도 하지 않고 기다렸다." );

            return;
            // 탈출
        } else {
            let mode = this.mode;

            if ( isAttackableCreature && this.mode == "melee" && dist == 1 ) {
                mode = "melee";
            } else if ( isAttackableCreature && this.mode == "ranged" ) {
                mode = "ranged";
            } else if ( isProp && dist == 1 ) {
                mode = "melee";
            } else if ( isNormalProp && dist > 1 && this.mode == "ranged" ) {
                mode = "ranged";
            } else {
                //검색
                const t = _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.getNearEntities( 5,45,x,y );
                let doNothing = true;

                for ( const i in t ) {
                    const v = t[i];
                    const isAttackableCreature = v && ( v instanceof _entity_monster__WEBPACK_IMPORTED_MODULE_8__["default"] && !( v instanceof _entity_pet__WEBPACK_IMPORTED_MODULE_9__["default"] ) && !( v instanceof _entity_npc__WEBPACK_IMPORTED_MODULE_10__["default"] ) );

                    if ( isAttackableCreature && v.canBeSeen()[0] ) {
                        c = v;
                        [tx,ty] = [c.tileX,c.tileY];
                        ( { x, y } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToWorld( tx,ty ) );
                        doNothing = false;
                        break;
                    } else if ( v && v.isProp && !v.property.needPickAxe && v.canBeSeen()[0] ) {
                        c = v;
                        [tx,ty] = [c.tileX,c.tileY];
                        [x, y ] = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToWorld( tx,ty ).xy;
                        doNothing = false;
                        break;
                    } else if ( v && v.isProp && v.property.needPickAxe && _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistanceBetweenEntities( v,_global__WEBPACK_IMPORTED_MODULE_1__["default"].player ) == 1 ) {
                        c = v;
                        [tx,ty] = [c.tileX,c.tileY];
                        [x,y] = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToWorld( tx,ty ).xy;
                        doNothing = false;
                        break;
                    }
                }

                // 아무것도 안함
                if ( doNothing ) {
                    const items = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityManager.getItems( tx,ty );

                    if ( items ) {
                        console.log( "아이템 집기" );
                    }

                    // skip;
                    _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.interact( tx,ty,false,x,y );

                    return;
                }
            }

            this.setType( "aim" );
            _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.interact( tx,ty,mode == "ranged",x,y );
        }
    }

    drag( x1,y1,x2,y2 ) {
        const { x: tx, y: ty } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.worldToTile( x2,y2 );
        const [ptx,pty] = [_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.tileX,_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.tileY];
        const c = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityManager.getEntity( tx,ty );
        const isAttackableCreature = c && ( c instanceof _entity_monster__WEBPACK_IMPORTED_MODULE_8__["default"] && !( c instanceof _entity_pet__WEBPACK_IMPORTED_MODULE_9__["default"] ) && !( c instanceof _entity_npc__WEBPACK_IMPORTED_MODULE_10__["default"] ) ) && c.canBeSeen();
        const isProp = c && c.isProp && c.canBeSeen();
        const isNormalProp = isProp && !c.property.needPickAxe;
        const isStoneProp = isProp && c.property.needPickAxe;
        const pr = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getProperty( tx,ty );
        // 다른 오브젝트로 확장해야함
        const isInteractTile = !c && pr.char == "E"; 
        const distFromPlayer = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( ptx,pty,tx,ty );
        const mode = this.mode;
        let skip;

        // 공격이 우선
        if ( isAttackableCreature || isProp ) {
            this.setType( "aim" );

            if ( mode == "ranged" ) {
                // 적에게 드래그했으면 발사
                if ( isProp ) {
                    // 활을 들어도 1칸 거리면 근접공격
                    _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.interact( tx,ty,distFromPlayer > 1,x2,y2 );
                } else {
                    _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.interact( tx,ty,true,x2,y2 );
                }

                skip = true;
            } else if ( distFromPlayer == 1 ) {
                // 한칸 옆에 있으면 그냥 그 놈 공격
                _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.interact( tx,ty,false,x2,y2 );
                skip = true;
            }
            //this.setType("tile");
        }

        if ( !skip ) {
            if ( !pr.revealed ) {
                const { x: aim_x1, y: aim_y1 } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToWorld( ptx,pty );
                const [r,tx2,ty2,cx,cy] = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.map.visibilityTileChecker.traceRay( aim_x1,aim_y1,x2,y2,
                                                                                           _config__WEBPACK_IMPORTED_MODULE_2__["default"].World.tileWidth,_config__WEBPACK_IMPORTED_MODULE_2__["default"].World.tileHeight,_world_gameMap__WEBPACK_IMPORTED_MODULE_6__["default"].BLOCK_PASS | _world_gameMap__WEBPACK_IMPORTED_MODULE_6__["default"].BLOCK_VISION );

                if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getProperty( tx2,ty2 ).char == "E" ) {
                    // 이동 후에 문을 연다
                    this.setType( "door" );
                    _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.findPathAndMoveTo( tx2,ty2,tx2,ty2 );
                } else {
                    // 아니면 이동
                    _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.findPathAndMoveTo( tx,ty );
                }
            } else if ( isInteractTile && distFromPlayer == 1 ) {
                _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.interact( tx,ty );
            } else {
                if ( pr.char == "E" ) {
                    // 이동 후에 문을 연다
                    this.setType( "door" );
                    _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.findPathAndMoveTo( tx,ty,tx,ty );
                } else {
                    // 아니면 이동
                    _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.findPathAndMoveTo( tx,ty,tx,ty );
                }
            }
        }
    }

    dragging( x1,y1,x2,y2 ) {
        const { x: tx, y: ty } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.worldToTile( x2,y2 );
        const [ptx,pty] = [_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.tileX,_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.tileY];
        const c = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityManager.getEntity( tx,ty );
        const isAttackableCreature = c && ( c instanceof _entity_monster__WEBPACK_IMPORTED_MODULE_8__["default"] && !( c instanceof _entity_pet__WEBPACK_IMPORTED_MODULE_9__["default"] ) && !( c instanceof _entity_npc__WEBPACK_IMPORTED_MODULE_10__["default"] ) ) && c.canBeSeen()[0];
        const isProp = c && c.isProp && c.canBeSeen()[0];
        const isNormalProp = isProp && !c.property.needPickAxe;
        const isStoneProp = isProp && c.property.needPickAxe;
        const pr = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getProperty( tx,ty );
        const isInteractTile = c != null && pr.char == "E"; 
        const distFromPlayer = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistance( ptx,pty,tx,ty );

        if ( tx == ptx && ty == pty ) {
            this.setType( "player" );
        } else if ( this.mode == "ranged" ) {
            if ( ( isAttackableCreature || isNormalProp ) &&
				( distFromPlayer > 1 || ( distFromPlayer == 1 && this.mode == "ranged" ) ) ) {
                // 몬스터에 커서를 대고 있음
                if ( !this.__drag.aimed ) {
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/bow_aim.wav" );
                    this.__drag.aimed = true;
                }
				
                const { x: ox, y: oy } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.stageToWorld( this.getX(),this.getY() );
                const { x: aim_x1, y: aim_y1 } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToWorld( ptx,pty );
                const [r,tx,ty,cx,cy] = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.map.visibilityTileChecker.traceRay( aim_x1,aim_y1,x2,y2,
                                                                                         _config__WEBPACK_IMPORTED_MODULE_2__["default"].World.tileWidth, _config__WEBPACK_IMPORTED_MODULE_2__["default"].World.tileHeight,_world_gameMap__WEBPACK_IMPORTED_MODULE_6__["default"].BLOCK_VISION | _world_gameMap__WEBPACK_IMPORTED_MODULE_6__["default"].BLOCK_ARROW,
                                                                                         ( x,y ) => _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.entityManager.getEntity( x,y ) );
                const s = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Shape();

                s.setLineStyle( 1,0xffffff,0.5 );
                s.moveTo( aim_x1 - ox,aim_y1 - oy );
                s.lineTo( cx - ox,cy - oy );
                s.endPath();
                s.setScale( 1 / _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.zoom );
                this.addChild( s );
                this.aimLine = s;

                if ( r == _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_7__["default"].EMPTY ) {
                    this.setType( "aim" );
                } else {
                    this.setType( "aim",0x303030 );
                }
            } else if ( !pr.revealed ) {
                const { x: ox, y: oy } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.stageToWorld( this.getX(),this.getY() );
                const { x: aim_x1, y: aim_y1 } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToWorld( ptx,pty );
                const [r,tx2,ty2,cx,cy] = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.map.visibilityTileChecker.traceRay( aim_x1,aim_y1,x2,y2,
                                                                                           _config__WEBPACK_IMPORTED_MODULE_2__["default"].World.tileWidth,_config__WEBPACK_IMPORTED_MODULE_2__["default"].World.tileHeight,_world_gameMap__WEBPACK_IMPORTED_MODULE_6__["default"].BLOCK_VISION | _world_gameMap__WEBPACK_IMPORTED_MODULE_6__["default"].BLOCK_ARROW );

                if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getProperty( tx2,ty2 ).char == "E" ) {
                    this.setType( "door" );
                    const s = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Shape();

                    s.setLineStyle( 1,0xffffff,0.5 );
                    s.moveTo( aim_x1 - ox,aim_y1 - oy );
                    s.lineTo( cx - ox,cy - oy );
                    s.endPath();
                    s.setScale( 1 / _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.zoom );
                    this.addChild( s );
                    this.aimLine = s;
                } else {
                    this.setType( "tile" );
                }
            } else if ( pr.char == "E" ) {
                this.setType( "door" );
            } else if ( isInteractTile && distFromPlayer == 1 ) {
                this.setType( "interact" );
            } else {
                this.setType( "tile" );
            }
        }
    }

    // 클릭시에 나가는 액션 보여주기
    showAutoAction() {
        if ( this.autoActionSprite != null ) this.autoActionSprite.removeFromParent();
        if ( this.autoActionTargetSprite != null ) this.autoActionTargetSprite.removeFromParent();
        const [action,icon1,icon2,tx,ty] = this.getAutoAction();

        if ( !action || !icon1 || !tx ) {
            return;
        }

        /** @type {Mesh} */
        const m = getActionBox.call( this,icon1,icon2 );

        this.autoActionSprite = m;
        m.setPosition( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.width / 2, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.height - 40 );
        m.setInteractive( {
            preventRelease:        true,
            disableBasicAnimation: true,
            pressAnimation:        ( e, i ) => e.target.move( i.downThisPosition.x, i.downThisPosition.y + 3, 50 ),
            releaseAnimation:      ( e, i ) => e.target.move( i.downThisPosition.x, i.downThisPosition.y, 100 ),
            press:                 () => {
                this.cancelHold();
                this.__drag = null;
                this.doAutoAction();
            }
        } );
        const b = this.mesh.clone( typeToCol["target"],1 );

        b.setOverrideColor( 0xff9000 );
        b.setBlendMode( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite.BlendModes.ADD );
        const pos = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToStage( tx, ty );

        b.setPosition( pos.x,pos.y );
        const mc = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MovieClip( [
            [0,60,b,{ alpha: [0,1],rotation: [0,360,"outCubic"] }],
            [61, 120, b, { alpha: [1, 0], rotation: [360, 720, "inCubic"] }],
            [120,"goto",0]
        ] );

        mc.addEventListenerOnStage( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, () => {
            const { x, y } = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToStage( tx, ty );
            const sx = 1 / _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.zoom;
            const sy = 1 / _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.zoom;

            b.setScale( sx, sy );
            b.setPosition( x * sx, y * sy );
        } );
        _global__WEBPACK_IMPORTED_MODULE_1__["default"]["interface"].hudLayer.origin.addChildAt( mc,0 );
        this.autoActionTargetSprite = mc;
        _global__WEBPACK_IMPORTED_MODULE_1__["default"]["interface"].hudLayer.origin.addChild( m );
    }

    hideAutoAction() {
        if ( this.autoActionSprite ) {
            const spr = this.autoActionSprite;

            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this.autoActionSprite,200,{ alpha: 0 } )
                .onComplete( () => {
                    if ( spr != null ) spr.removeFromParent();
                } );
            this.autoActionSprite = null;
        }

        if ( this.autoActionTargetSprite ) {
            const spr = this.autoActionTargetSprite;

            new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this.autoActionTargetSprite,200,{ alpha: 0 } )
                .onComplete( () => {
                    if ( spr != null ) spr.removeFromParent();
                } );
            this.autoActionTargetSprite = null;
        }
    }

    getAutoAction( x,y ) {
        let c;
        let tx,ty;
        let mode;
        const t = _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.getNearEntities( 5,null,x,y );
        let doNothing = true;
        let action;
        let icon1;
        let icon2;

        // 근처의 오브젝트를 검토하고 할 수 있는 일을 찾는다
        for ( const i in t ) {
            const v = t[i];

            if ( v && v.isMonster && !v.isPet && !v.isNpc && v.canBeSeen()[0] ) {
                // 몬스터 발견
                c = v;
                [tx,ty] = [c.tileX,c.tileY];
                [x,y] = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToWorld( tx,ty ).xy;
                icon1 = _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.getWeaponImage();
                icon2 = c.mesh.clone();
                doNothing = false;
                break;
            } else if ( v && v.isProp && !v.property.needPickAxe && v.canBeSeen()[0] ) {
                const r = v.canBeSeen()[0];

                c = v;
                [tx,ty] = [c.tileX,c.tileY];
                [x,y] = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToWorld( tx,ty ).xy;
                icon1 = _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.getWeaponImage();
                icon2 = c.mesh.clone();
                doNothing = false;
                break;
            } else if ( v && v.isProp && v.property.needPickAxe && _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistanceBetweenEntities( v,_global__WEBPACK_IMPORTED_MODULE_1__["default"].player ) == 1 ) {
                icon1 = _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.getEquippedItemImage( "pickaxe" ) || _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.getWeaponImage();
                c = v;
                [tx,ty] = [c.tileX,c.tileY];
                [x,y] = _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.tileCenterToWorld( tx,ty ).xy;
                icon2 = c.mesh.clone();
                doNothing = false;
                break;
            }
        }

        if ( doNothing ) { 
            // 근처에서 발견한게 없음. 아무것도 안함
        } else if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getDistanceBetweenEntities( c,_global__WEBPACK_IMPORTED_MODULE_1__["default"].player ) == 1 ) {
            if ( c.isProp ) {
                action = () => {
                    _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.interact( tx,ty,false,x,y );
                };
            } else {
                action = () => {
                    _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.interact( tx,ty,this.mode == "ranged",x,y );
                };
            }
        } else {
            if ( this.mode == "ranged" ) {
                action = () => {
                    _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.interact( tx,ty,true,x,y );
                };
            }
        }

        return [action,icon1,icon2,tx,ty];
    }

    doAutoAction( x,y ) {
        this.hideAutoAction();
        const [action, icon1, icon2, tx, ty] = this.getAutoAction( x, y );

        console.log( `자동액션 실행` );

        if ( tx ) {
            action();
        }
    }
}



/***/ }),

/***/ "./games/Avalonika/src/interface/detailInfoWindow.js":
/*!***********************************************************!*\
  !*** ./games/Avalonika/src/interface/detailInfoWindow.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DetailInfoWindow)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _autoMap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./autoMap */ "./games/Avalonika/src/interface/autoMap.js");
/* harmony import */ var _cursor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cursor */ "./games/Avalonika/src/interface/cursor.js");
/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./interface */ "./games/Avalonika/src/interface/interface.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _lib_button2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lib/button2 */ "./engine/src/lib/button2.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _lib_colors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lib/colors */ "./engine/src/lib/colors.js");
/* harmony import */ var _lib_grid9__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @lib/grid9 */ "./engine/src/lib/grid9.js");
/* harmony import */ var _entity_prop__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../entity/prop */ "./games/Avalonika/src/entity/prop.js");
/* harmony import */ var _entity_monster__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../entity/monster */ "./games/Avalonika/src/entity/monster.js");
/* harmony import */ var _entity_npc__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../entity/npc */ "./games/Avalonika/src/entity/npc.js");
/* harmony import */ var _entity_item__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../entity/item */ "./games/Avalonika/src/entity/item.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");



















/*

대상의 정보를 모달로 보여줌

장비
- 장비한다 / 장비해제
- 버린다 / 제물로 받친다
- 던진다

소모품
- 사용한다 / 먹는다
- 버린다 / 제물로 받친다
- 던진다

확인되지 않은 물건
- 감정한다



*/

/**
 * @this DetailInfoWindow
 *
 */
function showContent() {
    let back = this.baseSpr;
    let target = this.target;
    let x = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.width / 2;
    let y = ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.height - this.height ) / 2 + 20;
    let icon = target.getIcon();

    icon.setPosition( x, y + 23 );
    back.addChild( icon );
    let tf = _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].getHiresTextField( target.name );

    tf.setTextColor( target.color );
    tf.setPosition( x - tf.getWidth() / 2, y + 44 - 10 );
    back.addChild( tf );
    let tw = _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].getHiresTextWrap(
        target.getDesc(),
        this.width - 20, 100, 15, _interface__WEBPACK_IMPORTED_MODULE_4__["default"].ttf, "center" );

    tw.setAnchorPoint( 0.5, 0 );
    tw.setTextColor( 0xc0c0c0 );
    tw.setPosition( x, y + 50 );
    back.addChild( tw );
    if ( target.property.type == "instrument" ) {
        let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "detailButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

        b.setAnchorPoint( 0.5, 0.5 );
        let tf = _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].getHiresTextField( "연주한다", _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].uiTtf );

        tf.setTextColor( 0x000000 );
        tf.setPosition( -tf.getWidth() / 2 + 4, 3 - 10 );
        b.addChild( tf );
        let icon = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_5__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "detailButtonIcon.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ),
                                 1, 2, 16, 16, 0x000000, 1 );

        icon.setScale( 0.75 );
        icon.setPosition( -tf.getWidth() / 2 - 4, 0 );
        b.addChild( icon );
        let btn = new _lib_button2__WEBPACK_IMPORTED_MODULE_6__["default"]( {
            up:   { image: b, useSpriteAnchorPoint: true },
            down: { y: 1 },
        } );

        btn.setPosition( x, y + this.height - 63 );
        back.addChild( btn );
        btn.on( "click", () => {
            this.close();
            _global__WEBPACK_IMPORTED_MODULE_14__["default"].player.inventory.close( () => {
                let note = _global__WEBPACK_IMPORTED_MODULE_14__["default"].player.inventory.findEquippedItemByType( "note" )[0];

                if ( note ) {
                    _global__WEBPACK_IMPORTED_MODULE_14__["default"].player.playMusic( note.property.mml );
                } else {
                    _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].addLog( "연주 할 악보가 없다." );
                }
            } );
        } );
        if ( target.isEquippable() && !target.equipped ) {
            btn.setEnabled( false );
        }
    }

    {
        let text, col;

        if ( target.equipped ) {
            text = "장비해제";
            col = 2;
        } else {
            text = "장비한다";
            col = 1;
        }
        let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "detailButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

        b.setAnchorPoint( 0.5, 0.5 );
        let tf = _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].getHiresTextField( text, _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].uiTtf );

        tf.setTextColor( 0x000000 );
        tf.setPosition( -tf.getWidth() / 2 + 4, 3 - 10 );
        b.addChild( tf );
        let icon = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_5__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "detailButtonIcon.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ),
                                 col, 1, 16, 16, 0x000000, 1 );

        icon.setScale( 0.75 );
        icon.setPosition( -tf.getWidth() / 2 - 4, 0 );
        b.addChild( icon );
        let btn = new _lib_button2__WEBPACK_IMPORTED_MODULE_6__["default"]( {
            up:   { image: b },
            down: { y: 1 },
        } );

        btn.setPosition( x - 30, y + this.height - 38 );
        back.addChild( btn );
        btn.on( "click", () => {
            this.close();
            _global__WEBPACK_IMPORTED_MODULE_14__["default"].player.inventory.tryEquip( target );
        } );
        if ( !target.isEquippable() ) {
            btn.setEnabled( false );
        }
    }
    {
        let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "detailButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

        b.setAnchorPoint( 0.5, 0.5 );
        let tf = _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].getHiresTextField( "던진다", _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].uiTtf );

        tf.setTextColor( 0x000000 );
        tf.setPosition( -tf.getWidth() / 2 + 4, 3 - 10 );
        b.addChild( tf );
        let icon = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_5__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "detailButtonIcon.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ),
                                 7, 1, 16, 16, 0x000000, 1 );

        icon.setScale( 0.75 );
        icon.setPosition( -tf.getWidth() / 2 - 4, 0 );
        b.addChild( icon );
        let btn = new _lib_button2__WEBPACK_IMPORTED_MODULE_6__["default"]( {
            up:   { image: b },
            down: { y: 1 },
        } );

        btn.setPosition( x + 30, y + this.height - 38 );
        btn.setEnabled( false );
        back.addChild( btn );
    }
    {
        let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "detailButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

        b.setAnchorPoint( 0.5, 0.5 );
        let tf = _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].getHiresTextField( "감정한다", _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].uiTtf );

        tf.setTextColor( 0x000000 );
        tf.setPosition( -tf.getWidth() / 2 + 4, 3 - 10 );
        b.addChild( tf );
        let icon = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_5__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "detailButtonIcon.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ),
                                 4, 1, 16, 16, 0x000000, 1 );

        icon.setScale( 0.75 );
        icon.setPosition( -tf.getWidth() / 2 - 4, 0 );
        b.addChild( icon );
        let btn = new _lib_button2__WEBPACK_IMPORTED_MODULE_6__["default"]( {
            up:   { image: b },
            down: { y: 1 },
        } );

        btn.setPosition( x - 30, y + this.height - 18 );
        btn.setEnabled( false );
        back.addChild( btn );
    }
    {
        let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "detailButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

        b.setAnchorPoint( 0.5, 0.5 );
        let tf = _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].getHiresTextField( "버린다", _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].uiTtf );

        tf.setTextColor( 0x000000 );
        tf.setPosition( -tf.getWidth() / 2 + 4, 3 - 10 );
        b.addChild( tf );
        let icon = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_5__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "detailButtonIcon.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ),
                                 3, 1, 16, 16, 0x000000, 1 );

        icon.setScale( 0.75 );
        icon.setPosition( -tf.getWidth() / 2 - 4, 0 );
        b.addChild( icon );
        let btn = new _lib_button2__WEBPACK_IMPORTED_MODULE_6__["default"]( {
            up:   { image: b },
            down: { y: 1 },
        } );

        btn.setPosition( x + 30, y + this.height - 18 );
        back.addChild( btn );
        btn.on( "click", () => {
            this.close();
            _global__WEBPACK_IMPORTED_MODULE_14__["default"].player.inventory.dropItem( target );
        } );
    }
}

/**
 * @this DetailInfoWindow
 *
 * @param {*} e
 */
function onPointerDown( e ) {
    this.close();
    e.stopPropagation();
}

/**
 * @this DetailInfoWindow
 *
 * @param {*} e
 */
function onPointerDownFrame( e ) {
    if ( this.wf.hitTestPoint( e.x, e.y ) ) {
        e.stopPropagation();
    }
}



class DetailInfoWindow extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( target ) {
        super();
        this.width = 140;
        this.height = 180;
        console.log( "자세한 정보 요청", target.name );
        this.target = target;
    }

    show() {
        let [x, y, w, h] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.xywh;
        let back = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.createBox( x, y, w, h, 0x000000, 0.7 );

        this.addChild( back );
        back.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN, onPointerDown, this );
        back.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP, onPointerDown, this );
        this.back = back;
        let wf = new _lib_grid9__WEBPACK_IMPORTED_MODULE_9__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "RectFrame.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

        this.openRate = 0;
        back.addChild( wf );
        _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].modalLayer.origin.addChild( this );
        wf.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN, onPointerDownFrame, this );
        wf.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP, onPointerDownFrame, this );
        this.wf = wf;
        this.baseSpr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.wf.addChild( this.baseSpr );
        showContent.call( this );
        new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, 300, { openRate: 1.0 }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outBack } )
            .onChange( () => {
                wf.setRect( ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.width - this.width ) / 2, ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.height - this.height * this.openRate ) / 2 + 20, this.width, this.height * this.openRate );
                //wf.setClip((application.logicalViewport.width - this.width) / 2, (application.logicalViewport.height - this.height * this.openRate) / 2 + 20, this.width, this.height * this.openRate);
            } );
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/top_menu_open.wav" );
    }

    close() {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/top_menu_close.wav" );
        this.back.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN, onPointerDown, this );
        this.back.removeEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP, onPointerDown, this );
        new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, 200, { openRate: 0.0 }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inBack } )
            .onChange( () => {
                this.wf.setRect( ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.width - this.width ) / 2, ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.height - this.height * this.openRate ) / 2 + 20, this.width, this.height * this.openRate );
                //this.wf.setClip((application.logicalViewport.width - this.width) / 2, (application.logicalViewport.height - this.height * this.openRate) / 2 + 20, this.width, this.height * this.openRate);
            } )
            .onComplete( () => {
                this.removeFromParent();
            } );
    }
}





/***/ }),

/***/ "./games/Avalonika/src/interface/interface.js":
/*!****************************************************!*\
  !*** ./games/Avalonika/src/interface/interface.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Interface)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _autoMap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./autoMap */ "./games/Avalonika/src/interface/autoMap.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _lib_button2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lib/button2 */ "./engine/src/lib/button2.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _lib_colors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lib/colors */ "./engine/src/lib/colors.js");
/* harmony import */ var _lib_grid9__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lib/grid9 */ "./engine/src/lib/grid9.js");
/* harmony import */ var _entity_prop__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../entity/prop */ "./games/Avalonika/src/entity/prop.js");
/* harmony import */ var _entity_monster__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../entity/monster */ "./games/Avalonika/src/entity/monster.js");
/* harmony import */ var _entity_npc__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../entity/npc */ "./games/Avalonika/src/entity/npc.js");
/* harmony import */ var _entity_item__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../entity/item */ "./games/Avalonika/src/entity/item.js");
/* harmony import */ var _topMenu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./topMenu */ "./games/Avalonika/src/interface/topMenu.js");
/* harmony import */ var _cursor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./cursor */ "./games/Avalonika/src/interface/cursor.js");
/* harmony import */ var _actionSelector__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./actionSelector */ "./games/Avalonika/src/interface/actionSelector.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");





















const logWindowWidth = 200;
const logWindowHeight = 50;
const infoWindowHeight = 60;

//---------------------------------------------------------------------------------------------------
// onEnterFrame;
//---------------------------------------------------------------------------------------------------

/**
 * 
 * @this {Interface}
 */
function onEnterFrame() {
    const [hp0, hpMax0, mp0, mpMax0, level0, exp0, expMax0, gold0] = this.oldValue;
    const pl = _global__WEBPACK_IMPORTED_MODULE_15__["default"].player;

    if ( !pl ) {
        // 아직 플레이어가 없는 경우
        return;
    }

    if ( this.waitingForWorldAndPlayer && _global__WEBPACK_IMPORTED_MODULE_15__["default"].world && pl ) {
        // 준비가 되었으므로 켠다
        this.waitingForWorldAndPlayer = false;
        this.show();
    }

    const [hp, hpMax, mp, mpMax, level, exp, expMax, gold] = [pl.hp, pl.hpMax, pl.mp, pl.mpMax, pl.level, pl.exp, pl.expMax, pl.gold];

    if ( hp != hp0 ) {
        if ( this.twHp ) {
            this.twHp.stop();
        }

        this.twHp = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, 300, { hp: hp }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );
    }

    if ( hpMax != hpMax0 ) {
        if ( this.twHpMax ) {
            this.twHpMax.stop();
        }

        this.twHpMax = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, 300, { hpMax: hpMax }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );
    }

    if ( mp != mp0 ) {
        if ( this.twMp ) {
            this.twMp.stop();
        }

        this.twMp = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, 300, { mp: mp }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );
    }

    if ( mpMax != mpMax0 ) {
        if ( this.twMpMax ) {
            this.twMpMax.stop();
        }

        this.twMpMax = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, 300, { mpMax: mpMax }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );
    }

    if ( exp != exp0 ) {
        if ( this.twExp ) {
            this.twExp.stop();
        }

        this.twExp = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, 300, { exp: exp }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );
    }

    if ( expMax != expMax0 ) {
        if ( this.twExpMax ) {
            this.twExpMax.stop();
        }

        this.twExpMax = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, 300, { expMax: expMax }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );
    }

    if ( gold != gold0 ) {
        if ( this.twGold ) {
            this.twGold.stop();
        }

        this.twGold = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this, 300, { gold: gold }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );
    }

    this.level = level;

    if ( this.statusChanging ) {
        this.setGauge( this.hp, this.hpMax, this.mp, this.mpMax, this.level, this.exp, this.expMax, this.gold );
    }

    if ( this.hp == hp && this.hpMax == hpMax &&
		this.mp == mp && this.mpMax == mpMax &&
		this.exp == exp && this.expMax == expMax &&
		this.gold == gold ) {
        this.statusChanging = false;
    } else {
        this.statusChanging = true;
    }

    this.oldValue = [hp, hpMax, mp, mpMax, level, exp, expMax, gold];

    // 오토맵
    this.autoMap.setPlayerPosition( pl.tileX, pl.tileY );
}

//---------------------------------------------------------------------------------------------------
// 체력등의 상태 표시
//---------------------------------------------------------------------------------------------------


/**
 *
 * @this Interface
 * @param {number} v
 * @param {number} maxV
 * @param {number} x
 * @param {number} y
 * @param {number} w
 * @param {number} h
 * @param {number} color
 * @param {number} color2
 * @param {boolean} isExp
 * @returns {Sprite}
 */
function makeMesh( v, maxV, x, y, w, h, color, color2, isExp ) {
    const m = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();

    if ( isExp ) {
        const p = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( 0, 1, w + 2, h + 2 );

        p.setPosition( x - 1, y - 1 );
        m.addChild( p );
    }

    let gridGap;

    if ( isExp ) {
        gridGap = maxV / 4;
    } else {
        gridGap = 10 * Math.ceil( maxV / 100 );
    }

    if ( maxV > 0 ) {
        const numOfGrid = Math.floor( ( maxV - 1 ) / gridGap );

        if ( v > 0 ) {
            const p = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( color, 1, Math.min( 1, v / maxV ) * w, h );

            p.setPosition( x, y );
            m.addChild( p );
        }

        for ( let i = 1; i <= numOfGrid; i++ ) {
            const gridX = i * w * gridGap / maxV;
            let c;

            if ( i * gridGap < v ) {
                c = 0x000000;
            } else {
                c = color2;
            }

            const p = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( c, 1, 1, h );

            p.setPosition( x + gridX, y );
            m.addChild( p );
        }
    }

    if ( !isExp ) {
        const tf = this.getBitmapTextField( Math.floor( v ) + "/" + Math.floor( maxV ).toString() );

        tf.setTextColor( color );
        tf.setPosition( x, y + 16 - 8 );
        m.addChild( tf );
    }

    return m;
}



//---------------------------------------------------------------------------------------------------
// 로그화면
//---------------------------------------------------------------------------------------------------

/**
 * @this Interface
 *
 * @param {*} dy
 */
function redrawLog( dy ) {
    if ( dy == this.logFrame.lastPos ) {
        return;
    }

    const bottomIndex = Math.floor( dy / Interface.LOG_LINE_SPACING );
    const topIndex = bottomIndex + Math.floor( ( logWindowHeight - 16 ) / Interface.LOG_LINE_SPACING ) + 1;
    const rest = dy % Interface.LOG_LINE_SPACING;

    this.logTextLayer.clearChildren();

    for ( let i = Math.min( topIndex, this.logText.length - 1 ); i >= bottomIndex; i-- ) {
        let tw;

        //console.log(i,dy,bottomIndex);
        if ( this.logText[i].textWrap ) {
            tw = this.logText[i].textWrap;
        } else {
            tw = this.getHiresTextWrap( this.logText[i].text );
            this.logText[i].textWrap = tw;
        }

        //tw.setTextColor(0xa0a0c0);
        const y = -1 - Interface.LOG_LINE_SPACING * ( 1 + i - bottomIndex ) + rest;

        tw.setPosition( 0, y );
        this.logTextLayer.addChildAt( tw, 0 );
    }

    this.logFrame.lastPos = dy;
}


// 마우스 핸들러
/**
 * @this Interface
 *
 * @param {*} e
 */
function onLogPointerDown( e ) {
    const { x: ex, y: ey } = _global__WEBPACK_IMPORTED_MODULE_15__["default"].stage.globalToLocal( e.x, e.y );

    if ( this.isVisible() && this.logFrame.hitTestPoint( e.x, e.y ) && !this.isSidePanelOpened() ) {
        this.logFrame.__drag = { ex: ex, ey: ey, click: true };

        if ( this.logFrame.isVisible() && !this.isSidePanelOpened() && !this.actionSelector.isOpen() ) {
            this.showLog();

            if ( this.logHideTimer ) {
                this.logHideTimer.stop();
                this.logHideTimer = null;
            }

            if ( this.logTextLayer.getNumChildren() > 0 && this.logTextLayer.getChildAt( 0 )._tw ) {
                for ( let i = 0; i < this.getNumChildren(); i++ ) {
                    const s = this.logTextLayer.getChildAt( i );

                    s._tw.toEnd();
                }
            }

            e.stopPropagation();
        }
    }
}

/**
 * @this Interface
 *
 * @param {*} e
 */
function onLogPointerMove( e ) {
    const { x: ex, y: ey } = _global__WEBPACK_IMPORTED_MODULE_15__["default"].stage.globalToLocal( e.x, e.y,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.stage );

    if ( this.logFrame.isVisible() ) {
        if ( this.logFrame.__drag ) {
            if ( this.logText.length >= Math.floor( ( logWindowHeight - 16 ) / Interface.LOG_LINE_SPACING ) ) {
                const dx = ex - this.logFrame.__drag.ex;
                let dy = this.logScrollPos + ey - this.logFrame.__drag.ey;

                dy = Math.max( 0, Math.min( Interface.LOG_LINE_SPACING * this.logText.length - ( logWindowHeight - 16 ) + 1, dy ) );
                redrawLog.call( this, dy );
            }

            e.stopPropagation();
        }
    } else {
        if ( this.logFrame.__drag ) {
            const dx = ex - this.logFrame.__drag.ex;
            const dy = Math.max( 0, this.logScrollPos + ey - this.logFrame.__drag.ey );

            if ( Math.abs( dx ) > 10 || Math.abs( dy ) > 10 ) {
                this.logFrame.__drag.click = false;
            }
        }
    }
}


/**
 * @this Interface
 *
 * @param {*} e
 */
function onLogPointerUp( e ) {
    if ( this.logFrame.isVisible() ) {
        if ( this.logFrame.__drag ) {
            this.logHideTimer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 3000, this.hideLog, this );

            if ( this.logText.length >= Math.floor( ( logWindowHeight - 16 ) / Interface.LOG_LINE_SPACING ) ) {
                const { x: ex, y: ey } = _global__WEBPACK_IMPORTED_MODULE_15__["default"].stage.globalToLocal( e.x, e.y );
                let dy = Math.max( 0, this.logScrollPos + ey - this.logFrame.__drag.ey );

                dy = Math.max( 0, Math.min( Interface.LOG_LINE_SPACING * this.logText.length - ( logWindowHeight - 16 ) + 1, dy ) );
                redrawLog.call( this, dy );
                this.logScrollPos = dy;
                // 자동사라지기 켬
            }

            e.stopPropagation();
        }
    } else {
        // if (!this.cursor.holded() && this.logFrame.__drag && this.logFrame.__drag.click) {
        //     this.cursor.cancelHold();
        //     this.logScrollPos = 0;
        //     this.showLog();
        //     // 자동사라지기 켬
        //     this.logHideTimer = Timer.delayedCall(3000, this.hideLog, this);
        //     e.stopPropagation();
        // }
    }

    this.logFrame.__drag = null;
}



class Interface extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    //---------------------------------------------------------------------------------------------------
    // 초기화
    //---------------------------------------------------------------------------------------------------

    constructor() {
        super();

        const { x, y } = _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.getPosition();

        this.hudLayer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Layout.fromRenderViewport();
        this.addChild( this.hudLayer );
        this.cursor = new _cursor__WEBPACK_IMPORTED_MODULE_13__["default"]();
        this.hudLayer.origin.addChild( this.cursor );
        
        this.logWindowLayer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Layout.fromRenderViewport();
        this.modalLayer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Layout.fromRenderViewport();
        this.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ADDED_TO_STAGE, () => {
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.stage.addChild( this.logWindowLayer );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.stage.addChild( this.modalLayer );
        } );

        this.oldValue = [ 0, 0, 0, 0];
        this.hp = 0;
        this.hpMax = 0;
        this.mp = 0;
        this.mpMax = 0;
        this.level = 0;
        this.exp = 0;
        this.expMax = 0;
        this.gold = 0;
        this.logText = [];

        {
            this.autoMap = new _autoMap__WEBPACK_IMPORTED_MODULE_2__["default"]();
            this.autoMap.setPosition( - _config__WEBPACK_IMPORTED_MODULE_16__["default"].Interface.margin - 12, - 70 );
            this.hudLayer.bottomRight.addChild( this.autoMap );
        }


        {
            const wf = new _lib_grid9__WEBPACK_IMPORTED_MODULE_7__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "WindowFrame.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );
            let x1, y1, w1, h1;
            const s = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Layout();

            const resize = () => {
                wf.setRect(
                    Math.floor( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.left + _config__WEBPACK_IMPORTED_MODULE_16__["default"].Interface.margin ),
                    30,
                    Math.floor( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width - _config__WEBPACK_IMPORTED_MODULE_16__["default"].Interface.margin * 2 ),
                    logWindowHeight
                );
                [x1, y1] = [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.left + _config__WEBPACK_IMPORTED_MODULE_16__["default"].Interface.margin + 9, 30 + 8];
                [w1, h1] = [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width - ( _config__WEBPACK_IMPORTED_MODULE_16__["default"].Interface.margin + 9 ) * 2, logWindowHeight - 16];
                s.setRect( x1, y1, w1, h1 );
                s.setClip( 0, 0, w1, h1 );
            };

            this.logFrame = wf;
            this.logTextLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
            this.logFrame.setVisible( false );
            //this.logTextLayer.setClip(x1,y1,x2,y2);
            s.bottomLeft.addChild( this.logTextLayer );
            wf.addChild( s );
            this.logWindowLayer.origin.addChild( wf );
            this.logWindowLayer.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.RESIZE, () => {
                resize();
            } );
            resize();
            wf.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN, onLogPointerDown, this )
                .on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_MOVE, onLogPointerMove, this )
                .on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP, onLogPointerUp, this );
            this.logScrollPos = 0;
            //wf.setInteractive( { dragX: true, dragY: true } );
        }

        {
            const b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Status.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

            this.statusSprite = b;
            b.setAnchorPoint( 0.5, 0.5 );
            const btn1 = new _lib_button2__WEBPACK_IMPORTED_MODULE_4__["default"]( {
                up:           { image: b },
                down:         { color: 0xa0a0a0, y: 2 },
                pixelPerfect: true,
            } );

            btn1.setPosition( 0, _config__WEBPACK_IMPORTED_MODULE_16__["default"].Interface.margin + 10 );
            btn1.addEventListener( "click", () => {
                this.topMenu.open();
            } );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.RESIZE,( n )=>{
                btn1.setScale( Math.min( 1,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width / btn1.getWidth() ) );
            } );
            this.hudLayer.topMiddle.addChild( btn1 );
            this.topMenu = new _topMenu__WEBPACK_IMPORTED_MODULE_12__["default"]();
            this.hudLayer.topMiddle.addChild( this.topMenu );
        }

        {
            const b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "InventoryIcon.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

            b.setAnchorPoint( 0.5, 0.5 );
            const btn1 = new _lib_button2__WEBPACK_IMPORTED_MODULE_4__["default"]( {
                up:   { image: b },
                down: { color: 0xa0a0a0, y: 2 },
            } );

            btn1.setPosition( - _config__WEBPACK_IMPORTED_MODULE_16__["default"].Interface.margin - 12,  - _config__WEBPACK_IMPORTED_MODULE_16__["default"].Interface.margin - 16 );
            btn1.addEventListener( "click", () => {
                _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.inventory.open();
            } );
            this.hudLayer.bottomRight.addChild( btn1 );
        }

        {
            // 이퀩체인저가 가장 마지막에 추가되어야한다.
            const b = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_3__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "ItemBackground.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ), 1, 1, 48, 32 );
            //let item1 = new Item({imageCol=2,imageRow=1});
            //item1.setPosition(b.getWidth()/2,b.getHeight()/2);
            //b.addChild(item1);
            //this.addChild(b);
            const btn1 = new _lib_button2__WEBPACK_IMPORTED_MODULE_4__["default"]( {
                up:   { image: b, useSpriteAnchorPoint: true },
                down: { y: 2 },
            } );

            btn1.setPosition( _config__WEBPACK_IMPORTED_MODULE_16__["default"].Interface.margin + b.getWidth() / 2,  - b.getHeight() / 2 - _config__WEBPACK_IMPORTED_MODULE_16__["default"].Interface.margin );
            this.hudLayer.bottomLeft.addChild( btn1 );
            this.actionSelector = new _actionSelector__WEBPACK_IMPORTED_MODULE_14__["default"]( b );
            btn1.addEventListener( "click", () => {
                this.actionSelector.open();
            } );
        }

        // 월드나 플레이어가 준비될 때까지 숨겨둔다
        this.waitingForWorldAndPlayer = true;
        this.hide();
        this.addEventListenerOnStage( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, onEnterFrame, this );
    }





    //---------------------------------------------------------------------------------------------------
    // 비트맵 텍스트 얻어오기
    //---------------------------------------------------------------------------------------------------

    getBitmapTextField( text ) {
        const tf = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextField( Interface.font, text );

        //tf.scale = 1 / stage.renderViewportScale;
        return tf;
    }

    //---------------------------------------------------------------------------------------------------
    // 고해상도 텍스트 얻어오기
    //---------------------------------------------------------------------------------------------------

    getHiresTextField( text, ttf ) {
        const tf = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextField( ttf || Interface.ttf, text );

        return tf;
    }

    getHiresTextWrap( text, w, h, spacing, ttf, align, ignoreWordWrap ) {
        const tw = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextField.fromTextWrap( text, w, h, spacing, ttf || Interface.ttf, align, ignoreWordWrap );

        return tw;
    }


    setGauge( hp, hpMax, mp, mpMax, level, exp, expMax, gold ) {
        if ( this.statusHp ) {
            this.statusHp.removeFromParent();
        }

        if ( this.statusMp ) {
            this.statusMp.removeFromParent();
        }

        if ( this.statusExp ) {
            this.statusExp.removeFromParent();
        }

        if ( this.statusGold ) {
            this.statusGold.removeFromParent();
        }

        const [ox, oy] = [85,8]; // 앵커포인트 맞추기
        const m1 = makeMesh.call( this, hp, hpMax, 15 - ox, 2 - oy, 76, 11, 0xff0000, 0x5a0000 );

        this.statusSprite.addChild( m1 );
        this.statusHp = m1;
        const m2 = makeMesh.call( this, mp, mpMax, 109 - ox, 2 - oy, 58, 11, 0x00aeef, 0x00415a );

        this.statusSprite.addChild( m2 );
        this.statusMp = m2;

        {
            const tf = this.getBitmapTextField( "LV." + level.toString() );

            tf.setTextColor( 0xffffff );
            tf.setPosition( 0 - ox, -2 - 8 - oy );
            const tf2 = this.getBitmapTextField( "g" + Math.floor( gold ).toString() );

            tf2.setTextColor( 0xffd000 );
            tf2.setPosition( 168 - tf2.getWidth() - ox, -2 - 8 - oy );
            this.statusSprite.addChild( tf2 );
            this.statusGold = tf2;
            const m3 = makeMesh.call( this, exp, expMax, tf.getWidth() + 3 - ox, -6 - oy,
                                      this.statusSprite.getWidth() - tf.getWidth() - 7 - tf2.getWidth(), 5, 0xffff00, 0x606000, true );

            this.statusSprite.addChild( m3 );
            this.statusExp = m3;
            this.statusExp.addChild( tf );
        }
    }

    addLog( ...args ) {
        this.showLog();
        const text = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.hangul.format( ...args );

        console.log( "로그출력", text );

        if ( this.logTextLayer.getNumChildren() > 0 && this.logTextLayer.getChildAt( 0 )._tw ) {
            for ( let i = 0; i < this.logTextLayer.getNumChildren(); i++ ) {
                const s = this.logTextLayer.getChildAt( i );

                s._tw.toEnd();
            }
        }

        this.logText.unshift( { text: text } );
        if ( this.logText.length > Interface.LOG_MAX_LINE ) this.logText.length = Interface.LOG_MAX_LINE;

        if ( this.logFrame.__drag ) {
            //드래그중
            return;
        }

        //console.log(this.logScrollPos);
        if ( this.logScrollPos == 0 ) {
            const tw = this.getHiresTextWrap( text,null,null,null,Interface.ttf );

            this.logText[0].textWrap = tw;
            tw.setTextColor( 0xffffff );
            tw.setPosition( 0, -1 );
            this.logTextLayer.addChildAt( tw, 0 );

            for ( let i = this.logTextLayer.getNumChildren() - 1; i >= 0; i-- ) {
                const s = this.logTextLayer.getChildAt( i );
                const y2 = s.getY();

                if ( y2 < -logWindowHeight ) {
                    s.removeFromParent();
                } else {
                    const tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( s, 300, { y: y2 - Interface.LOG_LINE_SPACING }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );

                    s._tw = tw;
                    tw.addEventListener( "complete", () => {
                        s._tw = null;
                    } );
                }
            }
        } else {
            //드래그중이 아니면 리셋
            const dy = 0;

            redrawLog.call( this, dy );
            this.logScrollPos = 0;
        }
    }

    hideLog() {
        if ( this.logHideTimer ) {
            this.logHideTimer.stop();
            this.logHideTimer = null;
        }

        if ( this.loTween ) {
            this.loTween.stop();
        }

        this.loTween = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this.logFrame, 300, { alpha: 0 }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.linear } )
            .onComplete( () => {
                for ( let i = 0; i < this.logText.length; i++ ) {
                    const s = this.logText[i].textWrap;

                    s.setOverrideColor( 0x707070 );
                }

                this.logFrame.setVisible( false );
                this.loTween = null;
            } );
    }


    showLog() {
        if ( this.loTween ) {
            this.loTween.toEnd();
        }

        this.logFrame.setAlpha( 1 );
        this.logFrame.setVisible( true );

        if ( this.logHideTimer != null ) {
            this.logHideTimer.stop();
            this.logHideTimer = null;
        }

        this.logHideTimer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 3000, this.hideLog, this );
    }


    //---------------------------------------------------------------------------------------------------
    // 인포창
    //---------------------------------------------------------------------------------------------------

    /*

	info;
	type = item | interact;
	text = 

	*/
    showInfo( info ) {
        console.log( "위치에 대한 정보", info.type );
        /*info= {}
		info.type = "item"
		info.text = "아이템설명입니다\n<c.ff0000>안녕</c>하세요?\n반갑습니다. 여러분 어떻게 지내십니까?\n아리가또\n고자이마스\n랄라라라\n라라랄라"
		info.name = "엑조틱 강한강한 왕도끼+15"
		info.buttonType = "interact"
		info.rarity = 5;
		*/

        if ( this.infoLayer ) {
            this.infoLayer.removeFromParent();
        }

        this.infoLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.hudLayer.center.addChild( this.infoLayer );
        let frameWidth, frameHeight;
        let textLabel;
        let itemImage;
        let color = 0xffffff;
        let windowFrame;

        if ( info.type == "interact" ) {
            textLabel = this.getHiresTextWrap( info.text, null, null, null, null, "center" );
            console.log( "인포창", info.text );
            textLabel.setTextColor( 0xa0a0a0 );
            frameWidth = textLabel.getTextWidth() + 16;
            frameHeight = textLabel.getHeight() + 18;
            const [textX, textY] = [0, - 36 - 7];

            textLabel.setPosition( textX, textY );
        } else if ( info.type == "item" ) {
            itemImage = new _entity_item__WEBPACK_IMPORTED_MODULE_11__["default"]( info.item.__key );
            color = info.item.color;
            textLabel = this.getHiresTextWrap( itemImage.name );
            textLabel.setTextColor( color );
            frameWidth = textLabel.getTextWidth() + 16;
            frameHeight = textLabel.getHeight() + 18;
            const [textX, textY] = [ ( -frameWidth - 20 ) / 2 + 16 + 10, - 36 - 7];

            textLabel.setPosition( textX, textY );
            itemImage.setPosition( ( -frameWidth - 20 ) / 2 + 16, - 36 );
            itemImage.setOverrideColor( color );
        }

        windowFrame = new _lib_grid9__WEBPACK_IMPORTED_MODULE_7__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "RectFrame.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );
        windowFrame.setRect(
            ( - frameWidth - 20 ) / 2,
            - frameHeight - 20,
            frameWidth + 20,
            frameHeight
        );
        windowFrame.setOverrideColor( ( color >> 1 ) & 0x7f7f7f );
        windowFrame.setAlpha( 1 );
        this.infoFrame = windowFrame;
        this.infoLayer.addChildAt( windowFrame, 0 );
        this.infoLayer.addChild( textLabel );
        if ( itemImage != null ) this.infoLayer.addChild( itemImage );

        let btn1, btn2;

        if ( info.type == "item" || info.buttonType == "pickup" ) {
            const b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "PickUpButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

            btn1 = new _lib_button2__WEBPACK_IMPORTED_MODULE_4__["default"]( {
                up:   { image: b, color: 0xffa000 },
                down: { color: 0x903000, y: 2 },
            } );

            if ( info.needNext ) {
                const b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "NextButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

                btn2 = new _lib_button2__WEBPACK_IMPORTED_MODULE_4__["default"]( {
                    up:   { image: b, color: 0xa0a0a0 },
                    down: { color: 0x606060, y: 2 },
                } );
            }
        } else if ( info.buttonType == "yesno" ) {
            let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "YesButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

            btn1 = new _lib_button2__WEBPACK_IMPORTED_MODULE_4__["default"]( {
                up:   { image: b, color: 0xffa000 },
                down: { color: 0x903000, y: 2 },
            } );
            b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "NoButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );
            btn2 = new _lib_button2__WEBPACK_IMPORTED_MODULE_4__["default"]( {
                up:   { image: b, color: 0xa0a0a0 },
                down: { color: 0x606060, y: 2 },
            } );
        } else if ( info.buttonType == "okcancel" ) {
            let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "OkButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

            btn1 = new _lib_button2__WEBPACK_IMPORTED_MODULE_4__["default"]( {
                up:   { image: b, color: 0xffa000 },
                down: { color: 0x903000, y: 2 },
            } );
            b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "NoButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );
            btn2 = new _lib_button2__WEBPACK_IMPORTED_MODULE_4__["default"]( {
                up:   { image: b, color: 0xa0a0a0 },
                down: { color: 0x606060, y: 2 },
            } );
        } else if ( info.buttonType == "interact" ) {
            const b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "InteractButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

            btn1 = new _lib_button2__WEBPACK_IMPORTED_MODULE_4__["default"]( {
                up:   { image: b, color: 0x00a0ff },
                down: { color: 0x903000, y: 2 },
            } );

            if ( info.needNext ) {
                const b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "NextButton.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

                btn2 = new _lib_button2__WEBPACK_IMPORTED_MODULE_4__["default"]( {
                    up:   { image: b, color: 0xa0a0a0 },
                    down: { color: 0x606060, y: 2 },
                } );
            }
        }

        if ( btn2 ) { // 버튼2개
            btn1.setPosition( - 22, 55 );
            //btn1.scale = stage.renderViewportScale;
            this.infoLayer.addChild( btn1 );
            btn2.setPosition( 22, 55 );
            this.infoLayer.addChild( btn2 );
            btn1.addEventListener( "click", () => {
                this.hideInfo();

                if ( info.button1 ) {
                    info.button1();
                }
            } );
            btn2.addEventListener( "click", () => {
                this.hideInfo();

                if ( info.button2 ) {
                    info.button2();
                }
            } );
        } else if ( btn1 ) { // 1개
            btn1.setPosition( 0,55 );
            this.infoLayer.addChild( btn1 );
            btn1.addEventListener( "click", () => {
                this.hideInfo();

                if ( info.button1 ) {
                    info.button1();
                }
            } );
        }
    }

    hideInfo() {
        if ( !this.infoLayer ) {
            return;
        }

        if ( this.infoTween ) {
            this.infoTween.stop();
        }

        const tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this.infoLayer, 100, { alpha: 0 }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.linear } );

        this.infoTween = tw;
        //TODO: context
        tw.addEventListener( "complete", ()=>{
            this.infoLayer.removeFromParent();
            this.infoTween = null;
        }, this );
    }




    //---------------------------------------------------------------------------------------------------
    // 패널 슬라이딩
    //---------------------------------------------------------------------------------------------------

    slideOpen( ax, ay, closingCallback ) {
        if ( this.slideInfo ) {
            // 이미 열렸다
            const [ax, ay, viewX, viewY, worldX, worldY, tw, m] = this.slideInfo;

            tw.stop();
            _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.setPosition( worldX, worldY );
            _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.sightManager.moveViewTo( viewX + _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.getX() / 2, viewY + _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.getY() );
            _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.sightManager.updateShaderViewInfo();
            m.removeFromParent();
        }

        //this.hideLog();
        this.hideInfo();
        this.cursor.hideAutoAction();
        const [viewX, viewY] = [_global__WEBPACK_IMPORTED_MODULE_15__["default"].world.viewX, _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.viewY];
        const { x: worldX, y: worldY } = _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.getPosition();

        _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].cursor.lock();
        const [x, y, w, h] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.deviceViewport.xywh;
        const m = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.createBox( x + ax, y - ay, w + Math.abs( ax ), h + Math.abs( ay ), 0xff0000, 0.5 );

        m.setVisible( false );
        this.addChildAt( m,0 );
        const tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( _global__WEBPACK_IMPORTED_MODULE_15__["default"].world, 300, { x: worldX + ax, y: worldY + ay }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outBack } )
            .onChange( () => {
                _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.sightManager.moveViewTo( viewX + _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.getX() / 2, viewY + _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.getY() / 2 );
                _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.sightManager.updateShaderViewInfo();
                this.logFrame.setY( _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.getY() );
                this.setPosition( ..._global__WEBPACK_IMPORTED_MODULE_15__["default"].world.getPosition().xy );
            } )
            .onComplete( () => {
                m.addEventListener( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN, ( e ) => {
                    if ( closingCallback ) {
                        closingCallback();
                    }

                    e.stopPropagation();
                } );
            } );

        this.slideInfo = [ax, ay, viewX, viewY, worldX, worldY, tw, m ];

        return tw;
    }


    slideClose( closedCallback ) {
        if ( this.slideInfo ) {
            let [ax, ay, viewX, viewY, worldX, worldY, tw, m] = this.slideInfo;

            tw.stop();
            tw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( _global__WEBPACK_IMPORTED_MODULE_15__["default"].world, 300, { x: worldX, y: worldY }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } )
                .onChange( () => {
                    _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.sightManager.moveViewTo( viewX + _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.getX() / 2, viewY + _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.getY() / 2 );
                    _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.sightManager.updateShaderViewInfo();
                    this.logFrame.setY( _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.getY() );
                    this.position = _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.getPosition();
                } )
                .onComplete( () => {
                    this.slideInfo = null;
                    m.removeFromParent();
                    _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].cursor.unlock();

                    if ( closedCallback ) {
                        closedCallback();
                    }
                } );

            return tw;
        }
    }

    isSidePanelOpened() {
        if ( this.slideInfo ) {
            return true;
        } else {
            return false;
        }
    }





    hide() {
        this.setVisible( false );
        this.hudLayer.setVisible( false );
        this.logWindowLayer.setVisible( false );
    }

    show() {
        this.setVisible( true );
        this.hudLayer.setVisible( true );
        this.logWindowLayer.setVisible( true );
    }
}



Interface.ttf = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MsdfFont( "msdf_mtcg", 12, { yellow: { fill: 0xffff00 } } );
Interface.uiTtf = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.MsdfFont( "msdf_mtcg_ui", 12, {} );
Interface.font = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.BitmapFont( "font_bitmap", 8 );
// Interface.ttf.on( Event.LOADED,()=>{
//     console.log( `폰트로딩완료 mtcg` );
//     console.log( `폰트 길이 ${Interface.ttf.measureTextWidth( "안녕하세요?",20 )}` );
// } );

//Interface.oldFont = new Font("font_old.txt", "font_old.png");
Interface.LOG_LINE_SPACING = 12;
Interface.LOG_MAX_LINE = 30; // 너무 크면 텍스쳐를 많이 요구하게됨



/***/ }),

/***/ "./games/Avalonika/src/interface/inventory.js":
/*!****************************************************!*\
  !*** ./games/Avalonika/src/interface/inventory.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Inventory)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _autoMap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./autoMap */ "./games/Avalonika/src/interface/autoMap.js");
/* harmony import */ var _cursor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cursor */ "./games/Avalonika/src/interface/cursor.js");
/* harmony import */ var _detailInfoWindow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./detailInfoWindow */ "./games/Avalonika/src/interface/detailInfoWindow.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _lib_button2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lib/button2 */ "./engine/src/lib/button2.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _lib_colors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lib/colors */ "./engine/src/lib/colors.js");
/* harmony import */ var _lib_listView__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @lib/listView */ "./engine/src/lib/listView.js");
/* harmony import */ var _lib_grid9__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @lib/grid9 */ "./engine/src/lib/grid9.js");
/* harmony import */ var _entity_prop__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../entity/prop */ "./games/Avalonika/src/entity/prop.js");
/* harmony import */ var _entity_monster__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../entity/monster */ "./games/Avalonika/src/entity/monster.js");
/* harmony import */ var _entity_npc__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../entity/npc */ "./games/Avalonika/src/entity/npc.js");
/* harmony import */ var _entity_item__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../entity/item */ "./games/Avalonika/src/entity/item.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");





















function spriteFunc( lv, lvItem, index, self ) {
    const item = lvItem.data.item;
    const spr = item.getInventorySprite();

    // spr.enableMouseDrag(true, {
    //     verticalLock:      true,
    //     mouseDownCallback: (spr, e) => {
    //         e.drag.cancel = true;
    //     },
    //     mouseMoveCallback: (spr, e) => {
    //         e.drag.x = Math.min(e.drag.x, e.drag.ox);
    //         if (e.drag.dx < - 60) { // 버리기
    //             spr.setAlpha(0.5);
    //         } else {
    //             spr.setAlpha(1);
    //         }
    //         e.drag.cancel = true;
    //     },
    //     mouseUpCallback: (spr, e) => {
    //         e.drag.x = Math.min(e.drag.x, e.drag.ox);
    //         if (e.drag.dx < -60) { // 버리기
    //             console.log(self);
    //             self.dropItem(item);
    //         } else {
    //             new Tween(spr, 100, { x: e.drag.ox }, { ease: easing.outCubic });
    //         }
    //         e.drag.cancel = true;
    //     },
    // });
    return [spr, null, spr.getHeight() - 3];
}

/**
 * @this Inventory
 *
 * @param {*} e
 */
function onClick( e ) {
    //log(e.index,e.item,e.item.data.item.name);
    const item = e.item.data.item;

    if ( e.x >= 90 && !this.tryUse( item ) ) {
        this.tryEquip( item );
    } else {
        // 아이템 설명 보기
        const diw = new _detailInfoWindow__WEBPACK_IMPORTED_MODULE_4__["default"]( item );

        diw.show();
    }
}



class Inventory {
    constructor( size ) {
        this.items = [];
        this.size = size;
    }

    isFull() {
        return this.items.length >= this.size;
    }

    addItem( item ) {
        if ( this.items.length >= this.size ) {
            return null;
        } else {
            this.items.push( item );

            return this.items.length;
        }
    }

    getIndex( item ) {
        return this.items.indexOf( item );
    }

    findEquippedItemByType( type ) {
        const t = [];

        for ( const i in this.items ) {
            const v = this.items[i];

            if ( v.property.type == type && v.equipped ) {
                t.push( v );
            }
        }

        return t;
    }

    findItemByType( type ) {
        const t = [];

        for ( const i in this.items ) {
            const v = this.items[i];

            if ( v.property.type == type ) {
                t.push( v );
            }
        }

        return t;
    }


    removeItem( item ) {
        const i = this.getIndex( item );

        if ( i ) {
            return this.removeItemAt( i );
        }
    }

    removeItemAt( i ) {
        const item = this.items[i];

        this.items.splice( i,1 );

        return item;
    }

    // 인벤토리를 닫았을 때 실행할 함수를 줄 수 있다
    close( func,data ) {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/inventory_close.wav" );
        const tw = _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].slideClose( () => {
            this.baseSpr.removeFromParent();
            this.listView = null;
            this.baseSpr = null;
            if ( func ) {
                func( data );
            } else {
                _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.showMapInfo( _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.tileX, _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.tileY );
            }
        } );

        tw.onChange( () => {
            //this.baseSpr.setX(GLOBAL.world.getX());
            //this.listView.updateClip();
        } );
    }

    dropItem( item ) {
        _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.addLog( "%s{을} 바닥에 버렸다.",item.name );
        for ( const i in this.listView.items ) {
            const v = this.listView.items[i];

            if ( v.data.item == item ) {
                this.listView.remove( v );
            }
        }
        _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.inventory.removeItem( item );
        _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].actionSelector.unselect( item );
        item.drop( _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.tileX,_global__WEBPACK_IMPORTED_MODULE_15__["default"].player.tileY );
        if ( _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.inventory.items.length == 0 ) {
            _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.inventory.setListView( _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.inventory.baseSpr );
        }
    }

    setListView( baseSpr ) {
        {
            const numOfItem = 0;
            //TODO:
            const tf1 = _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].getBitmapTextField( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.format( "%d/%d", this.items.length,this.size ) );

            if ( this.items.length == this.size ) {
                tf1.setTextColor( 0xff0000 );
            } else {
                tf1.setTextColor( 0xffffff );
            }
            tf1.setPosition( 0,- 20 );
            baseSpr.addChild( tf1 );
        }
        if ( this.items.length == 0 ) {
            //
        } else {
            const lvItems = [];

            for ( const i in this.items ) {
                const v = this.items[i];

                lvItems.push( [v.name, { item: v }] );
            }
            const lv = new _lib_listView__WEBPACK_IMPORTED_MODULE_9__["default"](
                lvItems,
                120,
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height - 20,
                {
                    owner:           this,
                    align:           "bottom",
                    //clip:            true,
                    cutOffsetBottom: 20,
                    //stickOnBorder = true,
                    spriteFunc:      spriteFunc,
					
                    animationFunc: ( self, spr, i ) => {
                        const i2 = self.getNumOfItems() - i + 1;
                        const { x, y } = spr.getPosition();

                        spr.setX( x + 160 );
                        new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( spr, 300, { x, y }, { delay: i2 * 0.02, ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );
                    },
					
                }
            );

            //lv.setAnchorPoint( 0, 0 );
            lv.setPosition( 0,-_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height );
            lv.addEventListener( "click",onClick,this );
            baseSpr.addChild( lv );
            this.listView = lv;
            this.listView.addEventListener( "close", () => this.close() );
        }
    }


    open() {
        const baseSpr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();

        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/inventory_open.wav" );
        console.log( "인벤토리 보기" );
        for ( const i in this.items ) {
            const v = this.items[i];

            console.log( v.name );
        }

        const tw = _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].slideOpen( -120, 0, () => {
            this.close();
        } );

        tw.onChange( () => {
            //baseSpr.setX(GLOBAL.world.getX());
            //this.listView.updateClip();
        } );
        this.setListView( baseSpr );
        this.baseSpr = baseSpr;
        _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].hudLayer.bottomRight.addChild( baseSpr );
    }


    tryEquip( item,notToggle ) {
        const i = this.getIndex( item );
        const equipMax = item.isEquippable() || 0;
        const equippedItems = this.findEquippedItemByType( item.property.type );
        const equipAvailable = equipMax - equippedItems.length;

        if ( equipMax && equipMax > 0 ) {
            if ( equipMax == 1 ) {
                if ( equippedItems[0] && !( notToggle && equippedItems[0] == item ) ) {
                    _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.addLog( "%s{을} 장비해제했다.",equippedItems[0].name );
                    equippedItems[0].unequip();
                    _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].actionSelector.unselect( equippedItems[0] );
                    if ( this.listView ) {
                        const lvItem = this.listView.getItem( this.getIndex( equippedItems[0] ) );

                        lvItem.sprite.updateEquip();
                    }
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/inventory_unequip.wav" );
                }
                if ( equippedItems[0] != item ) {
                    _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.addLog( "%s{을} 장비했다.",item.name );
                    item.equip();
                    if ( this.listView ) {
                        const lvItem = this.listView.getItem( this.getIndex( item ) );

                        lvItem.sprite.updateEquip();
                    }
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/inventory_equip.wav" );
                    if ( _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.getSelectedAction().property.type == item.property.type ) {
                        _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].actionSelector.select( item );
                    }
                    _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.doNothing();
                }
                _global__WEBPACK_IMPORTED_MODULE_15__["default"]["interface"].actionSelector.refresh();

                return true;
            } else {
                // 두개이상장비가능한 아이템
                if ( equipAvailable > 0 ) {
                    _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.addLog( "%s{을} 장비했다.",item.name );
                    item.equip();
                    if ( this.listView ) {
                        const lvItem = this.listView.getItem( this.getIndex( item ) );

                        lvItem.sprite.updateEquip();
                    }
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/inventory_equip.wav" );
                    _global__WEBPACK_IMPORTED_MODULE_15__["default"].player.doNothing();
                } else {
                    _global__WEBPACK_IMPORTED_MODULE_15__["default"].world.addLog( "다른 장비를 벗기 전에는 %s{을} 장비할 수 없다.",item.name );

                    return false;
                }
            }
        } else {
            console.log( "장비할 수 없는 아이템을 장비하려함" );

            return false;
        }
    }

    tryUse( item ) {
        if ( item.property.type == "usable" ) {
            return true;
        } else {
            return null;
        }
    }
}





/***/ }),

/***/ "./games/Avalonika/src/interface/topMenu.js":
/*!**************************************************!*\
  !*** ./games/Avalonika/src/interface/topMenu.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TopMenu)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _lib_grid9__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lib/grid9 */ "./engine/src/lib/grid9.js");
/* harmony import */ var _lib_slideView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lib/slideView */ "./engine/src/lib/slideView.js");
/* harmony import */ var _world_world__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../world/world */ "./games/Avalonika/src/world/world.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./interface */ "./games/Avalonika/src/interface/interface.js");
/* harmony import */ var _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @lib/visibilityTile */ "./engine/src/lib/visibilityTile.js");













let dot6Texture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "dot6.png",false,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );
let dot10Texture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "dot10.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );

function setIndexDot( self,index,maxIndex ) {
    self.indexDotSprite.removeFromParent();
    let s = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();

    for ( let i = 0; i <= maxIndex; i++ ) {
        let b;

        if ( index == i ) {
            b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( dot10Texture );
            b.setAnchorPoint( 0.5,0.5 );
            b.setAlpha( 0.9 );
        } else {
            b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( dot6Texture );
            b.setAnchorPoint( 0.5,0.5 );
            b.setAlpha( 0.5 );
        }
        b.setPosition( -maxIndex / 2 * 8 + ( i - 0.5 ) * 8,0 );
        s.addChild( b );
    }
    s.setPosition( application.logicalViewport.width / 2,TopMenu.height - 10 );
    self.indexDotSprite = s;
    self.baseSpr.addChild( s );
}


class TopMenu extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor() {
        super();
    }

    close( callback ) {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/top_menu_close.wav" );
        _global__WEBPACK_IMPORTED_MODULE_1__["default"]["interface"].slideClose( () => {
            this.baseSpr.removeFromParent();
            _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.showMapInfo( _global__WEBPACK_IMPORTED_MODULE_1__["default"].player.tileX,_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.tileY );
        } )
            .onChange( () => {
                this.baseSpr.setY( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getY() - TopMenu.height );
            } );
    }

    open() {
        let baseSpr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();

        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/top_menu_open.wav" );
        console.log( "탑 메뉴" );
        //this.setListView(GLOBAL.world,baseSpr);
        this.baseSpr = baseSpr;
        _global__WEBPACK_IMPORTED_MODULE_1__["default"]["interface"].hudLayer.addChild( baseSpr );
        //GLOBAL.interface.hiresLayer.addChild(baseSpr);
        let panels = {};
        let [x,y,w] = _global__WEBPACK_IMPORTED_MODULE_1__["default"].stage.renderViewport.xywh;
        let h = TopMenu.height;

        panels[0] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.createBox( x,y,w,h,0x000000 );
        panels[1] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.createBox( x,y,w,h,0xff0000 );
        panels[2] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.createBox( x,y,w,h,0x0000ff );
        this.makeCharacterPanel( panels[0] );
        let sv = new _lib_slideView__WEBPACK_IMPORTED_MODULE_5__["default"]( w,TopMenu.height,panels )
            .on( "indexChanging",( e ) => {
                setIndexDot( this,e.index,panels.length );
            } );

        baseSpr.addChild( sv );
        _global__WEBPACK_IMPORTED_MODULE_1__["default"]["interface"].slideOpen( 0,TopMenu.height,() => {
            this.close();
        } )
            .onChange( () => {
                this.baseSpr.setY( _global__WEBPACK_IMPORTED_MODULE_1__["default"].world.getY() - TopMenu.height );
            } );
    }


    makeCharacterPanel( s ) {
        {
            let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "nameFrame.png",false,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA4444 } ) );

            b.setAnchorPoint( 0.5,0.5 );
            //b.setOverrideColor(0x505050);
            b.setPosition( application.logicalViewport.width / 2,30 );
            s.addChild( b );
        }
        {
            let tf = _global__WEBPACK_IMPORTED_MODULE_1__["default"]["interface"].getHiresTextField( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.format( "레벨%d 바바리안 전사",_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.level ),_interface__WEBPACK_IMPORTED_MODULE_8__["default"].uiTtf );

            tf.setTextColor( 0xc0c0c0 );
            tf.setPosition( application.logicalViewport.width / 2 - tf.getWidth() / 2,55 );
            s.addChild( tf );
        }
        {
            let tf = _global__WEBPACK_IMPORTED_MODULE_1__["default"]["interface"].getHiresTextField( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.format( "김나크",_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.level ) );

            tf.setTextColor( 0x000000 );
            tf.setPosition( application.logicalViewport.width / 2 - tf.getWidth() / 2,32 );
            s.addChild( tf );
        }
        {
            let b = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "paperdoll.png",false,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ) );

            //let b = GLOBAL.interface.getHiresBitmap(new Texture("paperdoll.png",false,{format:TextureBase.RGBA5551}));
            b.setAnchorPoint( 0.5,0.5 );
            b.setPosition( application.logicalViewport.width / 2 - 20,110 );
            s.addChild( b );
        }
        {
            let tf = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextField( _interface__WEBPACK_IMPORTED_MODULE_8__["default"].font,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.format( "STR %d",_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.str ) );

            tf.setTextColor( 0xffffff );
            tf.setPosition( application.logicalViewport.width / 2 + 10,100 );
            s.addChild( tf );
        }
        {
            let tf = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextField( _interface__WEBPACK_IMPORTED_MODULE_8__["default"].font,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.format( "DEX %d",_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.dex ) );

            tf.setTextColor( 0xffffff );
            tf.setPosition( application.logicalViewport.width / 2 + 10,100 + 8 );
            s.addChild( tf );
        }
        {
            let tf = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextField( _interface__WEBPACK_IMPORTED_MODULE_8__["default"].font,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.format( "INT %d",_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.int ) );

            tf.setTextColor( 0xffffff );
            tf.setPosition( application.logicalViewport.width / 2 + 10,100 + 8 * 2 );
            s.addChild( tf );
        }
        {
            let tf = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextField( _interface__WEBPACK_IMPORTED_MODULE_8__["default"].font,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.format( "LUCK %d",_global__WEBPACK_IMPORTED_MODULE_1__["default"].player.luck ) );

            tf.setTextColor( 0xffffff );
            tf.setPosition( application.logicalViewport.width / 2 + 10,100 + 8 * 3 );
            s.addChild( tf );
        }
        {
            let tf = _global__WEBPACK_IMPORTED_MODULE_1__["default"]["interface"].getHiresTextWrap(
                "북쪽지방의 바바리안은 타고난 전사이다.\n그들은 평생을 용병이나 모험가로 살아가며 끝없는 전투를 통해\n자신을 증명하고 발할라로 가기를 꿈꾼다.",
                application.logicalViewport.width - _config__WEBPACK_IMPORTED_MODULE_2__["default"].Interface.margin * 2,40,15,_interface__WEBPACK_IMPORTED_MODULE_8__["default"].uiTtf,"center" );

            tf.setTextColor( 0xc0c0c0 );
            tf.setPosition( application.logicalViewport.width / 2,160 );
            tf.setScale( tf.getScaleX() * 0.8,tf.getScaleY() * 0.8 );
            s.addChild( tf );
        }
    }
}
TopMenu.height = 220;




/***/ }),

/***/ "./games/Avalonika/src/proceduralMap/customBlocks.js":
/*!***********************************************************!*\
  !*** ./games/Avalonika/src/proceduralMap/customBlocks.js ***!
  \***********************************************************/
/***/ (() => {

const CustomBlocks = {
    ["campfire"]: {
        map: [
            "M1111111M\n" +
            "3.......2\n" +
            "3...F...2\n" +
            "3.......2\n" +
            "M4444444M",
        ],
        doorMin:        2,
        doorMax:        4,
        canClip:        false,
        margin:         2,
        wall:           "M",
        chanceToAppear: 1,
        appearFloor:    [[2, 5]],
        whiteAttrib:    [["dungeon", 1], ["cave", 1]],
        blackAttrib:    [],
        special:        "campfire",
        maxTry:         5,
        mustPlace:      true,
        lock:           "all",
        func:           null,
    },
    ["room_01"]: {
        map: [
            "M11111111M\n" + 
            "3        2\n" + 
            "3 ~~||~~ 2\n" + 
            "3 ~    ~ 2\n" + 
            "3 ~    ~ 2\n" + 
            "3 ~~||~~ 2\n" + 
            "3        2\n" + 
            "M44444444M" ,
            
            "0000M1111M0000\n" + 
            "0000M    M0000\n" + 
            "0000M    M0000\n" + 
            "0000M    M0000\n" + 
            "MMMMM    MMMMM\n" + 
            "3            2\n" + 
            "3            2\n" + 
            "3            2\n" + 
            "MMMMM    MMMMM\n" + 
            "0000M    M0000\n" + 
            "0000M    M0000\n" + 
            "0000M    M0000\n" + 
            "0000M4444M0000" ,
        ],
        doorMin:        1,
        doorMax:        4,
        canClip:        false,
        margin:         2,
        wall:           "M",
        chanceToAppear: 5,
        appearFloor:    null,//[[2,5]],
        whiteAttrib:    [["dungeon", 1]],
        blackAttrib:    [],
        special:        null,
        maxTry:         2,
        mustPlace:      false,
        lock:           "all",
        func:           null,
    },
    ["lava_01"]: {
        map: [
            
            "000%%%000\n" + 
            "00%%%%%00\n" + 
            "%%%%%%%%%\n" +
            "%%%%%%%00\n" + 
            "00%%00000" ,
            
            "%%%000%%%\n" +
            "%%%%%%%%%\n" +
            "%%%%%%000\n" + 
            "00%%%%%00\n" + 
            "0000%%%%%" ,
                        
            "00%%%%%00\n" + 
            "%%%%%%%%%\n" +
            "%%%00%%%0\n" + 
            "%000%%%00\n" + 
            "00%%%%000" , 

            "00%%00\n" + 
            "%%%%%0\n" +
            "%%%%%0\n" + 
            "%%%%%%\n" +
            "0%%%%%\n" +
            "0%%%%%\n" +
            "00%%%0" , 

        ],
        doorMin:        0,
        doorMax:        0,
        canClip:        false,
        margin:         0,
        wall:           null,
        chanceToAppear: 5,
        appearFloor:    [[6, 999]],
        whiteAttrib:    [["cave", 1]],
        blackAttrib:    [],
        special:        null,
        maxTry:         1,
        mustPlace:      false,
        lock:           "all",
        func:           null,
    },

};




/***/ }),

/***/ "./games/Avalonika/src/proceduralMap/proceduralMap.js":
/*!************************************************************!*\
  !*** ./games/Avalonika/src/proceduralMap/proceduralMap.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ProceduralMap)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _customBlocks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./customBlocks */ "./games/Avalonika/src/proceduralMap/customBlocks.js");
/* harmony import */ var _customBlocks__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_customBlocks__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _entity_pet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../entity/pet */ "./games/Avalonika/src/entity/pet.js");
/* harmony import */ var _entity_monster__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../entity/monster */ "./games/Avalonika/src/entity/monster.js");
/*

지도를 생성할 떄는 조금씩 만들 수 있게 해야함

options;
seed = 랜덤시드

width = {min,max}
height = {min,max}
numOfFloor = {min,max}

numOfBoss;
cave = 0.0~1.0   1.0이면 1층부터 자연동굴이고 0.5이면 중간부터 0.0이면 1층부터 인공


*/










const DEBUG_LOG = false;
const log = DEBUG_LOG ? console.log : ()=>{};


//_PRANDOM @ |this.random.random|

/**
 * @this ProceduralMap
 *
 * @param {number} x
 * @param {number} y
 * @param {number} minSector
 * @returns {*[]|null}
 */
function findNearestSector( x, y, minSector ) {
    let t;
    let path;

    let checkSurrounding = ( node, x, y ) => {
        if ( path[x + "," + y] ) {
            //막힘
            if ( fail ) {
                log( "본것", x, y );
            }

            return;
        }
        let c = this.read( x, y );

        if ( typeof c == "number" && c >= minSector ) {
            if ( fail ) {
                log( "발견", minSector );
            }

            return [ node, x, y, c ]; //찾았음
        }
        // 락이 2가 아닌 벽은 뚫음
        if ( this.readLock( x, y ) == 2 && ( typeof c != "number" && !this.isSpace( x, y ) ) ) {
            if ( fail ) {
                log( "락", x, y, c, typeof c );
            }

            return;
        }
        if ( fail ) {
            log( "처리", x, y );
        }
        let newNode = [node, x, y, c];

        path[x + "," + y] = newNode;
        t.push( [newNode, x - 1, y] );
        t.push( [newNode, x + 1, y] );
        t.push( [newNode, x, y - 1] );
        t.push( [newNode, x, y + 1] );
    };


    let fail;

    do {
        let curSector = this.read( x, y );

        path = {};
        t = [[null, x, y ]];
	
        let result;

        do {
            let t1 = t;

            t = [];
            if ( fail ) {
                log( "처리할 점의 수", t1.length );
            }
            for ( let i in t1 ) {
                let [node,x,y] = t1[i];

                result = checkSurrounding( node, x, y );
                if ( result ) {
                    break;
                }
            }
        } while ( result == null && t.length != 0 );
        let lastNode = result;

        if ( lastNode ) {
            let curNode = lastNode;
            let [node,x,y,sectorNum] = curNode;

            log( `${minSector} 이상의 섹터를 찾은 결과 ${sectorNum} 발견` );
            let t2 = [];

            do {
                [node, x, y] = curNode;
                t2.push( [x,y] );
                curNode = node;
            } while ( curNode != null && !( typeof sectorNum == "number" && sectorNum == curSector ) );

            return t2;
        } else {
            log( minSector, "연결 대상을 못찾음" );
            if ( fail ) {
                console.assert();
            }
            fail = true;
        }
    } while ( fail );
}




// 선긋기하는 용도랑 약간 다르다. 대각선이동할때 두꺼워져야 함
// for에서 사용하는 이터레이터임
function *rayCast( xStart, yStart, xEnd, yEnd ) {
    // change from step to step;
    let tValue, xGrid, yGrid, tForNextBorderX, tForNextBorderY;
    //print("input",xStart, yStart, xEnd, yEnd);
    // constant throughout raycast;
    let xDirection, yDirection, tForOneX, tForOneY, xStep, yStep;

    xDirection = xEnd - xStart;
    yDirection = yEnd - yStart;
    tForOneX = Math.abs( 1.0 / ( xDirection + 0.00001 ) );
    tForOneY = Math.abs( 1.0 / ( yDirection + 0.00001 ) );
    yStep = ( yDirection >= 0 ) ? 1 : -1;
    xStep = ( xDirection >= 0 ) ? 1 : -1;
    let xSign = ( xDirection >= 0 ) ? 0 : 1;
    let ySign = ( yDirection >= 0 ) ? 0 : 1;

    tValue = 0;
    xGrid = Math.floor( xStart );
    yGrid = Math.floor( yStart );
    let fracStartPosX = xStart - Math.floor( xStart );

    if ( xDirection > 0 ) {
        tForNextBorderX = ( 1 - fracStartPosX ) * tForOneX;
    } else {
        tForNextBorderX = fracStartPosX * tForOneX;
    }

    let fracStartPosY = yStart - Math.floor( yStart );

    if ( yDirection > 0 ) {
        tForNextBorderY = ( 1 - fracStartPosY ) * tForOneY;
    } else {
        tForNextBorderY = fracStartPosY * tForOneY;
    }


    let isLast;

    while ( !isLast ) {
        if ( tForNextBorderX <= tForNextBorderY ) {
            // step in x;
            tValue = tForNextBorderX;
            tForNextBorderX = tForNextBorderX + tForOneX;
            xGrid = xGrid + xStep;
        } else {
            // step in y;
            tValue = tForNextBorderY;
            tForNextBorderY = tForNextBorderY + tForOneY;
            yGrid = yGrid + yStep;
        }
        isLast = tValue > 1.0;
        yield [xGrid, yGrid];
    }
}


class ProceduralMap {
//let log = function(...) }

    /**
     *Creates an instance of ProceduralMap.
     * @param {object} options
     * @param {number=} options.floor
     * @param {number=} options.seed
     * @param {number|{min:number,max:number}=} options.width
     * @param {number|{min:number,max:number}=} options.height
     * @param {number|{min:number,max:number}=} options.numOfFloor
     * @param {string[]=} options.attrib
     * @param {"wildness"|"dungeon"=} options.type
     * @param {number=} options.cave 0.0~1.0 자연 동굴의 비율
     * @param {number=} options.numOfBoss
     * @param {number=} options.numOfCampfire
     * @param {number=} options.numOfShop
     * @memberof ProceduralMap
     */
    constructor( options ) {
        options = options || {};
        this.options = options;
        this.options.floor = this.options.floor != null ? this.options.floor : 1;
        log( "랜덤시드",this.options.seed );
        this.random = new _lib_random__WEBPACK_IMPORTED_MODULE_2__["default"]( this.options.seed );
        this.options.seed = this.options.seed  != null ? this.options.seed  : this.random.seed;
        this.options.width = this.options.width  != null ? this.options.width  : { min: 24,max: 40 };
        this.options.height = this.options.height  != null ? this.options.height  : { min: 24,max: 40 };
        this.options.numOfFloor = this.options.numOfFloor  != null ? this.options.numOfFloor  : { min: 5,max: 10 };
		
        this.width = typeof this.options.width == "number" ? this.options.width : this.random.random( this.options.width.min,this.options.width.max );
        this.height = typeof this.options.height == "number" ? this.options.height : this.random.random( this.options.height.min,this.options.height.max );
        // 생성에 참고하는 어트리뷰트
        // 커스텀블록이 배치될 때 이 어트리뷰트를 참고해서 등장 여부가 결정된다.
        this.attrib = [];
        if ( options.attrib ) {
            for ( let k in options.attrib ) {
                let v = options.attrib[k];

                this.attrib[k] = v;
            }
        }
        //-------------------------------------------------
        // 생성된 맵이 들어갈 곳
        //-------------------------------------------------
        this.map = [];
        // 읽기/쓰기 제어
        this.readMap = this.map;
        this.writeMap = this.map;
        // 시작점=올라가는 계단
        /** @type {number} */
        this.startX = undefined;
        /** @type {number} */
        this.startY = undefined;
        // 끝점=내려가는 계단  월드에서는 없다
        /** @type {number} */
        this.endX = undefined;
        /** @type {number} */
        this.endY = undefined;
        // lockMap은 생성 중에 만들던 내용을 덮어쓰지 않도록 마스킹할 때 쓴다.
        this.lockMap = [];
        this.clear( null,this.lockMap );
        // 락맵 내용
        // null = 락안됨   
        // 1 = 락되어 커스텀블록이 못올라가지만 길은 뚫을 수 있음
        // 2 = 길도 못 뚫음. 변경불가

        //-------------------------------------------------
        // 오브젝트 배치
        //-------------------------------------------------
        /** @type {*[][]} */
        this.entityMap = [];
        this.clear( null,this.entityMap );
        // 오브젝트맵 내용
        // null == 배치안함
        // table = {type,char,options}

        //-------------------------------------------------
        // 흥미도 계산 결과 {score 0~1,x,y}
        //-------------------------------------------------
        /** @type {[number,number,number][]} */
        this.scoreList = undefined;
        // 스코어 내용
        // {점수0~1,x,y}


        //-------------------------------------------------
        // 타입에 따라 생성
        //-------------------------------------------------
        if ( options.type == "wildness" ) {
            // 야외 타입으로 생성하는 경우

            //this.generateWildness();
        } else if  ( options.type == "dungeon" ) {
            // 던전 타입으로 생성

            // 던전의 층 수
            this.numOfFloor = typeof this.options.numOfFloor == "number" ? this.options.numOfFloor : this.random.random( this.options.numOfFloor.min,this.options.numOfFloor.max );
            // 지금 들어가는 층
            // 같은 시드를 주고 층을 오갈 수 있게 하기 위해서임
            this.floor = this.options.floor;
            // cave 값은 자연동굴이 얼마나 차지하는가를 지정함 0.0 이면 전체 층이 인공이다.
            let cave = this.options.cave != null ? this.options.cave : this.random.random( 0,10 ) / 10;
            let caveRange = Math.min( Math.abs( 1 - cave ),Math.abs( 0 - cave ) );

            this.caveStart = this.random.random(
                Math.floor( this.numOfFloor * ( 1 - cave - caveRange ) ),
                Math.floor( this.numOfFloor * ( 1 - cave + caveRange ) )
            );
            // 보스가 위치하는 층이 어디인지 지정한다
            this.bossFloors = [];
            this.numOfBoss = Math.min( this.options.numOfBoss  != null ? this.options.numOfBoss  : 0 , this.numOfFloor );
            if ( this.numOfBoss > 0 ) {
                if ( this.numOfBoss > 1 ) {
                    this.bossFloors = this.random.pick( 1, this.numOfFloor - 1, this.numOfBoss - 1 );
                } else {
                    // 마지막 보스는 항상 맨 아래층에 있다
                    this.bossFloors[this.numOfBoss - 1] = this.numOfFloor;
                }
            }
            // 상점
            this.shopFloors = {};
            this.numOfShop = Math.min( this.options.numOfShop  != null ? this.options.numOfShop  : 0 , this.numOfFloor );
            if ( this.numOfShop > 1 ) {
                this.shopFloors = this.random.pick( 1, this.numOfFloor - 1, this.numOfShop );
            }
            // 캠프파이어
            this.campfireFloors = {};
            this.numOfCampfire = Math.min( this.options.numOfCampfire  != null ? this.options.numOfCampfire  : 0 , this.numOfFloor );
            if ( this.numOfCampfire > 1 ) {
                this.campfireFloors = this.random.pick( 1, this.numOfFloor - 1, this.numOfCampfire );
            }


            //랜덤버리기
            for ( let i = 1; i <= this.floor; i++ ) {
                this.random.random( 0,0 );
            }

            //-------------------------------------------------
            // 생성하는 부분
            //-------------------------------------------------
			
            let sector;

            if ( this.floor < this.caveStart ) {
                this.attrib.push( "dungeon" );
                sector = this.generateDungeon();
            } else {
                this.attrib.push( "cave" );
                sector = this.generateCave();
            }
            if ( !sector ) {
                let s = this.getMapString( this.map );

                log( s );
                console.assert( sector,"던전 생성 실패" );
            }
			
            // 흥미도 계산 결과로 맵을 돌려줌
            // 이미지 프로세싱을 할꺼면 맵을 쓰면된다.
            // 그외에는 scoreList를 쓴다
            this.computeInterestingMap();
            // 프랍배치
            this.placeProps();
            // 몬스터배치
            this.placeMonsters();
            // 내려가는 계단 달기
            if ( this.floor < this.numOfFloor ) {
                this.makeDownStair();
            }
            this.closeDoors();
        }
    }


    setReadWrite( readMap,writeMap ) {
        this.readMap = readMap || this.map;
        this.writeMap = writeMap || this.map;
    }

    cloneMap( map ) {
        map = map || this.readMap;
        let t = [];

        for ( let y = 0; y < this.height; y++ ) {
            t[y] = [];
            for ( let x = 0; x < this.width; x++ ) {
                t[y][x] = map[y][x];
            }
        }

        return t;
    }

    clear( c,map ) {
        map = map || this.writeMap;
        map.length = 0;
        for ( let y = 0; y < this.height; y++ ) {
            map[y] = [];
            if ( c != null ) {
                for ( let x = 0; x < this.width; x++ ) {
                    map[y][x] = c;
                }
            }
        }
    }

    getMapString( map ) {
        // 빠른 버전
        map = map || this.readMap;
        let s = "";

        for ( let y = 0; y < this.height; y++ ) {
            s = s + map[y].join( "" );
            if ( y != this.height - 1 ) s += "\n";
        }

        return s;
    }

    logMapString( map ) {
        map = map || this.readMap;
        let s = "";

        for ( let y = 0; y < this.height; y++ ) {
            for ( let x = 0; x < this.width; x++ ) {
                let c = map[y][x];

                if ( typeof c == "object" ) {
                    c = c[2];	// objectMap;
                } else if  ( typeof c == "number" ) {
                    c = ( map[y][x] ).tostring();
                } else if  ( c == null ) {
                    c = "°"; // null 대신 표시
                }
                s = s + c.tostring();
            }
            s = s + "\n";
        }
        log( "\n" + s );

        return s;
    }

    getEntityList( map ) {
        map = map != null ? map : this.entityMap;
        //this.getMapString(map) -- 테스트 출력
        let t = [];

        for ( let y = 0; y < this.height; y++ ) {
            for ( let x = 0; x < this.width; x++ ) {
                if ( map[y][x] ) {
                    t.push( { type: map[y][x][0], x: x, y: y, char: map[y][x][1], options: map[y][x][2] } );
                }
            }
        }

        return t;
    }

    //-------------------------------------------------------------------------------------------------
    // 오브젝트 배치 도구
    //-------------------------------------------------------------------------------------------------
    addEntity( x,y,type,char,options ) {
        this.draw( x,y,[type,char,options],this.entityMap );
    }

    removeEntity( x,y ) {
        this.draw( x,y,null,this.entityMap );
    }

    readEntity( x,y ) {
        let v = this.read( x,y,this.entityMap );

        return v && v[0] || null;
    }

    //-------------------------------------------------------------------------------------------------
    // 계산 도구
    //-------------------------------------------------------------------------------------------------

    isSpace( x,y ) {
        let c = this.read( x,y );

        return typeof c == "string" && ( ( _world_gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].tileStringData[c].wall & _world_gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].BLOCK_PASS ) == 0 );
    }

    countSurrounded( x,y,tc ) {
        let count = 0;

        count = count + ( this.read( x - 1,y - 1 ) != tc ? 0 : 1 );
        count = count + ( this.read( x  ,y - 1 ) != tc ? 0 : 1 );
        count = count + ( this.read( x + 1,y - 1 ) != tc ? 0 : 1 );
        count = count + ( this.read( x - 1,y  ) != tc ? 0 : 1 );
        count = count + ( this.read( x + 1,y  ) != tc ? 0 : 1 );
        count = count + ( this.read( x - 1,y + 1 ) != tc ? 0 : 1 );
        count = count + ( this.read( x  ,y + 1 ) != tc ? 0 : 1 );
        count = count + ( this.read( x + 1,y + 1 ) != tc ? 0 : 1 );

        return count;
    }

    countSurroundedBlock( x,y ) {
        let count = 0;

        count = count + ( this.isSpace( x - 1,y - 1 ) ? 0 : 1 );
        count = count + ( this.isSpace( x  ,y - 1 ) ? 0 : 1 );
        count = count + ( this.isSpace( x + 1,y - 1 ) ? 0 : 1 );
        count = count + ( this.isSpace( x - 1,y  ) ? 0 : 1 );
        count = count + ( this.isSpace( x + 1,y  ) ? 0 : 1 );
        count = count + ( this.isSpace( x - 1,y + 1 ) ? 0 : 1 );
        count = count + ( this.isSpace( x  ,y + 1 ) ? 0 : 1 );
        count = count + ( this.isSpace( x + 1,y + 1 ) ? 0 : 1 );

        return count;
    }

    checkBox( x1,y1,x2,y2 ) {
        for ( let y = y1; y <= y2; y++ ) {
            for ( let x = x1; x <= x2; x++ ) {
                let tc = this.read( x,y );

                if ( tc != null ) {
                    return true;
                }
            }
        }

        return false;
    }

    checkMapString( x,y,s ) {
        let t = s.split( "\n" );
        let height = t.length;
        let width = t[0].length;

        for ( let yy = 0; yy < height; yy++ ) {
            for ( let xx = 0; xx < width; xx++ ) {
                let c = t[yy].substr( xx,1 );

                if ( c != "0" ) { // 투명색
                    let tc = this.read( x + xx,y + yy );

                    if ( tc != null ) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    getMapStringSize( s ) {
        let t = s.split( "\n" );
        let height = t.length;
        let width = t[1].length;

        return [width,height,t];
    }

    getSpaceTable( x1,y1,x2,y2 ) {
        x1 = x1 || 1;
        y1 = y1 || 1;
        x2 = x2 || this.width;
        y2 = y2 || this.height;
        let t = [];

        for ( let y = y1; y <= y2; y++ ) {
            for ( let x = x1; x <= x2; x++ ) {
                if ( this.isSpace( x,y ) ) {
                    t.push( [x, y] );
                }
            }
        }

        return t;
    }

    getSameCharTable( x1,y1,x2,y2,tc ) {
        let t = [];

        for ( let y = y1; y <= y2; y++ ) {
            for ( let x = x1; x <= x2; x++ ) {
                let c = this.read( x,y );

                if ( c == tc ) {
                    t.push( [x, y] );
                }
            }
        }

        return t;
    }

    getPassages( x,y ) {
        let t = [];

        if ( this.isSpace( x - 1, y ) ) {
            t.push( [-1, 0] );
        }
        if ( this.isSpace( x + 1, y ) ) {
            t.push( [1, 0] );
        }
        if ( this.isSpace( x, y - 1 ) ) {
            t.push( [0, -1] );
        }
        if ( this.isSpace( x, y + 1 ) ) {
            t.push( [0, 1] );
        }

        return t;
    }

    getConnectedNearFloor( x,y,count, lockRefMap ) {
        let fail;
        let path = {};
        let t = [[x,y]];
        let t2 = [];
		
        let checkSurrounding = ( x, y ) => {
            let c = this.read( x, y );

            if ( path[x + "," + y] || !this.isSpace( x, y ) || c == "<" ) {
                // 체크한 곳이거나
                // 빈공간이 아니거나
                return;
            }
            path[x + "," + y] = true;
            if ( c != "D" && this.read( x, y, lockRefMap ) ) {
                // 문위에 뭔가를 배치하지 않도록 하자
                // 락리퍼런스맵이 null인 경우도 스킵
                // 아에 막진 말고 배치만 스킵
                t2.push( [ x, y ] );
            }
            if ( t2.length >= count ) {
                return true;
            }
            t.push( [x - 1, y] );
            t.push( [x + 1, y] );
            t.push( [x, y - 1] );
            t.push( [x, y + 1] );
        };

        do {
            let t1 = t;

            t = [];
            for ( let i in t1 ) {
                let [x,y] = t1[i];
			
                if ( checkSurrounding( x, y ) ) {
                    return t2;
                }
            }
        } while ( t.length != 0 );

        return t2;
    }


    //-------------------------------------------------------------------------------------------------
    // 맵 그리기 도구
    //-------------------------------------------------------------------------------------------------

    /**
     *
     *
     * @param {number} x
     * @param {number} y
     * @param {string|number|[*,*,*]} c
     * @param {*[]=} map
     * @memberof ProceduralMap
     */
    draw( x, y, c, map ) {
        console.assert( c != undefined, "c가 undefined" );
        console.assert( c != null, "c가 null" );
        if ( x < 0 || x >= this.width || y < 0 || y >= this.height ) {
            return;
        } else {
            map = map != null ? map : this.writeMap;
            map[y][x] = c;
        }
    }

    /**
     *
     *
     * @param {number} x
     * @param {number} y
     * @param {*[]=} map
     * @returns {string|number|null|[*,*,*]}
     * @memberof ProceduralMap
     */
    read( x,y,map ) {
        if ( x < 0 || x >= this.width || y < 0 || y >= this.height ) {
            return "W";
        } else {
            map = map != null ? map : this.readMap;

            return map[y][x];
        }
    }

    /**
     *
     *
     * @param {number} x
     * @param {number} y
     * @returns {number}
     * @memberof ProceduralMap
     */
    readLock( x,y ) {
        if ( x < 0 || x >= this.width || y < 0 || y >= this.height ) {
            return 2;
        } else {
            if ( y == null || x == null || this.lockMap[y] == null ) {
                log( x,y,this.lockMap[y] );
            }

            return this.lockMap[y][x];
        }
    }

    /**
     *
     *
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @param {number|string} c
     * @memberof ProceduralMap
     */
    drawBox( x1,y1,x2,y2,c ) {
        for ( let y = y1; y <= y2; y++ ) {
            for ( let x = x1; x <= x2; x++ ) {
                this.draw( x,y,c );
            }
        }
    }


    /**
     *
     *
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @param {number} tc
     * @param {boolean} checkGreaterEqual
     * @returns {*[]}
     * @memberof ProceduralMap
     */
    traceRay( x1,y1,x2,y2,tc,checkGreaterEqual ) {
        for ( let [tx,ty] of rayCast( x1,y1,x2,y2 ) ) {
            let rc = this.read( tx,ty );

            if ( checkGreaterEqual && typeof rc == "number" && rc >= tc ) {
                return [tx,ty,rc];
            } else if  ( rc == tc ) {
                return [tx,ty,rc];
            }
        }

        return [x2,y2,tc];
    }

    /**
     *
     *
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @returns {*[]|null}
     * @memberof ProceduralMap
     */
    traceRayToSpace( x1,y1,x2,y2 ) {
        for ( let [tx,ty] of rayCast( x1,y1,x2,y2 ) ) {
            if ( this.isSpace( tx,ty ) ) {
                return [tx,ty];
            }
        }

        return;
    }


    /**
     *
     *
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @param {number|string} c
     * @param {boolean=} bridge
     * @memberof ProceduralMap
     */
    drawLine( x1,y1,x2,y2,c,bridge ) {
        for ( let [tx,ty,cx,cy] of rayCast( x1,y1,x2,y2 ) ) {
            let rc = this.read( tx,ty );

            if ( bridge && ( rc == "%" || rc == "~" ) ) {
                //용암이나 물이면 다리를 덮는다
                this.draw( tx,ty,"|" );
            } else {
                this.draw( tx,ty,c );
            }
        }
    }

    /**
     *
     *
     * @param {number} x
     * @param {number} y
     * @param {string} s
     * @param {string|number=} forceChar
     * @memberof ProceduralMap
     */
    drawMapString( x,y,s,forceChar ) {
        let t = s.split( "\n" );
        let height = t.length;
        let width = t[0].length;

        for ( let yy = 0; yy < height; yy++ ) {
            for ( let xx = 0; xx < width; xx++ ) {
                let c = t[yy].substr( xx,1 );

                if ( c != "0" ) { // 투명색
                    this.draw( x + xx,y + yy,forceChar != null ? forceChar : c );
                }
            }
        }
    }



    //-------------------------------------------------------------------------------------------------
    // 두 점을 연결하기
    // 벽을 파면서 연결하는 것이므로 자연동굴 생성의 초기에만 사용
    //-------------------------------------------------------------------------------------------------

    /**
     *
     *
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @param {string|number} c
     * @memberof ProceduralMap
     */
    connect( x1,y1,x2,y2,c ) {
        let method = this.random.random( 1,3 );
        let bridge;

        if ( method == 1 ) {
            if ( this.random.random( 1,3 ) == 1 ) {
                bridge = true;
            }
            this.drawLine( x1,y1,x2,y2,c,bridge );
        } else if  ( method == 2 ) {
            //수직 먼저 하는 직각 
            if ( this.random.random( 1,4 ) > 1 ) {
                bridge = true;
            }
            this.drawLine( x1,y2,x2,y2,c,bridge );
        } else {
            //수평 먼저 하는 직각 
            if ( this.random.random( 1,4 ) > 1 ) {
                bridge = true;
            }
            this.drawLine( x2,y1,x2,y2,c,bridge );
        }
    }


    /**
     *
     *
     * @param {number} x
     * @param {number} y
     * @param {string|number} c
     * @returns {Array.<number,number>[]}
     * @memberof ProceduralMap
     */
    floodFill( x,y,c ) {
        let t = [];
        let tc = this.read( x,y );

        console.assert( tc != c,"칠할 곳이 같으면 안되지" );
        function scan( xx,yy,dir ) {
            let drawn;

            while ( this.read( xx,yy ) == tc ) {
                drawn = true;
                t.push( [xx, yy] );
                this.draw( xx,yy,c );
                if ( this.read( xx,yy - 1 ) == tc ) {
                    if ( scan( xx,yy - 1,-1 ) ) {
                        scan( xx + 1,yy - 1,1 );
                    }
                }
                if ( this.read( xx,yy + 1 ) == tc ) {
                    if ( scan( xx,yy + 1,-1 ) ) {
                        scan( xx + 1,yy + 1,1 );
                    }
                }
                xx = xx + dir;
            }

            return drawn;
        }
		
        if ( scan( x,y,-1 ) ) {
            scan( x + 1,y,1 );
        }

        return t;
    }

    /**
     *
     *
     * @param {number} x
     * @param {number} y
     * @param {string|number} c
     * @returns {Array.<number,number>[]}
     * @memberof ProceduralMap
     */
    floodFillSpace( x,y,c ) {
        let t = [];
		
        let scan = ( xx, yy, dir ) => {
            let drawn;

            while ( this.isSpace( xx, yy ) ) {
                drawn = true;
                t.push( [xx, yy] );
                this.draw( xx, yy, c );
                if ( this.isSpace( xx, yy - 1 ) ) {
                    if ( scan( xx, yy - 1, -1 ) ) {
                        scan( xx + 1, yy - 1, 1 );
                    }
                }
                if ( this.isSpace( xx, yy + 1 ) ) {
                    if ( scan( xx, yy + 1, -1 ) ) {
                        scan( xx + 1, yy + 1, 1 );
                    }
                }
                xx = xx + dir;
            }

            return drawn;
        };
		
        if ( scan( x,y,-1 ) ) {
            scan( x + 1,y,1 );
        }

        return t;
    }



    //-------------------------------------------------------------------------------------------------
    // 던전 한 층은 하나의 섹터가 되어야 한다.
    //-------------------------------------------------------------------------------------------------

    /**
     *
     *
     * @param {boolean=} mark
     * @returns {*[]}
     * @memberof ProceduralMap
     */
    countSectors( mark ) {
        let sectors = [];

        if ( mark ) {
            // 섹터를 다 칠할 것이냐
            for ( let y = 0; y < this.height; y++ ) {
                for ( let x = 0; x < this.width; x++ ) {
                    if ( this.isSpace( x, y ) ) {
                        const sectorNum = sectors.length;

                        sectors.push( { sectorNumber: sectorNum, pos: this.floodFillSpace( x, y, sectorNum ) } );
                        log( `섹터 ${sectorNum}, ${sectors[sectorNum].pos.length}개 칠함 [${x},${y}]` );
                        if ( this.random.random( 1, Math.floor( this.width * this.height * .005 ) ) > sectors[sectorNum].pos.length ) {
                            // w*h * 0.005 개 보다 작은 섹터는 지울 확률이 있음
                            log( `섹터 ${sectorNum}, ${sectors[sectorNum].pos.length}개라 너무 작아서 막아버림 [${x},${y}]` );
                            for ( let i in sectors[sectorNum].pos ) {
                                let [x,y] = sectors[sectorNum].pos[i];

                                if ( this.readLock( x,y ) != 2 ) {
                                    this.draw( x,y,"W" );
                                }
                            }
                            sectors.splice( sectorNum,1 );
                        }
                    }
                }
            }
            log( `총 섹터수 ${sectors.length}` );
        } else {
            let newMap = this.cloneMap();

            this.setReadWrite( newMap,newMap );
            for ( let y = 0; y < this.height; y++ ) {
                for ( let x = 0; x < this.width; x++ ) {
                    if ( this.isSpace( x,y ) ) {
                        const sectorNum = sectors.length;

                        sectors.push( { sectorNumber: sectorNum, pos: this.floodFillSpace( x, y, "W" ) } );
                    }
                }
            }
            log( `총 섹터수 ${sectors.length}` );
            this.setReadWrite();
        }

        return sectors;
    }

    connectSectors() {
        let newMap = this.cloneMap();

        this.setReadWrite( newMap,newMap );
        let sectors = this.countSectors( true );
        //this.getMapString(newMap);
        const needCount = sectors.length - 1;

        for ( let i = 0; i < needCount; i++ ) {
            let try1 = 0;
            let path;

            log( "--- 섹터연결",sectors[0].sectorNumber );
            do {
                try1 = try1 + 1;
                let [x1, y1] = sectors[0].pos[this.random.random( 0,sectors[0].pos.length - 1 )]; // 내 좌표중에 하나에서

                log( "시도위치", x1, y1 );
                path = findNearestSector.call( this, x1, y1, sectors[0].sectorNumber + 1 );
                log( `시도결과 경로 길이 ${path.length}` );
            } while ( path == null && try1 <= Math.min( sectors[0].pos.length, 5 ) );
            if ( path ) {
                for ( let i in path ) {
                    let v = path[i];
                    let [x,y] = v;
                    let c = this.read( x,y );

                    // 여기서 섹터의 유일한 곳이면 번호를 삭제해버리게 된다.
                    if ( parseInt( i ) > 0 ) {
                        if ( c == "%" || c == "~" ) {
                            //용암이나 물이면 다리
                            this.draw( x,y,"|" );
                        } else {
                            this.draw( x,y," " );
                        }
                    }
                }
            } else {
                log( "다른 섹터에 연결할 수 없는 섹터다" );
                for ( let i in sectors[0].pos ) {
                    let v = sectors[0].pos[i];
                    let [x, y] = v;

                    if ( this.readLock( x,y ) != 2 ) {
                        this.draw( x,y,"B" );
                    }
                }
            }
            sectors.shift();
        }
        //임시로 쓴 타일 정리
        this.setReadWrite( newMap );
        for ( let y = 0; y < this.height; y++ ) {
            for ( let x = 0; x < this.width; x++ ) {
                let c = this.read( x,y );

                if ( typeof c == "string" ) {
                    this.draw( x,y,c );
                }
            }
        }
        this.setReadWrite();
    }


    decoFloor() {
        let tiles = "";
		
        let rep = ( char, grad, start ) => {
            let v = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( start + ( this.floor - 1 ) * grad, 0, 10 );

            if ( v > 0 ) {
                tiles = tiles + char.repeat( v );
            }
        };

        rep( '"', -4, 10 ); // 풀
        rep( ".", -3, 10 );// 고운흙
        rep( ";", -2, 10 ); // 거친흙
        rep( ",", -1, 10 ); // 흙
        rep( "?", 1, 5 ); // 자갈
        rep( "(", 0.5, -1 );// 돌
        rep( "{", 1, -1 ); // 큰 돌
        let replaceWall;

        if ( this.random.random( 1,this.floor ) > 5 ) {
            replaceWall = "R";
        } else if  ( this.random.random( 1,this.floor ) > 10 ) {
            replaceWall = "&";
        }
        for ( let y = 0; y < this.height; y++ ) {
            for ( let x = 0; x < this.width; x++ ) {
                let c = this.read( x,y );

                if ( c == " " ) {
                    let pick = this.random.random( 0,tiles.length - 1 );
                    let rc = tiles.substr( pick,1 );

                    this.draw( x,y,rc );
                }
                if ( c == "W" && replaceWall ) {
                    this.draw( x,y,replaceWall );
                }
            }
        }
    }


    /**
     *
     *
     * @param {string|number} c
     * @memberof ProceduralMap
     */
    makeRiver( c ) {
        let [w,h] = [this.width,this.height];
        let [x,y] = [this.random.random( 0,w - 1 ),this.random.random( 0,h - 1 )];
        let angle = this.random.random( 0,359 );
		
        const line = ( x, y, angle ) => {
            let dist = this.random.random( 1,5 );
            let x2,y2;
            let step = 1;

            while ( !( x < 0 || x >= w || y < 0 || y >= h || step > 100 ) ) {
                x2 = x + Math.cos( angle * 180 / Math.PI ) * dist;
                y2 = y + Math.sin( angle * 180 / Math.PI ) * dist;
                this.drawLine( x,y,x2,y2,c );
                [x,y] = [x2,y2];
                angle = angle + this.random.random( -30,30 );
                dist = this.random.random( 1,5 );
                step = step + 1;
            }
        };
		
        line( x,y,angle );
        line( x,y,-angle );
    }



    /*

	커스텀 블록에서만 사용하는 블록
	0   투명색
	1~9 문이 붙을 수 있는 벽

	*/

    /**
     *
     *
     * @returns {[string,number,boolean][]}
     * @memberof ProceduralMap
     */
    getCustomBlockList() {
        let floor = this.floor;
        
        /** @type {[string,number,boolean][]} */
        let t = [];
        const special = {};
		
        for ( let k in (_customBlocks__WEBPACK_IMPORTED_MODULE_3___default()) ) {
            let v = (_customBlocks__WEBPACK_IMPORTED_MODULE_3___default())[k];

            if ( v.special ) {
                if ( v.special == "boss" ) {
                    if ( this.bossFloors.includes( this.floor ) ) {
                        special["boss"] = special["boss"] || [];
                        special["boss"].push( v );
                    }
                }
                if ( v.special == "shop" ) {
                    if ( this.shopFloors.includes( this.floor ) ) {
                        special["shop"] = special["shop"] || [];
                        special["shop"].push( v );
                    }
                }
                if ( v.special == "campfire" ) {
                    if ( this.campfireFloors.includes( this.floor ) ) {
                        special["campfire"] = special["campfire"] || [];
                        special["campfire"].push( v );
                    }
                }
            } else {
                let canAppear;
                let mustAppear;
                let chance = v.chanceToAppear || 1;

                if ( v.whiteAttrib ) {
                    for ( let i in v.whiteAttrib ) {
                        let v2 = v.whiteAttrib[i];
                        let attribName;
                        let _chance;

                        if ( typeof v2 == "string" ) {
                            attribName = v2;
                        } else {
                            attribName = v2[1];
                            _chance = v2[2];
                        }
                        if ( this.attrib.includes( attribName ) ) {
                            canAppear = true;
                            chance = chance * ( _chance || 1 );
                            break;
                        }
                    }
                }

                if ( canAppear && v.blackAttrib ) {
                    for ( let i in v.blackAttrib ) {
                        let v2 = v.blackAttrib[i];
                        let attribName;
                        let _chance;

                        if ( typeof v2 == "string" ) {
                            attribName = v2;
                        } else {
                            attribName = v2[1];
                            _chance = v2[2];
                        }
                        if ( this.attrib.includes( attribName ) ) {
                            canAppear = false;
                            break;
                        }
                    }
                }
                if ( canAppear && v.appearFloor ) {
                    let canAppearFloor;
                    let chanceFloor = 1;

                    for ( let i in v.appearFloor ) {
                        let v2 = v.appearFloor[i];
                        let [min,max,_chance] = v2;

                        if ( floor >= min && floor <= max ) {
                            canAppearFloor = true;
                            chanceFloor = _chance || 1;
                            break;
                        }
                    }
                    if ( canAppearFloor ) {
                        chance = chance * chanceFloor;
                    } else {
                        canAppear = false;
                    }
                }
                if ( canAppear && this.random.random( 1,Math.floor( chance * 100 ) ) <= 100 ) {
                    // 나타날 확률은 소수점 2자리까지 허용
                    let name,mustPlace,maxTry;

                    name = k;
                    mustPlace = v.mustPlace;
                    maxTry = v.maxTry;
                    t.push( [name, maxTry, mustPlace] );
                }
            }
        }
        for ( let k in special ) {
            let v = special[k];
            let pick = this.random.random( 0,v.length - 1 );
            let name,mustPlace,maxTry;

            name = k;//v[pick]
            mustPlace = v[pick].mustPlace;
            maxTry = v[pick].maxTry;
            t.unshift( [name, maxTry, mustPlace ] );
        }

        return t;
    }



    /**
     *
     *
     * @param {[string,number,boolean][]=} t
     * @returns {Array.<number,number>[]}
     * @memberof ProceduralMap
     */
    placeCustomBlocks( t ) {
        t = t != null ? t : this.getCustomBlockList();
        let savedMap = this.cloneMap();
        let savedLockMap = this.cloneMap( this.lockMap );
        let posTable = [];
        let fail;

        for ( let i in t ) {
            let v = t[i];
            let [name,maxTry,mustPlace] = v;
            let [x,y ] = this.placeCustomBlock( name,maxTry );

            if ( x == null && mustPlace == true ) {
                // 꼭놔야되는 거면 실패
                fail = true;
                break;
            }
            posTable.push( [x, y] );
        }
        if ( fail ) {
            this.map = savedMap;
            this.lockMap = savedLockMap;
            this.setReadWrite();

            return;
        } else {
            return posTable;
        }
    }

    /**
     *
     *
     * @param {string} name
     * @param {number} maxTry
     * @returns {Array.<number,number>|null}
     * @memberof ProceduralMap
     */
    placeCustomBlock( name,maxTry ) {
        let cb = (_customBlocks__WEBPACK_IMPORTED_MODULE_3___default())[name];
        let mapString = cb.map[this.random.random( 0,cb.map.length - 1 )];
        let [bw,bh] = this.getMapStringSize( mapString );
        let [w,h] = [this.width,this.height];
        let margin = cb.margin;
        let x,y;
        let try1 = 0;
        let isLocked;

        this.setReadWrite( this.lockMap );
        do {
            try1 = try1 + 1;
            if ( try1 > ( maxTry || 1 ) ) {
                // 실패
                log( "커스텀블록", name, "을 배치할 곳이 없다" );
                this.setReadWrite();

                return;
            }
            x = this.random.random( margin, w - margin - bw );
            y = this.random.random( margin, h - margin - bh );
            isLocked = this.checkMapString( x, y, mapString );
        } while ( isLocked );
        log( `커스텀블록 ${name}배치 위치는`,x,y );
        this.drawMapString( x,y,mapString );
        this.setReadWrite( null,this.lockMap );
        // 마진 만큼 넓게 락을 건다
        // 주변은 1로 락을 걸고 (길을 낼 수 있지만 다른 블록은 못놓음);
        // 내부는 2로 락을 건다 (길만 못냄);
        if ( margin > 0 ) {
            for ( let yy = y - margin; yy <= y + margin; yy++ ) {
                for ( let xx = x - margin; xx <= x + margin; xx++ ) {
                    this.drawMapString( xx,yy,mapString,1 );
                }
            }
        }
        this.drawMapString( x,y,mapString,2 );
        this.setReadWrite();
        let numOfDoors = this.random.random( cb.doorMin,cb.doorMax );
        let pickedDoor = [];
        let doors = [];

        for ( let i = 0; i < cb.doorMax; i++ ) {
            // 문 숫자는 1부터 시작
            // 0은 투명
            doors.push( i + 1 );
        }
        for ( let i = 0; i < numOfDoors; i++ ) {
            let picked = this.random.random( 0, doors.length - 1 );

            pickedDoor.push( doors[picked] );
            doors.splice( picked, 1 );
        }
		
        for ( let i = 0; i < numOfDoors; i++ ) {
            log( "문달기시도",pickedDoor[i] );
            let t = this.getSameCharTable( x,y,x + bw - 1,y + bh - 1,pickedDoor[i].toString() );
            let doorX,doorY;
            let passages;
            let try2 = 0;

            do {
                try2 = try2 + 1;
                [doorX, doorY] = t[this.random.random( 0,t.length - 1 )];
                passages = this.getPassages( doorX, doorY );
                // 문에 연결된 길이 두 개면 나가서 섹터로 연결되는지 보면된다.
            } while ( !( passages.length == 2 || try2 > 5 ) );
            this.draw( doorX,doorY,"D" ); // 일단 문은 달고
            if ( passages && passages.length != 2 ) {
                // 선택한 문에 길을 달아야 하는 상황
                log( "문 앞에 길을 달아야한다",passages.length );
                console.assert( passages.length == 1,"문이 한쪽도 안열려있으면 안되잖아. 블록데이터 오류" );
                let [ax,ay] = passages[0];

                log( "다는 위치와 방향",doorX - ax,doorY - ay,-ax,-ay );
                this.draw( doorX - ax,doorY - ay," " );
                //this.connectAnywhere(doorX-ax,doorY-ay,-ax,-ay);
            } else {
                log( "문을 그냥 달기만 하면됨",doorX,doorY );
            }
        }
        for ( let yy = y; yy < y + bh; yy++ ) {
            for ( let xx = x; xx < x + bw; xx++ ) {
                let c = this.read( xx, yy );

                //@ts-ignore
                if ( "123456789".indexOf( c ) >= 0 ) {
                    this.draw( xx,yy,cb.wall || "M" );
                }
            }
        }
        log( "커스텀블록",name,"배치완료" );

        return [x,y];
    }






    //-------------------------------------------------------------------------------------------------
    // 흥미도 계산
    //-------------------------------------------------------------------------------------------------
    /*

	입구에서 멀다 = 입구에서부터 칠해가면서 구함
	막다른 곳

	*/

    /**
     *
     *
     * @returns {*[]}
     * @memberof ProceduralMap
     */
    computeInterestingMap() {
        let [startX,startY] = [this.startX,this.startY];
        let path = {};
        let t = [[0, startX, startY]];
		
        let checkSurrounding = ( dist, x, y ) => {
            if ( path[x + "," + y] || !this.isSpace( x, y ) ) {
                return;
            }
            // 좁은길을 따라갈수록 가산점을 준다
            let count = 0;

            count = count + ( this.read( x - 1, y ) == 0 ? 1 : 0 );
            count = count + ( this.read( x + 1, y ) == 0 ? 1 : 0 );
            count = count + ( this.read( x, y - 1 ) == 0 ? 1 : 0 );
            count = count + ( this.read( x, y + 1 ) == 0 ? 1 : 0 );
            dist = dist + Math.pow( count, 4 );
            let newNode = [ dist, x, y ];

            path[x + "," + y] = newNode;
            t.push( [dist + 1, x - 1, y] );
            t.push( [dist + 1, x + 1, y] );
            t.push( [dist + 1, x, y - 1] );
            t.push( [dist + 1, x, y + 1] );
        };
		
        let result;
        let t1;

        do {
            t1 = t;
            t = [];
            for ( let i in t1 ) {
                let [dist,x,y] = t1[i];

                checkSurrounding( dist, x, y );
            }
        } while ( t1.length != 0 );
        let intMap0 = [];

        this.setReadWrite( intMap0,intMap0 );
        this.clear( 0 );
        for ( let k in path ) {
            let [d, x, y] = path[k];

            this.draw( x,y,d );
        }
        let intMap = this.cloneMap( intMap0 );

        this.setReadWrite( intMap0,intMap );
        let maxScore = 0;

        for ( let k in path ) {
            let [, x, y] = path[k];

            if ( this.read( x,y ) > 0 ) {
                let count = 0;

                count = count + ( this.read( x - 1,y ) != 0 && 1 || 0 );
                count = count + ( this.read( x + 1,y ) != 0 && 1 || 0 );
                count = count + ( this.read( x,y - 1 ) != 0 && 1 || 0 );
                count = count + ( this.read( x,y + 1 ) != 0 && 1 || 0 );
                let val = 0;

                //@ts-ignore
                val = val + this.read( x - 1,y );
                //@ts-ignore
                val = val + this.read( x + 1, y );
                //@ts-ignore
                val = val + this.read( x, y - 1 );
                //@ts-ignore
                val = val + this.read( x, y + 1 );
                let average = val / count;
                //주변의 벽수
                //벽이 많으면 가산점
                //@ts-ignore
                let score = Math.max( 0, this.read( x, y, intMap ) * 2 - average );

                maxScore = Math.max( maxScore,score );
                this.draw( x,y,score );
            }
        }
        this.setReadWrite( intMap,intMap );
        for ( let k in path ) {
            let v = path[k];
            let [ ,x,y] = v;
            //@ts-ignore
            let score = this.read( x, y ) / maxScore;

            v[0] = score;
            this.draw( x,y,String.fromCharCode( 65 + score * 25 ) );
        }
        // 스코어가 높은 순서로 정렬
        let scoreList = [];

        for ( let k in path ) {
            let v = path[k];
            let [, x, y] = v;
            let c = this.read( x,y,this.map );

            //@ts-ignore
            if ( "DE><FYI*".indexOf( c ) < 0 ) {
                scoreList.push( v );
            }
        }
		
        scoreList.sort( ( a, b ) => b[0] - a[0] );
        // 플레이어와 펫이 계단을 내려갈 위치를 확보하기 위해서 뒤에서 5개를 잘라낸다.
        scoreList.length -= _entity_pet__WEBPACK_IMPORTED_MODULE_4__["default"].maxPet;

        this.setReadWrite();
        this.scoreList = scoreList;
        this.getMapString( intMap );

        return intMap;
    }


    /**
     *
     *
     * @param {number} num
     * @param {number} endRate
     * @returns {[number,number,number][]}
     * @memberof ProceduralMap
     */
    pickEvents( num,endRate ) {
        const pool = this.scoreList.slice();
        /** @type {[number,number,number][]} */
        const events = [];

        for ( let i = 0; i < num; i++ ) {
            console.assert( pool.length > 0 );
            let picked = this.random.random( 0,pool.length - 1 );

            console.assert( picked >= 0 );
            for ( let j = 0; j < endRate; j++ ) {
                picked = this.random.random( 0, picked );
                console.assert( picked >= 0 );
            }
            events.push( [pool[picked][0], pool[picked][1], pool[picked][2]] );
            if ( pool.length > 1 ) {
                pool.splice( picked,1 );
            }
        }

        return events;
    }



    /**
     *
     *
     * @param {number} numMin
     * @param {number} numMax
     * @returns {[number,number,number,number][]}
     * @memberof ProceduralMap
     */
    makeRooms( numMin,numMax ) {
        // BSP 방식으로 공간을 쪼갠다
        let t = [];

        let divide = ( dir, x, y, w, h ) => {
            if ( h < 8 ) {
                dir = 2;
            }
            if ( w < 8 ) {
                dir = 1;
            }
            if ( dir == 1 && h > 4 && !( h < 15 && this.random.random( 1,2 ) == 1 ) ) {
                let h2 = this.random.random( 2, h - 2 );

                divide( 3 - dir, x, y, w, h2 );
                divide( 3 - dir, x, y + h2, w, h - h2 );
            } else if ( dir == 2 && w > 4 && !( w < 15 && this.random.random( 1,2 ) == 1 ) ) {
                let w2 = this.random.random( 2, w - 2 );

                divide( 3 - dir, x, y, w2, h );
                divide( 3 - dir, x + w2, y, w - w2, h );
            } else {
                console.assert( `dir이 1,2가 아님` );
                t.push( [x, y, w, h] );
            }
        };

        divide( this.random.random( 1,2 ),3,3,this.width - 5,this.height - 5 );
        this.setReadWrite( this.lockMap );
        for ( let i in t ) {
            let v = t[i];
            let [x,y,w,h] = v;

            if ( w > 3 && h > 3 ) {
                let x1,y1,x2,y2;

                if ( this.random.random( 1,4 ) == 1 ) {
                    x1 = this.random.random( x + 1,x + w - 1 - 2 );
                    y1 = this.random.random( y + 1,y + h - 1 - 2 );
                    x2 = this.random.random( x1 + 2,x + w - 1 );
                    y2 = this.random.random( y1 + 2,y + h - 1 );
                } else {
                    [x1,y1,x2,y2] = [x + 1,y + 1,x + w - 1,y + h - 1];
                }
                // 커스텀 블록으로 락되었으면 아무 처리하지 않고 넘어간다
                if ( this.checkBox( x1 - 1,y1 - 1,x2 + 1,y2 + 1 ) ) {
                    t[i] = null; // 이 블록은 못쓰는 블록이다.
                } else {
                    t[i] = [x1, y1, x2, y2];
                }
            } else {
                t[i] = null;
            }
        }
        this.setReadWrite();
        // 방 그리기
        let rooms = [];

        for ( let k in t ) {
            let v = t[k];

            if ( v ) {
                rooms.push( v );
                let [x1,y1,x2,y2] = v;

                this.setReadWrite();
                this.drawBox( x1 - 1,y1 - 1,x2 + 1,y2 + 1,"M" );
                this.drawBox( x1,y1,x2,y2," " );
                this.setReadWrite( this.lockMap,this.lockMap );
                this.drawBox( x1 - 1,y1 - 1,x2 + 1,y2 + 1,2 );
                this.drawBox( x1,y1,x2,y2,1 );
                this.setReadWrite();
                let doors = [1, 2, 3, 4];

                // 문을 몇개 추가
                for ( let i = 1; i <= this.random.random( 0,3 ); i++ ) {
                    doors.push( this.random.random( 1,4 ) );
                }
                for ( let i in doors ) {
                    let v = doors[i];
                    let doorDir = v;

                    if ( doorDir == 1 ) {
                        let x = this.random.random( x1,x2 );

                        if ( this.read( x - 1,y1 - 1 ) != "D" && this.read( x + 1,y1 - 1 ) != "D" && this.read( x,y1 - 2 ) != "M" ) { //문이 바로 이웃해있으면 별로
                            this.draw( x,y1 - 1,"D" );
                            this.draw( x,y1 - 2," " );
                        }
                    } else if  ( doorDir == 2 ) {
                        let y = this.random.random( y1,y2 );

                        if ( this.read( x2 + 1,y - 1 ) != "D" && this.read( x2 + 1,y + 1 ) != "D" && this.read( x2 + 2,y ) != "M" ) {
                            this.draw( x2 + 1,y,"D" );
                            this.draw( x2 + 2,y," " );
                        }
                    } else if  ( doorDir == 3 ) {
                        let x = this.random.random( x1,x2 );

                        if ( this.read( x - 1,y2 + 1 ) != "D" && this.read( x + 1,y2 + 1 ) != "D" && this.read( x,y2 + 2 ) != "M" ) {
                            this.draw( x,y2 + 1,"D" );
                            this.draw( x,y2 + 2," " );
                        }
                    } else if  ( doorDir == 4 ) {
                        let y = this.random.random( y1,y2 );

                        if ( this.read( x1 - 1,y - 1 ) != "D" && this.read( x1 - 1,y + 1 ) != "D" && this.read( x1 - 2,y ) != "M" ) {
                            this.draw( x1 - 1,y,"D" );
                            this.draw( x1 - 2,y," " );
                        }
                    }
                }
            }
        }

        // 이 단계에서는 섹터연결이 안될 수 있다.
        // 방이 운이 나쁘게 O자 형태로 연결되거나 하면 문제가 됨
        return rooms; // 데코레이션을 위해서 넘긴다. 
    }


    eraseTinyHallAndDoor() {
        for ( let y = 0; y < this.height; y++ ) {
            for ( let x = 0; x < this.width; x++ ) {
                if ( this.read( x,y ) == " " ) {
                    let count = 0;

                    count = count + ( this.isSpace( x - 1,y  ) ? 0 : 1 );
                    count = count + ( this.isSpace( x  ,y - 1 ) ? 0 : 1 );
                    count = count + ( this.isSpace( x + 1,y  ) ? 0 : 1 );
                    count = count + ( this.isSpace( x  ,y + 1 ) ? 0 : 1 );
                    if ( count == 3 ) {
                        if ( this.read( x - 1,y ) == "D" || this.read( x + 1,y ) == "D" || this.read( x,y - 1 ) == "D" || this.read( x,y + 1 ) == "D" ) {
                            //3면이 벽이고 나머지가 문이면 막아야한다.
                            this.draw( x,y,"W" );
                        }
                    }
                }
            }
        }
        for ( let y = 0; y < this.height; y++ ) {
            for ( let x = 0; x < this.width; x++ ) {
                if ( this.read( x,y ) == "D" ) {
                    let count = 0;

                    count = count + ( this.isSpace( x - 1,y  ) ? 0 : 1 );
                    count = count + ( this.isSpace( x  ,y - 1 ) ? 0 : 1 );
                    count = count + ( this.isSpace( x + 1,y  ) ? 0 : 1 );
                    count = count + ( this.isSpace( x  ,y + 1 ) ? 0 : 1 );
                    if ( count == 3 ) {
                        this.draw( x,y,"M" );
                    }
                }
            }
        }
    }


    /**
     *
     *
     * @param {Array.<number,number>[]} pos
     * @memberof ProceduralMap
     */
    makeUpStair( pos ) {
        let x,y;

        do {
            [x, y] = pos[this.random.random( 0,pos.length - 1 )];
        } while ( this.read( x, y ) == "D" ); // 문에는 배치하면 안돼
        this.draw( x,y,"<" );
        [this.startX,this.startY] = [x,y];
    }

    /**
     *
     *
     * @returns {Array.<number,number>}
     * @memberof ProceduralMap
     */
    makeDownStair() {
        // 내려가는 계단은 시작점에서 먼 곳에 배치하고 흥미로운 지점에 놔야한다.
        let range = 1.0;
        let score,x,y;
        let isValid;

        do {
            range = range - 0.1;
            let events = this.pickEvents( 1, range );

            [score, x, y] = events[0];
            if ( this.read( x, y ) != "D" ) {
                if ( this.isSpace( x - 1, y ) && this.read( x - 1, y ) != "D" ) {
                    isValid = -1;
                }
                if ( this.isSpace( x + 1, y ) && this.read( x + 1, y ) != "D" ) {
                    isValid = 1;
                }
            }
        } while ( !isValid );
        this.draw( x,y,">" );
        this.draw( x + isValid,y,">" );
        this.endX = Math.min( x,x + isValid );
        this.endY = y;

        return [this.endX,this.endY];
    }

    /**
     *
     *
     * @param {[number,number,number,number][]} rooms
     * @memberof ProceduralMap
     */
    decoRooms( rooms ) {
        for ( let i in rooms ) {
            let v = rooms[i];
            let [x1,y1,x2,y2] = v;
            let w = x2 - x1 + 1;
            let h = y2 - y1 + 1;

            // 기둥 박기
            if ( this.random.random( 1,4 ) <= 1 + w * h / 60 ) {
                let pillarCol = 0;
                let pillarRow = 0;

                if ( w >= 5 ) {
                    pillarCol = 1 + ( w > 5 && 1 || 0 ) + ( ( w ) % 2 );
                }
                if ( h >= 5 ) {
                    pillarRow = 1 + ( h > 5 && 1 || 0 ) + ( ( h ) % 2 );
                }
                let pillarOffsetX = 0;//this.random.random(0,(w-1)%2);
                let pillarOffsetY = 0;//this.random.random(0,(h-1)%2);

                for ( let y = 1; y <= pillarRow; y++ ) {
                    for ( let x = 1; x <= pillarCol; x++ ) {
                        //if (this.random.random(5+Math.floor(w*h/50))==1) {
                        let xx = pillarOffsetX + x1 + Math.floor( ( x - 1 ) * ( w - 2 ) / ( pillarCol - 0.999 ) ) + 1;
                        let yy = pillarOffsetY + y1 + Math.floor( ( y - 1 ) * ( h - 2 ) / ( pillarRow - 0.999 ) ) + 1;

                        if ( this.read( xx,yy ) == " " ) {
                            this.draw( xx,yy,"U" );
                        }
                        //}
                    }
                }
            }
            //조명박기
            let numOfTorch = Math.max( 0,this.random.random( 1,3 + Math.floor( w * h / 30 ) ) - 2 );

            for ( let i = 1; i <= numOfTorch; i++ ) {
                let xx,yy;

                if ( this.random.random( 1,4 ) == 1 ) {
                    // 방 가운데 
                    xx = this.random.random( x1,x2 );
                    yy = this.random.random( y1,y2 );
                } else {
                    // 벽쪽에
                    let dir = this.random.random( 1,4 );

                    if ( dir == 1 ) {
                        xx = this.random.random( x1,x2 );
                        yy = y1;
                    } else if  ( dir == 2 ) {
                        xx = x2;
                        yy = this.random.random( y1,y2 );
                    } else if  ( dir == 3 ) {
                        xx = this.random.random( x1,x2 );
                        yy = y2;
                    } else if  ( dir == 4 ) {
                        xx = x1;
                        yy = this.random.random( y1,y2 );
                    }
                }
                if ( this.read( xx,yy ) == " " ) {
                    this.draw( xx,yy,"I" );
                }
            }
            // 바닥타일깔기
            let tiles = "ZZZZZ:::::::+++++||........,,,{";
            let numOfTiles = Math.max( 1,this.random.random( 1,6 ) - 3 );
            let pickedTiles = [];

            for ( let i = 1; i <= numOfTiles; i++ ) {
                let i2 = this.random.random( 0,tiles.length - 1 );

                pickedTiles.push( tiles.substr( i2,1 ) );
            }
            for ( let yy = y1; yy <= y2; yy++ ) {
                for ( let xx = x1; xx <= x2; xx++ ) {
                    if ( this.read( xx,yy ) == " " ) {
                        this.draw( xx,yy,pickedTiles[this.random.random( 0,numOfTiles - 1 )] );
                    }
                }
            }
        }
    }

    closeDoors() {
        for ( let y = 0; y < this.height; y++ ) {
            for ( let x = 0; x < this.width; x++ ) {
                if ( this.read( x,y ) == "D" ) {
                    this.draw( x,y,"E" );
                }
            }
        }
    }


    //-------------------------------------------------------------------------------------------------
    // 생성
    //-------------------------------------------------------------------------------------------------

    /**
     *
     *
     * @returns {Array.<number,number>}
     * @memberof ProceduralMap
     */
    generateCave() {
        this.clear( " " );
        let [w,h] = [this.width,this.height];
        let wallRate = this.random.random( 30,40 );
        let birthLimit = 4;
        let deathLimit = this.random.random( 2,3 );
        let numOfGeneration = this.random.random( 3,5 );

        for ( let y = 0; y < h; y++ ) {
            for ( let x = 0; x < w; x++ ) {
                if ( this.random.random( 1,100 ) < wallRate ) {
                    this.draw( x,y,"W" );
                }
            }
        }
        for ( let i = 1; i <= numOfGeneration; i++ ) {
            let newMap = this.cloneMap( this.map );

            this.setReadWrite( newMap );
            for ( let y = 0; y < h; y++ ) {
                for ( let x = 0; x < w; x++ ) {
                    let count = this.countSurroundedBlock( x,y );

                    if ( count <= deathLimit ) {
                        this.draw( x,y," " );
                    } else if  ( count >= birthLimit ) {
                        this.draw( x,y,"W" );
                    }
                }
            }
        }
        this.setReadWrite();
        //모서리 막기
        for ( let y = 0; y < h; y++ ) {
            this.draw( 0,y,"W" );
            this.draw( w - 1,y,"W" );
        }
        for ( let x = 0; x < w; x++ ) {
            this.draw( x,0,"W" );
            this.draw( x,h - 1,"W" );
        }
        // 용암과 물
        // 지하로 갈수록 용암
        let numOfRiver = this.random.random( 0,this.floor < this.random.random( 1,10 ) && 2 || 0 );
        let numOfLava = Math.max( 0,this.floor > this.random.random( 5,10 ) && 2 || 0 );

        for ( let i = 0; i < numOfRiver; i++ ) {
            this.makeRiver( "~" );
        }
        for ( let i = 0; i < numOfLava; i++ ) {
            this.makeRiver( "%" );
        }
		
        // 횃불
        // 지하로 갈수록 불이 적다
        for ( let i = 0; i < Math.floor( w * h / ( 50 * ( 1 + this.floor / 10 ) ) ); i++ ) {
            let [x,y] = [this.random.random( 0,w - 1 ),this.random.random( 0,h - 1 )];

            if ( this.read( x,y ) == " " && ( this.read( x - 1,y ) == "W" || this.read( x + 1,y ) == "W" ) ) {
                this.draw( x,y,"I" );
            }
        }

		
        let try1 = 0;
        let result;

        do {
            try1 = try1 + 1;
            result = this.placeCustomBlocks();
        } while ( ! ( result || try1 > 5 ) );
        if ( !result ) {
            //실패
            return;
        }
        this.connectSectors();
        this.eraseTinyHallAndDoor();
        this.decoFloor();
        //최종 검산
        let sectors = this.countSectors();

        if ( sectors.length > 1 ) {
            //실패
            console.assert( false, `섹터가 많다. ${sectors.length}` );

            return;
        }
        // 빈칸중 하나에서 시작점을 고른다
        this.makeUpStair( sectors[0].pos );

        return sectors[0].pos;
    }


    /**
     *
     *
     * @returns {Array.<number,number>}
     * @memberof ProceduralMap
     */
    generateDungeon() {
        this.clear( "W" );
        let [w,h] = [this.width,this.height];
        let try1 = 0;
        let result;

        do {
            try1 = try1 + 1;
            result = this.placeCustomBlocks();
        } while ( !( result || try1 > 5 ) );
        console.assert( result, "커스텀 블록을 배치하는 과정에서 실패" );
        let rooms = this.makeRooms( 1,10 );

        this.connectSectors();
        this.eraseTinyHallAndDoor();
        this.decoRooms( rooms );
        this.decoFloor();
        //최종 검산
        let sectors = this.countSectors();

        if ( sectors.length > 1 ) {
            //실패
            log( this.getMapString() );
            console.assert( false, `섹터가 많다. ${sectors.length}` );

            return;
        }
        // 빈칸중 하나에서 시작점을 고른다
        this.makeUpStair( sectors[0].pos );

        return sectors[0].pos;
    }


    placeProps() {
        for ( let i in this.scoreList ) {
            let v = this.scoreList[i];
            let [score,x,y] = v;

            if ( this.countSurroundedBlock( x,y ) < 6 && this.countSurrounded( x,y,"D" ) == 0 ) {
                if ( this.random.random( 1,Math.max( 1,100 - Math.pow( this.countSurrounded( x,y,"M" ) * 3,2 ) ) ) == 1 ) {
                    this.addEntity( x,y,"prop","@" );
                }
                if ( this.random.random( 1,Math.max( 1,100 - Math.pow( this.countSurrounded( x,y,"W" ) * 3,2 ) ) ) == 1 ) {
                    this.addEntity( x,y,"prop","&" );
                }
                if ( this.random.random( 1,Math.max( 1,100 - Math.pow( this.countSurrounded( x,y,"M" ) * 3,2 ) ) ) == 1 ) {
                    this.addEntity( x,y,"prop","#" );
                }
            }
        }
    }


    placeMonsters() {
        let t = _entity_monster__WEBPACK_IMPORTED_MODULE_5__["default"].pickMonsters( this.attrib );

        log( "몬스터배치" );
        log( this.attrib );
        let scoreMap = {};

        this.setReadWrite( scoreMap,scoreMap );
        this.clear( null );
        for ( let i in this.scoreList ) {
            let v = this.scoreList[i];
            let [score,x,y] = v;

            this.draw( x,y,score > 0 && "@" || "." );
        }
        this.setReadWrite();
        //this.logMapString(scoreMap);
        for ( let i = 1; i <= Math.floor( this.scoreList.length / 10 ); i++ ) {
            let name = t[this.random.random( 0,t.length - 1 )];
            let [score, x, y] = this.scoreList[this.scoreList.length - 1];

            if ( !_entity_monster__WEBPACK_IMPORTED_MODULE_5__["default"].property[name].list ) {
                if ( this.readEntity( x,y ) == null ) {
                    this.addEntity( x,y,"monster",name );
                }
            } else {
                let [t, mustCount] = _entity_monster__WEBPACK_IMPORTED_MODULE_5__["default"].parseMonsterList( _entity_monster__WEBPACK_IMPORTED_MODULE_5__["default"].property[name].list );
                let floorList = this.getConnectedNearFloor( x,y,this.random.random( mustCount,t.length ),scoreMap );

                for ( let i in floorList ) {
                    let [x,y] = floorList[i];

                    //log(v[1],v[2],"monster",t[i],mustCount,t.length);
                    this.addEntity( x,y,"monster",t[i].name );
                }
            }
        }
    }
}





/***/ }),

/***/ "./games/Avalonika/src/saveLoad.js":
/*!*****************************************!*\
  !*** ./games/Avalonika/src/saveLoad.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SaveLoad)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _entity_entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entity/entity */ "./games/Avalonika/src/entity/entity.js");
/* harmony import */ var _entity_npc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./entity/npc */ "./games/Avalonika/src/entity/npc.js");
/* harmony import */ var _entity_monster__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./entity/monster */ "./games/Avalonika/src/entity/monster.js");
/* harmony import */ var _entity_player__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./entity/player */ "./games/Avalonika/src/entity/player.js");
/* harmony import */ var _entity_pet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./entity/pet */ "./games/Avalonika/src/entity/pet.js");
/* harmony import */ var _entity_prop__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./entity/prop */ "./games/Avalonika/src/entity/prop.js");
/* harmony import */ var _entity_item__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./entity/item */ "./games/Avalonika/src/entity/item.js");
/* harmony import */ var _entity_skill__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./entity/skill */ "./games/Avalonika/src/entity/skill.js");
/* harmony import */ var _world_world__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./world/world */ "./games/Avalonika/src/world/world.js");
/* harmony import */ var _world_entityManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./world/entityManager */ "./games/Avalonika/src/world/entityManager.js");
/* harmony import */ var _interface_inventory__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./interface/inventory */ "./games/Avalonika/src/interface/inventory.js");
/* harmony import */ var _engine_SceneManager__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @engine/SceneManager */ "./engine/src/SceneManager.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./global */ "./games/Avalonika/src/global.js");





















class SaveLoad {
    constructor( path ) {
        this.path = path || "savedata_" + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.getShortDate() + ".json";

        this.storage = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Storage( "saveload" );
        this.serializer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Serializer( [
            [_world_world__WEBPACK_IMPORTED_MODULE_9__["default"], {
                dataOnly: true,
                white:    ["turn", "dateTimeOrigin", "places", "clearAutoMap", "type", "entityManager"]
            }],
            [_world_entityManager__WEBPACK_IMPORTED_MODULE_10__["default"], { dataOnly: true, white: ["itemsByXy","entitiesByXy"] }],
            [_entity_player__WEBPACK_IMPORTED_MODULE_4__["default"], { construct: ( src ) => new _entity_player__WEBPACK_IMPORTED_MODULE_4__["default"]( src.name, src.tileX, src.tileY ), keep: ["property"] }],
            [_entity_prop__WEBPACK_IMPORTED_MODULE_6__["default"], { construct: ( src ) => new _entity_prop__WEBPACK_IMPORTED_MODULE_6__["default"]( src.char, src.tileX, src.tileY ), keep: ["property"] }],
            [_entity_pet__WEBPACK_IMPORTED_MODULE_5__["default"], { construct: ( src ) => new _entity_pet__WEBPACK_IMPORTED_MODULE_5__["default"]( src.name, src.tileX, src.tileY ), keep: ["property"] }],
            [_entity_monster__WEBPACK_IMPORTED_MODULE_3__["default"], { construct: ( src ) => new _entity_monster__WEBPACK_IMPORTED_MODULE_3__["default"]( src.name, src.tileX, src.tileY ), keep: ["property"] }],
            [_entity_item__WEBPACK_IMPORTED_MODULE_7__["default"], { construct: ( src ) => new _entity_item__WEBPACK_IMPORTED_MODULE_7__["default"]( src.name, src.tileX, src.tileY ), keep: ["property"] }],
            [_entity_skill__WEBPACK_IMPORTED_MODULE_8__["default"], { construct: ( src ) => new _entity_skill__WEBPACK_IMPORTED_MODULE_8__["default"]( src.name, src.tileX, src.tileY ), keep: ["property"] }],
            [_interface_inventory__WEBPACK_IMPORTED_MODULE_11__["default"], { construct: ( src ) => new _interface_inventory__WEBPACK_IMPORTED_MODULE_11__["default"]( src.size ) }],
        ] );
    }

    save() {
        const t = {};

        // 월드 데이터 저장
        t.world = _global__WEBPACK_IMPORTED_MODULE_13__["default"].world;
        t.player = _global__WEBPACK_IMPORTED_MODULE_13__["default"].player;
        t.worldOptions = _global__WEBPACK_IMPORTED_MODULE_13__["default"].world.options;
        t.random = _global__WEBPACK_IMPORTED_MODULE_13__["default"].world.randomGenerator.save();
        t.mapString = _global__WEBPACK_IMPORTED_MODULE_13__["default"].world.map.getMapString();
        t.mapProperty = {};
        t.nextId = _entity_entity__WEBPACK_IMPORTED_MODULE_1__["default"].nextId;
        for ( const k in _global__WEBPACK_IMPORTED_MODULE_13__["default"].world.map.propertyTable ) {
            const v = _global__WEBPACK_IMPORTED_MODULE_13__["default"].world.map.propertyTable[k];
            const pr = {};

            for ( const name of Object.getOwnPropertyNames( v ) ) {
                pr[name] = v[name];
            }
            t.mapProperty[k] = pr;
        }
        // 엘레멘탈 시스템
        t.elemental = [];
        for ( const k in _global__WEBPACK_IMPORTED_MODULE_13__["default"].world.elemental.elementalsByXy ) {
            const v = _global__WEBPACK_IMPORTED_MODULE_13__["default"].world.elemental.elementalsByXy[k];

            t.elemental.push( [v.type, v.tileX, v.tileY, v.life] );
        }
        const s = this.serializer.getSerializableObject( t );

        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.setPaused( true );
        const t1 = JSON.stringify( s );

        console.log( t1 );

        this.storage.write( this.path, t1 ).then( () => {
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.setPaused( false );
        } );
    }


    load( path ) {
        _global__WEBPACK_IMPORTED_MODULE_13__["default"].world.entityManager.forceStopTurnProcessing();
        this.path = path || this.path;

        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.setPaused( true );
        this.storage.read( this.path ).then( ( s ) => {
            const t = JSON.parse( s );

            console.log( "세이브파일 로드 시작", this.path );
            _global__WEBPACK_IMPORTED_MODULE_13__["default"].world.destroy( true );
            const worldLoadData = {
                random:    t.random,
                mapString: t.mapString,
            };

            const w = _global__WEBPACK_IMPORTED_MODULE_13__["default"].world = new _world_world__WEBPACK_IMPORTED_MODULE_9__["default"]( { loadData: worldLoadData } );
            
            const result = this.serializer.parse( t );

            _global__WEBPACK_IMPORTED_MODULE_13__["default"]["interface"].autoMap.clear();
            for ( const i in result.mapProperty ) {
                const pr = result.mapProperty[i];

                Object.assign( w.map.propertyTable[i], pr );
                if ( pr.revealed ) {
                    _global__WEBPACK_IMPORTED_MODULE_13__["default"].world.sightManager.revealTile( pr.x, pr.y, true );
                }
            }
            for ( const k in result.world.entityManager.entitiesByXy ) {
                const v = result.world.entityManager.entitiesByXy[k];

                w.entityManager.addEntity( v );
            }
            _global__WEBPACK_IMPORTED_MODULE_13__["default"].player = result.player;
            _entity_entity__WEBPACK_IMPORTED_MODULE_1__["default"].nextId = t.nextId;

            // 로드 화면 연출
            _global__WEBPACK_IMPORTED_MODULE_13__["default"].sceneManager.changeScene( _global__WEBPACK_IMPORTED_MODULE_13__["default"].world, 1000, _engine_SceneManager__WEBPACK_IMPORTED_MODULE_12__.SceneManager.circleInOut, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.linear );
            _global__WEBPACK_IMPORTED_MODULE_13__["default"]["interface"].actionSelector.actions = [];
            _global__WEBPACK_IMPORTED_MODULE_13__["default"]["interface"].actionSelector.select( _global__WEBPACK_IMPORTED_MODULE_13__["default"].player.selectedAction );
            _global__WEBPACK_IMPORTED_MODULE_13__["default"]["interface"].cursor.lock();
            _global__WEBPACK_IMPORTED_MODULE_13__["default"]["interface"].cursor.hideAutoAction();
            _global__WEBPACK_IMPORTED_MODULE_13__["default"].world.on( "enterEnd", () => {
                _global__WEBPACK_IMPORTED_MODULE_13__["default"]["interface"].cursor.unlock();
                _global__WEBPACK_IMPORTED_MODULE_13__["default"]["interface"].cursor.resetScale();
                _global__WEBPACK_IMPORTED_MODULE_13__["default"].world.showMapInfo( _global__WEBPACK_IMPORTED_MODULE_13__["default"].player.tileX, _global__WEBPACK_IMPORTED_MODULE_13__["default"].player.tileY );
            } );
            console.log( "세이브파일 로드 끝", this.path );
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.setPaused( false );
        } );
    }
}



/***/ }),

/***/ "./games/Avalonika/src/world/elemental.js":
/*!************************************************!*\
  !*** ./games/Avalonika/src/world/elemental.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Elemental)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _gameMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _entity_buff__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../entity/buff */ "./games/Avalonika/src/entity/buff.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");










/*

독. 크리쳐가 독에 걸림
물. 아이템이 떠내려감
불. 크리쳐가 불에 붙음
전기. 근처의 도체를 향해 전달

*/




class Elemental extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor() {
        super();
        this.elementalsByXy = []; // TODO:weak
        this.layers = {
            [Elemental.FIRE]:   new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite(),
            [Elemental.WATER]:  new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite(),
            [Elemental.POISON]: new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite(),
        };
    }

    addElemental( type, x, y, life, x1, y1 ) {
        if ( this.elementalsByXy[x + "," + y] ) {
            this.removeElemental( x, y );
        }
        x1 = x1 != null ? x1 : x;
        y1 = y1 != null ? y1 : y;
        const spr = new _lib_iconPack__WEBPACK_IMPORTED_MODULE_4__["default"]( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "elemental.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } ),
                                  Elemental.data[type].col,
                                  Elemental.data[type].row,
                                  16, 24,
                                  Elemental.data[type].color );

        spr.setShader( _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.floorTileMap._shader );
        spr.setBlendMode( Elemental.data[type].blend );
        spr.tileX = x;
        spr.tileY = y;
        spr.type = type;
        spr.life = life;
        spr.newLife = life;
        let tx, ty;

        if ( x1 ) {
            const a = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( life / 2, 0.5, 1 );

            if ( spr.type == Elemental.WATER ) {
                spr.setAlpha( 0 );
                spr.position = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.tileCenterToWorld( x, y );
                new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( spr, 300, { alpha: a } );
            } else if ( spr.type == Elemental.POISON ) {
                spr.setAlpha( 0 );
                const { x: tx, y: ty } = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.tileCenterToWorld( x, y );

                spr.position = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.tileCenterToWorld( x1, y1 );
                new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( spr, 1000, { alpha: a, x: tx, y: ty }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic } );
            } else {
                spr.setAlpha( 0 );
                const { x: tx, y: ty } = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.tileCenterToWorld( x, y );

                spr.position = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.tileCenterToWorld( x1, y1 );
                new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( spr, 600, { alpha: a, x: tx, y: ty }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.inOutCubic } );
            }
        } else {
            spr.position = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.tileCenterToWorld( x, y );
        }
		
        this.layers[type].addChild( spr );
        this.elementalsByXy[x + "," + y] = spr;
    }

    removeElemental( x, y ) {
        let e;

        if ( typeof x == "number" ) {
            e = this.elementalsByXy[x + "," + y];
            e.removeFromParent();
            delete this.elementalsByXy[x + "," + y];
        } else {
            e = x;
            e.removeFromParent();
            delete this.elementalsByXy[e.tileX + "," + e.tileY];
        }

        return e;
    }

    getElemental( x, y ) {
        return this.elementalsByXy[x + "," + y];
    }


    process() {
        let dir;
        let ax, ay;
        const processTable = [];

        for ( const k in this.elementalsByXy ) {
            const e = this.elementalsByXy[k];

            e.life = e.newLife;
            if ( e.type == Elemental.POISON ) {
                const a = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( e.life / 2, 0.4, 1 );

                e.setScale( a * 1.5 );
                e.setAlpha( a * 0.9 );
            } else if ( e.type == Elemental.FIRE ) {
                const a = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( e.life / 2 + 0.7, 0.8, 1 );

                e.setAlpha( a );
            } else {
                e.setAlpha( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( e.life / 2, 0.4, 1 ) );
            }
            processTable.push( e );
        }
        for ( const i in processTable ) {
            const e = processTable[i];
	
            const leftEl = this.getElemental( e.tileX - 1, e.tileY );
            const rightEl = this.getElemental( e.tileX + 1, e.tileY );
            const upEl = this.getElemental( e.tileX, e.tileY - 1 );
            const downEl = this.getElemental( e.tileX, e.tileY + 1 );

            // 상호작용
            if ( e.type == Elemental.FIRE ) {
                // 불이 물을 만나면 꺼짐
                if ( ( leftEl && leftEl.type == Elemental.WATER ) ||
					( rightEl && rightEl.type == Elemental.WATER ) ||
					( upEl && upEl.type == Elemental.WATER ) ||
					( downEl && downEl.type == Elemental.WATER ) ) {
                    this.removeElemental( e );
                }
            } else if ( e.type == Elemental.POISON ) {
                // 독이 불을 만나면 사라짐
                if ( ( leftEl && leftEl.type == Elemental.FIRE ) ||
					( rightEl && rightEl.type == Elemental.FIRE ) ||
					( upEl && upEl.type == Elemental.FIRE ) ||
					( downEl && downEl.type == Elemental.FIRE ) ) {
                    this.removeElemental( e );
                }
            }
            if ( e.getParent() ) {
                const leftWall = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.getProperty( e.tileX - 1, e.tileY ).wall & _gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].BLOCK_PASS;
                const rightWall = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.getProperty( e.tileX + 1, e.tileY ).wall & _gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].BLOCK_PASS;
                const upWall = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.getProperty( e.tileX, e.tileY - 1 ).wall & _gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].BLOCK_PASS;
                const downWall = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.getProperty( e.tileX, e.tileY + 1 ).wall & _gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].BLOCK_PASS;

                //BLOCK_PASS 가 1이라고 가정
                console.assert( _gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].BLOCK_PASS == 1 );
                let [l, r, u, d] = [0, 0, 0, 0];

                if ( e.life > 0 && e.life <= 1 ) {
                    e.newLife = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.random( 0, 1 ) * e.life * 0.5;
                } else {
                    l = ( leftEl && leftEl.type == e.type ) ? leftEl.life : 0;
                    r = ( rightEl && rightEl.type == e.type ) ? rightEl.life : 0;
                    u = ( upEl && upEl.type == e.type ) ? upEl.life : 0;
                    d = ( downEl && downEl.type == e.type ) ? downEl.life : 0;
                    const sum = ( Math.max( r, Math.max( l, Math.max( u, d ) ) ) + e.life ) / 2.2;

                    e.newLife = sum;
                    if ( sum > 0.5 ) {
                        if ( leftWall == 0 && !leftEl ) {
                            this.addElemental( e.type, e.tileX - 1, e.tileY, 0, e.tileX, e.tileY );
                        }
                        if ( rightWall == 0 && !rightEl ) {
                            this.addElemental( e.type, e.tileX + 1, e.tileY, 0, e.tileX, e.tileY );
                        }
                        if ( upWall == 0 && !upEl ) {
                            this.addElemental( e.type, e.tileX, e.tileY - 1, 0, e.tileX, e.tileY );
                        }
                        if ( downWall == 0 && !downEl ) {
                            this.addElemental( e.type, e.tileX, e.tileY + 1, 0, e.tileX, e.tileY );
                        }
                    }
                }
                if ( e.newLife <= 0 ) {
                    this.removeElemental( e );
                }
                if ( e.type == Elemental.WATER ) {
                    const items = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.getItems( e.tileX, e.tileY );

                    // 아이템 흘리기
                    if ( items ) {
                        this.moveItemOnWater( items, e, l, r, u, d );
                    }
                } else if ( e.type == Elemental.POISON ) {
                    const cr = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.getEntity( e.tileX, e.tileY );

                    // 독
                    if ( cr ) {
                        cr.addBuff( _entity_buff__WEBPACK_IMPORTED_MODULE_2__["default"].POISON, 3 );
                    }
                } else if ( e.type == Elemental.FIRE ) {
                    const cr = _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.getEntity( e.tileX, e.tileY );

                    // 불
                    if ( cr ) {
                        cr.addBuff( _entity_buff__WEBPACK_IMPORTED_MODULE_2__["default"].FIRE, 3 );
                    }
                }
            }
        }
    }

    moveItemOnWater( items, e, l, r, u, d ) {
        const t = [];

        if ( e.life >= l && l > 0 ) {
            t.push( [-1, 0] );
        }
        if ( e.life >= r && r > 0 ) {
            t.push( [1, 0] );
        }
        if ( e.life >= u && u > 0 ) {
            t.push( [0, -1] );
        }
        if ( e.life >= d && d > 0 ) {
            t.push( [0, 1] );
        }
        if ( t.length > 0 ) {
            const item = items[_global__WEBPACK_IMPORTED_MODULE_5__["default"].world.random( items.length )];
            const x1 = item.tileX;
            const y1 = item.tileY;
            const [ax, ay] = t[_global__WEBPACK_IMPORTED_MODULE_5__["default"].world.random( t.length )];
            const [x2, y2] = [e.tileX + ax, e.tileY + ay];

            item.move( x2, y2 );
            _global__WEBPACK_IMPORTED_MODULE_5__["default"].world.addLog( "%s{가} 물에 떠내려갔다!", item.name );
        }
    }
}

Elemental.POISON = 1;
Elemental.FIRE = 2;
Elemental.WATER = 3;
//Elemental.LIGHTNING = 4;
Elemental.data = {
    [Elemental.POISON]: {
        col:   1,
        row:   4,
        color: 0x400080,
        blend: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite.ALPHA,
    },
    [Elemental.WATER]: {
        col:   9,
        row:   4,
        color: 0x0030ff,
        blend: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite.ALPHA,
    },
    [Elemental.FIRE]: {
        col:   5,
        row:   4,
        color: 0xc00000,
        blend: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite.ADD,
    },
};





/***/ }),

/***/ "./games/Avalonika/src/world/entityManager.js":
/*!****************************************************!*\
  !*** ./games/Avalonika/src/world/entityManager.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EntityManager)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _entity_entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../entity/entity */ "./games/Avalonika/src/entity/entity.js");
/* harmony import */ var _gameMap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");
/* harmony import */ var _entity_player__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../entity/player */ "./games/Avalonika/src/entity/player.js");
/* harmony import */ var _world__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./world */ "./games/Avalonika/src/world/world.js");
/* harmony import */ var _entity_monster__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../entity/monster */ "./games/Avalonika/src/entity/monster.js");










//-------------------------------------------------------------------------------------------------------------------
// 적의 턴 처리
//-------------------------------------------------------------------------------------------------------------------
// 적의 턴의 delay는 적이 맞고 움직여야 하는 경우이다.
// delay가 0이면 이동하다 맞거나 하게 됨

/**
 * 
 * @this EntityManager
 *
 */
function process() {
    console.log( "▷적턴", this.world.turn );
    // 처리 순서를 정하는 방법이 일정해야한다.
    const processOrder = [];

    for ( const k in this.AITable ) {
        const v = this.AITable[k];

        processOrder.push( [Math.abs( v.tileX - _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.tileX ) + Math.abs( v.tileY - _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.tileY ), v] );
    }
    processOrder.sort( ( a, b ) => {
        // 거리가 같다면 가로 세로 위치를 고려해서 정함
        if ( a[0] == b[0] ) {
            if ( a[1].tileX == b[1].tileX ) {
                return a[1].tileY - b[1].tileY;
            } else {
                return a[1].tileX - b[1].tileX;
            }
        } else {
            return a[0] - b[0];
        }
    } );
    for ( const i in processOrder ) {
        const v = processOrder[i];

        //log(i,v[2].name,v[1],v[2].tileX,v[2].tileY);
        v[1].processBuff();
        v[1].processAI();
    }
    console.log( " - 적턴끝",this.world.turn );
    console.log( "※엘리멘탈",this.world.turn );
    this.world.elemental.process();
}



//-------------------------------------------------------------------------------------------------------------------
// 월드에 Creature(Monster,Player) 나 물건을 올리고 내림
//-------------------------------------------------------------------------------------------------------------------

/**
 * @this EntityManager
 *
 * @param {Entity[]} items
 * @param {Entity} item
 */
function collapseBundle( items, item ) {
    const bundle = item.property.bundle;

    if ( bundle != null && items != null ) {
        //log("번들발견");
        let i = 0;

        while ( i < items.length ) {
            if ( items[i].property.bundle == bundle ) {
                if ( item.property.bundleMax != null ) {
                    const remain = item.property.bundleMax - ( item.amount + items[i].amount );

                    if ( remain > 0 ) {
                        item.amount = item.property.bundleMax;
                        items[i].amount = remain;
                    } else {
                        item.amount = item.amount + items[i].amount;
                        items.splice( i,1 );
                    }
                } else {
                    items[i].removeFromParent();
                    console.log( "골드 합치기",item.amount,items[i].amount );
                    item.amount = item.amount + items[i].amount;
                    items[i].amount = 0;
                    items.splice( i, 1 );
                }
            } else {
                i = i + 1;
            }
        }
    }
    if ( bundle == "gold" ) {
        if ( item.amount <= 5 ) {
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 1000, () => item.changeImage( 1, 14 ) );
        } else if ( item.amount <= 20 ) {
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 1000, () => item.changeImage( 2, 14 ) );
        } else if ( item.amount <= 100 ) {
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 1000, () => item.changeImage( 3, 14 ) );
        } else {
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 1000, () => item.changeImage( 4, 14 ) );
        }
    }
}



class EntityManager extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Component {
    /**
     *Creates an instance of EntityManager.
     * @param {World} world
     * @memberof EntityManager
     */
    onAdded( world ) {
        this.world = world;


        // 플레이어 이동시에 턴처리할 Creature 목록
        //this.AITable = {};  // TODO: weak table
        this.AITable = {};

        // 캐릭터 서치 참조 목록
        this.entitiesByXy = {}; // TODO: weak table
        // 아이템 서치 목록
        this.itemsByXy = {};


        //---------------------
        // Reserved Turn Func;
        //---------------------

        this.reservedPlayerTurnFuncs = [];
    }

    /**
     *
     *
     * @param {Entity} obj
     * @memberof EntityManager
     */
    addEntity( obj ) {
        obj.addedToWorld = true;
        if ( this.world.map.getVisibility( obj.tileX, obj.tileY ) > 0 ) {
            obj.setVisible( false );
        } else {
            obj.setVisible( true );
        }
        if ( obj.isItem ) {
            // 아이템을 월드에 올린다
            // 아이템은 한자리에 여러개가 올라갈 수 있다
            let items = this.itemsByXy[obj.tileX + "," + obj.tileY];

            if ( items == null ) {
                // 빈칸에 올리려고 하는 중
                items = [];
                this.itemsByXy[obj.tileX + "," + obj.tileY] = items;
                items = this.itemsByXy[obj.tileX + "," + obj.tileY];
            }
            if ( items.length > 0 ) {
                // 바닥에 아이템이 이미 있음
                if ( obj.property.bundle == "gold" ) {
                    //골드는 맨아래로 떨어짐
                    if ( obj.dropAnimationTimer ) {
                        const delayRemain = obj.dropAnimationTimer.getDelay();

                        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( delayRemain + 1000, () => {
                            // 골드 외에 다른 아이템이 있는 경우 숨김
                            if ( items.length > 1 ) {
                                obj.setVisible( false );
                            }
                        } );
                    } else {
                        if ( items.length > 1 ) {
                            obj.setVisible( false );
                        }
                    }
                } else if ( obj.dropAnimationTimer ) {
                    const delayRemain = obj.dropAnimationTimer.getDelay();

                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( delayRemain + 1000, function() {
                        this.setVisible( false );
                    }, items[items.length - 1] );
                } else {
                    items[items.length - 1].setVisible( false );	// 기존 맨 위 아이템 숨기기
                }
            }
            collapseBundle.call( this, items, obj );
            if ( obj.property.bundle == "gold" ) {
                items.unshift( obj );
            } else {
                items.push( obj );
            }
            //log("아이템추가",obj.name,items.length,items[1],items[2]);
            this.world.itemLayer.addChild( obj );
        } else if ( obj.isCreature || obj.isProp ) {
            this.world.entityLayer.addChild( obj );
            if ( obj.shadowMesh ) {
                this.world.shadowLayer.addChild( obj.shadowMesh );
            }
            if ( obj instanceof _entity_monster__WEBPACK_IMPORTED_MODULE_7__["default"] && obj.AI ) {
                this.AITable[obj.id] = obj;
                // array로 하지 않은 이유는 #이 잘못된 값을 돌려줄 수 있기 때문
            }
		
            if ( this.entitiesByXy[obj.tileX + "," + obj.tileY] ) {
                throw new Error( "☞☞☞ 크리쳐가 있는 위치에 또 크리쳐를 생성하려함" );
            }
            this.entitiesByXy[obj.tileX + "," + obj.tileY] = obj;
            if ( obj instanceof _entity_player__WEBPACK_IMPORTED_MODULE_5__["default"] ) {
                const { x, y } = obj.getPosition();

                this.world.sightManager.moveEyeTo( x,y );
                this.world.sightManager.moveViewTo( x,y );
                this.world.onEnterFrame(); // 시야갱신
                this.world.sightManager.refreshEntityVisibility();
                obj.playPositionSound( obj.tileX, obj.tileY );                
            }
        }
        //obj.setVisible(this.canBeSeen(obj.tileX,obj.tileY,1));
    }

    removeEntity( obj ) {
        this.detachEntity( obj, true );
    }

    // 로직만 떼고 스프라이트는 둔다
    detachEntity( obj, removeSprite ) {
        obj.addedToWorld = false;
        if ( removeSprite ) {
            obj.removeFromParent();
            if ( this.dropAnimationTimer ) {
                this.dropAnimationTimer.stop();
                this.dropAnimationTimer = null;
            }
        }
        if ( obj.isItem ) {
            const items = this.itemsByXy[obj.tileX + "," + obj.tileY];

            if ( items ) {
                for ( let i = 0; i < items.length; i++ ) {
                    const v = items[i];

                    if ( v == obj ) {
                        obj.removeFromParent();
                        if ( i == items.length - 1 ) {
                            if ( i > 0 ) {
                                items[i - 1].setVisible( true ); // 그 다음 아이템 보여주기
                            }
                        }
                        items.splice( i, 1 );
                        if ( items.length == 0 ) {
                            delete this.itemsByXy[obj.tileX + "," + obj.tileY];
                        }
                        break;
                    }
                }
            } else {
                throw new Error( "월드에 존재하지 않는 아이템을 월드에서 삭제하려고함" );
            }
        } else if ( obj.isCreature || obj.isProp ) {
            if ( obj.shadowMesh && removeSprite ) {
                obj.shadowMesh.removeFromParent();
            }
            if ( obj.AI ) {
                delete this.AITable[obj.id];
            }
            if ( this.entitiesByXy[obj.tileX + "," + obj.tileY] == obj ) {
                delete this.entitiesByXy[obj.tileX + "," + obj.tileY];
            }
        }
    }


    //-------------------------------------------------------------------------------------------------------------------
    // 개체를 얻는 유틸리티 함수
    //-------------------------------------------------------------------------------------------------------------------

    /**
     *
     *
     * @param {number} tileX
     * @param {number} tileY
     * @returns {Entity}
     * @memberof EntityManager
     */
    getEntity( tileX, tileY ) {
        return this.entitiesByXy[tileX + "," + tileY];
    }

    /**
     * 개체 전체를 얻어온다
     * pairs는 순서를 보장하지 않기 때문에 이걸 써야함
     *
     * @returns {Entity[]}
     * @memberof EntityManager
     */
    getAllEntities() {
        const t = [];

        for ( let y = 0; y < this.world.map.height; y++ ) {
            for ( let x = 0; x < this.world.map.width; x++ ) {
                const v = this.getEntity( x, y );

                if ( v ) {
                    t.push( v );
                }
            }
        }

        return t;
    }


    // 아이템 목록을 돌려준다
    getItems( tileX, tileY ) {
        return this.itemsByXy[tileX + "," + tileY];
    }

    getNumOfItems( tileX, tileY ) {
        const items = this.itemsByXy[tileX + "," + tileY];

        return items ? items.length : 0;
    }

    moveTopItemToBottom( tileX, tileY ) {
        const items = this.getItems( tileX, tileY );

        if ( items && items.length > 1 ) {
            const topItem = items[items.length];

            topItem.setVisible( false );
            items[items.length] = null;
            items.unshift( topItem );
            items[items.length - 1].setVisible( true );
        }
    }

    getEntitiesInRect( x1, y1, x2, y2 ) {
        const t = [];

        for ( const k in this.entitiesByXy ) {
            const v = this.entitiesByXy[k];

            if ( v.tileX >= x1 && v.tileX <= x2 && v.tileY >= y1 && v.tileY <= y2 ) {
                t.push( v );
            }
        }

        return t;
    }

    clearMonsterMood() {
        for ( const k in this.entitiesByXy ) {
            const v = this.entitiesByXy[k];

            if ( v.showMood ) {
                v.showMood();
            }
        }
    }



    doEnemyTurn( delay ) {
        this.doDelayedEnemyTurnIfExist( () => {
            //log("적 턴을 시작하자",delay);
            this.enemyTurnTimer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( delay, () => {
                //log("적 턴을 시작한다");
                const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "enemyTurn" );

                this.world.dispatchEvent( e );
                this.enemyTurnTimer = null;
                process.call( this );
                this.doPlayerTurn();
            } );
        } );
    }

    wait( delay, unstoppable ) {
        if ( unstoppable ) {
            _global__WEBPACK_IMPORTED_MODULE_3__["default"]["interface"].cursor.lock();
        } else if ( this.waitSkip ) {
            return;
        }
        this.waitTimer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( delay, () => {
            this.waitTimer = null;
            if ( unstoppable ) {
                _global__WEBPACK_IMPORTED_MODULE_3__["default"]["interface"].cursor.unlock();
            }
        } );
    }

    doDelayedEnemyTurnIfExist( callback, data ) {
        if ( this.enemyTurnTimer ) {
            //이미 대기중인 적 턴이 있는 경우 바로 실행한다.
            console.log( "대기중 적 턴이 있다" );
            this.enemyTurnTimer.stop();
            this.enemyTurnTimer = null;
            process.call( this );
            callback.call( data );
        } else if ( this.waitTimer ) {
            console.log( "대기중 wait가 있다" );
            this.waitTimer.stop();
            this.waitTimer = null;
            this.waitSkip = true;
        } else {
            //console.log("대기중 적 턴이 없다");
            callback( data );
        }
    }

    //-------------------------------------------------------------------------------------------------------------------
    // 플레이어 턴 처리
    //-------------------------------------------------------------------------------------------------------------------

    doPlayerTurn() {
        this.world.processDateTime();
        const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "playerTurn" );

        this.world.dispatchEvent( e );
        this.waitSkip = false;
        this.world.sightManager.refreshEntityVisibility();
        // 안전하게 밀린 작업을 할 수 있는 시간
        if ( this.reservedPlayerTurnFuncs.length > 0 ) {
            _global__WEBPACK_IMPORTED_MODULE_3__["default"]["interface"].hideInfo();
            _global__WEBPACK_IMPORTED_MODULE_3__["default"]["interface"].cursor.hideAutoAction();
            console.log( "예약작업실행" );
            for ( const i in this.reservedPlayerTurnFuncs ) {
                const v = this.reservedPlayerTurnFuncs[i];

                if ( v[0].call( v[1] ) ) {
                    this.reservedPlayerTurnFuncs = [];

                    return;
                }
            }
            this.reservedPlayerTurnFuncs = [];
        }
        _global__WEBPACK_IMPORTED_MODULE_3__["default"]["interface"].cursor.processReservedClick();
        _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.processAutoMove();
    }

    // 예약 작업 추가
    // true 리턴하면 이후 작업은 실행안함
    safeExecute( func, data ) {
        if ( this.isTurnProcessing() ) {
            this.reservedPlayerTurnFuncs.push( [func, data] );
        } else {
            _global__WEBPACK_IMPORTED_MODULE_3__["default"]["interface"].hideInfo();
            _global__WEBPACK_IMPORTED_MODULE_3__["default"]["interface"].cursor.hideAutoAction();
            func( data );
        }
    }

    //-------------------------------------------------------------------------------------------------------------------
    // 턴 강제 종료
    //-------------------------------------------------------------------------------------------------------------------

    isTurnProcessing() {
        return this.enemyTurnTimer != null || this.waitTimer != null;
    }

    forceStopTurnProcessing() {
        if ( this.enemyTurnTimer != null ) {
            this.enemyTurnTimer.stop();
            this.enemyTurnTimer = null;
        }
        if ( this.waitTimer != null ) {
            this.waitTimer.stop();
            this.waitTimer = null;
        }
    }
}




/***/ }),

/***/ "./games/Avalonika/src/world/gameMap.js":
/*!**********************************************!*\
  !*** ./games/Avalonika/src/world/gameMap.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GameMap)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");
/* harmony import */ var _entity_creature__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../entity/creature */ "./games/Avalonika/src/entity/creature.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lib/visibilityTile */ "./engine/src/lib/visibilityTile.js");

	





// 맵의 x,y 는 모두 타일 단위 이다

class GameMap {
    constructor() {
        this.randomGenerator = new _lib_random__WEBPACK_IMPORTED_MODULE_3__["default"]( 0 );
        this.random = this.randomGenerator.random.bind( this.randomGenerator );
        this.lightList = undefined;

        /** @type {number[]} */
        this.data = undefined;
        /** @type {number} */
        this.width = undefined;
        /** @type {number} */
        this.height = undefined;

        /** @type {object[]} */
        this.propertyTable = undefined;

        /** @type {object[]} */
        this.tiles = undefined;
    }

    getData( x, y ) {
        return this.data[y * this.width + x];
    }

    setData( x, y, v ) {
        let i;

        if ( v ) {
            i = y * this.width + x;
        } else {
            i = x;
            v = y;
        }
        this.data[i] = v;
        this.propertyTable[i] = new Proxy( {},this.__mt );
        const tileProp = this.propertyTable[i];

        //TODO: x,y를 기록하는 것이 낭비
        tileProp.id = this.tiles[v].id;
        tileProp.x = i % this.width;
        tileProp.y = Math.floor( i / this.width );
        if ( tileProp.light && tileProp.light == 1 ) {
            this.lightList.push( { x: tileProp.x, y: tileProp.y, light: tileProp.light, color: tileProp.color != null ? tileProp.color : 0xffffff } );
        }
        if ( tileProp.envSound ) {
            this.envSounds.push( { x: tileProp.x, y: tileProp.y, sound: tileProp.envSound } );
        }
    }

    setDataByChar( x, y, c ) {
        this.setData( x, y, GameMap.tileStringData[c].id );
    }

    getProperty( x, y ) {
        return this.propertyTable[y * this.width + x];
    }

    getVisibility( x, y ) {
        return this.visibilityTileChecker.isVisible( x, y );
    }


    // 크리쳐 id 혹은 col,row 로부터 속성을 얻어온다
    getEntityProperty( col, row ) {
        let id;

        if ( row ) {
            id = ( row - 1 ) * this.creaturePerRow + col;
        } else {
            id = col;
        }

        return this.creaturePropertyTable[id];
    }


    buildLightMap() {
        const lm = [];
        const lit = [];
        const [w, h] = [this.width,this.height];
        //타일 밝기 계산
        let fastMode; //= true;

        for ( let i = 0; i < w * h; i++ ) {
            lit[i] = [70, 75, 80]; // 앰비언트
        }
        const mask = _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_4__["default"].mask;

        for ( const i in this.lightList ) {
            const light = this.lightList[i];
            const summedMask = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

            for ( let y = Math.max( 0, light.y - 15 ); y <= Math.min( h - 1, light.y + 15 ); y++ ) {
                for ( let x = Math.max( 0, light.x - 15 ); x <= Math.min( w - 1, light.x + 15 ); x++ ) {
                    if ( this.getProperty( x, y ).wall >= 2 ) {
                        // 마스크를 만든다
                        const index = ( ( light.y - y ) + 16 - 1 ) * 31 + ( light.x - x ) + 16 - 1;
                        const startIndex = mask.startIndex[index];
                        const skip = mask.skip[index];
                        const count = mask.count[index];

                        if ( startIndex > 0 ) {
                            // 마스크의 첫 값은 y축 시작 위치. 1부터 시작함
                            for ( let j = 0; j < count; j++ ) {
                                // 마스크 값을 모두 OR해서 합쳐둔다
                                summedMask[skip + j] |= mask.data[startIndex - 1 + j];
                            }
                        }
                    }
                }
            }
            for ( let y = Math.max( 0, light.y - 15 ); y <= Math.min( h - 1, light.y + 15 ); y++ ) {
                for ( let x = Math.max( 0, light.x - 15 ); x <= Math.min( w - 1, light.x + 15 ); x++ ) {
                    const [relX, relY] = [light.x - x, light.y - y];
                    let [r, g, b] = [0, 0, 0];

                    if ( ( ( ~summedMask[relY + 15] ) & ( 1 << ( relX + 15 ) ) ) != 0 ) {
                        const [lr, lg, lb] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.hex2rgba( light.color );
                        const dist = ( relX * relX + relY * relY );

                        // 라이트는 거리의 제곱에 반비례한다.
                        r = Math.min( 255,lr / ( dist * 1 ) * 255 );
                        g = Math.min( 255, lg / ( dist * 4 ) * 255 );
                        b = Math.min( 255, lb / ( dist * 2 ) * 255 );
                    }
                    lit[y  * w + x][0] += r;
                    lit[y  * w + x][1] += g;
                    lit[y  * w + x][2] += b;
                }
            }
        }
        for ( let y = 0; y < this.height; y++ ) {
            for ( let x = 0; x < this.width; x++ ) {
                const pr = this.getProperty( x, y );

                if ( pr.illum == 1 ) {
                    const i = y * this.width + x;
                    const [r, g, b] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.hex2rgba( pr.color );

                    lit[i][0] = r * 255;
                    lit[i][1] = g * 255;
                    lit[i][2] = b * 255;
                }
            }
        }

        // 코너를 위해서 2x2 블러
        for ( let y = 0; y < this.height; y++ ) {
            for ( let x = 0; x < this.width; x++ ) {
                const i = y * this.width + x;

                if ( x == 0 || y == 0 ) {
                    lm[i] = 0;
                } else {
                    const sr = Math.floor( Math.min( 255, ( lit[i][0] + lit[i - 1][0] + lit[i - w][0] + lit[i - 1 - w][0] ) / 4 ) );
                    const sg = Math.floor( Math.min( 255, ( lit[i][1] + lit[i - 1][1] + lit[i - w][1] + lit[i - 1 - w][1] ) / 4 ) );
                    const sb = Math.floor( Math.min( 255, ( lit[i][2] + lit[i - 1][2] + lit[i - w][2] + lit[i - 1 - w][2] ) / 4 ) );

                    lm[i] = sr * 0x10000 + sg * 0x100 + sb;
                    //p.setOverrideColor(lm[i]);
                    //p.setPosition(x-1,y-1);
                    //rt.draw(p);
                }
            }
        }

        this.lightMap = lm;
        //let b = new BitGameMap(rt);
        //b.setScale(3);
        //b.setY(50);
        //_stage.addChild(b);
    }

    getLightMap( x, y ) {
        return this.lightMap[( y - 1 ) * this.width + x];
    }

    getTileLightMap( x, y ) {
        const i = ( y - 1 ) * this.width + x;

        if ( x > 1 && x < this.width && y > 1 && y < this.height ) {
            return [this.lightMap[i], this.lightMap[i + 1],
                    this.lightMap[i + this.width], this.lightMap[i + 1 + this.width]];
        } else {
            const c1 = ( x > 1 && y > 1 ) ? this.lightMap[i] : 0;
            const c2 = ( x < this.width && y > 1 ) ? this.lightMap[i + 1] : 0;
            const c3 = ( x > 1 && y < this.height ) ? this.lightMap[i + this.width] : 0;
            const c4 = ( x < this.width && y < this.height ) ? this.lightMap[i + this.width + 1] : 0;

            return [c1, c2, c3, c4];
        }
    }


    //-------------------------------------------------------------------------------------------------------------------
    // 스트링 로더
    //-------------------------------------------------------------------------------------------------------------------

    loadString( s ) {
        const t = s.split( "\n" );
        const height = t.length;
        const width = t[0].length;

        this.width = width;
        this.height = height;
        this.tileWidth = _config__WEBPACK_IMPORTED_MODULE_1__["default"].World.tileWidth;
        this.tileHeight = _config__WEBPACK_IMPORTED_MODULE_1__["default"].World.tileHeight;
        this.tilePerRow = _config__WEBPACK_IMPORTED_MODULE_1__["default"].World.tilePerRow;
        this.creaturePerRow = _entity_creature__WEBPACK_IMPORTED_MODULE_2__["default"].perRow;
        this.envSounds = [];

        this.tiles = [];
        for ( const k in GameMap.tileStringData ) {
            const v = GameMap.tileStringData[k];

            v.char = k;
            this.tiles[v.id] = v;
        }

        this.data = [];
        for ( let y = 0; y < height; y++ ) {
            //log(t[y]);
            for ( let x = 0; x < width; x++ ) {
                const tile = GameMap.tileStringData[t[y].substr( x,1 )];

                if ( !tile ) {
                    console.log( `컨버팅할 수 없는 타일 ${tile} 발견 ${x}, ${y}` );
                } else {
                    this.data[y * width + x] = tile.id;
                }
            }
        }
        this.data = new Proxy( this.data, {
            get: ( target, name ) => {
                return name in target ? target[name] : 0;
            }
        } );
        //setmetatable(this.data, { __index: function (t, k) { return 0; } });
        this.lightList = [];
        // 속성 테이블을 TILED 데이터에서 읽어서 propertyTable에 저장한다.
        // propertyTable[GameMapIndex]로 얻어올 수 있다

        this.propertyTable = [];
        //setmetatable(this.propertyTable, { __index: function (t, k) { return GameMap.defaultProperty; } });
        this.propertyTable = new Proxy( this.propertyTable, {
            get: ( target, name ) => {
                return name in target ? target[name] : GameMap.defaultProperty;
            }
        } );

        this.__mt = {
            get: ( target, name ) => {
                return name in target ? target[name] : ( this.tiles[target.id][name] || GameMap.defaultProperty[name] );
            }
        };
        // 화면 구석 처리용 기본 속성값
        this.__dpr = JSON.parse( JSON.stringify( GameMap.defaultProperty ) );
        this.__dpr.bridge = 1; //화면 구석 처리
        this.__dpr.block = 1; //화면 구석 처리
        this.__dpr.road = 1; //화면 구석 처리
        this.__dpr.lava = 1; //화면 구석 처리

        for ( const i in this.data ) {
            const v = this.data[i];

            this.setData( i, v );
        }
        for ( let y = 0; y < height; y++ ) {
            for ( let x = 0; x < width; x++ ) {
                this.processVType( x, y );
            }
        }

        // 크리쳐 속성 테이블을 TILED에서 읽어서 creaturePropertyTable에 저장한다
        // creaturePropertyTable[id]로 얻을 수 있다

        this.creaturePropertyTable = {};
        //setmetatable(this.creaturePropertyTable, { __index: function (t, k) { GameMap.defaultCreatureProperty; } } );
        this.creaturePropertyTable = new Proxy( this.creaturePropertyTable, {
            get: ( target, name ) => {
                return name in target ? target[name] : GameMap.defaultCreatureProperty;
            }
        } );
        // spawnTable에 기록해두고 spawn처리는 World가 한다.
        this.spawnTable = {};

        // 타일 단위 시야처리기
        this.visibilityTileChecker = new _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_4__["default"]( this.width, this.height, this.propertyTable );
        this.buildLightMap();
    }


    processVType( x, y ) {
        const width = this.width;
        const height = this.height;
        const pt = this.propertyTable;
        const dpr = this.__dpr;
        const i = y * width + x;
        const pr = pt[i];

        if ( pr.vtype ) {
            const ul = ( y > 0 && x > 0 ) 			? pt[i - width - 1] : dpr;
            const u = ( y > 0 ) 					? pt[i - width] : dpr;
            const ur = ( y > 0 && x < width - 1 ) 		? pt[i - width + 1] : dpr;
            const l = ( x > 0 ) 					? pt[i - 1] : dpr;
            const r = ( x < width - 1 )					? pt[i + 1] : dpr;
            const dl = ( y < height - 1 && x > 0 )		? pt[i + width - 1] : dpr;
            const d = ( y < height - 1 )				? pt[i + width] : dpr;
            const dr = ( y < height - 1 && x < width - 1 ) 	? pt[i + width + 1] : dpr;
            const newId = vtypeFunc[pr.vtype]( this, ul, u, ur, l, pr, r, dl, d, dr );

            if ( !newId ) {
                console.log( "ID를 얻을 수 없음", pr.vtype, x, y );
            } else {
                this.data[i] = newId;
            }
        }
    }

    getMapString() {
        let s = "";

        for ( let y = 0; y < this.height; y++ ) {
            for ( let x = 0; x < this.width; x++ ) {
                const pr = this.getProperty( x, y );

                s = s + pr.char;
            }
            s = s + "\n";
        }

        return s;
    }
}


const vtypeFunc = {
    ["wall"]: function ( self, ul, u, ur, l, c, r, dl, d, dr ) {
        const id = c.id;
        let add = 0;

        if ( d.block != c.block ) {
            //아래가 빈 경우
            if ( u.block != c.block ) {
                //위가 빈 경우
                if ( l.block != c.block && r.block != c.block ) {
                    add = 22;
                } else if ( l.block != c.block ) {
                    add = 20;
                } else if ( r.block != c.block ) {
                    add = 21;
                } else {
                    add = self.random( 16, 17 );
                }
            } else {
                //if (u.char==c.char) {
                //	add=16;
                //} else {
                add = self.random( 16, 19 );
                //}
            }
        } else {
            if ( u.block != c.block && l.block != c.block && r.block != c.block ) {
                //위가 빈 경우
                add = 4;
            } else if ( u.block != c.block && l.block != c.block ) {
                add = 6;
            } else if ( u.block != c.block && r.block != c.block ) {
                add = 5;
            } else {
                //if (l.block!=c.block && r.block!=c.block) {
                add = self.random( 1, 3 );
            }
        }

        return id + add;
    },
    ["water"]: function ( self, ul, u, ur, l, c, r, dl, d, dr ) {
        const att = c.glue;
        const ca = c[att];
        const flag = ( ul[att] != ca ? 1 << 7 : 0 ) |
            ( u[att] != ca ? 1 << 6 : 0 ) |
            ( ur[att] != ca ? 1 << 5 : 0 ) |
            ( l[att] != ca ? 1 << 4 : 0 ) |
            ( r[att] != ca ? 1 << 3 : 0 ) |
            ( dl[att] != ca ? 1 << 2 : 0 ) |
            ( d[att] != ca ? 1 << 1 : 0 ) |
            ( dr[att] != ca ? 1 << 0 : 0 );

        return 112 + GameMap.tileBlendTable[256 - flag];
    },

    ["mountain"]: function ( self, ul, u, ur, l, c, r, dl, d, dr ) {
        const id = c.id;

        if ( l.char != c.char && r.char != c.char ) {
            return id + 3;
        } else if ( l.char != c.char ) {
            return id;
        } else if ( r.char != c.char ) {
            return id + 2;
        } else {
            return id + 1;
        }
    },
    ["fence"]: function ( self, ul, u, ur, l, c, r, dl, d, dr ) {
        const id = c.id;
        let add = 0;

        if ( d.block == c.block && u.block != c.block ) {
            if ( l.block == c.block ) {
                add = 6;
            } else if ( r.block == c.block ) {
                add = 7;
            } else if ( l.block != c.block && r.block != c.block ) {
                add = self.random( 6, 7 );
            } else {
                add = self.random( 0, 1 );
            }
        } else if ( u.block == c.block && d.block != c.block ) {
            if ( l.block == c.block ) {
                add = 4;
            } else if ( r.block == c.block ) {
                add = 5;
            } else if ( l.block != c.block && r.block != c.block ) {
                add = self.random( 4, 5 );
            } else {
                add = self.random( 0, 1 );
            }
        } else if ( u.block == c.block && d.block == c.block ) {
            if ( l.block == c.block ) {
                add = 10;
            } else if ( r.block == c.block ) {
                add = 11;
            } else {
                add = 8;
            }
        }

        return id + add;
    },
    ["torch"]: function ( self, ul, u, ur, l, c, r, dl, d, dr ) {
        const id = c.id;
        const t = [];

        if ( l.char == "M" || l.char == "W" || l.char == "B" ) {
            t.push( 24 );
        }
        if ( r.char == "M" || r.char == "W" || r.char == "B" ) {
            t.push( 20 );
        }
        if ( t.length > 0 ) {
            return id + t[self.random( 0, t.length - 1 )];
        } else {
            return id;
        }
    },
    ["door"]: function ( self, ul, u, ur, l, c, r, dl, d, dr ) {
        if ( u.char == "M" || d.char == "M" || l.char == "M" || r.char == "M" ) {
            return 103;
        } else if ( u.char == "W" || d.char == "W" || l.char == "W" || r.char == "W" ) {
            return 47;
        } else if ( u.char == "#" || d.char == "#" || l.char == "#" || r.char == "#" ) {
            return 51;
        } else {
            return 39;
        }
    },
    ["cdoor"]: function ( self, ul, u, ur, l, c, r, dl, d, dr ) {
        if ( u.char == "M" || d.char == "M" || l.char == "M" || r.char == "M" ) {
            return 87;
        } else if ( u.char == "W" || d.char == "W" || l.char == "W" || r.char == "W" ) {
            return 31;
        } else if ( u.char == "#" || d.char == "#" || l.char == "#" || r.char == "#" ) {
            return 50;
        } else {
            return 23;
        }
    },
    ["dstair"]: function ( self, ul, u, ur, l, c, r, dl, d, dr ) {
        if ( l.char == "R" && r.char == "R" ) {
            c.shadow = 1;

            return 162;
        } else if ( l.char != c.char && r.char != c.char ) {
            c.shadow = 1;

            return 161;
        } else if ( l.char == c.char ) {
            return 71;
        } else {
            return 70;
        }
    },
    ["chair"]: function ( self, ul, u, ur, l, c, r, dl, d, dr ) {
        const id = c.id;
        const t = [];

        if ( l.char == "H" || l.char == "Z" ) {
            t.push( 1 );
        }
        if ( r.char == "H" || r.char == "Z" ) {
            t.push( 0 );
        }
        if ( u.char == "H" || u.char == "Z" ) {
            t.push( 2 );
        }
        if ( d.char == "H" || d.char == "Z" ) {
            t.push( 3 );
        }
        if ( t.length > 0 ) {
            return id + t[self.random( 0, t.length - 1 )];
        } else {
            return id + self.random( 0, 3 );
        }
    },
    ["wbridge"]: function ( self, ul, u, ur, l, c, r, dl, d, dr ) {
        const t = [];

        if ( l.char != c.char || r.char != c.char ) {
            t.push( 7 );
        }
        if ( u.char != c.char || d.char != c.char ) {
            t.push( 109 );
        }
        if ( t.length > 0 ) {
            return t[self.random( 0, t.length - 1 )];
        } else {
            return self.random( 1,2 ) == 1 ? 7 : 109;
        }
    },

};

GameMap.tileBlendTable = new Uint8Array( [
    0x2e, 0x2e, 0x28, 0x28, 0x2e, 0x2e, 0x28, 0x28, 0x29, 0x29, 0x21, 0x20, 0x29, 0x29, 0x21, 0x20,
    0x2a, 0x2a, 0x23, 0x23, 0x2a, 0x2a, 0x22, 0x22, 0x2c, 0x2c, 0x13, 0x11, 0x2c, 0x2c, 0x12, 0x10,
    0x2e, 0x2e, 0x28, 0x28, 0x2e, 0x2e, 0x28, 0x28, 0x29, 0x29, 0x21, 0x20, 0x29, 0x29, 0x21, 0x20,
    0x2a, 0x2a, 0x23, 0x23, 0x2a, 0x2a, 0x22, 0x22, 0x2c, 0x2c, 0x13, 0x11, 0x2c, 0x2c, 0x12, 0x10,
    0x2b, 0x2b, 0x2d, 0x2d, 0x2b, 0x2b, 0x2d, 0x2d, 0x25, 0x25, 0x1f, 0x1d, 0x25, 0x25, 0x1f, 0x1d,
    0x27, 0x27, 0x17, 0x17, 0x27, 0x27, 0x15, 0x15, 0x1b, 0x1b, 0x0f, 0x07, 0x1b, 0x1b, 0x0b, 0x03,
    0x2b, 0x2b, 0x2d, 0x2d, 0x2b, 0x2b, 0x2d, 0x2d, 0x24, 0x24, 0x1e, 0x1c, 0x24, 0x24, 0x1e, 0x1c,
    0x27, 0x27, 0x17, 0x17, 0x27, 0x27, 0x15, 0x15, 0x19, 0x19, 0x0d, 0x05, 0x19, 0x19, 0x09, 0x01,
    0x2e, 0x2e, 0x28, 0x28, 0x2e, 0x2e, 0x28, 0x28, 0x29, 0x29, 0x21, 0x20, 0x29, 0x29, 0x21, 0x20,
    0x2a, 0x2a, 0x23, 0x23, 0x2a, 0x2a, 0x22, 0x22, 0x2c, 0x2c, 0x13, 0x11, 0x2c, 0x2c, 0x12, 0x10,
    0x2e, 0x2e, 0x28, 0x28, 0x2e, 0x2e, 0x28, 0x28, 0x29, 0x29, 0x21, 0x20, 0x29, 0x29, 0x21, 0x20,
    0x2a, 0x2a, 0x23, 0x23, 0x2a, 0x2a, 0x22, 0x22, 0x2c, 0x2c, 0x13, 0x11, 0x2c, 0x2c, 0x12, 0x10,
    0x2b, 0x2b, 0x2d, 0x2d, 0x2b, 0x2b, 0x2d, 0x2d, 0x25, 0x25, 0x1f, 0x1d, 0x25, 0x25, 0x1f, 0x1d,
    0x26, 0x26, 0x16, 0x16, 0x26, 0x26, 0x14, 0x14, 0x1a, 0x1a, 0x0e, 0x06, 0x1a, 0x1a, 0x0a, 0x02,
    0x2b, 0x2b, 0x2d, 0x2d, 0x2b, 0x2b, 0x2d, 0x2d, 0x24, 0x24, 0x1e, 0x1c, 0x24, 0x24, 0x1e, 0x1c,
    0x26, 0x26, 0x16, 0x16, 0x26, 0x26, 0x14, 0x14, 0x18, 0x18, 0x0c, 0x04, 0x18, 0x18, 0x08, 0x00,
] );


GameMap.defaultProperty = { wall: 0, shadow: 0 };
GameMap.defaultCreatureProperty = { race: "", level: 1 };
GameMap.EMPTY			= 0;
GameMap.BLOCK_PASS		= 1;
GameMap.BLOCK_VISION	= 2;
GameMap.BLOCK_ARROW		= 4;
const BP = GameMap.BLOCK_PASS;
const BV = GameMap.BLOCK_VISION;
const BA = GameMap.BLOCK_ARROW;

GameMap.tileStringData = {

    ["~"]: { id: 272, name: "물", wall: BP, water: 1, vtype: "water", below: 272, bridge: 1, glue: "bridge", illum: 1, color: 0x0090ff, GameMapColor: 0x305090 },
    ["-"]: { id: 276, name: "깊은 물", wall: BP, water: 2, vtype: "water", below: 276, bridge: 1, glue: "bridge", illum: 1, color: 0x0090ff, GameMapColor: 0x305090 },
    ["="]: { id: 280, name: "매우 깊은 물", wall: BP, water: 3, vtype: "water", below: 280, bridge: 1, glue: "bridge", illum: 1, color: 0x0090ff, GameMapColor: 0x305090 },
    [" "]: { id: 15, name: "바닥", sound: 1 },
    ["@"]: { id: 62, name: "길", sound: 1, vtype: "water", below: 62, road: 1, glue: "road", GameMapColor: 0x603010 },
    ["Q"]: { id: 160, name: "거친 길", sound: 1, vtype: "water", below: 160, road: 1, glue: "road", GameMapColor: 0x603010 },
    ["."]: { id: 11, name: "고운 흙바닥", sound: 1 },
    [","]: { id: 10, name: "흙바닥", sound: 1 },
    [";"]: { id: 9, name: "거친 흙바닥", sound: 1 },
    ["?"]: { id: 12, name: "자갈밭" },
    ["`"]: { id: 0, name: "풀", sound: 2 },
    ['"']: { id: 13, name: "잔디", sound: 2 },
    ["^"]: { id: 1, name: "큰 풀", sound: 2 },
    ["V"]: { id: 3, name: "무성한 풀", sound: 2 },
    ["G"]: { id: 2, name: "덤불", wall: BV, sound: 3, shadow: 1, GameMapColor: 0x004000 },
    ["T"]: { id: 60, name: "큰 나무", wall: BV + BP, shadow: 1, GameMapColor: 0x30a030 },
    ["("]: { id: 14, name: "돌바닥" },
    ["{"]: { id: 4, name: "큰돌바닥" },
    ["R"]: { id: 68, name: "바위", wall: BV | BP | BA, shadow: 1, noRain: 1 },
    ["&"]: { id: 64, name: "산", wall: BV | BP | BA, vtype: "mountain", shadow: 1, noRain: 1 },
    ["W"]: { id: 24, name: "동굴벽", wall: BV | BP, vtype: "wall", shadow: 1, block: 1, road: 1, noRain: 1 },
    ["M"]: { id: 80, name: "돌벽", wall: BV | BP | BA, vtype: "wall", shadow: 1, block: 1, road: 1, noRain: 1 },
    ["B"]: { id: 16, name: "벽돌벽", wall: BV | BP | BA, vtype: "wall", shadow: 1, block: 1, road: 1, noRain: 1 },
    ["#"]: { id: 48, name: "울타리", wall: BP, vtype: "fence", shadow: 1, block: 1 },
    ["D"]: { id: 39, name: "문", vtype: "door", shadow: 1, block: 1, road: 1, noRain: 1 },
    ["E"]: { id: 23, name: "잠긴 문", vtype: "cdoor", wall: BP | BV | BA, shadow: 1, block: 1, road: 1, noRain: 1 },
    ["|"]: { id: 7, name: "나무 바닥", vtype: "wbridge", sound: 4, bridge: 1, road: 1, lava: 1, noRain: 1 },
    ["+"]: { id: 6, name: "타일", sound: 5, bridge: 1, road: 1, lava: 1, noRain: 1 },
    [":"]: { id: 8, name: "작은 타일", bridge: 1, road: 1, lava: 1 },
    ["Z"]: { id: 5, name: "흙 타일" },
    ["I"]: { id: 288, name: "횃불", fire: 1, vtype: "torch", color: 0xcf7015, light: 1 },
    ["*"]: { id: 300, name: "반딧불", color: 0x0020af, light: 1, sound: 7 },
    [">"]: { id: 70, name: "내려가는 계단", vtype: "dstair", illum: 1, color: 0xa09000, road: 1, noRain: 1, GameMapColor: 0xffff00 },
    ["<"]: { id: 69, name: "올라가는 계단", wall: BV, shadow: 1, illum: 1, color: 0xa09000, road: 1, noRain: 1, GameMapColor: 0xa0a000 },
    ["_"]: { id: 72, name: "제단", sound: 5 },
    ["Y"]: { id: 296, name: "분수", wall: BV, water: 1, envSound: "fountain", shadow: 1 },
    ["O"]: { id: 73, name: "모리안의 신상", wall: BP | BV | BA, shadow: 1, noRain: 1 },
    ["C"]: { id: 74, name: "키홀의 신상", wall: BP | BV | BA, shadow: 1, noRain: 1 },
    ["L"]: { id: 75, name: "마하의 신상", wall: BP | BV | BA, shadow: 1, noRain: 1 },
    ["!"]: { id: 61, name: "푯말", wall: BP | BV | BA, shadow: 1 },
    ["F"]: { id: 292, name: "모닥불", wall: BV, fire: 1, envSound: "campfire", color: 0xff4000, light: 1, shadow: 1 },
    ["%"]: { id: 304, name: "용암", wall: BP, fire: 3, vtype: "water", color: 0xff3030, below: 304, lava: 1, illum: 1, glue: "lava" },
    ["H"]: { id: 88, name: "탁자", wall: BP, vtype: "mountain", shadow: 1, noRain: 1 },
    [")"]: { id: 92, name: "의자", vtype: "chair", sound: 4, shadow: 1, noRain: 1 },
    ["}"]: { id: 104, name: "침대", shadow: 1, sound: 6, noRain: 1 },
    ["S"]: { id: 105, name: "간판", wall: BP, shadow: 1, illum: 1, color: 0xffffff, noRain: 1 },
    ["U"]: { id: 163, name: "기둥", wall: BP | BV | BA, shadow: 1, noRain: 1 },

    ["1"]: { id: -1, name: "문위치1", wall: BP | BV },
    ["2"]: { id: -1, name: "문위치2", wall: BP | BV },
    ["3"]: { id: -1, name: "문위치3", wall: BP | BV },
    ["4"]: { id: -1, name: "문위치4", wall: BP | BV },
    ["5"]: { id: -1, name: "문위치5", wall: BP | BV },
    ["6"]: { id: -1, name: "문위치6", wall: BP | BV },
    ["7"]: { id: -1, name: "문위치7", wall: BP | BV },
    ["8"]: { id: -1, name: "문위치8", wall: BP | BV },
    ["9"]: { id: -1, name: "문위치9", wall: BP | BV },

};

// 기본값 보장
for ( const k in GameMap.tileStringData ) {
    const v = GameMap.tileStringData[k];

    for ( const k2 in GameMap.defaultProperty ) {
        const v2 = GameMap.defaultProperty[k2];

        if ( !v[k2] ) {
            v[k2] = v2;
        }
    }
}






/***/ }),

/***/ "./games/Avalonika/src/world/pathManager.js":
/*!**************************************************!*\
  !*** ./games/Avalonika/src/world/pathManager.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ pathManager)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _gameMap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _lib_a_star__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/a-star */ "./engine/src/lib/a-star.js");
/* harmony import */ var _lib_a_star__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_lib_a_star__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _world__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./world */ "./games/Avalonika/src/world/world.js");








//-------------------------------------------------------------------------------------------------------------------
// 길찾기
//-------------------------------------------------------------------------------------------------------------------

/**
 *
 *
 * @class pathManager
 */
class pathManager extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Component {
    /**
     *Creates an instance of pathManager.
     * @param {World} world
     * @memberof pathManager
     */
    onAdded( world ) {
        this.world = world;
    }
    

    findPath_old( x, y, x2, y2 ) {
        function isValid( x, y ) {
            return this.map.getProperty( x, y ).wall == 0 && !this.getEntity( x, y );
        }

        function validNodeFunc( node, neighbor ) {
            if ( Math.abs( node.x - neighbor.x ) + Math.abs( node.y - neighbor.y ) <= 1 ) {
                return true;
            }

            return false;
        }
	
        //----------------------------------
        // FloodFill로 갈 수 있는 영역을 구한다
        //----------------------------------
        let [nearestNode, floorList] = this.findNearestFloor( x, y, x2, y2 );
        let startNode = this.world.getProperty( x, y );
        let endNode = this.world.getProperty( x2, y2 );
        let path;

        if ( !path && isValid( x2, y2 ) &&
            x2 >= 1 && x2 <= this.world.map.width &&
            y2 >= 1 && y2 <= this.world.map.height &&
            floorList.includes( endNode ) ) {
            //----------------------
            // A star 로 길을 찾는다
            //----------------------
            //path = astar.path(startNode,endNode,floorList,true,validNodeFunc);
        }
        if ( !path ) {
            //---------------------------------
            // 목적지에 가장 가까운 위치로 이동한다
            //---------------------------------
            path = _lib_a_star__WEBPACK_IMPORTED_MODULE_2___default().path( startNode, nearestNode, floorList, true, validNodeFunc );
        }

        return path;
    }


    /**
     *
     *
     * @param {number} x
     * @param {number} y
     * @param {number} x2
     * @param {number} y2
     * @returns {[object,object[]]}
     * @memberof pathManager
     */
    findNearestFloor( x, y, x2, y2 ) {
        // floodfill 방식으로 도달할 수 있는 칸을 구함
        // 최대 범위를 제한하거나 캐시된 정보를 쓰는 식으로 최적화해야한다.
        let checkList = [];
        let floor = [];
        let minDist = 999999;
        let nearestPr = this.world.map.getProperty( x, y );

        let check = ( pr ) => {
            return checkList[pr.y * this.world.map.width + pr.x];
        };

        let setCheck = ( pr, v ) => {
            checkList[pr.y * this.world.map.width + pr.x] = v;
        };

        let floodFill = ( cx, cy, dir ) => {
            let pr;

            while ( true ) {
                pr = this.world.map.getProperty( cx, cy );
                //log(pr.wall,pr.revealed,pr._checked,this.getEntity(cx,cy),minDist);
                if ( minDist == 999999 ||
                    ( ( pr.wall & _gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].BLOCK_PASS ) == 0 && pr.revealed && !check( pr ) && !this.world.entityManager.getEntity( cx, cy ) ) ) {
                    setCheck( pr, true );
                    let dist = Math.abs( x2 - cx ) + Math.abs( y2 - cy );

                    if ( minDist > dist ) {
                        minDist = dist;
                        nearestPr = pr;
                    }
                    floor.push( pr );
                    let upPr = this.world.map.getProperty( cx, cy - 1 );
                    let downPr = this.world.map.getProperty( cx, cy + 1 );

                    if ( upPr.wall == 0 && pr.revealed && !check( upPr ) && !this.world.entityManager.getEntity( cx, cy - 1 ) ) {
                        floodFill( cx, cy - 1, -1 );
                        floodFill( cx + 1, cy - 1, 1 );
                    }
                    if ( downPr.wall == 0 && pr.revealed && !check( downPr ) && !this.world.entityManager.getEntity( cx, cy + 1 ) ) {
                        floodFill( cx, cy + 1, -1 );
                        floodFill( cx + 1, cy + 1, 1 );
                    }
                } else {
                    break;
                }
                cx = cx + dir;
            }
        };

        floodFill( x, y, -1 );
        floodFill( x + 1, y, 1 );

        return [nearestPr, floor];
    }

    //길찾기
    //맵 프로퍼티의 어레이를 돌려줌
    //.x,.y를 읽으면 된다.
    //못찾는 경우 null;
    findPath( x, y, x2, y2, ignoreReveal ) {
        // 자체 a star 구현
        let forceNearestMove;
        let canReachTarget;
        let shortestDist = Math.abs( x2 - x ) + Math.abs( y2 - y );
        let limitDist = shortestDist * 3;
        //맵프로퍼티
        let pr;
        let startPr = this.world.getProperty( x, y );
        let endPr = this.world.getProperty( x2, y2 );

        if ( startPr.x == null || startPr.y == null ) {
            // 맵영역 밖에서 findPath 시도
            return null;
        }
        if ( ( endPr.wall & _gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].BLOCK_PASS ) == 0 && ( ignoreReveal || endPr.revealed ) && !this.world.entityManager.getEntity( x2, y2 ) ) {
            //
        } else {
            forceNearestMove = true;
        }
        let distToTarget = Math.abs( x2 - x ) + Math.abs( y2 - y );

        // 1칸 이동일 경우 특별처리
        if ( distToTarget == 1 ) {
            //log("한칸이동");
            if ( forceNearestMove ) {
                return null;
            } else {
                return [ endPr ];
            }
        }

        let checkList = [];// 체크한 타일인지 마킹하는 부울테이블
        let [cx, cy] = [x, y];
        let step = 0;
        let stack = [];
        let floor = [];
        let floorFrom = new Map(); // 경로 역추적 테이블

        let minDist = 999999;
        let nearestPr = null;

        let check = ( pr ) => {
            return checkList[pr.y * this.world.map.width + pr.x];
        };

        let setCheck = ( pr, v ) => {
            checkList[pr.y * this.world.map.width + pr.x] = v;
        };

        let spread = ( cx, cy, fromPr, stack ) => {
            let pr = this.world.getProperty( cx, cy );
            let dist = Math.abs( x2 - cx ) + Math.abs( y2 - cy );

            if ( minDist > dist ) {
                minDist = dist;
                nearestPr = pr;
            } else if ( dist > limitDist ) {
                return;
            } else if ( forceNearestMove ) {
                // 근처까지 이동해야 하는데 더 멀리가는 목적지는 검색할 필요 없음
                //log("가까운 목적지이므로 멈춤",minDist,dist);
                //return;
            }
            floor.push( pr );
            floorFrom.set( pr, fromPr );
            if ( cx == x2 && cy == y2 ) { // 목적지도착
                canReachTarget = true;

                return true;
            }
		
            let pr1 = this.world.getProperty( cx, cy - 1 );
            let pr2 = this.world.getProperty( cx + 1, cy );
            let pr3 = this.world.getProperty( cx, cy + 1 );
            let pr4 = this.world.getProperty( cx - 1, cy );

            //log(checkList[pr1],checkList[pr2],checkList[pr3],checkList[pr4]);
            if ( ( pr1.wall & _gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].BLOCK_PASS ) == 0 && ( ignoreReveal || pr1.revealed ) && !check( pr1 ) && !this.world.entityManager.getEntity( cx, cy - 1 ) ) {
                setCheck( pr1, true );
                stack.push( [cx, cy - 1, pr] );
            }
            if ( ( pr2.wall & _gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].BLOCK_PASS ) == 0 && ( ignoreReveal || pr2.revealed ) && !check( pr2 ) && !this.world.entityManager.getEntity( cx + 1, cy ) ) {
                setCheck( pr2, true );
                stack.push( [cx + 1, cy, pr] );
            }
            if ( ( pr3.wall & _gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].BLOCK_PASS ) == 0 && ( ignoreReveal || pr3.revealed ) && !check( pr3 ) && !this.world.entityManager.getEntity( cx, cy + 1 ) ) {
                setCheck( pr3, true );
                stack.push( [cx, cy + 1, pr] );
            }
            if ( ( pr4.wall & _gameMap__WEBPACK_IMPORTED_MODULE_1__["default"].BLOCK_PASS ) == 0 && ( ignoreReveal || pr4.revealed ) && !check( pr4 ) && !this.world.entityManager.getEntity( cx - 1, cy ) ) {
                setCheck( pr4, true );
                stack.push( [cx - 1, cy, pr] );
            }
        };
	
        // 시작칸을 체크하고 시작한다
        setCheck( startPr, true );
        spread( x, y, null, stack );
        //log("------------검색시작---------------");
        let forceStop;

        while ( !forceStop && !canReachTarget && stack.length > 0 ) {
            step = step + 1;
            //log("단계",step);
            let oldStack = stack;

            stack = [];
            for ( let i in oldStack ) {
                let v = oldStack[i];

                if ( spread( v[0], v[1], v[2], stack ) ) {
                    break;
                }
            }
            //log("단계결과",stack.length);
        }

        // 스텝을 역으로 추적한다
        let [path, path2] = [[], []];

        if ( canReachTarget ) {
            console.log( "골인 가능" );
            pr = endPr;
        } else {
            pr = nearestPr;
            console.log( "골인 불가능",pr.x,pr.y );
        }
        console.log( "스탭의 최종결과",step );
        console.log( pr.x,pr.y );
        path2.push( pr );
        do {
            pr = floorFrom.get( pr );
            path2.push( pr );
        } while ( !( pr == null || ( pr.x == x && pr.y == y ) ) );
        //테이블 뒤집기
        //log(path2.length,path2[4]);
        for ( let i = path2.length - 2; i >= 0; i-- ) {
            path.push( path2[i] );
        }

        //log("길찾기 결과");
        //for (let i in path) {
        //let v = path[i];
        //log(v.x,v.y);
        //}
        return path;
    }



    //-------------------------------------------------------------------------------------------------------------------
    // 흩뿌릴 위치 구하기
    //-------------------------------------------------------------------------------------------------------------------

    getSplashFloor( x, y, numOfSplash ) {
        let splashList = [];
        let [, floor] = this.findNearestFloor( x, y, x, y );
        let sortedFloor = [];

        for ( let i in floor ) {
            let v = floor[i];
            let dist = Math.abs( v.x - x ) + Math.abs( v.y - y );

            sortedFloor.push( [dist, v] );
        }
        sortedFloor.sort( ( a, b ) => a[0] - b[0] );
        //log("흩뿌릴 위치 찾기",x,y);
        for ( let i in sortedFloor ) {
            let v = sortedFloor[i];

            // 가까운 거리에서부터
            if ( this.world.map.visibilityTileChecker.canBeSeen( x, y, v[1].x, v[1].y, 1 )[0] == 0 ) {
                splashList.push( v[1] );
                if ( splashList.length >= numOfSplash ) {
                    break;
                }
                //log("거리",v[1],v[2].x,v[2].y);
            }
        }
        // 뿌릴자리가 모자라면 자기 자리
        if ( splashList.length < numOfSplash ) {
            for ( let i = 1; i <= numOfSplash; i++ ) {
                splashList.push( sortedFloor[0][1] );
            }
        }

        return splashList;
    }



    //-------------------------------------------------------------------------------------------------------------------
    // 소환할 위치 구하기
    // 자리가 부족할 수 있다는 것에 주의
    //-------------------------------------------------------------------------------------------------------------------

    getSummonFloor( x, y, numOfSummon ) {
        let splashList = [];
        let [, floor] = this.findNearestFloor( x, y, x, y );
        let sortedFloor = [];

        for ( let i in floor ) {
            let v = floor[i];
            let dist = Math.abs( v.x - x ) + Math.abs( v.y - y );

            sortedFloor.push( [dist, v] );
        }
        sortedFloor.sort( ( a, b ) => a[0] - b[0] );
        for ( let i in sortedFloor ) {
            let v = sortedFloor[i];

            // 가까운 거리에서부터
            if ( !this.world.entityManager.getEntity( v[1].x, v[1].y ) ) {
                splashList.push( v[1] );
                if ( splashList.length >= numOfSummon ) {
                    break;
                }
            }
        }

        return splashList;
    }
}



/***/ }),

/***/ "./games/Avalonika/src/world/sightManager.js":
/*!***************************************************!*\
  !*** ./games/Avalonika/src/world/sightManager.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SightManager)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lib/visibilityTile */ "./engine/src/lib/visibilityTile.js");
/* harmony import */ var _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @lib/shaderHelper */ "./engine/src/lib/shaderHelper.js");
/* harmony import */ var _gameMap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");
/* harmony import */ var _world__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./world */ "./games/Avalonika/src/world/world.js");










/*
Timer.delayedCall(0,function();
	World.shadowMaskTexture = ShaderHelper.getUpscaledTexture("shadowMask.png",false,{format:TextureBase.RGBA5551,wrap:TextureBase.REPEAT});
end);
*/

const sightTexture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "sight.png",false,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGB565 } );

function idToXy( id ) {
    if ( id != null ) {
        let tx, ty;

        tx = id  % _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tilePerRow;
        ty = Math.floor( id / _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tilePerRow );

        return [tx,ty];
    } else {
        return null;
    }
}


//-------------------------------------------------------------------------------------------------------------------
// 시야 처리
//-------------------------------------------------------------------------------------------------------------------
// 원본메시 1234 확대한 타일 5678이고 방향에 따라 조합한다

const idxSet = [];

idxSet[1] = [0, 4, 2, 4, 6, 23];
idxSet[2] = [5, 1, 7, 1, 3, 7];
idxSet[4] = [0, 1, 4, 1, 5, 4];
idxSet[8] = [6, 7, 2, 7, 3, 2];
idxSet[1 + 4] = [0, 1, 2, 1, 5, 2, 2, 5, 6, 5, 7, 6];
idxSet[1 + 8] = [0, 3, 2, 0, 4, 7, 0, 7, 3, 4, 5, 7];
idxSet[2 + 4] = [6, 4, 7, 4, 0, 3, 4, 3, 7, 0, 1, 3];
idxSet[2 + 8] = [4, 5, 6, 6, 5, 1, 6, 1, 2, 1, 3, 2];


/**
 * 
 * @this SightManager
 *
 */
function initShaders() {
    const maskTexture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowMaskTextureName );
    const baseTexture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileTextureName );
    const fogTexture = this.visibilityTexture;
    const lightTexture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "Light.png", false, { format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA5551 } );

    _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "mask" )
        .setTexture( "maskSampler", maskTexture )
        .setTexture( "baseSampler", baseTexture )
        .setConstant( "texSize", baseTexture.size );
    _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "tileMap" )
        .setTexture( "baseSampler", baseTexture )
        .setTexture( "fogSampler", fogTexture )
        .setConstant( "texSize", baseTexture.size );
    _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "light" )
        .setTexture( "baseSampler", lightTexture )
        .setTexture( "fogSampler", fogTexture );

    maskTexture.waitEvents( [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.LOADED,[_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.LOADED,baseTexture]], () => {
        console.log( "텍스쳐 모두 로딩했음" );
        this.invalidateEye();
    } );
    maskTexture.eventToPromise( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.LOADED ).then( () => {
        console.log( "이런식으로 이벤트를..." );
    } );
}


class SightManager extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Component {
    /**
     *Creates an instance of SightManager.
     * @param {World} world
     * @memberof SightManager
     */
    onAdded( world ) {
        this.world = world;
        this.__revealCache = undefined;
        this.visibilityTexture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.RenderTarget( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowWidth, _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowHeight );
        initShaders.call( this );
    }

    cacheReveal2( x, y, v ) {
        // 7 6 5
        // 4   3
        // 2 1 0
        const rc = this.__revealCache[x + "," + y];

        this.__revealCache[x + "," + y] = ( rc != null ? rc : 0 ) | v;
    }

    cacheReveal3( x, y ) {
        const c = this.__revealCache;

        c[x + "," + y] = (
            ( c[( x - 1 ) + "," + ( y - 1 )] << 0 ? 1 << 7 : 0 ) |
            ( c[x + "," + ( y - 1 )] << 1 ? 1 << 6 : 0 ) |
            ( c[( x + 1 ) + "," + ( y - 1 )] << 2 ? 1 << 5 : 0 ) |
            ( c[( x - 1 ) + "," + y] << 3 ? 1 << 4 : 0 ) |
            ( c[( x + 1 ) + "," + y] << 4 ? 1 << 3 : 0 ) |
            ( c[( x - 1 ) + "," + ( y + 1 )] << 5 ? 1 << 2 : 0 ) |
            ( c[x + "," + ( y + 1 )] << 6 ? 1 << 1 : 0 ) |
            ( c[( x + 1 ) + "," + ( y + 1 )] << 7 ? 1 << 0 : 0 ) );
    }


    // 새롭게 나타난 타일
    revealTile( x, y, forceReveal ) {
        const pr = this.world.getProperty( x, y );

        if ( ( forceReveal == true || !pr.revealed ) && x >= 0 && x < this.world.map.width && y >= 0 && y < this.world.map.height ) {
            if ( pr.revealed == false ) this.cacheReveal3( x, y );
            pr.revealed = true;
            //this.__revealCache[x + "," + y] = 0xff;
            this.cacheReveal2( x - 1, y - 1,1 << 0 );
            this.cacheReveal2( x, y - 1, 1 << 0 | 1 << 1 | 1 << 2 );
            this.cacheReveal2( x + 1, y - 1,1 << 2 );
            this.cacheReveal2( x - 1, y,1 << 3 | 1 << 0 | 1 << 5 );
            this.cacheReveal2( x + 1, y,1 << 4 | 1 << 7 | 1 << 2 );
            this.cacheReveal2( x - 1, y + 1,1 << 2 );
            this.cacheReveal2( x, y + 1,1 << 6 | 1 << 7 | 1 << 5 );
            this.cacheReveal2( x + 1, y + 1,1 << 5 );
            _global__WEBPACK_IMPORTED_MODULE_4__["default"]["interface"].autoMap.drawTile( x, y );
            const [tx, ty] = idToXy( this.world.map.getData( x, y ) );
            let tx2, ty2;

            if ( pr.below ) {
                [tx2, ty2] = idToXy( pr.below + 1 );
            }

            let [c1, c2, c3, c4] = this.world.map.getTileLightMap( x, y );

            if ( pr.shadow == 0 ) {
                // AO 처리
                const _UL = this.world.getProperty( x - 1, y - 1 ).shadow;
                const _U = this.world.getProperty( x, y - 1 ).shadow;
                const _UR = this.world.getProperty( x + 1, y - 1 ).shadow;
                const _L = this.world.getProperty( x - 1, y ).shadow;
                const _R = this.world.getProperty( x + 1, y ).shadow;
                const _DL = this.world.getProperty( x - 1, y + 1 ).shadow;
                const _D = this.world.getProperty( x, y + 1 ).shadow;
                const _DR = this.world.getProperty( x + 1, y + 1 ).shadow;

                if ( _UL > 0 || _U > 0 || _L > 0 ) {
                    c1 = ( c1 >> 1 ) & 0x7f7f7f;
                }

                if ( _UR > 0 || _U > 0 || _R > 0 ) {
                    c2 = ( c2 >> 1 ) & 0x7f7f7f;
                }

                if ( _DL > 0 || _D > 0 || _L > 0 ) {
                    c3 = ( c3 >> 1 ) & 0x7f7f7f;
                }

                if ( _DR > 0 || _D > 0 || _R > 0 ) {
                    c4 = ( c4 >> 1 ) & 0x7f7f7f;
                }
                /*
                if (_U>0) { 
                    c1=(c1>>3)&0x1f1f1f;
                    c2=(c2>>3)&0x1f1f1f;
                }
                */
            }

            //c1 = 0xffffff;
            // c2 = null;
            if ( pr.below ) {
                this.world.belowTileMap.setTile( x, y, tx2, ty2, null, c1, 1, c2, 1, c3, 1, c4, 1 );
            }

            if ( pr.shadow > 0 ) {
                this.world.wallTileMap.setTile( x, y, tx, ty, null, c1, 1, c2, 1, c3, 1, c4, 1 );
            } else {
                this.world.floorTileMap.setTile( x, y, tx, ty, null, c1, 1, c2, 1, c3, 1, c4, 1 );
            }

            for ( const i in this.world.map.lightList ) {
                const v = this.world.map.lightList[i];

                if ( v.x == x && v.y == y ) {
                    const m = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh();
                    //let [w, h] = [tex.width, tex.height];
                    const r = 60;
                    const c = v.color;
                    const a = 0.5;

                    m.setVertexArray( [-r, -r, r, -r, -r, r, r, r] );
                    m.setTextureCoordinateArray( [0, 0, 1, 0, 0, 1, 1, 1] );
                    m.setIndexArray( [0, 1, 2, 1, 3, 2] );
                    m.setColorArray( [c, a, c, a, c, a, c, a] );
                    m.position = this.world.tileCenterToWorld( v.x, v.y );
                    m.setShader( _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "light" ) );
                    this.world.lightLayer.addChild( m );
                    m.setBlendMode( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite.BlendModes.ADD );
                    m.motionBlur = false;
                    v.mesh = m;
                }
            }
        }
    }


    // eyeX,eyeY에 광원이 있다고 보고 그림자 메시를 구해낸다.
    // 시야처리에 사용함
    // eyeX,eyeY는 world좌표임. 나머지는 타일좌표

    /**
     *
     *
     * @param {number} eyeX
     * @param {number} eyeY
     * @param {number} radius
     * @param {function=} checkFunc
     * @param {boolean=} skipTable
     * @returns {{mesh:Mesh,visibleTileList:*}}
     * @memberof SightManager
     */
    getShadowMesh( eyeX, eyeY, radius, checkFunc = null, skipTable = false ) {
        const custom = [];
        const idx = [];
        const visibleTileList = [];
        const [w, h] = [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height];
        const [tw, th] = [_config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileWidth, _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileHeight];
        // let sx = 1 / this.world.zoom; // 핀치줌
        // let sy = 1 / this.world.zoom;
        const eyeTileX = Math.floor( eyeX / _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileWidth );
        const eyeTileY = Math.floor( eyeY / _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileHeight );
        const r = Math.floor( radius + 1 );
        const { x: viewX1, y: viewY1 } = this.world.worldToTile( this.world.viewX - w / 2 * this.world.zoom, this.world.viewY - h / 2 * this.world.zoom );
        const [viewX2, viewY2] = [viewX1 + Math.floor( w * this.world.zoom / tw ) + 1, viewY1 + Math.floor( h * this.world.zoom / th ) + 1];
        const sightX1 = Math.max( 0, Math.max( viewX1, eyeTileX - r ) );
        const sightX2 = Math.min( this.world.map.width - 1, Math.min( viewX2, eyeTileX + r ) );
        const sightY1 = Math.max( 0, Math.max( viewY1, eyeTileY - r ) );
        const sightY2 = Math.min( this.world.map.height - 1, Math.min( viewY2, eyeTileY + r ) );

        checkFunc = checkFunc || this.world.map.getVisibility.bind( this.world.map );

        for ( let y = sightY1; y <= sightY2; y++ ) {
            for ( let x = sightX1; x <= sightX2; x++ ) {
                const dist = ( x - eyeTileX ) ** 2 + ( y - eyeTileY ) ** 2;

                if ( dist != 0 && dist < r ** 2 ) {
                    const v = checkFunc( x, y );
                    // 리턴값
                    // 0 보이고 갈수 있음 
                    // 1 보이고 그 위치는 벽  
                    // 2 가려져서 보이지 않음
                    const pr = this.world.getProperty( x, y );

                    if ( !skipTable && v <= 1 ) {
                        visibleTileList.push( pr );
                    }

                    if ( ( pr.wall & _gameMap__WEBPACK_IMPORTED_MODULE_3__["default"].BLOCK_VISION ) != 0 ) {
                        const [tx, ty] = [x * tw, y * th];
                        const baseIndex = custom.length / 3;

                        custom.push(
                            // 원본 타일 버텍스
                            tx, ty, 0,
                            tx + tw, ty, 0,
                            tx, ty + th, 0,
                            tx + tw, ty + th, 0,
                            // 원본 타일 버텍스
                            tx, ty, 1, 
                            tx + tw, ty, 1,
                            tx, ty + th, 1, 
                            tx + tw, ty + th, 1
                        );//8*2개씩
                        idx.push(
                            baseIndex + 0, baseIndex + 1, baseIndex + 2,
                            baseIndex + 1, baseIndex + 3, baseIndex + 2,
                            baseIndex + 4, baseIndex + 1, baseIndex + 0,
                            baseIndex + 4, baseIndex + 5, baseIndex + 1,
                            baseIndex + 1, baseIndex + 5, baseIndex + 7,
                            baseIndex + 1, baseIndex + 7, baseIndex + 3,
                            baseIndex + 2, baseIndex + 3, baseIndex + 7,
                            baseIndex + 2, baseIndex + 7, baseIndex + 6,
                            baseIndex + 4, baseIndex + 0, baseIndex + 2,
                            baseIndex + 4, baseIndex + 2, baseIndex + 6,
                        );
                    }
                }
            }
        }

        const m = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh();

        //m.setVertexArray(custom);
        m.setIndexArray( idx );
        m.setGenericArray( "custom", custom, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.ArrayTypes.FLOAT32, 3, false );

        return { mesh: m, visibleTileList: visibleTileList };
    }

    computeVisibility() { //viewX1,viewY1,viewX2,viewY2,radius) {
        // viewX1,viewY1,viewX2,viewY2 보여지는 영역의 타일좌표
        // radius 시야 범위. view범위보다 작음. 타일 단위
        const [eyeX, eyeY] = [this.world.eyeX, this.world.eyeY]; // 시야처리 중심점

        if ( eyeX == null || eyeY == null ) {
            // 아직 월드가 준비가 안된 경우이다
            return;
        }
        const zoomX = 1 / this.world.zoom; // 핀치줌
        const zoomY = 1 / this.world.zoom;
        const [tileWidth, tileHeight] = [_config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileWidth, _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileHeight];
        const eyeTileX = Math.floor( eyeX / _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileWidth );
        const eyeTileY = Math.floor( eyeY / _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileHeight );
        const radius = Math.floor( this.world.viewRadius * 100 + 0.005 ) / 100;
        let { x: viewX1, y: viewY1 } = this.world.worldToTile( this.world.viewX - _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width / 2 * this.world.zoom, this.world.viewY - _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height / 2 * this.world.zoom );
        let [viewX2, viewY2] = [viewX1 + Math.floor( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width * this.world.zoom / tileWidth ), viewY1 + Math.floor( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height * this.world.zoom / tileHeight )];

        viewX1 = viewX1 - 1;
        viewY1 = viewY1 - 1;
        viewX2 = viewX2 + 1;
        viewY2 = viewY2 + 1;
        const profileBegin = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.now();
        let shadowMesh, wallMesh, floorMesh;
        let cache = this.__visibilityCache;

        if ( cache &&
            cache.eyeTileX == eyeTileX && cache.eyeTileY == eyeTileY &&
            cache.viewX1 == viewX1 && cache.viewY1 == viewY1 && cache.viewX2 == viewX2 && cache.viewY2 == viewY2 && cache.radius == Math.floor( radius ) ) {
            // 지난번에 계산한 것과 범위와 시점이 모두 일치함
            // console.log( "완전 캐시히트" );
            wallMesh = cache.mWall;
            floorMesh = cache.mFloor;
            shadowMesh = cache.m;
            // ({ mesh: shadowMesh } = this.getShadowMesh(eyeX, eyeY, radius, null, true));
        } else {
            const wallVtx = [];
            const wallUv = [];
            const wallIdx = [];
            const wallVc = [];

            const floorVtx = [];
            const floorUv = [];
            const floorIdx = [];
            const floorVc = [];
		
            let useCachedVisibility;
            let cachedVisibility;

            if ( cache && cache.eyeTileX == eyeTileX && cache.eyeTileY == eyeTileY && cache.radius == radius ) {
                // 시야와 범위가 같은 경우
                // console.log( "캐시히트", Timer.now() - profileBegin );
                useCachedVisibility = true;
                cachedVisibility = cache.visibility;
                //({ mesh: shadowMesh } = this.getShadowMesh(eyeX, eyeY, radius, null, true));
                shadowMesh = cache.m;
            } else {
                let visibleTileList;

                // 아래 행에서 2ms 정도 걸리고 있음
                // console.log( this.world.map.visibilityTileChecker.radius,radius );
                this.world.map.visibilityTileChecker.getResult( eyeTileX, eyeTileY, radius );
                // console.log( "0-1 여기까지", Timer.now() - profileBegin );
                ( { mesh: shadowMesh, visibleTileList } = this.getShadowMesh( eyeX, eyeY, radius ) );
                // console.log( "0-2 여기까지", Timer.now() - profileBegin );
                console.assert( shadowMesh.indices );

                for ( const i in visibleTileList ) {
                    const pr = visibleTileList[i];

                    this.revealTile( pr.x, pr.y );
                }

                cachedVisibility = {};
                // console.log( "0-3 여기까지", Timer.now() - profileBegin );
            }

            // console.log( "1 여기까지", Timer.now() - profileBegin );
            // 블록에 블렌딩 효과를 만드는 부분
            // 화면에 보이면 모두 처리를 해야한다.
            this.waterAmount = 0;

            for ( let y = viewY1; y <= viewY2; y++ ) {
                for ( let x = viewX1; x <= viewX2; x++ ) {
                    const pr = this.world.map.getProperty( x, y );

                    if ( pr == null ) break;

                    if ( pr.water && !pr.envSound ) {
                        // 물사운드를 내기 위해서 물의 수를 카운트함
                        const dist = _global__WEBPACK_IMPORTED_MODULE_4__["default"].world.getDistance( x, y, eyeTileX, eyeTileY );

                        this.waterAmount = this.waterAmount + ( 1 / ( dist * dist ) );
                    }

                    if ( !!pr.revealed == false ) {
                        // 안까진 타일에 할 일은 없다
                    } else {
                        const [tx, ty] = [x * tileWidth, y * tileHeight];
                        let visionBlend = 0x2f;
                        let revealBlend;
                        // const _rc = this.__revealCache[x + "," + y];
                        // revealBlend = _rc != null ? _rc : 0x2f;
                        const _rc = this.__revealCache[x + "," + y];

                        revealBlend = _gameMap__WEBPACK_IMPORTED_MODULE_3__["default"].tileBlendTable[_rc != null ? _rc : 0x00];
                        const checkFunc = this.world.map.getVisibility.bind( this.world.map );

                        if ( checkFunc( x, y ) <= 1 ) {
                            if ( useCachedVisibility ) {
                                const cv = cachedVisibility[x + "," + y];

                                visionBlend = cv != null ? cv : 0x00;
                            } else {
                                visionBlend = _gameMap__WEBPACK_IMPORTED_MODULE_3__["default"].tileBlendTable[(
                                    ( checkFunc( x - 1, y - 1 ) <= 1 ? 1 << 7 : 0 ) |
                                    ( checkFunc( x, y - 1 ) <= 1 ? 1 << 6 : 0 ) |
                                    ( checkFunc( x + 1, y - 1 ) <= 1 ? 1 << 5 : 0 ) |
                                    ( checkFunc( x - 1, y ) <= 1 ? 1 << 4 : 0 ) |
                                    ( checkFunc( x + 1, y ) <= 1 ? 1 << 3 : 0 ) |
                                    ( checkFunc( x - 1, y + 1 ) <= 1 ? 1 << 2 : 0 ) |
                                    ( checkFunc( x, y + 1 ) <= 1 ? 1 << 1 : 0 ) |
                                    ( checkFunc( x + 1, y + 1 ) <= 1 ? 1 << 0 : 0 ) )];
                                cachedVisibility[x + "," + y] = visionBlend;
                            }
                        }

                        const uvx1 = visionBlend & 0x0f;
                        const uvy1 = visionBlend >> 4;
                        const uvx2 = revealBlend & 0x0f;
                        const uvy2 = revealBlend >> 4;

                        if ( pr.shadow > 0 && ( revealBlend < 0x2f ) ) {
                            const [ , tileUv, , ] = this.world.wallTileMap.getArray( x, y );
                            const baseIndex0 = wallVtx.length / 2;

                            wallVtx.push(
                                tx, ty,
                                tx + tileWidth, ty,
                                tx, ty + tileHeight,
                                tx + tileWidth, ty + tileHeight,
                            );
                            wallUv.push(
                                tileUv[0], tileUv[1],
                                tileUv[2], tileUv[3],
                                tileUv[4], tileUv[5],
                                tileUv[6], tileUv[7],
                            );
                            wallIdx.push(
                                baseIndex0 + 0, baseIndex0 + 1, baseIndex0 + 2,
                                baseIndex0 + 1, baseIndex0 + 3, baseIndex0 + 2,
                            );
                            // uvx1 = 0;
                            // uvy1 = 0;
                            // uvx2 = 0;
                            // uvy2 = 0;
                            const vc = ( ( uvx1 * 8 ) << 24 ) | ( ( uvy1 * 8 ) << 16 ) | ( ( uvx2 * 8 ) << 8 ) | ( uvy2 * 8 );

                            // wallVc.push(
                            //     vc,
                            //     vc + ( 8 << 24 ) + ( 8 << 8 ),
                            //     vc + ( 8 << 16 ) + 8,
                            //     vc + ( 8 << 24 ) + ( 8 << 8 ) + ( 8 << 16 ) + 8,
                            // );
                            // wallVc.push(
                            //     uvx1 * 8 , uvy1 * 8,uvx2 * 8,uvy2 * 8,
                            //     uvx1 * 8 + 8, uvy1 * 8,uvx2 * 8 + 8,uvy2 * 8,
                            //     uvx1 * 8 , uvy1 * 8 + 8,uvx2 * 8,uvy2 * 8 + 8,
                            //     uvx1 * 8 + 8 , uvy1 * 8 + 8,uvx2 * 8 + 8,uvy2 * 8 + 8,
                            // );
                            wallVc.push(
                                uvx1 * 18 + 1,  uvy1 * 26 + 1,  uvx2 * 18 + 1,  uvy2 * 26 + 1,
                                uvx1 * 18 + 17, uvy1 * 26 + 1,  uvx2 * 18 + 17, uvy2 * 26 + 1,
                                uvx1 * 18 + 1,  uvy1 * 26 + 25, uvx2 * 18 + 1,  uvy2 * 26 + 25,
                                uvx1 * 18 + 17, uvy1 * 26 + 25, uvx2 * 18 + 17, uvy2 * 26 + 25,
                            );
                        } else {
                            let tileUv;

                            if ( pr.shadow > 0 ) {
                                [ , tileUv, , ] = this.world.wallTileMap.getArray( x, y );
                            } else {
                                [ , tileUv, , ] = this.world.floorTileMap.getArray( x, y );
                            }

                            if ( tileUv != null && ( revealBlend > 0x00 && revealBlend < 0x2f ) ) {
                                const baseIndex0 = floorVtx.length / 2;

                                floorVtx.push(
                                    tx, ty,
                                    tx + tileWidth, ty,
                                    tx, ty + tileHeight,
                                    tx + tileWidth, ty + tileHeight,
                                );
                                floorUv.push(
                                    tileUv[0], tileUv[1],
                                    tileUv[2], tileUv[3],
                                    tileUv[4], tileUv[5],
                                    tileUv[6], tileUv[7],
                                );
                                floorIdx.push(
                                    baseIndex0 + 0, baseIndex0 + 1, baseIndex0 + 2,
                                    baseIndex0 + 1, baseIndex0 + 3, baseIndex0 + 2,
                                );
                                // const vc = ( ( uvx1 * 8 ) << 24 ) | ( ( uvy1 * 8 ) << 16 ) | ( ( uvx2 * 8 ) << 8 ) | ( uvy2 * 8 );

                                floorVc.push(
                                    uvx1 * 8 , uvy1 * 8,uvx2 * 8,uvy2 * 8,
                                    uvx1 * 8 + 8, uvy1 * 8,uvx2 * 8 + 8,uvy2 * 8,
                                    uvx1 * 8 , uvy1 * 8 + 8,uvx2 * 8,uvy2 * 8 + 8,
                                    uvx1 * 8 + 8 , uvy1 * 8 + 8,uvx2 * 8 + 8,uvy2 * 8 + 8,
                                );
                            }
                        }
                    }
                }
            }

            wallMesh = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh();
            // wallMesh.setBlendMode( Sprite.ONE,Sprite.ZERO );
            wallMesh.setVertexArray( wallVtx );
            wallMesh.setTextureCoordinateArray( wallUv );
            wallMesh.setIndexArray( wallIdx );
            //mWall.setColorArray(vcWall);
            wallMesh.setGenericArray( "uvuv", wallVc, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.ArrayTypes.UINT16, 4, false );
            floorMesh = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh();
            //mFloor.setBlendMode(Sprite.ONE,Sprite.ZERO);
            floorMesh.setVertexArray( floorVtx );
            floorMesh.setTextureCoordinateArray( floorUv );
            floorMesh.setIndexArray( floorIdx );
            //mFloor.setColorArray(vcFloor);
            floorMesh.setGenericArray( "uvuv", floorVc, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh.ArrayTypes.UINT16, 4, false );
            this.__visibilityCache = {};
            cache = this.__visibilityCache;
            cache.visibility = cachedVisibility;
            cache.eyeTileX = eyeTileX;
            cache.eyeTileY = eyeTileY;
            cache.viewX1 = viewX1;
            cache.viewY1 = viewY1;
            cache.viewX2 = viewX2;
            cache.viewY2 = viewY2;
            cache.radius = Math.floor( radius );
            cache.m = shadowMesh;
            cache.mWall = wallMesh;
            cache.mFloor = floorMesh;
            // console.log( "시야처리에 걸린 시간", ( Timer.now() - profileBegin ) );
        }

        shadowMesh.setColorMultiplier( 0, 1, 1 );
        shadowMesh.setBlendMode( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite.BlendModes.MULTIPLY );
        
        let sx1, sy1;

        sx1 = ( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowWidth / _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width * zoomX );
        sy1 = ( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowHeight / _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height * zoomY );
        const ax = ( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowWidth / 2 - Math.floor( this.world.viewX ) * _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowScale );
        const ay = ( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowHeight / 2 - Math.floor( this.world.viewY ) * _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowScale );

        shadowMesh.setScale( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowScale );
        wallMesh.setScale( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowScale );
        floorMesh.setScale( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowScale );
        shadowMesh.setPosition( ax, ay );
        wallMesh.setPosition( ax, ay );
        floorMesh.setPosition( ax, ay );
        const radiusBitmap = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh();

        {
            radiusBitmap.setColorArray( [0xffffff, 1, 0xffffff, 1, 0xffffff, 1, 0xffffff, 1] );
            radiusBitmap.setIndexArray( [0, 1, 2, 1, 3, 2] );
            radiusBitmap.setTexture( sightTexture );
            const w = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width / zoomX;
            const h = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height / zoomY;

            radiusBitmap.setVertexArray( [-w / 2, -h / 2, w / 2, -h / 2, -w / 2, h / 2, w / 2, h / 2] );
            //radiusBitmap.setAnchorPoint(0.5, 0.5);
            radiusBitmap.setScale( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowScale );
            radiusBitmap.setPosition( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowWidth / 2, _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowHeight / 2 );
            const tsx = _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileWidth * ( radius * 0.9 - 1 ) / sightTexture.width;
            const tsy = _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileHeight * ( radius * 0.9 - 1 ) / sightTexture.height;
            const scaleAdjustX = _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileHeight / _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileWidth / tsx / 2 / 2;
            const scaleAdjustY = _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileWidth / _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.tileHeight / tsy / 2;
            const tcx = ( -this.world.eyeX + this.world.viewX ) * scaleAdjustX + ( sightTexture.width / 2 );
            const tcy = ( -this.world.eyeY + this.world.viewY ) * scaleAdjustY + ( sightTexture.height / 2 );
            const tw = this.world.viewWidth / tsx / sx1 * 2;
            const th = this.world.viewHeight / tsy / sy1 * 2;

            radiusBitmap.setTextureCoordinateArray( [
                tcx - tw / 2, tcy - th / 2, tcx + tw / 2, tcy - th / 2,
                tcx - tw / 2, tcy + th / 2, tcx + tw / 2, tcy + th / 2,
            ] );
            radiusBitmap.setBlendMode( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite.BlendModes.MULTIPLY );
        }
	
        // b 값을 낮추면 시야 범위가 일정하게 밝아진다.
        this.visibilityTexture.clear( 0xffffff, 1.0 );
        // m 은 wall을 주욱 늘린 메시이다
        // 색은 블랙
        floorMesh.setShader( _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "mask" ) );
        // 바닥메시
        _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "mask" ).setConstant( "mask", 1.0 );
        this.visibilityTexture.draw( floorMesh );

        //m.setShader();
        {
            let ex = ( eyeX - Math.floor( this.world.viewX ) ) / _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowWidth;
            let ey = ( eyeY - Math.floor( this.world.viewY ) ) / _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowHeight;

            ex = ex * 2 * _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowScale;
            ey = ey * 2 * _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowScale;
            //log(ex,ey);
            shadowMesh.setShader( _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "shadow" ) );
            _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "shadow" ).setConstant( "eyePos", [ex, ey, 0, 0] );
        }

        //시야메시를 그린다
        this.visibilityTexture.draw( shadowMesh );
        
        //원형감쇄이미지를 그린다
        this.visibilityTexture.draw( radiusBitmap );
        
        _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "mask" ).setConstant( "mask", 0.0 );

        //벽을 그린다
        wallMesh.setShader( _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "mask" ) );
        _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "mask" ).setTexture( "maskSampler", new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowMaskTextureName ) );

        this.visibilityTexture.draw( wallMesh );

        // R=시야 G=그림자 B=마스킹
        if ( false ) {}
    }
               
    invalidateVisibility() {
        this.__visibilityCache = null;
    }


    //-------------------------------------------------------------------------------------------------------------------
    // 시야의 오브젝트 보이기 숨기기 
    //-------------------------------------------------------------------------------------------------------------------

    refreshEntityVisibility() {
        this.world.entityLayer.sortChildren();

        for ( const k in this.world.entityManager.entitiesByXy ) {
            const v = this.world.entityManager.entitiesByXy[k];

            if ( v.visibleTw ) {
                v.visibleTw.stop();
            }

            if ( ( this.world.map.getVisibility( v.tileX, v.tileY ) & _gameMap__WEBPACK_IMPORTED_MODULE_3__["default"].BLOCK_VISION ) != 0 ) {
                if ( v.isPlayer ) {
                    console.log( "플레이어가 안보임", v.tileX, v.tileY, this.world.map.getVisibility( v.tileX, v.tileY ) );
                }

                v.visibleTw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( v, 200, { alpha: 0.0 }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.linear } )
                    .onComplete( () => {
                        v.setVisible( false );
                    } );
            } else {
                v.setVisible( true );
                v.visibleTw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( v, 100, { alpha: 1.0 }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.linear } );
            }
        }

        for ( const k in this.world.entityManager.itemsByXy ) {
            const items = this.world.entityManager.itemsByXy[k];
            const item = items[items.length - 1];

            if ( item.visibleTw ) {
                item.visibleTw.stop();
            }

            if ( ( this.world.map.getVisibility( item.tileX, item.tileY ) & _gameMap__WEBPACK_IMPORTED_MODULE_3__["default"].BLOCK_VISION ) != 0 ) {
                //log("아이템숨김",item.tileX,item.tileY);
                item.visibleTw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( item, 200, { alpha: 0.0 }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.linear } )
                    .onComplete( () => {
                        item.setVisible( false );
                    } );
            } else {
                //log("아이템보임",item.tileX,item.tileY);
                if ( !item.isVisible() ) {
                    item.setVisible( true );
                    item.visibleTw = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( item, 100, { alpha: 1.0 }, { ease: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.linear } );
                }
            }
        }

        // 라이트
        for ( const i in this.world.map.lightList ) {
            const v = this.world.map.lightList[i];

            if ( v.mesh ) {
                if ( ( this.world.map.getVisibility( v.x, v.y ) & _gameMap__WEBPACK_IMPORTED_MODULE_3__["default"].BLOCK_VISION ) != 0 ) {
                    v.mesh.removeFromParent();
                } else {
                    this.world.lightLayer.addChild( v.mesh );
                }
            }
        }
    }

    canBeSeen( x, y, wall ) {
        const { x: eyeTileX, y: eyeTileY } = this.world.worldToTile( this.world.eyeX, this.world.eyeY );

        if ( wall ) {
            const [r, rx, ry] = this.world.map.visibilityTileChecker.canBeSeen( eyeTileX, eyeTileY, x, y, wall );

            return [r == _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_1__["default"].EMPTY, r, rx, ry];
        } else {
            // wall을 지정하지 않으면
            // 캐시된 시야 상태를 가지고 바로 돌려준다.
            // 부정확할 수 있음에 유의
            let [r, rx, ry] = [this.world.map.getVisibility( x, y ), x, y];

            if ( r != _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_1__["default"].EMPTY ) {
                [r, rx, ry] = this.world.map.visibilityTileChecker.canBeSeen( eyeTileX, eyeTileY, x, y, _gameMap__WEBPACK_IMPORTED_MODULE_3__["default"].BLOCK_VISION );
            }

            return [r == _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_1__["default"].EMPTY, r, rx, ry];
        }
    }

    canSee( x1, y1, x2, y2, wall ) {
        const [r, rx, ry] = this.world.map.visibilityTileChecker.canBeSeen(
            x1, y1, x2, y2, wall || _gameMap__WEBPACK_IMPORTED_MODULE_3__["default"].BLOCK_VISION );

        return [r == _lib_visibilityTile__WEBPACK_IMPORTED_MODULE_1__["default"].EMPTY, r, rx, ry];
    }


    //-------------------------------------------------------------------------------------------------------------------
    // 셰이더 갱신
    //-------------------------------------------------------------------------------------------------------------------

    updateShaderViewInfo() {
        const sx = 1 / this.world.zoom;
        const sy = 1 / this.world.zoom;

        const shadowWidth = _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowWidth / _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowScale;
        const shadowHeight = _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowHeight / _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowScale;
        const t = {
            // viewPos.xy viewSize.zw
            viewInfo: [
                //0.5 - (application.logicalRenderBounds.width / 2 / sx - Utils.frac(Utils.precision(this.world.viewX, 3)) + this.world.x) / CONFIG.World.shadowWidth * CONFIG.World.shadowScale,
                //0.5 - (application.logicalRenderBounds.height / 2 / sy + Utils.frac(Utils.precision(this.world.viewY, 3)) - this.world.y) / CONFIG.World.shadowHeight * CONFIG.World.shadowScale,
                0.5 - ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width / 2 / sx  + this.world.x ) / shadowWidth,
                0.5 - ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height / 2 / sy  - this.world.y ) / shadowHeight,
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width / sx / shadowWidth,
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height / sy / shadowHeight,
            ],
            color1: this.world.__envColor1,
            color2: this.world.__envColor2,
        };

        t.viewInfo[1] = -t.viewInfo[1] + 1;
        t.viewInfo[3] = -t.viewInfo[3];
        _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "tileMap" ).setConstants( t );
        _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_2__["default"].getShader( "light" ).setConstants( t );
    }



    //-------------------------------------------------------------------------------------------------------------------
    // 화면 확대 축소
    //-------------------------------------------------------------------------------------------------------------------

    setZoom( zoom ) {
        const zoomMax = Math.min( _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.zoomMax, Math.min(
            _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowWidth / _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width,
            _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.shadowHeight / _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height ) );

        this.world.zoom = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( zoom, _config__WEBPACK_IMPORTED_MODULE_5__["default"].World.zoomMin, zoomMax );
        this.world.worldLayer.setScaleX( 1 / this.world.zoom );
        this.world.worldLayer.setScaleY( 1 / this.world.zoom );

        this.lastPos = [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY];//this.viewX,this.viewY,this.eyeX,this.eyeY}
        this.moveViewTo( this.world.viewX, this.world.viewY );
        this.updateShaderViewInfo();
        _global__WEBPACK_IMPORTED_MODULE_4__["default"]["interface"].cursor.resetScale();

        return this.world.zoom;
    }

    getZoom() {
        return this.world.zoom;
    }


    //-------------------------------------------------------------------------------------------------------------------
    // View, Eye 이동
    //-------------------------------------------------------------------------------------------------------------------

    moveViewTo( px, py ) {
        //px=Math.floor(px);
        //py=Math.floor(py);
        console.assert( !Number.isNaN( px ) );
        // this.world.viewX = Math.floor( px );
        // this.world.viewY = Math.floor( py );
        this.world.viewX = px;
        this.world.viewY = py;
        const sx = 1 / this.world.zoom;
        const sy = 1 / this.world.zoom;
        const [x1, y1] = [px * sx - this.world.viewWidth / 2, py * sy - this.world.viewHeight / 2];
        /*
			this.worldLayer.setPosition(
				-Math.floor(x1+0.7),
				-Math.floor(y1+0.7);
			)
		*/
        const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "viewChanged" );

        e.viewX = px;
        e.viewY = py;
        this.world.dispatchEvent( e );
    }


    moveEyeTo( px, py ) {
        // px = Math.floor( px );
        // py = Math.floor( py );

        if ( this.world.eyeX != px || this.world.eyeY != py ) {
            this.world.eyeX = px;
            this.world.eyeY = py;
        }

        const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "eyeChanged" );

        e.eyeX = px;
        e.eyeY = py;
        this.world.dispatchEvent( e );
    }

    invalidateEye() {
        this.world.lastPos = [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY];
        this.world.map.visibilityTileChecker.clearResult();
        this.world.map.visibilityTileChecker.getResult();
    }
}




/***/ }),

/***/ "./games/Avalonika/src/world/world.js":
/*!********************************************!*\
  !*** ./games/Avalonika/src/world/world.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ World)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _entityManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entityManager */ "./games/Avalonika/src/world/entityManager.js");
/* harmony import */ var _pathManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pathManager */ "./games/Avalonika/src/world/pathManager.js");
/* harmony import */ var _sightManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sightManager */ "./games/Avalonika/src/world/sightManager.js");
/* harmony import */ var _gameMap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _proceduralMap_proceduralMap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../proceduralMap/proceduralMap */ "./games/Avalonika/src/proceduralMap/proceduralMap.js");
/* harmony import */ var _elemental__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./elemental */ "./games/Avalonika/src/world/elemental.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _lib_colors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lib/colors */ "./engine/src/lib/colors.js");
/* harmony import */ var _entity_prop__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../entity/prop */ "./games/Avalonika/src/entity/prop.js");
/* harmony import */ var _entity_monster__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../entity/monster */ "./games/Avalonika/src/entity/monster.js");
/* harmony import */ var _entity_npc__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../entity/npc */ "./games/Avalonika/src/entity/npc.js");
/* harmony import */ var _entity_item__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../entity/item */ "./games/Avalonika/src/entity/item.js");
/* harmony import */ var _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @lib/shaderHelper */ "./engine/src/lib/shaderHelper.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../config */ "./games/Avalonika/src/config.js");





















//-------------------------------------------------------------------------------------------------------------------
// World;
// 게임의 핵심 클래스
// 대부분의 게임 개체는 월드에 addEntity로 추가해서 처리해야한다.
//-------------------------------------------------------------------------------------------------------------------


// 물과 같은 애니메이션 타일을 처리한다

/**
 *
 * @this World
 * 
 */
function onTimer() {
    if ( this.floorTileMap != null ) {
        this.__animationTick = ( this.__animationTick + 1 ) % 4;
        const ox = this.__animationTick * 1 / 256 * _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth; // 타일 텍스쳐가 256이라고 가정하고 있다

        _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_13__["default"].getShader( "tileMap" ).setConstant( "offset",[ ox, 0, 0, 0] );
    }
}

//-------------------------------------------------------------------------------------------------------------------
// 맵 로더
//-------------------------------------------------------------------------------------------------------------------

/**
 * @this World
 *
 * @param {GameMap} map
 */
function setMap( map ) {
    console.assert( this.floorTileMap == null, "월드에 map을 여러번 생성하려함" );
    this.map = map;
    this.belowTileMap = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TileMap(
        this.map.width,
        this.map.height,
        null,
        _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth,
        _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight,
        2, 2, 1, 1,
        _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth,
        _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight );
    this.floorTileMap = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TileMap(
        this.map.width,
        this.map.height,
        null,
        _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth,
        _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight,
        2, 2, 1, 1,
        _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth,
        _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight );
    this.wallTileMap = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TileMap(
        this.map.width,
        this.map.height,
        null,
        _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth,
        _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight,
        2, 2, 1, 1,
        _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth,
        _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight );
    for ( const i in this.map.spawnTable ) {
        const v = this.map.spawnTable[i];
        const e1 = new _entity_monster__WEBPACK_IMPORTED_MODULE_10__["default"]( v.x, v.y,
                                {
                                    id:    v.id,
                                    color: this.map.getEntityProperty( v.id ).color || 0xff9000
                                } );

        this.entityManager.addEntity( e1 );
    }

    this.floorLayer.addChildAt( this.floorTileMap, 0 );
    this.floorLayer.addChildAt( this.belowTileMap, 0 );
    this.wallLayer.addChildAt( this.wallTileMap, 0 );
    
    this.floorTileMap.setShader( _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_13__["default"].getShader( "tileMap" ) );
    this.belowTileMap.setShader( _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_13__["default"].getShader( "tileMap" ) );
    this.wallTileMap.setShader( _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_13__["default"].getShader( "tileMap" ) );
    this.floorTileMap.motionBlur = false;
    this.belowTileMap.motionBlur = false;
    this.wallTileMap.motionBlur = false;

    _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_13__["default"].getShader( "tileMap" ).setConstant(
        "glossy", [0, 0, _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.shadowWidth / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.shadowHeight * 8 / this.zoom, 8 / this.zoom]
    );
    this.sightManager.updateShaderViewInfo();
    this.sightManager.__revealCache = {};
    this.addEventListenerOnStage( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, this.onEnterFrame, this );

    // console.log( this.map.getMapString() );
}





/**
 *
 *
 * @class World
 * @extends {Sprite}
 */
class World extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
//-------------------------------------------------------------------------------------------------------------------
// 월드 초기화
//-------------------------------------------------------------------------------------------------------------------

    constructor( options ) {
        super();
        if ( !_global__WEBPACK_IMPORTED_MODULE_14__["default"].world ) {
            _global__WEBPACK_IMPORTED_MODULE_14__["default"].world = this;
        } else {
            console.log( "GLOBAL.world가 존재하는데 월드를 생성중" );
        }
        this.entityManager = this.addComponent( new _entityManager__WEBPACK_IMPORTED_MODULE_1__["default"]() );
        this.sightManager = this.addComponent( new _sightManager__WEBPACK_IMPORTED_MODULE_3__["default"]() );
        this.pathManager = this.addComponent( new _pathManager__WEBPACK_IMPORTED_MODULE_2__["default"]() );
        
        console.assert( this.entityManager != null && this.sightManager != null && this.pathManager != null, `World의 Manager 초기화가 실패함.` );


        this.options = options || {};
        const [w,h] = [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.width,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.height];

        this.viewWidth = w;
        this.viewHeight = h;
        // 디바이스의 피지컬 화면을 view기준으로 본 것
        this.zoom = 1.0;
        this.viewX = null;
        this.viewY = null;
        this.eyeX = null;
        this.eyeY = null;
        this.viewRadius = 10;
        this.lastPos = [0, 0, 0, 0];

        this.__envColor1 = [1, 1, 1, 0.2];
        this.__envColor2 = [0.4, 0.5, 0.6, 1];

        /** @type {GameMap} */        
        this.map = undefined;
        this.turn = 1;
        this.dateTimeOrigin = 0;
        this.__time = 0;
        this.__rain = -1;
        this.time = 0;
        this.rain = -1;
        this.__timer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer( 250,0 );
        this.__timer.start();
        this.__animationTick = 0;
        this.__timer.addEventListenerOnStage( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.TIMER,onTimer,this,this );
        this.randomGenerator = new _lib_random__WEBPACK_IMPORTED_MODULE_7__["default"]( this.options.seed );
        this.random = this.randomGenerator.random.bind( this.randomGenerator );
        //-------------
        // Layers;
        //-------------

        this.worldLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.clipLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        //this.clipLayer.setClip( application.logicalRenderBounds.left, application.logicalRenderBounds.top, application.logicalRenderBounds.width, application.logicalRenderBounds.height);
        this.floorLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.shadowLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.wallLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.itemLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.entityLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.lightLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        //this.lightLayer.setBlendMode(Sprite.BlendModes.ADD);
        this.effectLayer = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        //this.lightLayer.setShader(shaderHelper.getShader("light"));
        //this.lightLayer.setBlendMode(Sprite.ADD);
        this.clipLayer.addChild( this.worldLayer );
        this.worldLayer.addChild( this.floorLayer );
        this.worldLayer.addChild( this.shadowLayer );
        this.worldLayer.addChild( this.wallLayer );
        this.worldLayer.addChild( this.lightLayer );
        this.worldLayer.addChild( this.itemLayer );
        this.worldLayer.addChild( this.entityLayer );
        this.worldLayer.addChild( this.effectLayer );

        this.belowTileMap = undefined;
        this.floorTileMap = undefined;
        this.wallTileMap = undefined;
        
        this.addChild( this.clipLayer );

        // //-------------------
        // // Physics;
        // //-------------------
        // this.b2w = b2.new World(0,0,true);
        // if (false) {
        // 	let debugDraw = b2.new DebugDraw();
        // 	this.b2w.setDebugDraw(debugDraw);
        // 	this.worldLayer.addChild(debugDraw);
        // }
        // this.b2ps = this.b2w.createParticleSystem({radius=5}) //destroyByAge=true,
        // //this.b2ps.setTexture(new Texture("Blood.png",false,{format=TextureBase.RGBA5551}));
        // this.worldLayer.addChild(this.b2ps);
        //-------------------
        // Elemental System;
        //-------------------
        this.elemental = new _elemental__WEBPACK_IMPORTED_MODULE_6__["default"]();
        this.floorLayer.addChild( this.elemental.layers[_elemental__WEBPACK_IMPORTED_MODULE_6__["default"].WATER] );
        this.effectLayer.addChild( this.elemental.layers[_elemental__WEBPACK_IMPORTED_MODULE_6__["default"].POISON] );
        this.effectLayer.addChild( this.elemental.layers[_elemental__WEBPACK_IMPORTED_MODULE_6__["default"].FIRE] );
        this.waterAmount = 0; // 물사운드 내는 용도

        this.clearAutoMap = true;
        //-------------------
        // GameMap  Loader;
        // Url;
        // SaveData;
        // ProceduralMap;
        //-------------------
        this.places = [];
        // 장소이름이 키이고 x,y;
        if ( this.options.loadData ) {
            this.setMapString( this.options.loadData.mapString );
            this.randomGenerator.load( this.options.loadData.random );
            this.options.loadData = null;
            console.log( "세이브데이터로드" );
            this.ready();
        } else if ( this.options.url ) {
            this.type = "wildness";
            console.log( "URL에서 데이터를 받아온다.",this.options.url );
            this.setMapUrl( this.options.url )
                .on( "complete",() => {
                    this.ready();
                } );
            this.options.url = null;
        } else if ( this.options.worldGen ) {
            this.type = "wildness";
            console.log( "WORLD GENERATOR 를 통해서 생성." );
            this.setByWorldGen( this.options.worldGen );
            this.ready();
            this.options.worldGen = null;
        } else {
            if ( this.options.type == "dungeon" || this.options.type == "wildness" ) {
                this.type = "dungeon";
                this.proceduralMap = new _proceduralMap_proceduralMap__WEBPACK_IMPORTED_MODULE_5__["default"]( this.options );
                this.setMapString( this.proceduralMap.getMapString() );
                this.enterX = this.proceduralMap.startX;
                this.enterY = this.proceduralMap.startY;
                const t = this.proceduralMap.getEntityList();

                for ( const i in t ) {
                    const v = t[i];
                    let obj;

                    if ( v.type == "prop" ) {
                        obj = new _entity_prop__WEBPACK_IMPORTED_MODULE_9__["default"]( v.char,v.x,v.y,v.options );
                    } else if ( v.type == "monster" ) {
                        obj = new _entity_monster__WEBPACK_IMPORTED_MODULE_10__["default"]( v.char,v.x,v.y,v.options );
                    } else if ( v.type == "npc" ) {
                        obj = new _entity_npc__WEBPACK_IMPORTED_MODULE_11__["default"]( v.char,v.x,v.y,v.options );
                    }
                    this.entityManager.addEntity( obj );
                }
            }
            this.ready();
        }

        this.sightManager.updateShaderViewInfo();
    }

    ready( delay ) {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( delay || 0,() => {
            this.processDateTime();
            const e = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "ready" );

            this.dispatchEvent( e );
        } );
    }

    getProperty( tileX, tileY ) {
        return this.map.getProperty( tileX, tileY );
    }



    //-------------------------------------------------------------------------------------------------------------------
    // 매 프레임 그리는 부분
    //-------------------------------------------------------------------------------------------------------------------

    /**
     * @this World
     *
     * @memberof World
     */
    onEnterFrame() {
        const [lastRadius,lastX,lastY,lastEyeX,lastEyeY] = this.lastPos;
        const sx = 1 / this.zoom;
        const sy = 1 / this.zoom;

        this.sightManager.updateShaderViewInfo();
        const zoom = 1;

        // if (Accelerometer.isAvailable()) {
        // 	let x,y,z = _accelerometer.getAcceleration();
        // 	this.__accelX = ((this.__accelX || 0)*6+ -x)/7;
        // 	this.__accelY = ((this.__accelY || 0)*6+ (z*0.4-y*0.6))/7;
        // 	shaderHelper.setConstant("tileMap",{
        // 		fGlossy = {this.__accelX*0.8,this.__accelY*-0.4,
        // 					World.shadowWidth/World.shadowHeight*zoom,
        // 					zoom,}
        // 	});
        // } else {
        _lib_shaderHelper__WEBPACK_IMPORTED_MODULE_13__["default"].getShader( "tileMap" ).setConstant(
            "glossy",[0,0,_config__WEBPACK_IMPORTED_MODULE_15__["default"].World.shadowWidth / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.shadowHeight * zoom,zoom]
        );
        // }

        // 날씨효과 그리기
        this.renderWhetherEffect( this.viewX - ( lastX || this.viewX ),this.viewY - ( lastY || this.viewY ) );
        if ( this.clearAutoMap ) {
            _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].autoMap.clear();
            this.clearAutoMap = false;
        }
        if ( lastRadius !=  this.viewRadius || lastX !=  this.viewX || lastY != this.viewY || lastEyeX !=  this.eyeX || lastEyeY !=  this.eyeY ) {
            const [x1,y1] = [this.viewX - this.viewWidth / 2 * this.zoom,this.viewY - this.viewHeight / 2 * this.zoom];
            const [x2,y2] = [this.viewX + this.viewWidth / 2 * this.zoom,this.viewY + this.viewHeight / 2 * this.zoom];
            let viewX1,viewY1,viewX2,viewY2;

            viewX1 = Math.floor( x1 / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth ) + 1 - 1;
            viewY1 = Math.floor( y1 / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight ) + 1 - 1;
            viewX2 = Math.floor( x2 / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth ) + 1 + 1;
            viewY2 = Math.floor( y2 / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight ) + 1 + 1;
            this.sightManager.computeVisibility();//viewX1,viewY1,viewX2,viewY2,this.viewRadius);
            this.lastPos = [this.viewRadius, this.viewX, this.viewY, this.eyeX, this.eyeY];
        }


        if ( this.lightLayer.getNumChildren() > 0 ) {
            const i = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,20 );

            if ( i <= this.lightLayer.getNumChildren() ) {
                const b = this.lightLayer.getChildAt( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,this.lightLayer.getNumChildren() - 1 ) );

                b.setScale( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,10 ) * 0.01 + 0.9 );
                b.setAlpha( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,10 ) * 0.03 + 0.7 );
            }
        }



        this.worldLayer.setPosition(
            -( this.viewX * sx - this.viewWidth / 2 ),
            -( this.viewY * sy - this.viewHeight / 2 ) );
        //this.clipLayer.setPosition(Math.frac(1-this.viewX),Math.frac(1-this.viewY));
        //this.b2w.step(1/60,8,3);
    }


    setMap( mapName ) {
        const map = new _gameMap__WEBPACK_IMPORTED_MODULE_4__["default"]();

        //TODO: 아직 안만들었나
        map.loadFile( mapName );
        setMap.call( this,map );
    }


    //-------------------------------------------------------------------------------------------------------------------
    // 생성된 맵 로더
    //-------------------------------------------------------------------------------------------------------------------

    setMapUrl( url ) {
        const loader = new UrlLoader( url )
            .on( "complete",( e ) => {
                const s = e.data;
                const map = new _gameMap__WEBPACK_IMPORTED_MODULE_4__["default"]( );

                map.loadString( s );
                setMap.call( this,map );
            } )
            .on( "error",() => {
                console.log( "UrlLoader ERROR" );
            } );

        return loader;
    }

    /*
    setByWorldGen(worldGenConfig) {

        let worldGen = new WorldGenerator(worldGenConfig.width, worldGenConfig.height, worldGenConfig);
        worldGen.advanceAllStep();
        let tileMap = worldGen.makeTileMap();
        let width = worldGenConfig.width;
        let height = worldGenConfig.height;
        let lines = {};
        for (let y = 0;y <= height;y++) {
            let line = {};
            for (let x = 0;x <= width;x++) {
                let c = tileMap.getValue(x, y);
                line[line.length + 1] = c;
            }
            lines.push(line.join());
        }

        let s = lines.join("\n");
        let map = new GameMap();
        map.loadString(s);
        setMap(this,map);
	}
	*/

    //-------------------------------------------------------------------------------------------------------------------
    // 스트링 맵 로더
    //-------------------------------------------------------------------------------------------------------------------

    setMapString( s ) {
        const map = new _gameMap__WEBPACK_IMPORTED_MODULE_4__["default"]( );

        map.loadString( s );
        setMap.call( this,map );
    }


    //-------------------------------------------------------------------------------------------------------------------
    // 좌표계 변환 함수들
    //-------------------------------------------------------------------------------------------------------------------

    tileToWorld( tileX,tileY ) {
        return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point(
            Math.floor( tileX ) * _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth,
            Math.floor( tileY ) * _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight
        );
    }

    tileCenterToWorld( tileX,tileY ) {
        return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point(
            Math.floor( tileX ) * _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth + _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth * 0.5,
            Math.floor( tileY ) * _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight + _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight * 0.5
        );
    }

    worldToTile( px,py ) {
        return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point(
            Math.floor( px / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth ),
            Math.floor( py / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight )
        );
    }

    stageToTile( px,py ) {
        const sx = 1 / this.zoom;
        const sy = 1 / this.zoom;
        const vcw = this.viewWidth / 2 / sx;
        const vch = this.viewHeight / 2 / sy;

        return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point(
            Math.floor( ( px / sx + this.viewX - vcw ) / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth ), 
            Math.floor( ( py / sy + this.viewY - vch ) / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight )
        );
    }

    stageToWorld( px,py ) {
        const sx = 1 / this.zoom;
        const sy = 1 / this.zoom;
        const viewCenterX = this.viewWidth / 2 / sx;
        const viewCenterY = this.viewHeight / 2 / sy;

        return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point(
            px / sx + this.viewX - viewCenterX, 
            py / sy + this.viewY - viewCenterY
        );
    }

    worldToStage( px,py ) {
        const sx = 1 / this.zoom;
        const sy = 1 / this.zoom;
        const viewCenterX = this.viewWidth / 2 / sx;
        const viewCenterY = this.viewHeight / 2 / sy;

        return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( 
            px - this.viewX + viewCenterX, 
            py - this.viewY + viewCenterY
        );
    }

    tileToStage( tileX,tileY ) {
        const sx = 1 / this.zoom;
        const sy = 1 / this.zoom;
        const vcw = this.viewWidth / 2 / sx;
        const vch = this.viewHeight / 2 / sy;

        return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point(
            Math.floor( tileX - 1 ) * _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth - this.viewX + vcw, 
            Math.floor( tileY - 1 ) * _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight - this.viewY + vch
        );
    }

    tileCenterToStage( tileX,tileY ) {
        const sx = 1 / this.zoom;
        const sy = 1 / this.zoom;
        const vcw = this.viewWidth / 2 / sx;
        const vch = this.viewHeight / 2 / sy;

        return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point(
            Math.floor( tileX ) * _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth + _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth * 0.5 - this.viewX + vcw,
            Math.floor( tileY ) * _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight + _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight * 0.5 - this.viewY + vch
        );
    }

    getDistance( x,y,x2,y2 ) {
        return Math.sqrt( ( x2 - x ) * ( x2 - x ) + ( y2 - y ) * ( y2 - y ) );
    }

    getDistanceBetweenEntities( c1,c2 ) {
        return this.getDistance( c1.tileX,c1.tileY,c2.tileX,c2.tileY );
    }


    //-------------------------------------------------------------------------------------------------------------------
    // 월드가 대신 처리해주는 함수들
    //-------------------------------------------------------------------------------------------------------------------


    addLog( ...args ) {
        _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].addLog( ...args );
    }


    //-------------------------------------------------------------------------------------------------------------------
    // 월드 삭제
    //-------------------------------------------------------------------------------------------------------------------
    // GLOBAL.world 에 대입한다고 가정하고 있음
    //

    destroy( remainSprite ) {
        if ( _global__WEBPACK_IMPORTED_MODULE_14__["default"].world == this ) {
            _global__WEBPACK_IMPORTED_MODULE_14__["default"].world = null;
        }
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.stopAllSingleSound();
        if ( !remainSprite ) {
            this.removeFromParent();
        }
        //collectgarbage();
        console.log( "월드를 성공적으로 파괴했습니다." );
    }






    //-------------------------------------------------------------------------------------------------------------------
    // 맵 정보, 이벤트 처리
    //-------------------------------------------------------------------------------------------------------------------

    showMapInfo( tileX,tileY ) {
        if ( _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].isSidePanelOpened() ) {
            return;
        }

        const mapEvents = [];
        let curEvent;

        const showEvent = ( num ) => {
            num = num != null ? num : curEvent;
            curEvent = num;
            const t = mapEvents[num];

            t.button2 = () => {
                if ( num > 1 ) {
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 100,() => {
                        showEvent( num - 1 );
                    } );
                }
            };
            if ( mapEvents.length > 1 ) {
                t.needNext = true;
            } else {
                t.needNext = false;
            }
            _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].showInfo( t );
        };


        const pr = this.getProperty( tileX,tileY );

        if ( pr.char == ">" ) {
            mapEvents[mapEvents.length] = {
                type:       "interact",
                buttonType: "yesno",
                button1:    () => {
                    //showAgain();
                    _global__WEBPACK_IMPORTED_MODULE_14__["default"].world.entityManager.removeEntity( _global__WEBPACK_IMPORTED_MODULE_14__["default"].player );
                    this.destroy( true );
                    this.options.floor = this.options.floor + 1;
                    _global__WEBPACK_IMPORTED_MODULE_14__["default"].world = new World( this.options );
                    //GLOBAL.stage.addChildAt(GLOBAL.world,0);
                    _global__WEBPACK_IMPORTED_MODULE_14__["default"].sceneManager.changeScene( _global__WEBPACK_IMPORTED_MODULE_14__["default"].world,5000, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.SceneManager.circleInOut,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.linear );
                    _global__WEBPACK_IMPORTED_MODULE_14__["default"].player.setTileXy( _global__WEBPACK_IMPORTED_MODULE_14__["default"].world.enterX,_global__WEBPACK_IMPORTED_MODULE_14__["default"].world.enterY );
                    _global__WEBPACK_IMPORTED_MODULE_14__["default"].player.resetPositionAndColor();
                    _global__WEBPACK_IMPORTED_MODULE_14__["default"].world.entityManager.addEntity( _global__WEBPACK_IMPORTED_MODULE_14__["default"].player );
                    _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].actionSelector.select();
                    _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].cursor.lock();
                    _global__WEBPACK_IMPORTED_MODULE_14__["default"].world.on( "enterEnd",() => {
                        console.log( "이동완료" );
                        _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].cursor.unlock();
                        _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].cursor.resetScale();
                    } );
                },
                text: undefined
            };
            if ( this.options.type == "dungeon" ) {
                mapEvents[mapEvents.length - 1].text = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.hangul.format( "지하 %d층으로 내려가겠습니까?",this.options.floor + 1 );
            } else {
                mapEvents[mapEvents.length - 1].text = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.hangul.format( "%s 던전에 들어가겠습니까?","개발중" );
            }
        }
        const doors = [];

        if ( this.getProperty( tileX - 1,tileY ).char == "E" ) {
            doors.push( ["서쪽", -1, 0] );
        }
        if ( this.getProperty( tileX,tileY + 1 ).char == "E" ) {
            doors.push( ["남쪽", 0, 1] );
        }
        if ( this.getProperty( tileX + 1,tileY ).char == "E" ) {
            doors.push( ["동쪽", 1, 0] );
        }
        if ( this.getProperty( tileX,tileY - 1 ).char == "E" ) {
            doors.push( ["북쪽", 0, -1] );
        }
        if ( doors.length > 0 ) {
            for ( const i in doors ) {
                const v = doors[i];

                mapEvents[mapEvents.length] = {
                    type:       "interact",
                    text:       `${v[0]} 방향의 문을 열겠습니까?`,
                    buttonType: "yesno",
                    button1:    () => {
                        _global__WEBPACK_IMPORTED_MODULE_14__["default"].player.openDoor( tileX + v[1],tileY + v[2] );
                    },
                };
            }
            if ( doors.length == 1 ) {
                mapEvents[0].text = "문을 열겠습니까?";
            }
        }
		
        const items = this.entityManager.getItems( tileX,tileY );

        if ( items ) {
            for ( let i = 0; i < items.length; i++ ) {
                mapEvents[mapEvents.length] = {
                    type:    "item",
                    item:    items[items.length - 1],
                    button1: () => {
                        _global__WEBPACK_IMPORTED_MODULE_14__["default"].player.pickUpItem( items[items.length - 1] );
                    },
                };
            }
        }
        if ( mapEvents.length > 0 ) {
            showEvent( mapEvents.length - 1 );
        } else {
            //log("표시할 맵정보가 없음");
        }
        _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].cursor.showAutoAction();
    }


    openDoor( x,y ) {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( "sound/door_open.wav" );
        this.map.setDataByChar( x,y,"D" );
        this.map.processVType( x,y );
        console.log( "문열기",this.map.getProperty( x,y ).char,_global__WEBPACK_IMPORTED_MODULE_14__["default"].player.tileX,_global__WEBPACK_IMPORTED_MODULE_14__["default"].player.tileY,x,y );
        //this.map.getProperty(x,y).revealed=false;
        this.sightManager.revealTile( x,y,true );
        this.sightManager.invalidateEye();
        this.sightManager.invalidateVisibility();
        this.sightManager.refreshEntityVisibility();
    }


    //-------------------------------------------------------------------------------------------------------------------
    // 월드 날짜 밤,낮,날씨
    //-------------------------------------------------------------------------------------------------------------------

    processDateTime() {
        const curDateTime = this.dateTimeOrigin + this.turn;
        const time = ( curDateTime / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.turnPerDay ) * 24;
        const hour = Math.floor( ( time % 24 ) );
        const minute = Math.floor( ( time * 60 ) % 60 );
        const rain = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( this.rain + ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -40,35 ) / 100 ),-1,1.3 );
        const rainData = { radius: 3, c1: [1, 1, 1, 0.2], c2: [1, 1, 1, 0.5] };
		
        if ( this.type != "wildness" ) {
            this.time = time;
            this.rain = rain;

            return;
        }
        if ( this.rain <= 0.2 && rain > 0.2 ) {
            _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].addLog( "비가 오기 시작한다." );
        } else if ( this.rain >= -0.2 && rain < -0.2 ) {
            _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].addLog( "비가 그쳤다." );
        }
        if ( Math.floor( ( this.time % 24 ) ) < 6 && hour >= 6 ) {
            if ( rain <= 0 ) {
                _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].addLog( "태양이 떠오르고 있다." );
            } else {
                _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].addLog( "날이 밝았다." );
            }
        }
        if ( Math.floor( ( this.time % 24 ) ) < 18 && hour >= 18 ) {
            if ( rain <= 0 ) {
                _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].addLog( "태양이 지고 있다." );
            } else {
                _global__WEBPACK_IMPORTED_MODULE_14__["default"]["interface"].addLog( "날이 저물었다." );
            }
        }

        if ( this.__tweenTime ) {
            this.__tweenTime.stop();
        }
        this.time = time;
        this.rain = rain;
        this.__tweenTime = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Tween( this,500,{ __time: time,__rain: rain } )
            .onChange( () => {
                let rate,s1,s2;

                for ( const i in _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.timeTable ) {
                    const v = _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.timeTable[i];

                    if ( v.time > ( this.__time % 24 ) ) {
                        s1 = _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.timeTable[parseInt( i ) - 1];
                        s2 = _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.timeTable[i];
                        rate = ( ( this.__time % 24 ) - s1.time ) / ( s2.time - s1.time );
                        break;
                    }
                }
                const r = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( s1.radius,s2.radius,rate );
                let c1 = [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( s1.c1[1], s2.c1[1], rate ),
                          _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( s1.c1[2], s2.c1[2], rate ),
                          _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( s1.c1[3], s2.c1[3], rate ),
                          _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( s1.c1[4], s2.c1[4], rate )];
                let c2 = [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( s1.c2[1], s2.c2[1], rate ),
                          _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( s1.c2[2], s2.c2[2], rate ),
                          _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( s1.c2[3], s2.c2[3], rate ),
                          _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( s1.c2[4], s2.c2[4], rate )];
                const rate2 = Math.min( 1,this.__rain );

                //r = Utils.lerp(r,rainData.radius,rate2);
                c1 = [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( c1[1], rainData.c1[1], rate2 ),
                      _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( c1[2], rainData.c1[2], rate2 ),
                      _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( c1[3], rainData.c1[3], rate2 ),
                      _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( c1[4], rainData.c1[4], rate2 )];
                c2 = [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( c2[1], rainData.c2[1], rate2 ),
                      _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( c2[2], rainData.c2[2], rate2 ),
                      _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( c2[3], rainData.c2[3], rate2 ),
                      _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( c2[4], rainData.c2[4], rate2 )];
                this.viewRadius = r;
                this.__envColor1 = c1;
                this.__envColor2 = c2;
                this.sightManager.updateShaderViewInfo();
            } );
    }

    renderWhetherEffect( dx,dy ) {
        const lightningData = { radius: 15, c1: [1, 1, 1, 1], c2: [1, 1, 1, 1] };

        if ( this.type == "wildness" && this.__rain > 0 ) {
            const rain = Math.min( 1,this.__rain );
            const lightningRate = ( 101 - 100 * rain ) * 80;

            if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( lightningRate ) == 1 && this.lightningTimer != null ) {
                const r = this.viewRadius;
                const c1 = this.__envColor1;
                const c2 = this.__envColor2;

                this.viewRadius = lightningData.radius;
                this.__envColor1 = lightningData.c1;
                this.__envColor2 = lightningData.c2;
                this.sightManager.updateShaderViewInfo();
                this.lightningTimer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 20,() => {
                    this.viewRadius = r;
                    this.__envColor1 = c1;
                    this.__envColor2 = c2;
                    this.sightManager.updateShaderViewInfo();
                    this.lightningTimer = null;
                } );
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 3000 ),() => {
                    const sc = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound( "sound/env_lightning.wav" ).play( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 5000 ) );

                    if ( sc ) {
                        sc.setPitch( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 80,100 ) * 0.01 );
                        sc.setVolume( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 50,100 ) * 0.01 );
                    }
                } );
            }

            const [x1,y1] = [this.viewX - this.viewWidth / 2 / 0.5,this.viewY - this.viewHeight / 2 / 0.5];
            const [x2,y2] = [this.viewX + this.viewWidth / 2 / 0.5,this.viewY + this.viewHeight / 2 / 0.5];
            let viewX1,viewY1,viewX2,viewY2;

            viewX1 = Math.floor( x1 / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth ) + 1;
            viewY1 = Math.floor( y1 / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight ) + 1;
            viewX2 = Math.floor( x2 / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth ) + 1;
            viewY2 = Math.floor( y2 / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight ) + 1;
            if ( !this.rainSprite ) {
                this.rainSprite = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Particles();
                this.rainSprite.setTexture( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( "rainDrop.png",false,{ format: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TextureBase.RGBA4444 } ) );
                this.effectLayer.addChild( this.rainSprite );
            }
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSingleSound( "sound/loop_rain.wav",this.rain,true );
            const angle = Math.atan2( -dx,20 ) + ( 90 * Math.PI / 180 );
            const eyeTx = this.eyeX / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth;
            const eyeTy = this.eyeY / _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight;
            const size = 16 * this.getScaleX();//*CONFIG.PARTICLE_SCALE;
            const dropRate = 101 - 100 * Math.pow( rain,2 );
            const rainRadius = this.viewRadius ^ 2;

            for ( let y = viewY1; y <= viewY2; y++ ) {
                for ( let x = viewX1; x <= viewX2; x++ ) {
                    const xx = ( x - 1 ) * _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileWidth );
                    const yy = ( y - 1 ) * _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( _config__WEBPACK_IMPORTED_MODULE_15__["default"].World.tileHeight );
                    const speed = 8;
                    const pr = this.getProperty( x,y );

                    if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( dropRate ) == 1 &&
						( x - eyeTx ) ** 2 + ( y - eyeTy ) ** 2 <= rainRadius &&
						pr.revealed && !pr.noRain ) {
                        this.rainSprite.addParticles(
                            [{	x:      xx,
                               y:      yy - 2 * speed,
                               size:   size,
                               angle:  ( angle / Math.PI * 180 ) + 90,//+Utils.random(-10,10),
                               ttl:    3,
                               speedX: Math.cos( angle ) * speed,
                               speedY: Math.sin( angle ) * speed,
                               color:  0xffffff,
                               alpha:  0.4,
                            }] );
                    }
                }
            }
        }
    }

    getDateTime() {
        const day = Math.floor( this.time / 24 );
        const hour = Math.floor( this.time % 24 );
        const min = Math.floor( ( this.time * 60 ) % 60 );
        const sec = Math.floor( ( this.time * 60 * 60 ) % 60 );
        const t = { day: day, hour: hour, min: min, sec: sec };

        return t;
    }

    isRainy() {
        return this.rain * 100 > 20;
    }
}




/***/ }),

/***/ "./node_modules/eventemitter3/index.js":
/*!*********************************************!*\
  !*** ./node_modules/eventemitter3/index.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ "./node_modules/twgl.js/dist/4.x/twgl-full.module.js":
/*!***********************************************************!*\
  !*** ./node_modules/twgl.js/dist/4.x/twgl-full.module.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addExtensionsToContext": () => (/* binding */ addExtensionsToContext),
/* harmony export */   "attributes": () => (/* binding */ attributes),
/* harmony export */   "bindFramebufferInfo": () => (/* binding */ bindFramebufferInfo),
/* harmony export */   "bindTransformFeedbackInfo": () => (/* binding */ bindTransformFeedbackInfo),
/* harmony export */   "bindUniformBlock": () => (/* binding */ bindUniformBlock),
/* harmony export */   "canFilter": () => (/* binding */ canFilter),
/* harmony export */   "canGenerateMipmap": () => (/* binding */ canGenerateMipmap),
/* harmony export */   "createAttribsFromArrays": () => (/* binding */ createAttribsFromArrays),
/* harmony export */   "createAttributeSetters": () => (/* binding */ createAttributeSetters),
/* harmony export */   "createBufferFromArray": () => (/* binding */ createBufferFromArray),
/* harmony export */   "createBufferFromTypedArray": () => (/* binding */ createBufferFromTypedArray),
/* harmony export */   "createBufferInfoFromArrays": () => (/* binding */ createBufferInfoFromArrays),
/* harmony export */   "createBuffersFromArrays": () => (/* binding */ createBuffersFromArrays),
/* harmony export */   "createFramebufferInfo": () => (/* binding */ createFramebufferInfo),
/* harmony export */   "createProgram": () => (/* binding */ createProgram),
/* harmony export */   "createProgramFromScripts": () => (/* binding */ createProgramFromScripts),
/* harmony export */   "createProgramFromSources": () => (/* binding */ createProgramFromSources),
/* harmony export */   "createProgramInfo": () => (/* binding */ createProgramInfo),
/* harmony export */   "createProgramInfoFromProgram": () => (/* binding */ createProgramInfoFromProgram),
/* harmony export */   "createSampler": () => (/* binding */ createSampler),
/* harmony export */   "createSamplers": () => (/* binding */ createSamplers),
/* harmony export */   "createTexture": () => (/* binding */ createTexture),
/* harmony export */   "createTextures": () => (/* binding */ createTextures),
/* harmony export */   "createTransformFeedback": () => (/* binding */ createTransformFeedback),
/* harmony export */   "createTransformFeedbackInfo": () => (/* binding */ createTransformFeedbackInfo),
/* harmony export */   "createUniformBlockInfo": () => (/* binding */ createUniformBlockInfo),
/* harmony export */   "createUniformBlockInfoFromProgram": () => (/* binding */ createUniformBlockInfoFromProgram),
/* harmony export */   "createUniformBlockSpecFromProgram": () => (/* binding */ createUniformBlockSpecFromProgram),
/* harmony export */   "createUniformSetters": () => (/* binding */ createUniformSetters),
/* harmony export */   "createVAOAndSetAttributes": () => (/* binding */ createVAOAndSetAttributes),
/* harmony export */   "createVAOFromBufferInfo": () => (/* binding */ createVAOFromBufferInfo),
/* harmony export */   "createVertexArrayInfo": () => (/* binding */ createVertexArrayInfo),
/* harmony export */   "draw": () => (/* binding */ draw),
/* harmony export */   "drawBufferInfo": () => (/* binding */ drawBufferInfo),
/* harmony export */   "drawObjectList": () => (/* binding */ drawObjectList),
/* harmony export */   "framebuffers": () => (/* binding */ framebuffers),
/* harmony export */   "getArray_": () => (/* binding */ getArray),
/* harmony export */   "getBytesPerElementForInternalFormat": () => (/* binding */ getBytesPerElementForInternalFormat),
/* harmony export */   "getContext": () => (/* binding */ getContext),
/* harmony export */   "getFormatAndTypeForInternalFormat": () => (/* binding */ getFormatAndTypeForInternalFormat),
/* harmony export */   "getGLTypeForTypedArray": () => (/* binding */ getGLTypeForTypedArray),
/* harmony export */   "getGLTypeForTypedArrayType": () => (/* binding */ getGLTypeForTypedArrayType),
/* harmony export */   "getNumComponentsForFormat": () => (/* binding */ getNumComponentsForFormat),
/* harmony export */   "getNumComponents_": () => (/* binding */ getNumComponents),
/* harmony export */   "getTypedArrayTypeForGLType": () => (/* binding */ getTypedArrayTypeForGLType),
/* harmony export */   "getWebGLContext": () => (/* binding */ getWebGLContext),
/* harmony export */   "glEnumToString": () => (/* binding */ glEnumToString),
/* harmony export */   "isArrayBuffer": () => (/* binding */ isArrayBuffer),
/* harmony export */   "isWebGL1": () => (/* binding */ isWebGL1),
/* harmony export */   "isWebGL2": () => (/* binding */ isWebGL2),
/* harmony export */   "loadTextureFromUrl": () => (/* binding */ loadTextureFromUrl),
/* harmony export */   "m4": () => (/* binding */ m4),
/* harmony export */   "primitives": () => (/* binding */ primitives),
/* harmony export */   "programs": () => (/* binding */ programs),
/* harmony export */   "resizeCanvasToDisplaySize": () => (/* binding */ resizeCanvasToDisplaySize),
/* harmony export */   "resizeFramebufferInfo": () => (/* binding */ resizeFramebufferInfo),
/* harmony export */   "resizeTexture": () => (/* binding */ resizeTexture),
/* harmony export */   "setAttribInfoBufferFromArray": () => (/* binding */ setAttribInfoBufferFromArray),
/* harmony export */   "setAttributeDefaults_": () => (/* binding */ setDefaults),
/* harmony export */   "setAttributePrefix": () => (/* binding */ setAttributePrefix),
/* harmony export */   "setAttributes": () => (/* binding */ setAttributes),
/* harmony export */   "setBlockUniforms": () => (/* binding */ setBlockUniforms),
/* harmony export */   "setBuffersAndAttributes": () => (/* binding */ setBuffersAndAttributes),
/* harmony export */   "setDefaultTextureColor": () => (/* binding */ setDefaultTextureColor),
/* harmony export */   "setDefaults": () => (/* binding */ setDefaults$2),
/* harmony export */   "setEmptyTexture": () => (/* binding */ setEmptyTexture),
/* harmony export */   "setSamplerParameters": () => (/* binding */ setSamplerParameters),
/* harmony export */   "setTextureDefaults_": () => (/* binding */ setDefaults$1),
/* harmony export */   "setTextureFilteringForSize": () => (/* binding */ setTextureFilteringForSize),
/* harmony export */   "setTextureFromArray": () => (/* binding */ setTextureFromArray),
/* harmony export */   "setTextureFromElement": () => (/* binding */ setTextureFromElement),
/* harmony export */   "setTextureParameters": () => (/* binding */ setTextureParameters),
/* harmony export */   "setUniformBlock": () => (/* binding */ setUniformBlock),
/* harmony export */   "setUniforms": () => (/* binding */ setUniforms),
/* harmony export */   "setUniformsAndBindTextures": () => (/* binding */ setUniformsAndBindTextures),
/* harmony export */   "textures": () => (/* binding */ textures),
/* harmony export */   "typedarrays": () => (/* binding */ typedarrays),
/* harmony export */   "utils": () => (/* binding */ utils),
/* harmony export */   "v3": () => (/* binding */ v3),
/* harmony export */   "vertexArrays": () => (/* binding */ vertexArrays)
/* harmony export */ });
/* @license twgl.js 4.21.2 Copyright (c) 2015, Gregg Tavares All Rights Reserved.
Available via the MIT license.
see: http://github.com/greggman/twgl.js for details */
/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 *
 * Vec3 math math functions.
 *
 * Almost all functions take an optional `dst` argument. If it is not passed in the
 * functions will create a new Vec3. In other words you can do this
 *
 *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.
 *
 * or
 *
 *     var v = v3.create();
 *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v
 *
 * The first style is often easier but depending on where it's used it generates garbage where
 * as there is almost never allocation with the second style.
 *
 * It is always save to pass any vector as the destination. So for example
 *
 *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1
 *
 * @module twgl/v3
 */

let VecType = Float32Array;

/**
 * A JavaScript array with 3 values or a Float32Array with 3 values.
 * When created by the library will create the default type which is `Float32Array`
 * but can be set by calling {@link module:twgl/v3.setDefaultType}.
 * @typedef {(number[]|Float32Array)} Vec3
 * @memberOf module:twgl/v3
 */

/**
 * Sets the type this library creates for a Vec3
 * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`
 * @return {constructor} previous constructor for Vec3
 * @memberOf module:twgl/v3
 */
function setDefaultType(ctor) {
  const oldType = VecType;
  VecType = ctor;
  return oldType;
}

/**
 * Creates a vec3; may be called with x, y, z to set initial values.
 * @param {number} [x] Initial x value.
 * @param {number} [y] Initial y value.
 * @param {number} [z] Initial z value.
 * @return {module:twgl/v3.Vec3} the created vector
 * @memberOf module:twgl/v3
 */
function create(x, y, z) {
  const dst = new VecType(3);
  if (x) {
    dst[0] = x;
  }
  if (y) {
    dst[1] = y;
  }
  if (z) {
    dst[2] = z;
  }
  return dst;
}

/**
 * Adds two vectors; assumes a and b have the same dimension.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.
 * @memberOf module:twgl/v3
 */
function add(a, b, dst) {
  dst = dst || new VecType(3);

  dst[0] = a[0] + b[0];
  dst[1] = a[1] + b[1];
  dst[2] = a[2] + b[2];

  return dst;
}

/**
 * Subtracts two vectors.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.
 * @memberOf module:twgl/v3
 */
function subtract(a, b, dst) {
  dst = dst || new VecType(3);

  dst[0] = a[0] - b[0];
  dst[1] = a[1] - b[1];
  dst[2] = a[2] - b[2];

  return dst;
}

/**
 * Performs linear interpolation on two vectors.
 * Given vectors a and b and interpolation coefficient t, returns
 * a + t * (b - a).
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {number} t Interpolation coefficient.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The linear interpolated result.
 * @memberOf module:twgl/v3
 */
function lerp(a, b, t, dst) {
  dst = dst || new VecType(3);

  dst[0] = a[0] + t * (b[0] - a[0]);
  dst[1] = a[1] + t * (b[1] - a[1]);
  dst[2] = a[2] + t * (b[2] - a[2]);

  return dst;
}

/**
 * Performs linear interpolation on two vectors.
 * Given vectors a and b and interpolation coefficient vector t, returns
 * a + t * (b - a).
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} the linear interpolated result.
 * @memberOf module:twgl/v3
 */
function lerpV(a, b, t, dst) {
  dst = dst || new VecType(3);

  dst[0] = a[0] + t[0] * (b[0] - a[0]);
  dst[1] = a[1] + t[1] * (b[1] - a[1]);
  dst[2] = a[2] + t[2] * (b[2] - a[2]);

  return dst;
}

/**
 * Return max values of two vectors.
 * Given vectors a and b returns
 * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The max components vector.
 * @memberOf module:twgl/v3
 */
function max(a, b, dst) {
  dst = dst || new VecType(3);

  dst[0] = Math.max(a[0], b[0]);
  dst[1] = Math.max(a[1], b[1]);
  dst[2] = Math.max(a[2], b[2]);

  return dst;
}

/**
 * Return min values of two vectors.
 * Given vectors a and b returns
 * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The min components vector.
 * @memberOf module:twgl/v3
 */
function min(a, b, dst) {
  dst = dst || new VecType(3);

  dst[0] = Math.min(a[0], b[0]);
  dst[1] = Math.min(a[1], b[1]);
  dst[2] = Math.min(a[2], b[2]);

  return dst;
}

/**
 * Multiplies a vector by a scalar.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {number} k The scalar.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The scaled vector.
 * @memberOf module:twgl/v3
 */
function mulScalar(v, k, dst) {
  dst = dst || new VecType(3);

  dst[0] = v[0] * k;
  dst[1] = v[1] * k;
  dst[2] = v[2] * k;

  return dst;
}

/**
 * Divides a vector by a scalar.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {number} k The scalar.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The scaled vector.
 * @memberOf module:twgl/v3
 */
function divScalar(v, k, dst) {
  dst = dst || new VecType(3);

  dst[0] = v[0] / k;
  dst[1] = v[1] / k;
  dst[2] = v[2] / k;

  return dst;
}

/**
 * Computes the cross product of two vectors; assumes both vectors have
 * three entries.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The vector of a cross b.
 * @memberOf module:twgl/v3
 */
function cross(a, b, dst) {
  dst = dst || new VecType(3);

  const t1 = a[2] * b[0] - a[0] * b[2];
  const t2 = a[0] * b[1] - a[1] * b[0];
  dst[0] = a[1] * b[2] - a[2] * b[1];
  dst[1] = t1;
  dst[2] = t2;

  return dst;
}

/**
 * Computes the dot product of two vectors; assumes both vectors have
 * three entries.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @return {number} dot product
 * @memberOf module:twgl/v3
 */
function dot(a, b) {
  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);
}

/**
 * Computes the length of vector
 * @param {module:twgl/v3.Vec3} v vector.
 * @return {number} length of vector.
 * @memberOf module:twgl/v3
 */
function length$1(v) {
  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
}

/**
 * Computes the square of the length of vector
 * @param {module:twgl/v3.Vec3} v vector.
 * @return {number} square of the length of vector.
 * @memberOf module:twgl/v3
 */
function lengthSq(v) {
  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
}

/**
 * Computes the distance between 2 points
 * @param {module:twgl/v3.Vec3} a vector.
 * @param {module:twgl/v3.Vec3} b vector.
 * @return {number} distance between a and b
 * @memberOf module:twgl/v3
 */
function distance(a, b) {
  const dx = a[0] - b[0];
  const dy = a[1] - b[1];
  const dz = a[2] - b[2];
  return Math.sqrt(dx * dx + dy * dy + dz * dz);
}

/**
 * Computes the square of the distance between 2 points
 * @param {module:twgl/v3.Vec3} a vector.
 * @param {module:twgl/v3.Vec3} b vector.
 * @return {number} square of the distance between a and b
 * @memberOf module:twgl/v3
 */
function distanceSq(a, b) {
  const dx = a[0] - b[0];
  const dy = a[1] - b[1];
  const dz = a[2] - b[2];
  return dx * dx + dy * dy + dz * dz;
}

/**
 * Divides a vector by its Euclidean length and returns the quotient.
 * @param {module:twgl/v3.Vec3} a The vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The normalized vector.
 * @memberOf module:twgl/v3
 */
function normalize(a, dst) {
  dst = dst || new VecType(3);

  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
  const len = Math.sqrt(lenSq);
  if (len > 0.00001) {
    dst[0] = a[0] / len;
    dst[1] = a[1] / len;
    dst[2] = a[2] / len;
  } else {
    dst[0] = 0;
    dst[1] = 0;
    dst[2] = 0;
  }

  return dst;
}

/**
 * Negates a vector.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} -v.
 * @memberOf module:twgl/v3
 */
function negate(v, dst) {
  dst = dst || new VecType(3);

  dst[0] = -v[0];
  dst[1] = -v[1];
  dst[2] = -v[2];

  return dst;
}

/**
 * Copies a vector.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} A copy of v.
 * @memberOf module:twgl/v3
 */
function copy(v, dst) {
  dst = dst || new VecType(3);

  dst[0] = v[0];
  dst[1] = v[1];
  dst[2] = v[2];

  return dst;
}

/**
 * Multiplies a vector by another vector (component-wise); assumes a and
 * b have the same length.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The vector of products of entries of a and
 *     b.
 * @memberOf module:twgl/v3
 */
function multiply(a, b, dst) {
  dst = dst || new VecType(3);

  dst[0] = a[0] * b[0];
  dst[1] = a[1] * b[1];
  dst[2] = a[2] * b[2];

  return dst;
}

/**
 * Divides a vector by another vector (component-wise); assumes a and
 * b have the same length.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and
 *     b.
 * @memberOf module:twgl/v3
 */
function divide(a, b, dst) {
  dst = dst || new VecType(3);

  dst[0] = a[0] / b[0];
  dst[1] = a[1] / b[1];
  dst[2] = a[2] / b[2];

  return dst;
}

var v3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  add: add,
  copy: copy,
  create: create,
  cross: cross,
  distance: distance,
  distanceSq: distanceSq,
  divide: divide,
  divScalar: divScalar,
  dot: dot,
  lerp: lerp,
  lerpV: lerpV,
  length: length$1,
  lengthSq: lengthSq,
  max: max,
  min: min,
  mulScalar: mulScalar,
  multiply: multiply,
  negate: negate,
  normalize: normalize,
  setDefaultType: setDefaultType,
  subtract: subtract
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * 4x4 Matrix math math functions.
 *
 * Almost all functions take an optional `dst` argument. If it is not passed in the
 * functions will create a new matrix. In other words you can do this
 *
 *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix
 *
 * or
 *
 *     const mat = m4.create();
 *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.
 *
 * The first style is often easier but depending on where it's used it generates garbage where
 * as there is almost never allocation with the second style.
 *
 * It is always save to pass any matrix as the destination. So for example
 *
 *     const mat = m4.identity();
 *     const trans = m4.translation([1, 2, 3]);
 *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.
 *
 * @module twgl/m4
 */
let MatType = Float32Array;

/**
 * A JavaScript array with 16 values or a Float32Array with 16 values.
 * When created by the library will create the default type which is `Float32Array`
 * but can be set by calling {@link module:twgl/m4.setDefaultType}.
 * @typedef {(number[]|Float32Array)} Mat4
 * @memberOf module:twgl/m4
 */

/**
 * Sets the type this library creates for a Mat4
 * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`
 * @return {constructor} previous constructor for Mat4
 * @memberOf module:twgl/m4
 */
function setDefaultType$1(ctor) {
  const oldType = MatType;
  MatType = ctor;
  return oldType;
}

/**
 * Negates a matrix.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} -m.
 * @memberOf module:twgl/m4
 */
function negate$1(m, dst) {
  dst = dst || new MatType(16);

  dst[ 0] = -m[ 0];
  dst[ 1] = -m[ 1];
  dst[ 2] = -m[ 2];
  dst[ 3] = -m[ 3];
  dst[ 4] = -m[ 4];
  dst[ 5] = -m[ 5];
  dst[ 6] = -m[ 6];
  dst[ 7] = -m[ 7];
  dst[ 8] = -m[ 8];
  dst[ 9] = -m[ 9];
  dst[10] = -m[10];
  dst[11] = -m[11];
  dst[12] = -m[12];
  dst[13] = -m[13];
  dst[14] = -m[14];
  dst[15] = -m[15];

  return dst;
}

/**
 * Copies a matrix.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} A copy of m.
 * @memberOf module:twgl/m4
 */
function copy$1(m, dst) {
  dst = dst || new MatType(16);

  dst[ 0] = m[ 0];
  dst[ 1] = m[ 1];
  dst[ 2] = m[ 2];
  dst[ 3] = m[ 3];
  dst[ 4] = m[ 4];
  dst[ 5] = m[ 5];
  dst[ 6] = m[ 6];
  dst[ 7] = m[ 7];
  dst[ 8] = m[ 8];
  dst[ 9] = m[ 9];
  dst[10] = m[10];
  dst[11] = m[11];
  dst[12] = m[12];
  dst[13] = m[13];
  dst[14] = m[14];
  dst[15] = m[15];

  return dst;
}

/**
 * Creates an n-by-n identity matrix.
 *
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.
 * @memberOf module:twgl/m4
 */
function identity(dst) {
  dst = dst || new MatType(16);

  dst[ 0] = 1;
  dst[ 1] = 0;
  dst[ 2] = 0;
  dst[ 3] = 0;
  dst[ 4] = 0;
  dst[ 5] = 1;
  dst[ 6] = 0;
  dst[ 7] = 0;
  dst[ 8] = 0;
  dst[ 9] = 0;
  dst[10] = 1;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;

  return dst;
}

/**
 * Takes the transpose of a matrix.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The transpose of m.
 * @memberOf module:twgl/m4
 */
 function transpose(m, dst) {
  dst = dst || new MatType(16);
  if (dst === m) {
    let t;

    t = m[1];
    m[1] = m[4];
    m[4] = t;

    t = m[2];
    m[2] = m[8];
    m[8] = t;

    t = m[3];
    m[3] = m[12];
    m[12] = t;

    t = m[6];
    m[6] = m[9];
    m[9] = t;

    t = m[7];
    m[7] = m[13];
    m[13] = t;

    t = m[11];
    m[11] = m[14];
    m[14] = t;
    return dst;
  }

  const m00 = m[0 * 4 + 0];
  const m01 = m[0 * 4 + 1];
  const m02 = m[0 * 4 + 2];
  const m03 = m[0 * 4 + 3];
  const m10 = m[1 * 4 + 0];
  const m11 = m[1 * 4 + 1];
  const m12 = m[1 * 4 + 2];
  const m13 = m[1 * 4 + 3];
  const m20 = m[2 * 4 + 0];
  const m21 = m[2 * 4 + 1];
  const m22 = m[2 * 4 + 2];
  const m23 = m[2 * 4 + 3];
  const m30 = m[3 * 4 + 0];
  const m31 = m[3 * 4 + 1];
  const m32 = m[3 * 4 + 2];
  const m33 = m[3 * 4 + 3];

  dst[ 0] = m00;
  dst[ 1] = m10;
  dst[ 2] = m20;
  dst[ 3] = m30;
  dst[ 4] = m01;
  dst[ 5] = m11;
  dst[ 6] = m21;
  dst[ 7] = m31;
  dst[ 8] = m02;
  dst[ 9] = m12;
  dst[10] = m22;
  dst[11] = m32;
  dst[12] = m03;
  dst[13] = m13;
  dst[14] = m23;
  dst[15] = m33;

  return dst;
}

/**
 * Computes the inverse of a 4-by-4 matrix.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The inverse of m.
 * @memberOf module:twgl/m4
 */
function inverse(m, dst) {
  dst = dst || new MatType(16);

  const m00 = m[0 * 4 + 0];
  const m01 = m[0 * 4 + 1];
  const m02 = m[0 * 4 + 2];
  const m03 = m[0 * 4 + 3];
  const m10 = m[1 * 4 + 0];
  const m11 = m[1 * 4 + 1];
  const m12 = m[1 * 4 + 2];
  const m13 = m[1 * 4 + 3];
  const m20 = m[2 * 4 + 0];
  const m21 = m[2 * 4 + 1];
  const m22 = m[2 * 4 + 2];
  const m23 = m[2 * 4 + 3];
  const m30 = m[3 * 4 + 0];
  const m31 = m[3 * 4 + 1];
  const m32 = m[3 * 4 + 2];
  const m33 = m[3 * 4 + 3];
  const tmp_0  = m22 * m33;
  const tmp_1  = m32 * m23;
  const tmp_2  = m12 * m33;
  const tmp_3  = m32 * m13;
  const tmp_4  = m12 * m23;
  const tmp_5  = m22 * m13;
  const tmp_6  = m02 * m33;
  const tmp_7  = m32 * m03;
  const tmp_8  = m02 * m23;
  const tmp_9  = m22 * m03;
  const tmp_10 = m02 * m13;
  const tmp_11 = m12 * m03;
  const tmp_12 = m20 * m31;
  const tmp_13 = m30 * m21;
  const tmp_14 = m10 * m31;
  const tmp_15 = m30 * m11;
  const tmp_16 = m10 * m21;
  const tmp_17 = m20 * m11;
  const tmp_18 = m00 * m31;
  const tmp_19 = m30 * m01;
  const tmp_20 = m00 * m21;
  const tmp_21 = m20 * m01;
  const tmp_22 = m00 * m11;
  const tmp_23 = m10 * m01;

  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -
      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);
  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -
      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);
  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -
      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);
  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -
      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);

  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);

  dst[ 0] = d * t0;
  dst[ 1] = d * t1;
  dst[ 2] = d * t2;
  dst[ 3] = d * t3;
  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -
          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));
  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -
          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));
  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -
          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));
  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -
          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));
  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -
          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));
  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -
          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));
  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -
          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));
  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -
          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));
  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -
          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));
  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -
          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));
  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -
          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));
  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -
          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));

  return dst;
}

/**
 * Multiplies two 4-by-4 matrices with a on the left and b on the right
 * @param {module:twgl/m4.Mat4} a The matrix on the left.
 * @param {module:twgl/m4.Mat4} b The matrix on the right.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The matrix product of a and b.
 * @memberOf module:twgl/m4
 */
function multiply$1(a, b, dst) {
  dst = dst || new MatType(16);

  const a00 = a[0];
  const a01 = a[1];
  const a02 = a[2];
  const a03 = a[3];
  const a10 = a[ 4 + 0];
  const a11 = a[ 4 + 1];
  const a12 = a[ 4 + 2];
  const a13 = a[ 4 + 3];
  const a20 = a[ 8 + 0];
  const a21 = a[ 8 + 1];
  const a22 = a[ 8 + 2];
  const a23 = a[ 8 + 3];
  const a30 = a[12 + 0];
  const a31 = a[12 + 1];
  const a32 = a[12 + 2];
  const a33 = a[12 + 3];
  const b00 = b[0];
  const b01 = b[1];
  const b02 = b[2];
  const b03 = b[3];
  const b10 = b[ 4 + 0];
  const b11 = b[ 4 + 1];
  const b12 = b[ 4 + 2];
  const b13 = b[ 4 + 3];
  const b20 = b[ 8 + 0];
  const b21 = b[ 8 + 1];
  const b22 = b[ 8 + 2];
  const b23 = b[ 8 + 3];
  const b30 = b[12 + 0];
  const b31 = b[12 + 1];
  const b32 = b[12 + 2];
  const b33 = b[12 + 3];

  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;
  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;
  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;
  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;
  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;
  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;
  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;
  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;
  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;
  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;
  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;
  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;
  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;
  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;
  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;
  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;

  return dst;
}

/**
 * Sets the translation component of a 4-by-4 matrix to the given
 * vector.
 * @param {module:twgl/m4.Mat4} a The matrix.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The matrix with translation set.
 * @memberOf module:twgl/m4
 */
function setTranslation(a, v, dst) {
  dst = dst || identity();
  if (a !== dst) {
    dst[ 0] = a[ 0];
    dst[ 1] = a[ 1];
    dst[ 2] = a[ 2];
    dst[ 3] = a[ 3];
    dst[ 4] = a[ 4];
    dst[ 5] = a[ 5];
    dst[ 6] = a[ 6];
    dst[ 7] = a[ 7];
    dst[ 8] = a[ 8];
    dst[ 9] = a[ 9];
    dst[10] = a[10];
    dst[11] = a[11];
  }
  dst[12] = v[0];
  dst[13] = v[1];
  dst[14] = v[2];
  dst[15] = 1;
  return dst;
}

/**
 * Returns the translation component of a 4-by-4 matrix as a vector with 3
 * entries.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.
 * @return {module:twgl/v3.Vec3} The translation component of m.
 * @memberOf module:twgl/m4
 */
function getTranslation(m, dst) {
  dst = dst || create();
  dst[0] = m[12];
  dst[1] = m[13];
  dst[2] = m[14];
  return dst;
}

/**
 * Returns an axis of a 4x4 matrix as a vector with 3 entries
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {number} axis The axis 0 = x, 1 = y, 2 = z;
 * @return {module:twgl/v3.Vec3} [dst] vector.
 * @return {module:twgl/v3.Vec3} The axis component of m.
 * @memberOf module:twgl/m4
 */
function getAxis(m, axis, dst) {
  dst = dst || create();
  const off = axis * 4;
  dst[0] = m[off + 0];
  dst[1] = m[off + 1];
  dst[2] = m[off + 2];
  return dst;
}

/**
 * Sets an axis of a 4x4 matrix as a vector with 3 entries
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} v the axis vector
 * @param {number} axis The axis  0 = x, 1 = y, 2 = z;
 * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The matrix with axis set.
 * @memberOf module:twgl/m4
 */
function setAxis(a, v, axis, dst) {
  if (dst !== a) {
    dst = copy$1(a, dst);
  }
  const off = axis * 4;
  dst[off + 0] = v[0];
  dst[off + 1] = v[1];
  dst[off + 2] = v[2];
  return dst;
}

/**
 * Computes a 4-by-4 perspective transformation matrix given the angular height
 * of the frustum, the aspect ratio, and the near and far clipping planes.  The
 * arguments define a frustum extending in the negative z direction.  The given
 * angle is the vertical angle of the frustum, and the horizontal angle is
 * determined to produce the given aspect ratio.  The arguments near and far are
 * the distances to the near and far clipping planes.  Note that near and far
 * are not z coordinates, but rather they are distances along the negative
 * z-axis.  The matrix generated sends the viewing frustum to the unit box.
 * We assume a unit box extending from -1 to 1 in the x and y dimensions and
 * from 0 to 1 in the z dimension.
 * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).
 * @param {number} aspect The aspect ratio width / height.
 * @param {number} zNear The depth (negative z coordinate)
 *     of the near clipping plane.
 * @param {number} zFar The depth (negative z coordinate)
 *     of the far clipping plane.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The perspective matrix.
 * @memberOf module:twgl/m4
 */
function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {
  dst = dst || new MatType(16);

  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);
  const rangeInv = 1.0 / (zNear - zFar);

  dst[0]  = f / aspect;
  dst[1]  = 0;
  dst[2]  = 0;
  dst[3]  = 0;

  dst[4]  = 0;
  dst[5]  = f;
  dst[6]  = 0;
  dst[7]  = 0;

  dst[8]  = 0;
  dst[9]  = 0;
  dst[10] = (zNear + zFar) * rangeInv;
  dst[11] = -1;

  dst[12] = 0;
  dst[13] = 0;
  dst[14] = zNear * zFar * rangeInv * 2;
  dst[15] = 0;

  return dst;
}

/**
 * Computes a 4-by-4 orthogonal transformation matrix given the left, right,
 * bottom, and top dimensions of the near clipping plane as well as the
 * near and far clipping plane distances.
 * @param {number} left Left side of the near clipping plane viewport.
 * @param {number} right Right side of the near clipping plane viewport.
 * @param {number} bottom Bottom of the near clipping plane viewport.
 * @param {number} top Top of the near clipping plane viewport.
 * @param {number} near The depth (negative z coordinate)
 *     of the near clipping plane.
 * @param {number} far The depth (negative z coordinate)
 *     of the far clipping plane.
 * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The perspective matrix.
 * @memberOf module:twgl/m4
 */
function ortho(left, right, bottom, top, near, far, dst) {
  dst = dst || new MatType(16);

  dst[0]  = 2 / (right - left);
  dst[1]  = 0;
  dst[2]  = 0;
  dst[3]  = 0;

  dst[4]  = 0;
  dst[5]  = 2 / (top - bottom);
  dst[6]  = 0;
  dst[7]  = 0;

  dst[8]  = 0;
  dst[9]  = 0;
  dst[10] = 2 / (near - far);
  dst[11] = 0;

  dst[12] = (right + left) / (left - right);
  dst[13] = (top + bottom) / (bottom - top);
  dst[14] = (far + near) / (near - far);
  dst[15] = 1;

  return dst;
}

/**
 * Computes a 4-by-4 perspective transformation matrix given the left, right,
 * top, bottom, near and far clipping planes. The arguments define a frustum
 * extending in the negative z direction. The arguments near and far are the
 * distances to the near and far clipping planes. Note that near and far are not
 * z coordinates, but rather they are distances along the negative z-axis. The
 * matrix generated sends the viewing frustum to the unit box. We assume a unit
 * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z
 * dimension.
 * @param {number} left The x coordinate of the left plane of the box.
 * @param {number} right The x coordinate of the right plane of the box.
 * @param {number} bottom The y coordinate of the bottom plane of the box.
 * @param {number} top The y coordinate of the right plane of the box.
 * @param {number} near The negative z coordinate of the near plane of the box.
 * @param {number} far The negative z coordinate of the far plane of the box.
 * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The perspective projection matrix.
 * @memberOf module:twgl/m4
 */
function frustum(left, right, bottom, top, near, far, dst) {
  dst = dst || new MatType(16);

  const dx = (right - left);
  const dy = (top - bottom);
  const dz = (near - far);

  dst[ 0] = 2 * near / dx;
  dst[ 1] = 0;
  dst[ 2] = 0;
  dst[ 3] = 0;
  dst[ 4] = 0;
  dst[ 5] = 2 * near / dy;
  dst[ 6] = 0;
  dst[ 7] = 0;
  dst[ 8] = (left + right) / dx;
  dst[ 9] = (top + bottom) / dy;
  dst[10] = far / dz;
  dst[11] = -1;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = near * far / dz;
  dst[15] = 0;

  return dst;
}

let xAxis;
let yAxis;
let zAxis;

/**
 * Computes a 4-by-4 look-at transformation.
 *
 * This is a matrix which positions the camera itself. If you want
 * a view matrix (a matrix which moves things in front of the camera)
 * take the inverse of this.
 *
 * @param {module:twgl/v3.Vec3} eye The position of the eye.
 * @param {module:twgl/v3.Vec3} target The position meant to be viewed.
 * @param {module:twgl/v3.Vec3} up A vector pointing up.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The look-at matrix.
 * @memberOf module:twgl/m4
 */
function lookAt(eye, target, up, dst) {
  dst = dst || new MatType(16);

  xAxis = xAxis || create();
  yAxis = yAxis || create();
  zAxis = zAxis || create();

  normalize(
      subtract(eye, target, zAxis), zAxis);
  normalize(cross(up, zAxis, xAxis), xAxis);
  normalize(cross(zAxis, xAxis, yAxis), yAxis);

  dst[ 0] = xAxis[0];
  dst[ 1] = xAxis[1];
  dst[ 2] = xAxis[2];
  dst[ 3] = 0;
  dst[ 4] = yAxis[0];
  dst[ 5] = yAxis[1];
  dst[ 6] = yAxis[2];
  dst[ 7] = 0;
  dst[ 8] = zAxis[0];
  dst[ 9] = zAxis[1];
  dst[10] = zAxis[2];
  dst[11] = 0;
  dst[12] = eye[0];
  dst[13] = eye[1];
  dst[14] = eye[2];
  dst[15] = 1;

  return dst;
}

/**
 * Creates a 4-by-4 matrix which translates by the given vector v.
 * @param {module:twgl/v3.Vec3} v The vector by
 *     which to translate.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The translation matrix.
 * @memberOf module:twgl/m4
 */
function translation(v, dst) {
  dst = dst || new MatType(16);

  dst[ 0] = 1;
  dst[ 1] = 0;
  dst[ 2] = 0;
  dst[ 3] = 0;
  dst[ 4] = 0;
  dst[ 5] = 1;
  dst[ 6] = 0;
  dst[ 7] = 0;
  dst[ 8] = 0;
  dst[ 9] = 0;
  dst[10] = 1;
  dst[11] = 0;
  dst[12] = v[0];
  dst[13] = v[1];
  dst[14] = v[2];
  dst[15] = 1;
  return dst;
}

/**
 * Translates the given 4-by-4 matrix by the given vector v.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} v The vector by
 *     which to translate.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The translated matrix.
 * @memberOf module:twgl/m4
 */
function translate(m, v, dst) {
  dst = dst || new MatType(16);

  const v0 = v[0];
  const v1 = v[1];
  const v2 = v[2];
  const m00 = m[0];
  const m01 = m[1];
  const m02 = m[2];
  const m03 = m[3];
  const m10 = m[1 * 4 + 0];
  const m11 = m[1 * 4 + 1];
  const m12 = m[1 * 4 + 2];
  const m13 = m[1 * 4 + 3];
  const m20 = m[2 * 4 + 0];
  const m21 = m[2 * 4 + 1];
  const m22 = m[2 * 4 + 2];
  const m23 = m[2 * 4 + 3];
  const m30 = m[3 * 4 + 0];
  const m31 = m[3 * 4 + 1];
  const m32 = m[3 * 4 + 2];
  const m33 = m[3 * 4 + 3];

  if (m !== dst) {
    dst[ 0] = m00;
    dst[ 1] = m01;
    dst[ 2] = m02;
    dst[ 3] = m03;
    dst[ 4] = m10;
    dst[ 5] = m11;
    dst[ 6] = m12;
    dst[ 7] = m13;
    dst[ 8] = m20;
    dst[ 9] = m21;
    dst[10] = m22;
    dst[11] = m23;
  }

  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;
  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;
  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;
  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;

  return dst;
}

/**
 * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotation matrix.
 * @memberOf module:twgl/m4
 */
function rotationX(angleInRadians, dst) {
  dst = dst || new MatType(16);

  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);

  dst[ 0] = 1;
  dst[ 1] = 0;
  dst[ 2] = 0;
  dst[ 3] = 0;
  dst[ 4] = 0;
  dst[ 5] = c;
  dst[ 6] = s;
  dst[ 7] = 0;
  dst[ 8] = 0;
  dst[ 9] = -s;
  dst[10] = c;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;

  return dst;
}

/**
 * Rotates the given 4-by-4 matrix around the x-axis by the given
 * angle.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotated matrix.
 * @memberOf module:twgl/m4
 */
function rotateX(m, angleInRadians, dst) {
  dst = dst || new MatType(16);

  const m10 = m[4];
  const m11 = m[5];
  const m12 = m[6];
  const m13 = m[7];
  const m20 = m[8];
  const m21 = m[9];
  const m22 = m[10];
  const m23 = m[11];
  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);

  dst[4]  = c * m10 + s * m20;
  dst[5]  = c * m11 + s * m21;
  dst[6]  = c * m12 + s * m22;
  dst[7]  = c * m13 + s * m23;
  dst[8]  = c * m20 - s * m10;
  dst[9]  = c * m21 - s * m11;
  dst[10] = c * m22 - s * m12;
  dst[11] = c * m23 - s * m13;

  if (m !== dst) {
    dst[ 0] = m[ 0];
    dst[ 1] = m[ 1];
    dst[ 2] = m[ 2];
    dst[ 3] = m[ 3];
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}

/**
 * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotation matrix.
 * @memberOf module:twgl/m4
 */
function rotationY(angleInRadians, dst) {
  dst = dst || new MatType(16);

  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);

  dst[ 0] = c;
  dst[ 1] = 0;
  dst[ 2] = -s;
  dst[ 3] = 0;
  dst[ 4] = 0;
  dst[ 5] = 1;
  dst[ 6] = 0;
  dst[ 7] = 0;
  dst[ 8] = s;
  dst[ 9] = 0;
  dst[10] = c;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;

  return dst;
}

/**
 * Rotates the given 4-by-4 matrix around the y-axis by the given
 * angle.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotated matrix.
 * @memberOf module:twgl/m4
 */
function rotateY(m, angleInRadians, dst) {
  dst = dst || new MatType(16);

  const m00 = m[0 * 4 + 0];
  const m01 = m[0 * 4 + 1];
  const m02 = m[0 * 4 + 2];
  const m03 = m[0 * 4 + 3];
  const m20 = m[2 * 4 + 0];
  const m21 = m[2 * 4 + 1];
  const m22 = m[2 * 4 + 2];
  const m23 = m[2 * 4 + 3];
  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);

  dst[ 0] = c * m00 - s * m20;
  dst[ 1] = c * m01 - s * m21;
  dst[ 2] = c * m02 - s * m22;
  dst[ 3] = c * m03 - s * m23;
  dst[ 8] = c * m20 + s * m00;
  dst[ 9] = c * m21 + s * m01;
  dst[10] = c * m22 + s * m02;
  dst[11] = c * m23 + s * m03;

  if (m !== dst) {
    dst[ 4] = m[ 4];
    dst[ 5] = m[ 5];
    dst[ 6] = m[ 6];
    dst[ 7] = m[ 7];
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}

/**
 * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotation matrix.
 * @memberOf module:twgl/m4
 */
function rotationZ(angleInRadians, dst) {
  dst = dst || new MatType(16);

  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);

  dst[ 0] = c;
  dst[ 1] = s;
  dst[ 2] = 0;
  dst[ 3] = 0;
  dst[ 4] = -s;
  dst[ 5] = c;
  dst[ 6] = 0;
  dst[ 7] = 0;
  dst[ 8] = 0;
  dst[ 9] = 0;
  dst[10] = 1;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;

  return dst;
}

/**
 * Rotates the given 4-by-4 matrix around the z-axis by the given
 * angle.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotated matrix.
 * @memberOf module:twgl/m4
 */
function rotateZ(m, angleInRadians, dst) {
  dst = dst || new MatType(16);

  const m00 = m[0 * 4 + 0];
  const m01 = m[0 * 4 + 1];
  const m02 = m[0 * 4 + 2];
  const m03 = m[0 * 4 + 3];
  const m10 = m[1 * 4 + 0];
  const m11 = m[1 * 4 + 1];
  const m12 = m[1 * 4 + 2];
  const m13 = m[1 * 4 + 3];
  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);

  dst[ 0] = c * m00 + s * m10;
  dst[ 1] = c * m01 + s * m11;
  dst[ 2] = c * m02 + s * m12;
  dst[ 3] = c * m03 + s * m13;
  dst[ 4] = c * m10 - s * m00;
  dst[ 5] = c * m11 - s * m01;
  dst[ 6] = c * m12 - s * m02;
  dst[ 7] = c * m13 - s * m03;

  if (m !== dst) {
    dst[ 8] = m[ 8];
    dst[ 9] = m[ 9];
    dst[10] = m[10];
    dst[11] = m[11];
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}

/**
 * Creates a 4-by-4 matrix which rotates around the given axis by the given
 * angle.
 * @param {module:twgl/v3.Vec3} axis The axis
 *     about which to rotate.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians
 *     around the axis.
 * @memberOf module:twgl/m4
 */
function axisRotation(axis, angleInRadians, dst) {
  dst = dst || new MatType(16);

  let x = axis[0];
  let y = axis[1];
  let z = axis[2];
  const n = Math.sqrt(x * x + y * y + z * z);
  x /= n;
  y /= n;
  z /= n;
  const xx = x * x;
  const yy = y * y;
  const zz = z * z;
  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);
  const oneMinusCosine = 1 - c;

  dst[ 0] = xx + (1 - xx) * c;
  dst[ 1] = x * y * oneMinusCosine + z * s;
  dst[ 2] = x * z * oneMinusCosine - y * s;
  dst[ 3] = 0;
  dst[ 4] = x * y * oneMinusCosine - z * s;
  dst[ 5] = yy + (1 - yy) * c;
  dst[ 6] = y * z * oneMinusCosine + x * s;
  dst[ 7] = 0;
  dst[ 8] = x * z * oneMinusCosine + y * s;
  dst[ 9] = y * z * oneMinusCosine - x * s;
  dst[10] = zz + (1 - zz) * c;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;

  return dst;
}

/**
 * Rotates the given 4-by-4 matrix around the given axis by the
 * given angle.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} axis The axis
 *     about which to rotate.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotated matrix.
 * @memberOf module:twgl/m4
 */
function axisRotate(m, axis, angleInRadians, dst) {
  dst = dst || new MatType(16);

  let x = axis[0];
  let y = axis[1];
  let z = axis[2];
  const n = Math.sqrt(x * x + y * y + z * z);
  x /= n;
  y /= n;
  z /= n;
  const xx = x * x;
  const yy = y * y;
  const zz = z * z;
  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);
  const oneMinusCosine = 1 - c;

  const r00 = xx + (1 - xx) * c;
  const r01 = x * y * oneMinusCosine + z * s;
  const r02 = x * z * oneMinusCosine - y * s;
  const r10 = x * y * oneMinusCosine - z * s;
  const r11 = yy + (1 - yy) * c;
  const r12 = y * z * oneMinusCosine + x * s;
  const r20 = x * z * oneMinusCosine + y * s;
  const r21 = y * z * oneMinusCosine - x * s;
  const r22 = zz + (1 - zz) * c;

  const m00 = m[0];
  const m01 = m[1];
  const m02 = m[2];
  const m03 = m[3];
  const m10 = m[4];
  const m11 = m[5];
  const m12 = m[6];
  const m13 = m[7];
  const m20 = m[8];
  const m21 = m[9];
  const m22 = m[10];
  const m23 = m[11];

  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;
  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;
  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;
  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;
  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;
  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;
  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;
  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;
  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;
  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;
  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;
  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;

  if (m !== dst) {
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}

/**
 * Creates a 4-by-4 matrix which scales in each dimension by an amount given by
 * the corresponding entry in the given vector; assumes the vector has three
 * entries.
 * @param {module:twgl/v3.Vec3} v A vector of
 *     three entries specifying the factor by which to scale in each dimension.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The scaling matrix.
 * @memberOf module:twgl/m4
 */
function scaling(v, dst) {
  dst = dst || new MatType(16);

  dst[ 0] = v[0];
  dst[ 1] = 0;
  dst[ 2] = 0;
  dst[ 3] = 0;
  dst[ 4] = 0;
  dst[ 5] = v[1];
  dst[ 6] = 0;
  dst[ 7] = 0;
  dst[ 8] = 0;
  dst[ 9] = 0;
  dst[10] = v[2];
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;

  return dst;
}

/**
 * Scales the given 4-by-4 matrix in each dimension by an amount
 * given by the corresponding entry in the given vector; assumes the vector has
 * three entries.
 * @param {module:twgl/m4.Mat4} m The matrix to be modified.
 * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the
 *     factor by which to scale in each dimension.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The scaled matrix.
 * @memberOf module:twgl/m4
 */
function scale(m, v, dst) {
  dst = dst || new MatType(16);

  const v0 = v[0];
  const v1 = v[1];
  const v2 = v[2];

  dst[ 0] = v0 * m[0 * 4 + 0];
  dst[ 1] = v0 * m[0 * 4 + 1];
  dst[ 2] = v0 * m[0 * 4 + 2];
  dst[ 3] = v0 * m[0 * 4 + 3];
  dst[ 4] = v1 * m[1 * 4 + 0];
  dst[ 5] = v1 * m[1 * 4 + 1];
  dst[ 6] = v1 * m[1 * 4 + 2];
  dst[ 7] = v1 * m[1 * 4 + 3];
  dst[ 8] = v2 * m[2 * 4 + 0];
  dst[ 9] = v2 * m[2 * 4 + 1];
  dst[10] = v2 * m[2 * 4 + 2];
  dst[11] = v2 * m[2 * 4 + 3];

  if (m !== dst) {
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}

/**
 * Takes a 4-by-4 matrix and a vector with 3 entries,
 * interprets the vector as a point, transforms that point by the matrix, and
 * returns the result as a vector with 3 entries.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} v The point.
 * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.
 * @return {module:twgl/v3.Vec3} The transformed point.
 * @memberOf module:twgl/m4
 */
function transformPoint(m, v, dst) {
  dst = dst || create();
  const v0 = v[0];
  const v1 = v[1];
  const v2 = v[2];
  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];

  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;
  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;
  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;

  return dst;
}

/**
 * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a
 * direction, transforms that direction by the matrix, and returns the result;
 * assumes the transformation of 3-dimensional space represented by the matrix
 * is parallel-preserving, i.e. any combination of rotation, scaling and
 * translation, but not a perspective distortion. Returns a vector with 3
 * entries.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} v The direction.
 * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.
 * @return {module:twgl/v3.Vec3} The transformed direction.
 * @memberOf module:twgl/m4
 */
function transformDirection(m, v, dst) {
  dst = dst || create();

  const v0 = v[0];
  const v1 = v[1];
  const v2 = v[2];

  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];
  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];
  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];

  return dst;
}

/**
 * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector
 * as a normal to a surface, and computes a vector which is normal upon
 * transforming that surface by the matrix. The effect of this function is the
 * same as transforming v (as a direction) by the inverse-transpose of m.  This
 * function assumes the transformation of 3-dimensional space represented by the
 * matrix is parallel-preserving, i.e. any combination of rotation, scaling and
 * translation, but not a perspective distortion.  Returns a vector with 3
 * entries.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} v The normal.
 * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.
 * @return {module:twgl/v3.Vec3} The transformed normal.
 * @memberOf module:twgl/m4
 */
function transformNormal(m, v, dst) {
  dst = dst || create();
  const mi = inverse(m);
  const v0 = v[0];
  const v1 = v[1];
  const v2 = v[2];

  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];
  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];
  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];

  return dst;
}

var m4 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  axisRotate: axisRotate,
  axisRotation: axisRotation,
  copy: copy$1,
  frustum: frustum,
  getAxis: getAxis,
  getTranslation: getTranslation,
  identity: identity,
  inverse: inverse,
  lookAt: lookAt,
  multiply: multiply$1,
  negate: negate$1,
  ortho: ortho,
  perspective: perspective,
  rotateX: rotateX,
  rotateY: rotateY,
  rotateZ: rotateZ,
  rotationX: rotationX,
  rotationY: rotationY,
  rotationZ: rotationZ,
  scale: scale,
  scaling: scaling,
  setAxis: setAxis,
  setDefaultType: setDefaultType$1,
  setTranslation: setTranslation,
  transformDirection: transformDirection,
  transformNormal: transformNormal,
  transformPoint: transformPoint,
  translate: translate,
  translation: translation,
  transpose: transpose
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/* DataType */
const BYTE                           = 0x1400;
const UNSIGNED_BYTE                  = 0x1401;
const SHORT                          = 0x1402;
const UNSIGNED_SHORT                 = 0x1403;
const INT                            = 0x1404;
const UNSIGNED_INT                   = 0x1405;
const FLOAT                          = 0x1406;
const UNSIGNED_SHORT_4_4_4_4       = 0x8033;
const UNSIGNED_SHORT_5_5_5_1       = 0x8034;
const UNSIGNED_SHORT_5_6_5         = 0x8363;
const HALF_FLOAT                   = 0x140B;
const UNSIGNED_INT_2_10_10_10_REV  = 0x8368;
const UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
const UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;
const FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
const UNSIGNED_INT_24_8            = 0x84FA;

const glTypeToTypedArray = {};
{
  const tt = glTypeToTypedArray;
  tt[BYTE]                           = Int8Array;
  tt[UNSIGNED_BYTE]                  = Uint8Array;
  tt[SHORT]                          = Int16Array;
  tt[UNSIGNED_SHORT]                 = Uint16Array;
  tt[INT]                            = Int32Array;
  tt[UNSIGNED_INT]                   = Uint32Array;
  tt[FLOAT]                          = Float32Array;
  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;
  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;
  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;
  tt[HALF_FLOAT]                     = Uint16Array;
  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;
  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;
  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;
  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;
  tt[UNSIGNED_INT_24_8]              = Uint32Array;
}

/**
 * Get the GL type for a typedArray
 * @param {ArrayBufferView} typedArray a typedArray
 * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will
 *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned
 * @memberOf module:twgl/typedArray
 */
function getGLTypeForTypedArray(typedArray) {
  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line
  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line
  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line
  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line
  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line
  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line
  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line
  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line
  throw new Error('unsupported typed array type');
}

/**
 * Get the GL type for a typedArray type
 * @param {ArrayBufferView} typedArrayType a typedArray constructor
 * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will
 *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned
 * @memberOf module:twgl/typedArray
 */
function getGLTypeForTypedArrayType(typedArrayType) {
  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line
  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line
  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line
  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line
  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line
  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line
  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line
  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line
  throw new Error('unsupported typed array type');
}

/**
 * Get the typed array constructor for a given GL type
 * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)
 * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).
 * @memberOf module:twgl/typedArray
 */
function getTypedArrayTypeForGLType(type) {
  const CTOR = glTypeToTypedArray[type];
  if (!CTOR) {
    throw new Error('unknown gl type');
  }
  return CTOR;
}

const isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'
  ? function isArrayBufferOrSharedArrayBuffer(a) {
    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);
  }
  : function isArrayBuffer(a) {
    return a && a.buffer && a.buffer instanceof ArrayBuffer;
  };

var typedarrays = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getGLTypeForTypedArray: getGLTypeForTypedArray,
  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,
  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,
  isArrayBuffer: isArrayBuffer
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/* eslint no-console: "off" */

/**
 * Copy named properties
 *
 * @param {string[]} names names of properties to copy
 * @param {object} src object to copy properties from
 * @param {object} dst object to copy properties to
 * @private
 */
function copyNamedProperties(names, src, dst) {
  names.forEach(function(name) {
    const value = src[name];
    if (value !== undefined) {
      dst[name] = value;
    }
  });
}

/**
 * Copies properties from source to dest only if a matching key is in dest
 *
 * @param {Object.<string, ?>} src the source
 * @param {Object.<string, ?>} dst the dest
 * @private
 */
function copyExistingProperties(src, dst) {
  Object.keys(dst).forEach(function(key) {
    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */
      dst[key] = src[key];
    }
  });
}

function error(...args) {
  console.error(...args);
}

function warn(...args) {
  console.warn(...args);
}

function isBuffer(gl, t) {
  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;
}

function isRenderbuffer(gl, t) {
  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;
}

function isShader(gl, t) {
  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;
}

function isTexture(gl, t) {
  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;
}

function isSampler(gl, t) {
  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;
}

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

const STATIC_DRAW                  = 0x88e4;
const ARRAY_BUFFER                 = 0x8892;
const ELEMENT_ARRAY_BUFFER         = 0x8893;
const BUFFER_SIZE                  = 0x8764;

const BYTE$1                         = 0x1400;
const UNSIGNED_BYTE$1                = 0x1401;
const SHORT$1                        = 0x1402;
const UNSIGNED_SHORT$1               = 0x1403;
const INT$1                          = 0x1404;
const UNSIGNED_INT$1                 = 0x1405;
const FLOAT$1                        = 0x1406;
const defaults = {
  attribPrefix: "",
};

/**
 * Sets the default attrib prefix
 *
 * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`
 * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.
 *
 * In other words I'll create arrays of geometry like this
 *
 *     var arrays = {
 *       position: ...
 *       normal: ...
 *       texcoord: ...
 *     };
 *
 * But need those mapped to attributes and my attributes start with `a_`.
 *
 * @deprecated see {@link module:twgl.setDefaults}
 * @param {string} prefix prefix for attribs
 * @memberOf module:twgl/attributes
 */
function setAttributePrefix(prefix) {
  defaults.attribPrefix = prefix;
}

function setDefaults(newDefaults) {
  copyExistingProperties(newDefaults, defaults);
}

function setBufferFromTypedArray(gl, type, buffer, array, drawType) {
  gl.bindBuffer(type, buffer);
  gl.bufferData(type, array, drawType || STATIC_DRAW);
}

/**
 * Given typed array creates a WebGLBuffer and copies the typed array
 * into it.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken
 * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.
 * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.
 * @return {WebGLBuffer} the created WebGLBuffer
 * @memberOf module:twgl/attributes
 */
function createBufferFromTypedArray(gl, typedArray, type, drawType) {
  if (isBuffer(gl, typedArray)) {
    return typedArray;
  }
  type = type || ARRAY_BUFFER;
  const buffer = gl.createBuffer();
  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);
  return buffer;
}

function isIndices(name) {
  return name === "indices";
}

// This is really just a guess. Though I can't really imagine using
// anything else? Maybe for some compression?
function getNormalizationForTypedArray(typedArray) {
  if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line
  if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line
  return false;
}

// This is really just a guess. Though I can't really imagine using
// anything else? Maybe for some compression?
function getNormalizationForTypedArrayType(typedArrayType) {
  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line
  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line
  return false;
}

function getArray(array) {
  return array.length ? array : array.data;
}

const texcoordRE = /coord|texture/i;
const colorRE = /color|colour/i;

function guessNumComponentsFromName(name, length) {
  let numComponents;
  if (texcoordRE.test(name)) {
    numComponents = 2;
  } else if (colorRE.test(name)) {
    numComponents = 4;
  } else {
    numComponents = 3;  // position, normals, indices ...
  }

  if (length % numComponents > 0) {
    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);
  }

  return numComponents;
}

function getNumComponents(array, arrayName) {
  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);
}

function makeTypedArray(array, name) {
  if (isArrayBuffer(array)) {
    return array;
  }

  if (isArrayBuffer(array.data)) {
    return array.data;
  }

  if (Array.isArray(array)) {
    array = {
      data: array,
    };
  }

  let Type = array.type;
  if (!Type) {
    if (isIndices(name)) {
      Type = Uint16Array;
    } else {
      Type = Float32Array;
    }
  }
  return new Type(array.data);
}

/**
 * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer
 * for the attribute.
 *
 * @typedef {Object} AttribInfo
 * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be
 *    disabled and set to this constant value and all other values will be ignored.
 * @property {number} [numComponents] the number of components for this attribute.
 * @property {number} [size] synonym for `numComponents`.
 * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`
 * @property {boolean} [normalize] whether or not to normalize the data. Default = false
 * @property {number} [offset] offset into buffer in bytes. Default = 0
 * @property {number} [stride] the stride in bytes per element. Default = 0
 * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor
 *    where as anything else = do call it with this value
 * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute
 * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW
 * @memberOf module:twgl
 */

/**
 * Use this type of array spec when TWGL can't guess the type or number of components of an array
 * @typedef {Object} FullArraySpec
 * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be
 *    disabled and set to this constant value and all other values will be ignored.
 * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.
 * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.
 *    If `coord` is in the name assumes `numComponents = 2`.
 *    If `color` is in the name assumes `numComponents = 4`.
 *    otherwise assumes `numComponents = 3`
 * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).
 * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.
 * @property {number} [size] synonym for `numComponents`.
 * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.
 * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0
 * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0
 * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor
 *    where as anything else = do call it with this value
 * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.
 * @property {string} [name] synonym for `attrib`.
 * @property {string} [attribName] synonym for `attrib`.
 * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer
 *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`
 *    to provide this. Example:
 *
 *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {
 *           position: [1, 2, 3, ... ],
 *         });
 *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {
 *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1
 *         });
 *
 * @memberOf module:twgl
 */

/**
 * An individual array in {@link module:twgl.Arrays}
 *
 * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`
 * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will
 * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.
 *
 * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec
 * @memberOf module:twgl
 */

/**
 * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your
 * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.
 *
 *     Bare JavaScript Arrays
 *
 *         var arrays = {
 *            position: [-1, 1, 0],
 *            normal: [0, 1, 0],
 *            ...
 *         }
 *
 *     Bare TypedArrays
 *
 *         var arrays = {
 *            position: new Float32Array([-1, 1, 0]),
 *            color: new Uint8Array([255, 128, 64, 255]),
 *            ...
 *         }
 *
 * *   Will guess at `numComponents` if not specified based on name.
 *
 *     If `coord` is in the name assumes `numComponents = 2`
 *
 *     If `color` is in the name assumes `numComponents = 4`
 *
 *     otherwise assumes `numComponents = 3`
 *
 * Objects with various fields. See {@link module:twgl.FullArraySpec}.
 *
 *     var arrays = {
 *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
 *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
 *     };
 *
 * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays
 * @memberOf module:twgl
 */


/**
 * Creates a set of attribute data and WebGLBuffers from set of arrays
 *
 * Given
 *
 *      var arrays = {
 *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
 *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },
 *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
 *      };
 *
 * returns something like
 *
 *      var attribs = {
 *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
 *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
 *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
 *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },
 *      };
 *
 * notes:
 *
 * *   Arrays can take various forms
 *
 *     Bare JavaScript Arrays
 *
 *         var arrays = {
 *            position: [-1, 1, 0],
 *            normal: [0, 1, 0],
 *            ...
 *         }
 *
 *     Bare TypedArrays
 *
 *         var arrays = {
 *            position: new Float32Array([-1, 1, 0]),
 *            color: new Uint8Array([255, 128, 64, 255]),
 *            ...
 *         }
 *
 * *   Will guess at `numComponents` if not specified based on name.
 *
 *     If `coord` is in the name assumes `numComponents = 2`
 *
 *     If `color` is in the name assumes `numComponents = 4`
 *
 *     otherwise assumes `numComponents = 3`
 *
 * @param {WebGLRenderingContext} gl The webgl rendering context.
 * @param {module:twgl.Arrays} arrays The arrays
 * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from
 *   This lets you share buffers. Any arrays you supply will override
 *   the buffers from srcBufferInfo.
 * @return {Object.<string, module:twgl.AttribInfo>} the attribs
 * @memberOf module:twgl/attributes
 */
function createAttribsFromArrays(gl, arrays) {
  const attribs = {};
  Object.keys(arrays).forEach(function(arrayName) {
    if (!isIndices(arrayName)) {
      const array = arrays[arrayName];
      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);
      if (array.value) {
        if (!Array.isArray(array.value) && !isArrayBuffer(array.value)) {
          throw new Error('array.value is not array or typedarray');
        }
        attribs[attribName] = {
          value: array.value,
        };
      } else {
        let buffer;
        let type;
        let normalization;
        let numComponents;
        if (array.buffer && array.buffer instanceof WebGLBuffer) {
          buffer = array.buffer;
          numComponents = array.numComponents || array.size;
          type = array.type;
          normalization = array.normalize;
        } else if (typeof array === "number" || typeof array.data === "number") {
          const numValues = array.data || array;
          const arrayType = array.type || Float32Array;
          const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;
          type = getGLTypeForTypedArrayType(arrayType);
          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);
          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);
          buffer = gl.createBuffer();
          gl.bindBuffer(ARRAY_BUFFER, buffer);
          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);
        } else {
          const typedArray = makeTypedArray(array, arrayName);
          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);
          type = getGLTypeForTypedArray(typedArray);
          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);
          numComponents = getNumComponents(array, arrayName);
        }
        attribs[attribName] = {
          buffer:        buffer,
          numComponents: numComponents,
          type:          type,
          normalize:     normalization,
          stride:        array.stride || 0,
          offset:        array.offset || 0,
          divisor:       array.divisor === undefined ? undefined : array.divisor,
          drawType:      array.drawType,
        };
      }
    }
  });
  gl.bindBuffer(ARRAY_BUFFER, null);
  return attribs;
}

/**
 * Sets the contents of a buffer attached to an attribInfo
 *
 * This is helper function to dynamically update a buffer.
 *
 * Let's say you make a bufferInfo
 *
 *     var arrays = {
 *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),
 *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),
 *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),
 *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),
 *     };
 *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);
 *
 *  And you want to dynamically update the positions. You could do this
 *
 *     // assuming arrays.position has already been updated with new data.
 *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);
 *
 * @param {WebGLRenderingContext} gl
 * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix
 *   the name of the attribute will include the prefix.
 * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything
 *    else will have to be converted to a typed array before it can be used by WebGL. During init time that
 *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.
 * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer
 *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`
 *    for the portion of the array you want to use.
 *
 *        var someArray = new Float32Array(1000); // an array with 1000 floats
 *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray
 *
 *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`
 * @memberOf module:twgl/attributes
 */
function setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {
  array = makeTypedArray(array);
  if (offset !== undefined) {
    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);
    gl.bufferSubData(ARRAY_BUFFER, offset, array);
  } else {
    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);
  }
}

function getBytesPerValueForGLType(gl, type) {
  if (type === BYTE$1)           return 1;  // eslint-disable-line
  if (type === UNSIGNED_BYTE$1)  return 1;  // eslint-disable-line
  if (type === SHORT$1)          return 2;  // eslint-disable-line
  if (type === UNSIGNED_SHORT$1) return 2;  // eslint-disable-line
  if (type === INT$1)            return 4;  // eslint-disable-line
  if (type === UNSIGNED_INT$1)   return 4;  // eslint-disable-line
  if (type === FLOAT$1)          return 4;  // eslint-disable-line
  return 0;
}

// Tries to get the number of elements from a set of arrays.
const positionKeys = ['position', 'positions', 'a_position'];
function getNumElementsFromNonIndexedArrays(arrays) {
  let key;
  let ii;
  for (ii = 0; ii < positionKeys.length; ++ii) {
    key = positionKeys[ii];
    if (key in arrays) {
      break;
    }
  }
  if (ii === positionKeys.length) {
    key = Object.keys(arrays)[0];
  }
  const array = arrays[key];
  const length = getArray(array).length;
  const numComponents = getNumComponents(array, key);
  const numElements = length / numComponents;
  if (length % numComponents > 0) {
    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);
  }
  return numElements;
}

function getNumElementsFromAttributes(gl, attribs) {
  let key;
  let ii;
  for (ii = 0; ii < positionKeys.length; ++ii) {
    key = positionKeys[ii];
    if (key in attribs) {
      break;
    }
    key = defaults.attribPrefix + key;
    if (key in attribs) {
      break;
    }
  }
  if (ii === positionKeys.length) {
    key = Object.keys(attribs)[0];
  }
  const attrib = attribs[key];
  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);
  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);
  gl.bindBuffer(ARRAY_BUFFER, null);

  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);
  const totalElements = numBytes / bytesPerValue;
  const numComponents = attrib.numComponents || attrib.size;
  // TODO: check stride
  const numElements = totalElements / numComponents;
  if (numElements % 1 !== 0) {
    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);
  }
  return numElements;
}

/**
 * @typedef {Object} BufferInfo
 * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.
 * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..
 * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.
 * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`
 * @memberOf module:twgl
 */

/**
 * Creates a BufferInfo from an object of arrays.
 *
 * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to
 * {@link module:twgl:drawBufferInfo}.
 *
 * Given an object like
 *
 *     var arrays = {
 *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
 *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
 *     };
 *
 *  Creates an BufferInfo like this
 *
 *     bufferInfo = {
 *       numElements: 4,        // or whatever the number of elements is
 *       indices: WebGLBuffer,  // this property will not exist if there are no indices
 *       attribs: {
 *         position: { buffer: WebGLBuffer, numComponents: 3, },
 *         normal:   { buffer: WebGLBuffer, numComponents: 3, },
 *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },
 *       },
 *     };
 *
 *  The properties of arrays can be JavaScript arrays in which case the number of components
 *  will be guessed.
 *
 *     var arrays = {
 *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],
 *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],
 *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
 *        indices:  [0, 1, 2, 1, 2, 3],
 *     };
 *
 *  They can also be TypedArrays
 *
 *     var arrays = {
 *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),
 *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),
 *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),
 *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),
 *     };
 *
 *  Or AugmentedTypedArrays
 *
 *     var positions = createAugmentedTypedArray(3, 4);
 *     var texcoords = createAugmentedTypedArray(2, 4);
 *     var normals   = createAugmentedTypedArray(3, 4);
 *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);
 *
 *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);
 *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);
 *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);
 *     indices.push([0, 1, 2, 1, 2, 3]);
 *
 *     var arrays = {
 *        position: positions,
 *        texcoord: texcoords,
 *        normal:   normals,
 *        indices:  indices,
 *     };
 *
 * For the last example it is equivalent to
 *
 *     var bufferInfo = {
 *       attribs: {
 *         position: { numComponents: 3, buffer: gl.createBuffer(), },
 *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },
 *         normal: { numComponents: 3, buffer: gl.createBuffer(), },
 *       },
 *       indices: gl.createBuffer(),
 *       numElements: 6,
 *     };
 *
 *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);
 *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);
 *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);
 *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);
 *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);
 *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);
 *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);
 *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {module:twgl.Arrays} arrays Your data
 * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing
 *        buffer info to start from. WebGLBuffers etc specified
 *        in the srcBufferInfo will be used in a new BufferInfo
 *        with any arrays specified overriding the ones in
 *        srcBufferInfo.
 * @return {module:twgl.BufferInfo} A BufferInfo
 * @memberOf module:twgl/attributes
 */
function createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {
  const newAttribs = createAttribsFromArrays(gl, arrays);
  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});
  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);
  const indices = arrays.indices;
  if (indices) {
    const newIndices = makeTypedArray(indices, "indices");
    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);
    bufferInfo.numElements = newIndices.length;
    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);
  } else if (!bufferInfo.numElements) {
    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);
  }

  return bufferInfo;
}

/**
 * Creates a buffer from an array, typed array, or array spec
 *
 * Given something like this
 *
 *     [1, 2, 3],
 *
 * or
 *
 *     new Uint16Array([1,2,3]);
 *
 * or
 *
 *     {
 *        data: [1, 2, 3],
 *        type: Uint8Array,
 *     }
 *
 * returns a WebGLBuffer that contains the given data.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
 * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.
 * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.
 * @return {WebGLBuffer} a WebGLBuffer containing the data in array.
 * @memberOf module:twgl/attributes
 */
function createBufferFromArray(gl, array, arrayName) {
  const type = arrayName === "indices" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;
  const typedArray = makeTypedArray(array, arrayName);
  return createBufferFromTypedArray(gl, typedArray, type);
}

/**
 * Creates buffers from arrays or typed arrays
 *
 * Given something like this
 *
 *     var arrays = {
 *        positions: [1, 2, 3],
 *        normals: [0, 0, 1],
 *     }
 *
 * returns something like
 *
 *     buffers = {
 *       positions: WebGLBuffer,
 *       normals: WebGLBuffer,
 *     }
 *
 * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
 * @param {module:twgl.Arrays} arrays
 * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array
 * @memberOf module:twgl/attributes
 */
function createBuffersFromArrays(gl, arrays) {
  const buffers = { };
  Object.keys(arrays).forEach(function(key) {
    buffers[key] = createBufferFromArray(gl, arrays[key], key);
  });

  // Ugh!
  if (arrays.indices) {
    buffers.numElements = arrays.indices.length;
    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));
  } else {
    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);
  }

  return buffers;
}

var attributes = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createAttribsFromArrays: createAttribsFromArrays,
  createBuffersFromArrays: createBuffersFromArrays,
  createBufferFromArray: createBufferFromArray,
  createBufferFromTypedArray: createBufferFromTypedArray,
  createBufferInfoFromArrays: createBufferInfoFromArrays,
  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,
  setAttributePrefix: setAttributePrefix,
  setAttributeDefaults_: setDefaults,
  getNumComponents_: getNumComponents,
  getArray_: getArray
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

const getArray$1 = getArray;  // eslint-disable-line
const getNumComponents$1 = getNumComponents;  // eslint-disable-line

/**
 * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray
 */

/**
 * Add `push` to a typed array. It just keeps a 'cursor'
 * and allows use to `push` values into the array so we
 * don't have to manually compute offsets
 * @param {TypedArray} typedArray TypedArray to augment
 * @param {number} numComponents number of components.
 * @private
 */
function augmentTypedArray(typedArray, numComponents) {
  let cursor = 0;
  typedArray.push = function() {
    for (let ii = 0; ii < arguments.length; ++ii) {
      const value = arguments[ii];
      if (value instanceof Array || isArrayBuffer(value)) {
        for (let jj = 0; jj < value.length; ++jj) {
          typedArray[cursor++] = value[jj];
        }
      } else {
        typedArray[cursor++] = value;
      }
    }
  };
  typedArray.reset = function(opt_index) {
    cursor = opt_index || 0;
  };
  typedArray.numComponents = numComponents;
  Object.defineProperty(typedArray, 'numElements', {
    get: function() {
      return this.length / this.numComponents | 0;
    },
  });
  return typedArray;
}

/**
 * creates a typed array with a `push` function attached
 * so that you can easily *push* values.
 *
 * `push` can take multiple arguments. If an argument is an array each element
 * of the array will be added to the typed array.
 *
 * Example:
 *
 *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values
 *     array.push(1, 2, 3);
 *     array.push([4, 5, 6]);
 *     // array now contains [1, 2, 3, 4, 5, 6]
 *
 * Also has `numComponents` and `numElements` properties.
 *
 * @param {number} numComponents number of components
 * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.
 * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.
 * @return {ArrayBufferView} A typed array.
 * @memberOf module:twgl/primitives
 */
function createAugmentedTypedArray(numComponents, numElements, opt_type) {
  const Type = opt_type || Float32Array;
  return augmentTypedArray(new Type(numComponents * numElements), numComponents);
}

function allButIndices(name) {
  return name !== "indices";
}

/**
 * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.
 * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex
 * @return {Object.<string, TypedArray>} The deindexed vertices
 * @memberOf module:twgl/primitives
 */
function deindexVertices(vertices) {
  const indices = vertices.indices;
  const newVertices = {};
  const numElements = indices.length;

  function expandToUnindexed(channel) {
    const srcBuffer = vertices[channel];
    const numComponents = srcBuffer.numComponents;
    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);
    for (let ii = 0; ii < numElements; ++ii) {
      const ndx = indices[ii];
      const offset = ndx * numComponents;
      for (let jj = 0; jj < numComponents; ++jj) {
        dstBuffer.push(srcBuffer[offset + jj]);
      }
    }
    newVertices[channel] = dstBuffer;
  }

  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);

  return newVertices;
}

/**
 * flattens the normals of deindexed vertices in place.
 * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten
 * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)
 * @memberOf module:twgl/primitives
 */
function flattenNormals(vertices) {
  if (vertices.indices) {
    throw new Error('can not flatten normals of indexed vertices. deindex them first');
  }

  const normals = vertices.normal;
  const numNormals = normals.length;
  for (let ii = 0; ii < numNormals; ii += 9) {
    // pull out the 3 normals for this triangle
    const nax = normals[ii + 0];
    const nay = normals[ii + 1];
    const naz = normals[ii + 2];

    const nbx = normals[ii + 3];
    const nby = normals[ii + 4];
    const nbz = normals[ii + 5];

    const ncx = normals[ii + 6];
    const ncy = normals[ii + 7];
    const ncz = normals[ii + 8];

    // add them
    let nx = nax + nbx + ncx;
    let ny = nay + nby + ncy;
    let nz = naz + nbz + ncz;

    // normalize them
    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);

    nx /= length;
    ny /= length;
    nz /= length;

    // copy them back in
    normals[ii + 0] = nx;
    normals[ii + 1] = ny;
    normals[ii + 2] = nz;

    normals[ii + 3] = nx;
    normals[ii + 4] = ny;
    normals[ii + 5] = nz;

    normals[ii + 6] = nx;
    normals[ii + 7] = ny;
    normals[ii + 8] = nz;
  }

  return vertices;
}

function applyFuncToV3Array(array, matrix, fn) {
  const len = array.length;
  const tmp = new Float32Array(3);
  for (let ii = 0; ii < len; ii += 3) {
    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);
    array[ii    ] = tmp[0];
    array[ii + 1] = tmp[1];
    array[ii + 2] = tmp[2];
  }
}

function transformNormal$1(mi, v, dst) {
  dst = dst || create();
  const v0 = v[0];
  const v1 = v[1];
  const v2 = v[2];

  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];
  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];
  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];

  return dst;
}

/**
 * Reorients directions by the given matrix..
 * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.
 * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.
 * @return {(number[]|TypedArray)} the same array that was passed in
 * @memberOf module:twgl/primitives
 */
function reorientDirections(array, matrix) {
  applyFuncToV3Array(array, matrix, transformDirection);
  return array;
}

/**
 * Reorients normals by the inverse-transpose of the given
 * matrix..
 * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.
 * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.
 * @return {(number[]|TypedArray)} the same array that was passed in
 * @memberOf module:twgl/primitives
 */
function reorientNormals(array, matrix) {
  applyFuncToV3Array(array, inverse(matrix), transformNormal$1);
  return array;
}

/**
 * Reorients positions by the given matrix. In other words, it
 * multiplies each vertex by the given matrix.
 * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.
 * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.
 * @return {(number[]|TypedArray)} the same array that was passed in
 * @memberOf module:twgl/primitives
 */
function reorientPositions(array, matrix) {
  applyFuncToV3Array(array, matrix, transformPoint);
  return array;
}

/**
 * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray
 */

/**
 * Reorients arrays by the given matrix. Assumes arrays have
 * names that contains 'pos' could be reoriented as positions,
 * 'binorm' or 'tan' as directions, and 'norm' as normals.
 *
 * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient
 * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.
 * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.
 * @memberOf module:twgl/primitives
 */
function reorientVertices(arrays, matrix) {
  Object.keys(arrays).forEach(function(name) {
    const array = arrays[name];
    if (name.indexOf("pos") >= 0) {
      reorientPositions(array, matrix);
    } else if (name.indexOf("tan") >= 0 || name.indexOf("binorm") >= 0) {
      reorientDirections(array, matrix);
    } else if (name.indexOf("norm") >= 0) {
      reorientNormals(array, matrix);
    }
  });
  return arrays;
}

/**
 * Creates XY quad BufferInfo
 *
 * The default with no parameters will return a 2x2 quad with values from -1 to +1.
 * If you want a unit quad with that goes from 0 to 1 you'd call it with
 *
 *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);
 *
 * If you want a unit quad centered above 0,0 you'd call it with
 *
 *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
 * @param {number} [xOffset] the amount to offset the quad in X
 * @param {number} [yOffset] the amount to offset the quad in Y
 * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo
 * @memberOf module:twgl/primitives
 * @function createXYQuadBuffers
 */

/**
 * Creates XY quad Buffers
 *
 * The default with no parameters will return a 2x2 quad with values from -1 to +1.
 * If you want a unit quad with that goes from 0 to 1 you'd call it with
 *
 *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);
 *
 * If you want a unit quad centered above 0,0 you'd call it with
 *
 *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
 * @param {number} [xOffset] the amount to offset the quad in X
 * @param {number} [yOffset] the amount to offset the quad in Y
 * @return {module:twgl.BufferInfo} the created XY Quad buffers
 * @memberOf module:twgl/primitives
 * @function createXYQuadBufferInfo
 */

/**
 * Creates XY quad vertices
 *
 * The default with no parameters will return a 2x2 quad with values from -1 to +1.
 * If you want a unit quad with that goes from 0 to 1 you'd call it with
 *
 *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);
 *
 * If you want a unit quad centered above 0,0 you'd call it with
 *
 *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);
 *
 * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
 * @param {number} [xOffset] the amount to offset the quad in X
 * @param {number} [yOffset] the amount to offset the quad in Y
 * @return {Object.<string, TypedArray>} the created XY Quad vertices
 * @memberOf module:twgl/primitives
 */
function createXYQuadVertices(size, xOffset, yOffset) {
  size = size || 2;
  xOffset = xOffset || 0;
  yOffset = yOffset || 0;
  size *= 0.5;
  return {
    position: {
      numComponents: 2,
      data: [
        xOffset + -1 * size, yOffset + -1 * size,
        xOffset +  1 * size, yOffset + -1 * size,
        xOffset + -1 * size, yOffset +  1 * size,
        xOffset +  1 * size, yOffset +  1 * size,
      ],
    },
    normal: [
      0, 0, 1,
      0, 0, 1,
      0, 0, 1,
      0, 0, 1,
    ],
    texcoord: [
      0, 0,
      1, 0,
      0, 1,
      1, 1,
    ],
    indices: [ 0, 1, 2, 2, 1, 3 ],
  };
}

/**
 * Creates XZ plane BufferInfo.
 *
 * The created plane has position, normal, and texcoord data
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [width] Width of the plane. Default = 1
 * @param {number} [depth] Depth of the plane. Default = 1
 * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
 * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
 * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.
 * @return {module:twgl.BufferInfo} The created plane BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createPlaneBufferInfo
 */

/**
 * Creates XZ plane buffers.
 *
 * The created plane has position, normal, and texcoord data
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [width] Width of the plane. Default = 1
 * @param {number} [depth] Depth of the plane. Default = 1
 * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
 * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
 * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.
 * @return {Object.<string, WebGLBuffer>} The created plane buffers.
 * @memberOf module:twgl/primitives
 * @function createPlaneBuffers
 */

/**
 * Creates XZ plane vertices.
 *
 * The created plane has position, normal, and texcoord data
 *
 * @param {number} [width] Width of the plane. Default = 1
 * @param {number} [depth] Depth of the plane. Default = 1
 * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
 * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
 * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.
 * @return {Object.<string, TypedArray>} The created plane vertices.
 * @memberOf module:twgl/primitives
 */
function createPlaneVertices(
    width,
    depth,
    subdivisionsWidth,
    subdivisionsDepth,
    matrix) {
  width = width || 1;
  depth = depth || 1;
  subdivisionsWidth = subdivisionsWidth || 1;
  subdivisionsDepth = subdivisionsDepth || 1;
  matrix = matrix || identity();

  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);
  const positions = createAugmentedTypedArray(3, numVertices);
  const normals = createAugmentedTypedArray(3, numVertices);
  const texcoords = createAugmentedTypedArray(2, numVertices);

  for (let z = 0; z <= subdivisionsDepth; z++) {
    for (let x = 0; x <= subdivisionsWidth; x++) {
      const u = x / subdivisionsWidth;
      const v = z / subdivisionsDepth;
      positions.push(
          width * u - width * 0.5,
          0,
          depth * v - depth * 0.5);
      normals.push(0, 1, 0);
      texcoords.push(u, v);
    }
  }

  const numVertsAcross = subdivisionsWidth + 1;
  const indices = createAugmentedTypedArray(
      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);

  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line
    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line
      // Make triangle 1 of quad.
      indices.push(
          (z + 0) * numVertsAcross + x,
          (z + 1) * numVertsAcross + x,
          (z + 0) * numVertsAcross + x + 1);

      // Make triangle 2 of quad.
      indices.push(
          (z + 1) * numVertsAcross + x,
          (z + 1) * numVertsAcross + x + 1,
          (z + 0) * numVertsAcross + x + 1);
    }
  }

  const arrays = reorientVertices({
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices,
  }, matrix);
  return arrays;
}

/**
 * Creates sphere BufferInfo.
 *
 * The created sphere has position, normal, and texcoord data
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius radius of the sphere.
 * @param {number} subdivisionsAxis number of steps around the sphere.
 * @param {number} subdivisionsHeight number of vertically on the sphere.
 * @param {number} [opt_startLatitudeInRadians] where to start the
 *     top of the sphere. Default = 0.
 * @param {number} [opt_endLatitudeInRadians] Where to end the
 *     bottom of the sphere. Default = Math.PI.
 * @param {number} [opt_startLongitudeInRadians] where to start
 *     wrapping the sphere. Default = 0.
 * @param {number} [opt_endLongitudeInRadians] where to end
 *     wrapping the sphere. Default = 2 * Math.PI.
 * @return {module:twgl.BufferInfo} The created sphere BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createSphereBufferInfo
 */

/**
 * Creates sphere buffers.
 *
 * The created sphere has position, normal, and texcoord data
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius radius of the sphere.
 * @param {number} subdivisionsAxis number of steps around the sphere.
 * @param {number} subdivisionsHeight number of vertically on the sphere.
 * @param {number} [opt_startLatitudeInRadians] where to start the
 *     top of the sphere. Default = 0.
 * @param {number} [opt_endLatitudeInRadians] Where to end the
 *     bottom of the sphere. Default = Math.PI.
 * @param {number} [opt_startLongitudeInRadians] where to start
 *     wrapping the sphere. Default = 0.
 * @param {number} [opt_endLongitudeInRadians] where to end
 *     wrapping the sphere. Default = 2 * Math.PI.
 * @return {Object.<string, WebGLBuffer>} The created sphere buffers.
 * @memberOf module:twgl/primitives
 * @function createSphereBuffers
 */

/**
 * Creates sphere vertices.
 *
 * The created sphere has position, normal, and texcoord data
 *
 * @param {number} radius radius of the sphere.
 * @param {number} subdivisionsAxis number of steps around the sphere.
 * @param {number} subdivisionsHeight number of vertically on the sphere.
 * @param {number} [opt_startLatitudeInRadians] where to start the
 *     top of the sphere. Default = 0.
 * @param {number} [opt_endLatitudeInRadians] Where to end the
 *     bottom of the sphere. Default = Math.PI.
 * @param {number} [opt_startLongitudeInRadians] where to start
 *     wrapping the sphere. Default = 0.
 * @param {number} [opt_endLongitudeInRadians] where to end
 *     wrapping the sphere. Default = 2 * Math.PI.
 * @return {Object.<string, TypedArray>} The created sphere vertices.
 * @memberOf module:twgl/primitives
 */
function createSphereVertices(
    radius,
    subdivisionsAxis,
    subdivisionsHeight,
    opt_startLatitudeInRadians,
    opt_endLatitudeInRadians,
    opt_startLongitudeInRadians,
    opt_endLongitudeInRadians) {
  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {
    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');
  }

  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;
  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;
  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;
  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);

  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;
  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;

  // We are going to generate our sphere by iterating through its
  // spherical coordinates and generating 2 triangles for each quad on a
  // ring of the sphere.
  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);
  const positions = createAugmentedTypedArray(3, numVertices);
  const normals   = createAugmentedTypedArray(3, numVertices);
  const texcoords = createAugmentedTypedArray(2, numVertices);

  // Generate the individual vertices in our vertex buffer.
  for (let y = 0; y <= subdivisionsHeight; y++) {
    for (let x = 0; x <= subdivisionsAxis; x++) {
      // Generate a vertex based on its spherical coordinates
      const u = x / subdivisionsAxis;
      const v = y / subdivisionsHeight;
      const theta = longRange * u + opt_startLongitudeInRadians;
      const phi = latRange * v + opt_startLatitudeInRadians;
      const sinTheta = Math.sin(theta);
      const cosTheta = Math.cos(theta);
      const sinPhi = Math.sin(phi);
      const cosPhi = Math.cos(phi);
      const ux = cosTheta * sinPhi;
      const uy = cosPhi;
      const uz = sinTheta * sinPhi;
      positions.push(radius * ux, radius * uy, radius * uz);
      normals.push(ux, uy, uz);
      texcoords.push(1 - u, v);
    }
  }

  const numVertsAround = subdivisionsAxis + 1;
  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);
  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line
    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line
      // Make triangle 1 of quad.
      indices.push(
          (y + 0) * numVertsAround + x,
          (y + 0) * numVertsAround + x + 1,
          (y + 1) * numVertsAround + x);

      // Make triangle 2 of quad.
      indices.push(
          (y + 1) * numVertsAround + x,
          (y + 0) * numVertsAround + x + 1,
          (y + 1) * numVertsAround + x + 1);
    }
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices,
  };
}

/**
 * Array of the indices of corners of each face of a cube.
 * @type {Array.<number[]>}
 * @private
 */
const CUBE_FACE_INDICES = [
  [3, 7, 5, 1],  // right
  [6, 2, 0, 4],  // left
  [6, 7, 3, 2],  // ??
  [0, 1, 5, 4],  // ??
  [7, 6, 4, 5],  // front
  [2, 3, 1, 0],  // back
];

/**
 * Creates a BufferInfo for a cube.
 *
 * The cube is created around the origin. (-size / 2, size / 2).
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [size] width, height and depth of the cube.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createCubeBufferInfo
 */

/**
 * Creates the buffers and indices for a cube.
 *
 * The cube is created around the origin. (-size / 2, size / 2).
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [size] width, height and depth of the cube.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createCubeBuffers
 */

/**
 * Creates the vertices and indices for a cube.
 *
 * The cube is created around the origin. (-size / 2, size / 2).
 *
 * @param {number} [size] width, height and depth of the cube.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */
function createCubeVertices(size) {
  size = size || 1;
  const k = size / 2;

  const cornerVertices = [
    [-k, -k, -k],
    [+k, -k, -k],
    [-k, +k, -k],
    [+k, +k, -k],
    [-k, -k, +k],
    [+k, -k, +k],
    [-k, +k, +k],
    [+k, +k, +k],
  ];

  const faceNormals = [
    [+1, +0, +0],
    [-1, +0, +0],
    [+0, +1, +0],
    [+0, -1, +0],
    [+0, +0, +1],
    [+0, +0, -1],
  ];

  const uvCoords = [
    [1, 0],
    [0, 0],
    [0, 1],
    [1, 1],
  ];

  const numVertices = 6 * 4;
  const positions = createAugmentedTypedArray(3, numVertices);
  const normals   = createAugmentedTypedArray(3, numVertices);
  const texcoords = createAugmentedTypedArray(2 , numVertices);
  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);

  for (let f = 0; f < 6; ++f) {
    const faceIndices = CUBE_FACE_INDICES[f];
    for (let v = 0; v < 4; ++v) {
      const position = cornerVertices[faceIndices[v]];
      const normal = faceNormals[f];
      const uv = uvCoords[v];

      // Each face needs all four vertices because the normals and texture
      // coordinates are not all the same.
      positions.push(position);
      normals.push(normal);
      texcoords.push(uv);

    }
    // Two triangles make a square face.
    const offset = 4 * f;
    indices.push(offset + 0, offset + 1, offset + 2);
    indices.push(offset + 0, offset + 2, offset + 3);
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices,
  };
}

/**
 * Creates a BufferInfo for a truncated cone, which is like a cylinder
 * except that it has different top and bottom radii. A truncated cone
 * can also be used to create cylinders and regular cones. The
 * truncated cone will be created centered about the origin, with the
 * y axis as its vertical axis.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} bottomRadius Bottom radius of truncated cone.
 * @param {number} topRadius Top radius of truncated cone.
 * @param {number} height Height of truncated cone.
 * @param {number} radialSubdivisions The number of subdivisions around the
 *     truncated cone.
 * @param {number} verticalSubdivisions The number of subdivisions down the
 *     truncated cone.
 * @param {boolean} [opt_topCap] Create top cap. Default = true.
 * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
 * @return {module:twgl.BufferInfo} The created cone BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createTruncatedConeBufferInfo
 */

/**
 * Creates buffers for a truncated cone, which is like a cylinder
 * except that it has different top and bottom radii. A truncated cone
 * can also be used to create cylinders and regular cones. The
 * truncated cone will be created centered about the origin, with the
 * y axis as its vertical axis.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} bottomRadius Bottom radius of truncated cone.
 * @param {number} topRadius Top radius of truncated cone.
 * @param {number} height Height of truncated cone.
 * @param {number} radialSubdivisions The number of subdivisions around the
 *     truncated cone.
 * @param {number} verticalSubdivisions The number of subdivisions down the
 *     truncated cone.
 * @param {boolean} [opt_topCap] Create top cap. Default = true.
 * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
 * @return {Object.<string, WebGLBuffer>} The created cone buffers.
 * @memberOf module:twgl/primitives
 * @function createTruncatedConeBuffers
 */

/**
 * Creates vertices for a truncated cone, which is like a cylinder
 * except that it has different top and bottom radii. A truncated cone
 * can also be used to create cylinders and regular cones. The
 * truncated cone will be created centered about the origin, with the
 * y axis as its vertical axis. .
 *
 * @param {number} bottomRadius Bottom radius of truncated cone.
 * @param {number} topRadius Top radius of truncated cone.
 * @param {number} height Height of truncated cone.
 * @param {number} radialSubdivisions The number of subdivisions around the
 *     truncated cone.
 * @param {number} verticalSubdivisions The number of subdivisions down the
 *     truncated cone.
 * @param {boolean} [opt_topCap] Create top cap. Default = true.
 * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
 * @return {Object.<string, TypedArray>} The created cone vertices.
 * @memberOf module:twgl/primitives
 */
function createTruncatedConeVertices(
    bottomRadius,
    topRadius,
    height,
    radialSubdivisions,
    verticalSubdivisions,
    opt_topCap,
    opt_bottomCap) {
  if (radialSubdivisions < 3) {
    throw new Error('radialSubdivisions must be 3 or greater');
  }

  if (verticalSubdivisions < 1) {
    throw new Error('verticalSubdivisions must be 1 or greater');
  }

  const topCap = (opt_topCap === undefined) ? true : opt_topCap;
  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;

  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);

  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);
  const positions = createAugmentedTypedArray(3, numVertices);
  const normals   = createAugmentedTypedArray(3, numVertices);
  const texcoords = createAugmentedTypedArray(2, numVertices);
  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);

  const vertsAroundEdge = radialSubdivisions + 1;

  // The slant of the cone is constant across its surface
  const slant = Math.atan2(bottomRadius - topRadius, height);
  const cosSlant = Math.cos(slant);
  const sinSlant = Math.sin(slant);

  const start = topCap ? -2 : 0;
  const end = verticalSubdivisions + (bottomCap ? 2 : 0);

  for (let yy = start; yy <= end; ++yy) {
    let v = yy / verticalSubdivisions;
    let y = height * v;
    let ringRadius;
    if (yy < 0) {
      y = 0;
      v = 1;
      ringRadius = bottomRadius;
    } else if (yy > verticalSubdivisions) {
      y = height;
      v = 1;
      ringRadius = topRadius;
    } else {
      ringRadius = bottomRadius +
        (topRadius - bottomRadius) * (yy / verticalSubdivisions);
    }
    if (yy === -2 || yy === verticalSubdivisions + 2) {
      ringRadius = 0;
      v = 0;
    }
    y -= height / 2;
    for (let ii = 0; ii < vertsAroundEdge; ++ii) {
      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);
      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);
      positions.push(sin * ringRadius, y, cos * ringRadius);
      if (yy < 0) {
        normals.push(0, -1, 0);
      } else if (yy > verticalSubdivisions) {
        normals.push(0, 1, 0);
      } else if (ringRadius === 0.0) {
        normals.push(0, 0, 0);
      } else {
        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);
      }
      texcoords.push((ii / radialSubdivisions), 1 - v);
    }
  }

  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line
    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {
      continue;
    }
    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line
      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,
                   vertsAroundEdge * (yy + 0) + 1 + ii,
                   vertsAroundEdge * (yy + 1) + 1 + ii);
      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,
                   vertsAroundEdge * (yy + 1) + 1 + ii,
                   vertsAroundEdge * (yy + 1) + 0 + ii);
    }
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices,
  };
}

/**
 * Expands RLE data
 * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z
 * @param {number[]} [padding] value to add each entry with.
 * @return {number[]} the expanded rleData
 * @private
 */
function expandRLEData(rleData, padding) {
  padding = padding || [];
  const data = [];
  for (let ii = 0; ii < rleData.length; ii += 4) {
    const runLength = rleData[ii];
    const element = rleData.slice(ii + 1, ii + 4);
    element.push.apply(element, padding);
    for (let jj = 0; jj < runLength; ++jj) {
      data.push.apply(data, element);
    }
  }
  return data;
}

/**
 * Creates 3D 'F' BufferInfo.
 * An 'F' is useful because you can easily tell which way it is oriented.
 * The created 'F' has position, normal, texcoord, and color buffers.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function create3DFBufferInfo
 */

/**
 * Creates 3D 'F' buffers.
 * An 'F' is useful because you can easily tell which way it is oriented.
 * The created 'F' has position, normal, texcoord, and color buffers.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function create3DFBuffers
 */

/**
 * Creates 3D 'F' vertices.
 * An 'F' is useful because you can easily tell which way it is oriented.
 * The created 'F' has position, normal, texcoord, and color arrays.
 *
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */
function create3DFVertices() {

  const positions = [
    // left column front
    0,   0,  0,
    0, 150,  0,
    30,   0,  0,
    0, 150,  0,
    30, 150,  0,
    30,   0,  0,

    // top rung front
    30,   0,  0,
    30,  30,  0,
    100,   0,  0,
    30,  30,  0,
    100,  30,  0,
    100,   0,  0,

    // middle rung front
    30,  60,  0,
    30,  90,  0,
    67,  60,  0,
    30,  90,  0,
    67,  90,  0,
    67,  60,  0,

    // left column back
      0,   0,  30,
     30,   0,  30,
      0, 150,  30,
      0, 150,  30,
     30,   0,  30,
     30, 150,  30,

    // top rung back
     30,   0,  30,
    100,   0,  30,
     30,  30,  30,
     30,  30,  30,
    100,   0,  30,
    100,  30,  30,

    // middle rung back
     30,  60,  30,
     67,  60,  30,
     30,  90,  30,
     30,  90,  30,
     67,  60,  30,
     67,  90,  30,

    // top
      0,   0,   0,
    100,   0,   0,
    100,   0,  30,
      0,   0,   0,
    100,   0,  30,
      0,   0,  30,

    // top rung front
    100,   0,   0,
    100,  30,   0,
    100,  30,  30,
    100,   0,   0,
    100,  30,  30,
    100,   0,  30,

    // under top rung
    30,   30,   0,
    30,   30,  30,
    100,  30,  30,
    30,   30,   0,
    100,  30,  30,
    100,  30,   0,

    // between top rung and middle
    30,   30,   0,
    30,   60,  30,
    30,   30,  30,
    30,   30,   0,
    30,   60,   0,
    30,   60,  30,

    // top of middle rung
    30,   60,   0,
    67,   60,  30,
    30,   60,  30,
    30,   60,   0,
    67,   60,   0,
    67,   60,  30,

    // front of middle rung
    67,   60,   0,
    67,   90,  30,
    67,   60,  30,
    67,   60,   0,
    67,   90,   0,
    67,   90,  30,

    // bottom of middle rung.
    30,   90,   0,
    30,   90,  30,
    67,   90,  30,
    30,   90,   0,
    67,   90,  30,
    67,   90,   0,

    // front of bottom
    30,   90,   0,
    30,  150,  30,
    30,   90,  30,
    30,   90,   0,
    30,  150,   0,
    30,  150,  30,

    // bottom
    0,   150,   0,
    0,   150,  30,
    30,  150,  30,
    0,   150,   0,
    30,  150,  30,
    30,  150,   0,

    // left side
    0,   0,   0,
    0,   0,  30,
    0, 150,  30,
    0,   0,   0,
    0, 150,  30,
    0, 150,   0,
  ];

  const texcoords = [
    // left column front
    0.22, 0.19,
    0.22, 0.79,
    0.34, 0.19,
    0.22, 0.79,
    0.34, 0.79,
    0.34, 0.19,

    // top rung front
    0.34, 0.19,
    0.34, 0.31,
    0.62, 0.19,
    0.34, 0.31,
    0.62, 0.31,
    0.62, 0.19,

    // middle rung front
    0.34, 0.43,
    0.34, 0.55,
    0.49, 0.43,
    0.34, 0.55,
    0.49, 0.55,
    0.49, 0.43,

    // left column back
    0, 0,
    1, 0,
    0, 1,
    0, 1,
    1, 0,
    1, 1,

    // top rung back
    0, 0,
    1, 0,
    0, 1,
    0, 1,
    1, 0,
    1, 1,

    // middle rung back
    0, 0,
    1, 0,
    0, 1,
    0, 1,
    1, 0,
    1, 1,

    // top
    0, 0,
    1, 0,
    1, 1,
    0, 0,
    1, 1,
    0, 1,

    // top rung front
    0, 0,
    1, 0,
    1, 1,
    0, 0,
    1, 1,
    0, 1,

    // under top rung
    0, 0,
    0, 1,
    1, 1,
    0, 0,
    1, 1,
    1, 0,

    // between top rung and middle
    0, 0,
    1, 1,
    0, 1,
    0, 0,
    1, 0,
    1, 1,

    // top of middle rung
    0, 0,
    1, 1,
    0, 1,
    0, 0,
    1, 0,
    1, 1,

    // front of middle rung
    0, 0,
    1, 1,
    0, 1,
    0, 0,
    1, 0,
    1, 1,

    // bottom of middle rung.
    0, 0,
    0, 1,
    1, 1,
    0, 0,
    1, 1,
    1, 0,

    // front of bottom
    0, 0,
    1, 1,
    0, 1,
    0, 0,
    1, 0,
    1, 1,

    // bottom
    0, 0,
    0, 1,
    1, 1,
    0, 0,
    1, 1,
    1, 0,

    // left side
    0, 0,
    0, 1,
    1, 1,
    0, 0,
    1, 1,
    1, 0,
  ];

  const normals = expandRLEData([
    // left column front
    // top rung front
    // middle rung front
    18, 0, 0, 1,

    // left column back
    // top rung back
    // middle rung back
    18, 0, 0, -1,

    // top
    6, 0, 1, 0,

    // top rung front
    6, 1, 0, 0,

    // under top rung
    6, 0, -1, 0,

    // between top rung and middle
    6, 1, 0, 0,

    // top of middle rung
    6, 0, 1, 0,

    // front of middle rung
    6, 1, 0, 0,

    // bottom of middle rung.
    6, 0, -1, 0,

    // front of bottom
    6, 1, 0, 0,

    // bottom
    6, 0, -1, 0,

    // left side
    6, -1, 0, 0,
  ]);

  const colors = expandRLEData([
        // left column front
        // top rung front
        // middle rung front
      18, 200,  70, 120,

        // left column back
        // top rung back
        // middle rung back
      18, 80, 70, 200,

        // top
      6, 70, 200, 210,

        // top rung front
      6, 200, 200, 70,

        // under top rung
      6, 210, 100, 70,

        // between top rung and middle
      6, 210, 160, 70,

        // top of middle rung
      6, 70, 180, 210,

        // front of middle rung
      6, 100, 70, 210,

        // bottom of middle rung.
      6, 76, 210, 100,

        // front of bottom
      6, 140, 210, 80,

        // bottom
      6, 90, 130, 110,

        // left side
      6, 160, 160, 220,
  ], [255]);

  const numVerts = positions.length / 3;

  const arrays = {
    position: createAugmentedTypedArray(3, numVerts),
    texcoord: createAugmentedTypedArray(2,  numVerts),
    normal: createAugmentedTypedArray(3, numVerts),
    color: createAugmentedTypedArray(4, numVerts, Uint8Array),
    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),
  };

  arrays.position.push(positions);
  arrays.texcoord.push(texcoords);
  arrays.normal.push(normals);
  arrays.color.push(colors);

  for (let ii = 0; ii < numVerts; ++ii) {
    arrays.indices.push(ii);
  }

  return arrays;
}

/**
 * Creates crescent BufferInfo.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} verticalRadius The vertical radius of the crescent.
 * @param {number} outerRadius The outer radius of the crescent.
 * @param {number} innerRadius The inner radius of the crescent.
 * @param {number} thickness The thickness of the crescent.
 * @param {number} subdivisionsDown number of steps around the crescent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createCresentBufferInfo
 */

/**
 * Creates crescent buffers.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} verticalRadius The vertical radius of the crescent.
 * @param {number} outerRadius The outer radius of the crescent.
 * @param {number} innerRadius The inner radius of the crescent.
 * @param {number} thickness The thickness of the crescent.
 * @param {number} subdivisionsDown number of steps around the crescent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createCresentBuffers
 */

/**
 * Creates crescent vertices.
 *
 * @param {number} verticalRadius The vertical radius of the crescent.
 * @param {number} outerRadius The outer radius of the crescent.
 * @param {number} innerRadius The inner radius of the crescent.
 * @param {number} thickness The thickness of the crescent.
 * @param {number} subdivisionsDown number of steps around the crescent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 * @function createCresentBuffers
 */

/**
 * Creates crescent BufferInfo.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} verticalRadius The vertical radius of the crescent.
 * @param {number} outerRadius The outer radius of the crescent.
 * @param {number} innerRadius The inner radius of the crescent.
 * @param {number} thickness The thickness of the crescent.
 * @param {number} subdivisionsDown number of steps around the crescent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createCrescentBufferInfo
 */

/**
 * Creates crescent buffers.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} verticalRadius The vertical radius of the crescent.
 * @param {number} outerRadius The outer radius of the crescent.
 * @param {number} innerRadius The inner radius of the crescent.
 * @param {number} thickness The thickness of the crescent.
 * @param {number} subdivisionsDown number of steps around the crescent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createCrescentBuffers
 */

/**
 * Creates crescent vertices.
 *
 * @param {number} verticalRadius The vertical radius of the crescent.
 * @param {number} outerRadius The outer radius of the crescent.
 * @param {number} innerRadius The inner radius of the crescent.
 * @param {number} thickness The thickness of the crescent.
 * @param {number} subdivisionsDown number of steps around the crescent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */
 function createCrescentVertices(
    verticalRadius,
    outerRadius,
    innerRadius,
    thickness,
    subdivisionsDown,
    startOffset,
    endOffset) {
  if (subdivisionsDown <= 0) {
    throw new Error('subdivisionDown must be > 0');
  }

  startOffset = startOffset || 0;
  endOffset   = endOffset || 1;

  const subdivisionsThick = 2;

  const offsetRange = endOffset - startOffset;
  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);
  const positions   = createAugmentedTypedArray(3, numVertices);
  const normals     = createAugmentedTypedArray(3, numVertices);
  const texcoords   = createAugmentedTypedArray(2, numVertices);

  function lerp(a, b, s) {
    return a + (b - a) * s;
  }

  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {
    for (let z = 0; z <= subdivisionsDown; z++) {
      const uBack = x / (subdivisionsThick - 1);
      const v = z / subdivisionsDown;
      const xBack = (uBack - 0.5) * 2;
      const angle = (startOffset + (v * offsetRange)) * Math.PI;
      const s = Math.sin(angle);
      const c = Math.cos(angle);
      const radius = lerp(verticalRadius, arcRadius, s);
      const px = xBack * thickness;
      const py = c * verticalRadius;
      const pz = s * radius;
      positions.push(px, py, pz);
      const n = add(multiply([0, s, c], normalMult), normalAdd);
      normals.push(n);
      texcoords.push(uBack * uMult + uAdd, v);
    }
  }

  // Generate the individual vertices in our vertex buffer.
  for (let x = 0; x < subdivisionsThick; x++) {
    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;
    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);
    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);
    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);
    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);
  }

  // Do outer surface.
  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);

  function createSurface(leftArcOffset, rightArcOffset) {
    for (let z = 0; z < subdivisionsDown; ++z) {
      // Make triangle 1 of quad.
      indices.push(
          leftArcOffset + z + 0,
          leftArcOffset + z + 1,
          rightArcOffset + z + 0);

      // Make triangle 2 of quad.
      indices.push(
          leftArcOffset + z + 1,
          rightArcOffset + z + 1,
          rightArcOffset + z + 0);
    }
  }

  const numVerticesDown = subdivisionsDown + 1;
  // front
  createSurface(numVerticesDown * 0, numVerticesDown * 4);
  // right
  createSurface(numVerticesDown * 5, numVerticesDown * 7);
  // back
  createSurface(numVerticesDown * 6, numVerticesDown * 2);
  // left
  createSurface(numVerticesDown * 3, numVerticesDown * 1);

  return {
    position: positions,
    normal:   normals,
    texcoord: texcoords,
    indices:  indices,
  };
}

/**
 * Creates cylinder BufferInfo. The cylinder will be created around the origin
 * along the y-axis.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius Radius of cylinder.
 * @param {number} height Height of cylinder.
 * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
 * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
 * @param {boolean} [topCap] Create top cap. Default = true.
 * @param {boolean} [bottomCap] Create bottom cap. Default = true.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createCylinderBufferInfo
 */

 /**
  * Creates cylinder buffers. The cylinder will be created around the origin
  * along the y-axis.
  *
  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
  * @param {number} radius Radius of cylinder.
  * @param {number} height Height of cylinder.
  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
  * @param {boolean} [topCap] Create top cap. Default = true.
  * @param {boolean} [bottomCap] Create bottom cap. Default = true.
  * @return {Object.<string, WebGLBuffer>} The created buffers.
  * @memberOf module:twgl/primitives
  * @function createCylinderBuffers
  */

 /**
  * Creates cylinder vertices. The cylinder will be created around the origin
  * along the y-axis.
  *
  * @param {number} radius Radius of cylinder.
  * @param {number} height Height of cylinder.
  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
  * @param {boolean} [topCap] Create top cap. Default = true.
  * @param {boolean} [bottomCap] Create bottom cap. Default = true.
  * @return {Object.<string, TypedArray>} The created vertices.
  * @memberOf module:twgl/primitives
  */
function createCylinderVertices(
    radius,
    height,
    radialSubdivisions,
    verticalSubdivisions,
    topCap,
    bottomCap) {
  return createTruncatedConeVertices(
      radius,
      radius,
      height,
      radialSubdivisions,
      verticalSubdivisions,
      topCap,
      bottomCap);
}

/**
 * Creates BufferInfo for a torus
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius radius of center of torus circle.
 * @param {number} thickness radius of torus ring.
 * @param {number} radialSubdivisions The number of subdivisions around the torus.
 * @param {number} bodySubdivisions The number of subdivisions around the body torus.
 * @param {boolean} [startAngle] start angle in radians. Default = 0.
 * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createTorusBufferInfo
 */

/**
 * Creates buffers for a torus
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius radius of center of torus circle.
 * @param {number} thickness radius of torus ring.
 * @param {number} radialSubdivisions The number of subdivisions around the torus.
 * @param {number} bodySubdivisions The number of subdivisions around the body torus.
 * @param {boolean} [startAngle] start angle in radians. Default = 0.
 * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createTorusBuffers
 */

/**
 * Creates vertices for a torus
 *
 * @param {number} radius radius of center of torus circle.
 * @param {number} thickness radius of torus ring.
 * @param {number} radialSubdivisions The number of subdivisions around the torus.
 * @param {number} bodySubdivisions The number of subdivisions around the body torus.
 * @param {boolean} [startAngle] start angle in radians. Default = 0.
 * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */
function createTorusVertices(
    radius,
    thickness,
    radialSubdivisions,
    bodySubdivisions,
    startAngle,
    endAngle) {
  if (radialSubdivisions < 3) {
    throw new Error('radialSubdivisions must be 3 or greater');
  }

  if (bodySubdivisions < 3) {
    throw new Error('verticalSubdivisions must be 3 or greater');
  }

  startAngle = startAngle || 0;
  endAngle = endAngle || Math.PI * 2;
  const range = endAngle - startAngle;

  const radialParts = radialSubdivisions + 1;
  const bodyParts   = bodySubdivisions + 1;
  const numVertices = radialParts * bodyParts;
  const positions   = createAugmentedTypedArray(3, numVertices);
  const normals     = createAugmentedTypedArray(3, numVertices);
  const texcoords   = createAugmentedTypedArray(2, numVertices);
  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);

  for (let slice = 0; slice < bodyParts; ++slice) {
    const v = slice / bodySubdivisions;
    const sliceAngle = v * Math.PI * 2;
    const sliceSin = Math.sin(sliceAngle);
    const ringRadius = radius + sliceSin * thickness;
    const ny = Math.cos(sliceAngle);
    const y = ny * thickness;
    for (let ring = 0; ring < radialParts; ++ring) {
      const u = ring / radialSubdivisions;
      const ringAngle = startAngle + u * range;
      const xSin = Math.sin(ringAngle);
      const zCos = Math.cos(ringAngle);
      const x = xSin * ringRadius;
      const z = zCos * ringRadius;
      const nx = xSin * sliceSin;
      const nz = zCos * sliceSin;
      positions.push(x, y, z);
      normals.push(nx, ny, nz);
      texcoords.push(u, 1 - v);
    }
  }

  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line
    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line
      const nextRingIndex  = 1 + ring;
      const nextSliceIndex = 1 + slice;
      indices.push(radialParts * slice          + ring,
                   radialParts * nextSliceIndex + ring,
                   radialParts * slice          + nextRingIndex);
      indices.push(radialParts * nextSliceIndex + ring,
                   radialParts * nextSliceIndex + nextRingIndex,
                   radialParts * slice          + nextRingIndex);
    }
  }

  return {
    position: positions,
    normal:   normals,
    texcoord: texcoords,
    indices:  indices,
  };
}


/**
 * Creates a disc BufferInfo. The disc will be in the xz plane, centered at
 * the origin. When creating, at least 3 divisions, or pie
 * pieces, need to be specified, otherwise the triangles making
 * up the disc will be degenerate. You can also specify the
 * number of radial pieces `stacks`. A value of 1 for
 * stacks will give you a simple disc of pie pieces.  If you
 * want to create an annulus you can set `innerRadius` to a
 * value > 0. Finally, `stackPower` allows you to have the widths
 * increase or decrease as you move away from the center. This
 * is particularly useful when using the disc as a ground plane
 * with a fixed camera such that you don't need the resolution
 * of small triangles near the perimeter. For example, a value
 * of 2 will produce stacks whose outside radius increases with
 * the square of the stack index. A value of 1 will give uniform
 * stacks.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius Radius of the ground plane.
 * @param {number} divisions Number of triangles in the ground plane (at least 3).
 * @param {number} [stacks] Number of radial divisions (default=1).
 * @param {number} [innerRadius] Default 0.
 * @param {number} [stackPower] Power to raise stack size to for decreasing width.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createDiscBufferInfo
 */

/**
 * Creates disc buffers. The disc will be in the xz plane, centered at
 * the origin. When creating, at least 3 divisions, or pie
 * pieces, need to be specified, otherwise the triangles making
 * up the disc will be degenerate. You can also specify the
 * number of radial pieces `stacks`. A value of 1 for
 * stacks will give you a simple disc of pie pieces.  If you
 * want to create an annulus you can set `innerRadius` to a
 * value > 0. Finally, `stackPower` allows you to have the widths
 * increase or decrease as you move away from the center. This
 * is particularly useful when using the disc as a ground plane
 * with a fixed camera such that you don't need the resolution
 * of small triangles near the perimeter. For example, a value
 * of 2 will produce stacks whose outside radius increases with
 * the square of the stack index. A value of 1 will give uniform
 * stacks.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius Radius of the ground plane.
 * @param {number} divisions Number of triangles in the ground plane (at least 3).
 * @param {number} [stacks] Number of radial divisions (default=1).
 * @param {number} [innerRadius] Default 0.
 * @param {number} [stackPower] Power to raise stack size to for decreasing width.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createDiscBuffers
 */

/**
 * Creates disc vertices. The disc will be in the xz plane, centered at
 * the origin. When creating, at least 3 divisions, or pie
 * pieces, need to be specified, otherwise the triangles making
 * up the disc will be degenerate. You can also specify the
 * number of radial pieces `stacks`. A value of 1 for
 * stacks will give you a simple disc of pie pieces.  If you
 * want to create an annulus you can set `innerRadius` to a
 * value > 0. Finally, `stackPower` allows you to have the widths
 * increase or decrease as you move away from the center. This
 * is particularly useful when using the disc as a ground plane
 * with a fixed camera such that you don't need the resolution
 * of small triangles near the perimeter. For example, a value
 * of 2 will produce stacks whose outside radius increases with
 * the square of the stack index. A value of 1 will give uniform
 * stacks.
 *
 * @param {number} radius Radius of the ground plane.
 * @param {number} divisions Number of triangles in the ground plane (at least 3).
 * @param {number} [stacks] Number of radial divisions (default=1).
 * @param {number} [innerRadius] Default 0.
 * @param {number} [stackPower] Power to raise stack size to for decreasing width.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */
function createDiscVertices(
    radius,
    divisions,
    stacks,
    innerRadius,
    stackPower) {
  if (divisions < 3) {
    throw new Error('divisions must be at least 3');
  }

  stacks = stacks ? stacks : 1;
  stackPower = stackPower ? stackPower : 1;
  innerRadius = innerRadius ? innerRadius : 0;

  // Note: We don't share the center vertex because that would
  // mess up texture coordinates.
  const numVertices = (divisions + 1) * (stacks + 1);

  const positions = createAugmentedTypedArray(3, numVertices);
  const normals   = createAugmentedTypedArray(3, numVertices);
  const texcoords = createAugmentedTypedArray(2, numVertices);
  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);

  let firstIndex = 0;
  const radiusSpan = radius - innerRadius;
  const pointsPerStack = divisions + 1;

  // Build the disk one stack at a time.
  for (let stack = 0; stack <= stacks; ++stack) {
    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);

    for (let i = 0; i <= divisions; ++i) {
      const theta = 2.0 * Math.PI * i / divisions;
      const x = stackRadius * Math.cos(theta);
      const z = stackRadius * Math.sin(theta);

      positions.push(x, 0, z);
      normals.push(0, 1, 0);
      texcoords.push(1 - (i / divisions), stack / stacks);
      if (stack > 0 && i !== divisions) {
        // a, b, c and d are the indices of the vertices of a quad.  unless
        // the current stack is the one closest to the center, in which case
        // the vertices a and b connect to the center vertex.
        const a = firstIndex + (i + 1);
        const b = firstIndex + i;
        const c = firstIndex + i - pointsPerStack;
        const d = firstIndex + (i + 1) - pointsPerStack;

        // Make a quad of the vertices a, b, c, d.
        indices.push(a, b, c);
        indices.push(a, c, d);
      }
    }

    firstIndex += divisions + 1;
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices,
  };
}

/**
 * creates a random integer between 0 and range - 1 inclusive.
 * @param {number} range
 * @return {number} random value between 0 and range - 1 inclusive.
 * @private
 */
function randInt(range) {
  return Math.random() * range | 0;
}

/**
 * Used to supply random colors
 * @callback RandomColorFunc
 * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed
 * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha
 * @return {number} a number from 0 to 255
 * @memberOf module:twgl/primitives
 */

/**
 * @typedef {Object} RandomVerticesOptions
 * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices
 * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers
 * @memberOf module:twgl/primitives
 */

/**
 * Creates an augmentedTypedArray of random vertex colors.
 * If the vertices are indexed (have an indices array) then will
 * just make random colors. Otherwise assumes they are triangles
 * and makes one random color for every 3 vertices.
 * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.
 * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.
 * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.
 * @memberOf module:twgl/primitives
 */
function makeRandomVertexColors(vertices, options) {
  options = options || {};
  const numElements = vertices.position.numElements;
  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);
  const rand = options.rand || function(ndx, channel) {
    return channel < 3 ? randInt(256) : 255;
  };
  vertices.color = vColors;
  if (vertices.indices) {
    // just make random colors if index
    for (let ii = 0; ii < numElements; ++ii) {
      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));
    }
  } else {
    // make random colors per triangle
    const numVertsPerColor = options.vertsPerColor || 3;
    const numSets = numElements / numVertsPerColor;
    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line
      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];
      for (let jj = 0; jj < numVertsPerColor; ++jj) {
        vColors.push(color);
      }
    }
  }
  return vertices;
}

/**
 * creates a function that calls fn to create vertices and then
 * creates a buffers for them
 * @private
 */
function createBufferFunc(fn) {
  return function(gl) {
    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));
    return createBuffersFromArrays(gl, arrays);
  };
}

/**
 * creates a function that calls fn to create vertices and then
 * creates a bufferInfo object for them
 * @private
 */
function createBufferInfoFunc(fn) {
  return function(gl) {
    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));
    return createBufferInfoFromArrays(gl, arrays);
  };
}

const arraySpecPropertyNames = [
  "numComponents",
  "size",
  "type",
  "normalize",
  "stride",
  "offset",
  "attrib",
  "name",
  "attribName",
];

/**
 * Copy elements from one array to another
 *
 * @param {Array|TypedArray} src source array
 * @param {Array|TypedArray} dst dest array
 * @param {number} dstNdx index in dest to copy src
 * @param {number} [offset] offset to add to copied values
 * @private
 */
function copyElements(src, dst, dstNdx, offset) {
  offset = offset || 0;
  const length = src.length;
  for (let ii = 0; ii < length; ++ii) {
    dst[dstNdx + ii] = src[ii] + offset;
  }
}

/**
 * Creates an array of the same time
 *
 * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy
 * @param {number} length size of new array
 * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray
 * @private
 */
function createArrayOfSameType(srcArray, length) {
  const arraySrc = getArray$1(srcArray);
  const newArray = new arraySrc.constructor(length);
  let newArraySpec = newArray;
  // If it appears to have been augmented make new one augmented
  if (arraySrc.numComponents && arraySrc.numElements) {
    augmentTypedArray(newArray, arraySrc.numComponents);
  }
  // If it was a full spec make new one a full spec
  if (srcArray.data) {
    newArraySpec = {
      data: newArray,
    };
    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);
  }
  return newArraySpec;
}

/**
 * Concatenates sets of vertices
 *
 * Assumes the vertices match in composition. For example
 * if one set of vertices has positions, normals, and indices
 * all sets of vertices must have positions, normals, and indices
 * and of the same type.
 *
 * Example:
 *
 *      const cubeVertices = twgl.primitives.createCubeVertices(2);
 *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);
 *      // move the sphere 2 units up
 *      twgl.primitives.reorientVertices(
 *          sphereVertices, twgl.m4.translation([0, 2, 0]));
 *      // merge the sphere with the cube
 *      const cubeSphereVertices = twgl.primitives.concatVertices(
 *          [cubeVertices, sphereVertices]);
 *      // turn them into WebGL buffers and attrib data
 *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);
 *
 * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices
 * @return {module:twgl.Arrays} The concatenated vertices.
 * @memberOf module:twgl/primitives
 */
function concatVertices(arrayOfArrays) {
  const names = {};
  let baseName;
  // get names of all arrays.
  // and numElements for each set of vertices
  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {
    const arrays = arrayOfArrays[ii];
    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line
      if (!names[name]) {
        names[name] = [];
      }
      if (!baseName && name !== 'indices') {
        baseName = name;
      }
      const arrayInfo = arrays[name];
      const numComponents = getNumComponents$1(arrayInfo, name);
      const array = getArray$1(arrayInfo);
      const numElements = array.length / numComponents;
      names[name].push(numElements);
    });
  }

  // compute length of combined array
  // and return one for reference
  function getLengthOfCombinedArrays(name) {
    let length = 0;
    let arraySpec;
    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {
      const arrays = arrayOfArrays[ii];
      const arrayInfo = arrays[name];
      const array = getArray$1(arrayInfo);
      length += array.length;
      if (!arraySpec || arrayInfo.data) {
        arraySpec = arrayInfo;
      }
    }
    return {
      length: length,
      spec: arraySpec,
    };
  }

  function copyArraysToNewArray(name, base, newArray) {
    let baseIndex = 0;
    let offset = 0;
    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {
      const arrays = arrayOfArrays[ii];
      const arrayInfo = arrays[name];
      const array = getArray$1(arrayInfo);
      if (name === 'indices') {
        copyElements(array, newArray, offset, baseIndex);
        baseIndex += base[ii];
      } else {
        copyElements(array, newArray, offset);
      }
      offset += array.length;
    }
  }

  const base = names[baseName];

  const newArrays = {};
  Object.keys(names).forEach(function(name) {
    const info = getLengthOfCombinedArrays(name);
    const newArraySpec = createArrayOfSameType(info.spec, info.length);
    copyArraysToNewArray(name, base, getArray$1(newArraySpec));
    newArrays[name] = newArraySpec;
  });
  return newArrays;
}

/**
 * Creates a duplicate set of vertices
 *
 * This is useful for calling reorientVertices when you
 * also want to keep the original available
 *
 * @param {module:twgl.Arrays} arrays of vertices
 * @return {module:twgl.Arrays} The duplicated vertices.
 * @memberOf module:twgl/primitives
 */
function duplicateVertices(arrays) {
  const newArrays = {};
  Object.keys(arrays).forEach(function(name) {
    const arraySpec = arrays[name];
    const srcArray = getArray$1(arraySpec);
    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);
    copyElements(srcArray, getArray$1(newArraySpec), 0);
    newArrays[name] = newArraySpec;
  });
  return newArrays;
}

const create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);
const create3DFBuffers = createBufferFunc(create3DFVertices);
const createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);
const createCubeBuffers = createBufferFunc(createCubeVertices);
const createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);
const createPlaneBuffers = createBufferFunc(createPlaneVertices);
const createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);
const createSphereBuffers = createBufferFunc(createSphereVertices);
const createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);
const createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);
const createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);
const createXYQuadBuffers = createBufferFunc(createXYQuadVertices);
const createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);
const createCrescentBuffers = createBufferFunc(createCrescentVertices);
const createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);
const createCylinderBuffers = createBufferFunc(createCylinderVertices);
const createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);
const createTorusBuffers = createBufferFunc(createTorusVertices);
const createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);
const createDiscBuffers = createBufferFunc(createDiscVertices);

// these were mis-spelled until 4.12
const createCresentBufferInfo = createCrescentBufferInfo;
const createCresentBuffers = createCrescentBuffers;
const createCresentVertices = createCrescentVertices;

var primitives = /*#__PURE__*/Object.freeze({
  __proto__: null,
  create3DFBufferInfo: create3DFBufferInfo,
  create3DFBuffers: create3DFBuffers,
  create3DFVertices: create3DFVertices,
  createAugmentedTypedArray: createAugmentedTypedArray,
  createCubeBufferInfo: createCubeBufferInfo,
  createCubeBuffers: createCubeBuffers,
  createCubeVertices: createCubeVertices,
  createPlaneBufferInfo: createPlaneBufferInfo,
  createPlaneBuffers: createPlaneBuffers,
  createPlaneVertices: createPlaneVertices,
  createSphereBufferInfo: createSphereBufferInfo,
  createSphereBuffers: createSphereBuffers,
  createSphereVertices: createSphereVertices,
  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,
  createTruncatedConeBuffers: createTruncatedConeBuffers,
  createTruncatedConeVertices: createTruncatedConeVertices,
  createXYQuadBufferInfo: createXYQuadBufferInfo,
  createXYQuadBuffers: createXYQuadBuffers,
  createXYQuadVertices: createXYQuadVertices,
  createCresentBufferInfo: createCresentBufferInfo,
  createCresentBuffers: createCresentBuffers,
  createCresentVertices: createCresentVertices,
  createCrescentBufferInfo: createCrescentBufferInfo,
  createCrescentBuffers: createCrescentBuffers,
  createCrescentVertices: createCrescentVertices,
  createCylinderBufferInfo: createCylinderBufferInfo,
  createCylinderBuffers: createCylinderBuffers,
  createCylinderVertices: createCylinderVertices,
  createTorusBufferInfo: createTorusBufferInfo,
  createTorusBuffers: createTorusBuffers,
  createTorusVertices: createTorusVertices,
  createDiscBufferInfo: createDiscBufferInfo,
  createDiscBuffers: createDiscBuffers,
  createDiscVertices: createDiscVertices,
  deindexVertices: deindexVertices,
  flattenNormals: flattenNormals,
  makeRandomVertexColors: makeRandomVertexColors,
  reorientDirections: reorientDirections,
  reorientNormals: reorientNormals,
  reorientPositions: reorientPositions,
  reorientVertices: reorientVertices,
  concatVertices: concatVertices,
  duplicateVertices: duplicateVertices
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * Gets the gl version as a number
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @return {number} version of gl
 * @private
 */
//function getVersionAsNumber(gl) {
//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));
//}

/**
 * Check if context is WebGL 2.0
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @return {bool} true if it's WebGL 2.0
 * @memberOf module:twgl
 */
function isWebGL2(gl) {
  // This is the correct check but it's slow
  //  return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0") === 0;
  // This might also be the correct check but I'm assuming it's slow-ish
  // return gl instanceof WebGL2RenderingContext;
  return !!gl.texStorage2D;
}

/**
 * Check if context is WebGL 1.0
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @return {bool} true if it's WebGL 1.0
 * @memberOf module:twgl
 */
function isWebGL1(gl) {
  // This is the correct check but it's slow
  // const version = getVersionAsNumber(gl);
  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96
  // This might also be the correct check but I'm assuming it's slow-ish
  // return gl instanceof WebGLRenderingContext;
  return !gl.texStorage2D;
}

/**
 * Gets a string for WebGL enum
 *
 * Note: Several enums are the same. Without more
 * context (which function) it's impossible to always
 * give the correct enum. As it is, for matching values
 * it gives all enums. Checking the WebGL2RenderingContext
 * that means
 *
 *      0     = ZERO | POINT | NONE | NO_ERROR
 *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT
 *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB
 *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING
 *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING
 *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING
 *
 * It's also not useful for bits really unless you pass in individual bits.
 * In other words
 *
 *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;
 *     twgl.glEnumToString(gl, bits);  // not going to work
 *
 * Note that some enums only exist on extensions. If you
 * want them to show up you need to pass the extension at least
 * once. For example
 *
 *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');
 *     if (ext) {
 *        twgl.glEnumToString(ext, 0);  // just prime the function
 *
 *        ..later..
 *
 *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;
 *        console.log(twgl.glEnumToString(gl, internalFormat));
 *
 * Notice I didn't have to pass the extension the second time. This means
 * you can have place that generically gets an enum for texture formats for example.
 * and as long as you primed the function with the extensions
 *
 * If you're using `twgl.addExtensionsToContext` to enable your extensions
 * then twgl will automatically get the extension's enums.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object
 * @param {number} value the value of the enum you want to look up.
 * @return {string} enum string or hex value
 * @memberOf module:twgl
 * @function glEnumToString
 */
const glEnumToString = (function() {
  const haveEnumsForType = {};
  const enums = {};

  function addEnums(gl) {
    const type = gl.constructor.name;
    if (!haveEnumsForType[type]) {
      for (const key in gl) {
        if (typeof gl[key] === 'number') {
          const existing = enums[gl[key]];
          enums[gl[key]] = existing ? `${existing} | ${key}` : key;
        }
      }
      haveEnumsForType[type] = true;
    }
  }

  return function glEnumToString(gl, value) {
    addEnums(gl);
    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);
  };
}());

var utils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  glEnumToString: glEnumToString,
  isWebGL1: isWebGL1,
  isWebGL2: isWebGL2
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
const defaults$1 = {
  textureColor: new Uint8Array([128, 192, 255, 255]),
  textureOptions: {},
  crossOrigin: undefined,
};
const isArrayBuffer$1 = isArrayBuffer;

// Should we make this on demand?
const getShared2DContext = function() {
  let s_ctx;
  return function getShared2DContext() {
    s_ctx = s_ctx ||
        ((typeof document !== 'undefined' && document.createElement)
          ? document.createElement("canvas").getContext("2d")
          : null);
    return s_ctx;
  };
}();

// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but
//       not only does Firefox NOT support it but Firefox freezes immediately
//       if you try to create one instead of just returning null and continuing.
//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext("2d"));  // OffscreenCanvas may not support 2d

// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2
// we can use the various unpack settings. Otherwise we could try using
// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap
// is async and the current TWGL code expects a non-Async result though that
// might not be a problem. ImageBitmap though is not available in Edge or Safari
// as of 2018-01-02

/* PixelFormat */
const ALPHA                          = 0x1906;
const RGB                            = 0x1907;
const RGBA                           = 0x1908;
const LUMINANCE                      = 0x1909;
const LUMINANCE_ALPHA                = 0x190A;
const DEPTH_COMPONENT                = 0x1902;
const DEPTH_STENCIL                  = 0x84F9;

/* TextureWrapMode */
// const REPEAT                         = 0x2901;
// const MIRRORED_REPEAT                = 0x8370;
const CLAMP_TO_EDGE                  = 0x812f;

/* TextureMagFilter */
const NEAREST                        = 0x2600;
const LINEAR                         = 0x2601;

/* TextureMinFilter */
// const NEAREST_MIPMAP_NEAREST         = 0x2700;
// const LINEAR_MIPMAP_NEAREST          = 0x2701;
// const NEAREST_MIPMAP_LINEAR          = 0x2702;
// const LINEAR_MIPMAP_LINEAR           = 0x2703;

/* Texture Target */
const TEXTURE_2D                     = 0x0de1;
const TEXTURE_CUBE_MAP               = 0x8513;
const TEXTURE_3D                     = 0x806f;
const TEXTURE_2D_ARRAY               = 0x8c1a;

/* Cubemap Targets */
const TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;
const TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;
const TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;
const TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;
const TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;
const TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;

/* Texture Parameters */
const TEXTURE_MIN_FILTER             = 0x2801;
const TEXTURE_MAG_FILTER             = 0x2800;
const TEXTURE_WRAP_S                 = 0x2802;
const TEXTURE_WRAP_T                 = 0x2803;
const TEXTURE_WRAP_R                 = 0x8072;
const TEXTURE_MIN_LOD                = 0x813a;
const TEXTURE_MAX_LOD                = 0x813b;
const TEXTURE_BASE_LEVEL             = 0x813c;
const TEXTURE_MAX_LEVEL              = 0x813d;


/* Pixel store */
const UNPACK_ALIGNMENT                   = 0x0cf5;
const UNPACK_ROW_LENGTH                  = 0x0cf2;
const UNPACK_IMAGE_HEIGHT                = 0x806e;
const UNPACK_SKIP_PIXELS                 = 0x0cf4;
const UNPACK_SKIP_ROWS                   = 0x0cf3;
const UNPACK_SKIP_IMAGES                 = 0x806d;
const UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
const UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;
const UNPACK_FLIP_Y_WEBGL                = 0x9240;

const R8                           = 0x8229;
const R8_SNORM                     = 0x8F94;
const R16F                         = 0x822D;
const R32F                         = 0x822E;
const R8UI                         = 0x8232;
const R8I                          = 0x8231;
const RG16UI                       = 0x823A;
const RG16I                        = 0x8239;
const RG32UI                       = 0x823C;
const RG32I                        = 0x823B;
const RG8                          = 0x822B;
const RG8_SNORM                    = 0x8F95;
const RG16F                        = 0x822F;
const RG32F                        = 0x8230;
const RG8UI                        = 0x8238;
const RG8I                         = 0x8237;
const R16UI                        = 0x8234;
const R16I                         = 0x8233;
const R32UI                        = 0x8236;
const R32I                         = 0x8235;
const RGB8                         = 0x8051;
const SRGB8                        = 0x8C41;
const RGB565                       = 0x8D62;
const RGB8_SNORM                   = 0x8F96;
const R11F_G11F_B10F               = 0x8C3A;
const RGB9_E5                      = 0x8C3D;
const RGB16F                       = 0x881B;
const RGB32F                       = 0x8815;
const RGB8UI                       = 0x8D7D;
const RGB8I                        = 0x8D8F;
const RGB16UI                      = 0x8D77;
const RGB16I                       = 0x8D89;
const RGB32UI                      = 0x8D71;
const RGB32I                       = 0x8D83;
const RGBA8                        = 0x8058;
const SRGB8_ALPHA8                 = 0x8C43;
const RGBA8_SNORM                  = 0x8F97;
const RGB5_A1                      = 0x8057;
const RGBA4                        = 0x8056;
const RGB10_A2                     = 0x8059;
const RGBA16F                      = 0x881A;
const RGBA32F                      = 0x8814;
const RGBA8UI                      = 0x8D7C;
const RGBA8I                       = 0x8D8E;
const RGB10_A2UI                   = 0x906F;
const RGBA16UI                     = 0x8D76;
const RGBA16I                      = 0x8D88;
const RGBA32I                      = 0x8D82;
const RGBA32UI                     = 0x8D70;

const DEPTH_COMPONENT16            = 0x81A5;
const DEPTH_COMPONENT24            = 0x81A6;
const DEPTH_COMPONENT32F           = 0x8CAC;
const DEPTH32F_STENCIL8            = 0x8CAD;
const DEPTH24_STENCIL8             = 0x88F0;

/* DataType */
const BYTE$2                         = 0x1400;
const UNSIGNED_BYTE$2                = 0x1401;
const SHORT$2                        = 0x1402;
const UNSIGNED_SHORT$2               = 0x1403;
const INT$2                          = 0x1404;
const UNSIGNED_INT$2                 = 0x1405;
const FLOAT$2                        = 0x1406;
const UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;
const UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;
const UNSIGNED_SHORT_5_6_5$1         = 0x8363;
const HALF_FLOAT$1                   = 0x140B;
const HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(
const UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;
const UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;
const UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;
const FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;
const UNSIGNED_INT_24_8$1            = 0x84FA;

const RG                           = 0x8227;
const RG_INTEGER                   = 0x8228;
const RED                          = 0x1903;
const RED_INTEGER                  = 0x8D94;
const RGB_INTEGER                  = 0x8D98;
const RGBA_INTEGER                 = 0x8D99;

const formatInfo = {};
{
  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle
  // the name.
  const f = formatInfo;
  f[ALPHA]           = { numColorComponents: 1, };
  f[LUMINANCE]       = { numColorComponents: 1, };
  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };
  f[RGB]             = { numColorComponents: 3, };
  f[RGBA]            = { numColorComponents: 4, };
  f[RED]             = { numColorComponents: 1, };
  f[RED_INTEGER]     = { numColorComponents: 1, };
  f[RG]              = { numColorComponents: 2, };
  f[RG_INTEGER]      = { numColorComponents: 2, };
  f[RGB]             = { numColorComponents: 3, };
  f[RGB_INTEGER]     = { numColorComponents: 3, };
  f[RGBA]            = { numColorComponents: 4, };
  f[RGBA_INTEGER]    = { numColorComponents: 4, };
  f[DEPTH_COMPONENT] = { numColorComponents: 1, };
  f[DEPTH_STENCIL]   = { numColorComponents: 2, };
}

/**
 * @typedef {Object} TextureFormatDetails
 * @property {number} textureFormat format to pass texImage2D and similar functions.
 * @property {boolean} colorRenderable true if you can render to this format of texture.
 * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.
 * @property {number[]} type Array of possible types you can pass to texImage2D and similar function
 * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element
 * @private
 */

let s_textureInternalFormatInfo;
function getTextureInternalFormatInfo(internalFormat) {
  if (!s_textureInternalFormatInfo) {
    // NOTE: these properties need unique names so we can let Uglify mangle the name.
    const t = {};
    // unsized formats
    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };
    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };
    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };
    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_5_6_5$1], };
    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_4_4_4_4$1, UNSIGNED_SHORT_5_5_5_1$1], };
    t[DEPTH_COMPONENT]    = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$2, UNSIGNED_SHORT$2], };

    // sized formats
    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };
    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE$2], };
    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$2, HALF_FLOAT$1], };
    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };
    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };
    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE$2], };
    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$2], };
    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT$2], };
    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };
    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$2], };
    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };
    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE$2], };
    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$2, HALF_FLOAT$1], };
    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$2], };
    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };
    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE$2], };
    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$2], };
    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT$2], };
    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$2], };
    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$2], };
    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };
    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };
    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_6_5$1], };
    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE$2], };
    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_10F_11F_11F_REV$1], };
    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_5_9_9_9_REV$1], };
    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$2, HALF_FLOAT$1], };
    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$2], };
    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };
    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE$2], };
    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$2], };
    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT$2], };
    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$2], };
    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$2], };
    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };
    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };
    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE$2], };
    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_5_5_1$1, UNSIGNED_INT_2_10_10_10_REV$1], };
    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_4_4_4_4$1], };
    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };
    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$2, HALF_FLOAT$1], };
    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$2], };
    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };
    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE$2], };
    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };
    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$2], };
    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT$2], };
    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$2], };
    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$2], };
    // Sized Internal
    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$2, UNSIGNED_INT$2], };
    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };
    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };
    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8$1], };
    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV$1], };

    Object.keys(t).forEach(function(internalFormat) {
      const info = t[internalFormat];
      info.bytesPerElementMap = {};
      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {
        const type = info.type[ndx];
        info.bytesPerElementMap[type] = bytesPerElement;
      });
    });
    s_textureInternalFormatInfo = t;
  }
  return s_textureInternalFormatInfo[internalFormat];
}

/**
 * Gets the number of bytes per element for a given internalFormat / type
 * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
 * @param {number} type The type parameter for texImage2D etc..
 * @return {number} the number of bytes per element for the given internalFormat, type combo
 * @memberOf module:twgl/textures
 */
function getBytesPerElementForInternalFormat(internalFormat, type) {
  const info = getTextureInternalFormatInfo(internalFormat);
  if (!info) {
    throw "unknown internal format";
  }
  const bytesPerElement = info.bytesPerElementMap[type];
  if (bytesPerElement === undefined) {
    throw "unknown internal format";
  }
  return bytesPerElement;
}

/**
 * Info related to a specific texture internalFormat as returned
 * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.
 *
 * @typedef {Object} TextureFormatInfo
 * @property {number} format Format to pass to texImage2D and related functions
 * @property {number} type Type to pass to texImage2D and related functions
 * @memberOf module:twgl/textures
 */

/**
 * Gets the format and type for a given internalFormat
 *
 * @param {number} internalFormat The internal format
 * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,
 * @memberOf module:twgl/textures
 */
function getFormatAndTypeForInternalFormat(internalFormat) {
  const info = getTextureInternalFormatInfo(internalFormat);
  if (!info) {
    throw "unknown internal format";
  }
  return {
    format: info.textureFormat,
    type: info.type[0],
  };
}

/**
 * Returns true if value is power of 2
 * @param {number} value number to check.
 * @return true if value is power of 2
 * @private
 */
function isPowerOf2(value) {
  return (value & (value - 1)) === 0;
}

/**
 * Gets whether or not we can generate mips for the given
 * internal format.
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {number} width The width parameter from texImage2D etc..
 * @param {number} height The height parameter from texImage2D etc..
 * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
 * @return {boolean} true if we can generate mips
 * @memberOf module:twgl/textures
 */
function canGenerateMipmap(gl, width, height, internalFormat) {
  if (!isWebGL2(gl)) {
    return isPowerOf2(width) && isPowerOf2(height);
  }
  const info = getTextureInternalFormatInfo(internalFormat);
  if (!info) {
    throw "unknown internal format";
  }
  return info.colorRenderable && info.textureFilterable;
}

/**
 * Gets whether or not we can generate mips for the given format
 * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
 * @return {boolean} true if we can generate mips
 * @memberOf module:twgl/textures
 */
function canFilter(internalFormat) {
  const info = getTextureInternalFormatInfo(internalFormat);
  if (!info) {
    throw "unknown internal format";
  }
  return info.textureFilterable;
}

/**
 * Gets the number of components for a given image format.
 * @param {number} format the format.
 * @return {number} the number of components for the format.
 * @memberOf module:twgl/textures
 */
function getNumComponentsForFormat(format) {
  const info = formatInfo[format];
  if (!info) {
    throw "unknown format: " + format;
  }
  return info.numColorComponents;
}

/**
 * Gets the texture type for a given array type.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @return {number} the gl texture type
 * @private
 */
function getTextureTypeForArrayType(gl, src, defaultType) {
  if (isArrayBuffer$1(src)) {
    return getGLTypeForTypedArray(src);
  }
  return defaultType || UNSIGNED_BYTE$2;
}

function guessDimensions(gl, target, width, height, numElements) {
  if (numElements % 1 !== 0) {
    throw "can't guess dimensions";
  }
  if (!width && !height) {
    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));
    if (size % 1 === 0) {
      width = size;
      height = size;
    } else {
      width = numElements;
      height = 1;
    }
  } else if (!height) {
    height = numElements / width;
    if (height % 1) {
      throw "can't guess dimensions";
    }
  } else if (!width) {
    width = numElements / height;
    if (width % 1) {
      throw "can't guess dimensions";
    }
  }
  return {
    width: width,
    height: height,
  };
}

/**
 * Sets the default texture color.
 *
 * The default texture color is used when loading textures from
 * urls. Because the URL will be loaded async we'd like to be
 * able to use the texture immediately. By putting a 1x1 pixel
 * color in the texture we can start using the texture before
 * the URL has loaded.
 *
 * @param {number[]} color Array of 4 values in the range 0 to 1
 * @deprecated see {@link module:twgl.setDefaults}
 * @memberOf module:twgl/textures
 */
function setDefaultTextureColor(color) {
  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);
}

function setDefaults$1(newDefaults) {
  copyExistingProperties(newDefaults, defaults$1);
  if (newDefaults.textureColor) {
    setDefaultTextureColor(newDefaults.textureColor);
  }
}

/**
 * A function to generate the source for a texture.
 * @callback TextureFunc
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {module:twgl.TextureOptions} options the texture options
 * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.
 * @memberOf module:twgl
 */

/**
 * Texture options passed to most texture functions. Each function will use whatever options
 * are appropriate for its needs. This lets you pass the same options to all functions.
 *
 * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,
 * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.
 *
 * @typedef {Object} TextureOptions
 * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.
 * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.
 * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.
 * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.
 * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .
 * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`
 *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.
 * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`
 * @property {number} [minMag] both the min and mag filter settings.
 * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`
 * @property {number} [format] format for texture. Defaults to `gl.RGBA`.
 * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`
 *     is ArrayBufferView defaults to type that matches ArrayBufferView type.
 * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube
 * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
 * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
 * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
 * @property {number} [minLod] TEXTURE_MIN_LOD setting
 * @property {number} [maxLod] TEXTURE_MAX_LOD setting
 * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting
 * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting
 * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.
 * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.
 *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`
 *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink
 * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.
 *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
 *     the current setting for specific textures.
 * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.
 *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
 *     the current setting for specific textures.
 * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.
 *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
 *     the current setting for specific textures.
 * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and
 *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above
 *    then then `auto` is assumed to be `false` unless explicity set to `true`.
 * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is
 *
 *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
 *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
 *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
 *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
 *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
 *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]
 *
 * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture
 *
 *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable
 *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.
 *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.
 *    The pieces will be uploaded in `cubeFaceOrder`
 *
 *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.
 *
 *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture
 *    and will be scaled to the specified width and height OR to the size of the first image that loads.
 *
 *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,
 *    `HTMLCanvasElement`, `HTMLVideoElement`.
 *
 *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is
 *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`
 *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided
 *    by 6. Then
 *
 *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height
 *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.
 *
 *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.
 *
 * If `number[]` will be converted to `type`.
 *
 * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.
 * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`
 * an array etc...
 *
 * If `src` is undefined then an empty texture will be created of size `width` by `height`.
 *
 * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.
 *    default: undefined. Also see {@link module:twgl.setDefaults}.
 *
 * @memberOf module:twgl
 */

/**
 * Sets any packing state that will be set based on the options.
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @private
 */
function setPackState(gl, options) {
  if (options.colorspaceConversion !== undefined) {
    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);
  }
  if (options.premultiplyAlpha !== undefined) {
    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);
  }
  if (options.flipY !== undefined) {
    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);
  }
}

/**
 * Set skip state to defaults
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @private
 */
function setSkipStateToDefault(gl) {
  gl.pixelStorei(UNPACK_ALIGNMENT, 4);
  if (isWebGL2(gl)) {
    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);
    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);
    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);
    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);
    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);
  }
}

/**
 * Sets the parameters of a texture or sampler
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {number|WebGLSampler} target texture target or sampler
 * @param {function()} parameteriFn texParameteri or samplerParameteri fn
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @private
 */
function setTextureSamplerParameters(gl, target, parameteriFn, options) {
  if (options.minMag) {
    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);
    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);
  }
  if (options.min) {
    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);
  }
  if (options.mag) {
    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);
  }
  if (options.wrap) {
    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);
    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);
    if (target === TEXTURE_3D || isSampler(gl, target)) {
      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);
    }
  }
  if (options.wrapR) {
    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);
  }
  if (options.wrapS) {
    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);
  }
  if (options.wrapT) {
    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);
  }
  if (options.minLod) {
    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);
  }
  if (options.maxLod) {
    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);
  }
  if (options.baseLevel) {
    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);
  }
  if (options.maxLevel) {
    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);
  }
}

/**
 * Sets the texture parameters of a texture.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 */
function setTextureParameters(gl, tex, options) {
  const target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  setTextureSamplerParameters(gl, target, gl.texParameteri, options);
}

/**
 * Sets the sampler parameters of a sampler.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLSampler} sampler the WebGLSampler to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @memberOf module:twgl/textures
 */
function setSamplerParameters(gl, sampler, options) {
  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);
}

/**
 * Creates a new sampler object and sets parameters.
 *
 * Example:
 *
 *      const sampler = twgl.createSampler(gl, {
 *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER
 *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R
 *      });
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.
 * @return {Object.<string,WebGLSampler>} the created samplers by name
 * @private
 */
function createSampler(gl, options) {
  const sampler = gl.createSampler();
  setSamplerParameters(gl, sampler, options);
  return sampler;
}

/**
 * Creates a multiple sampler objects and sets parameters on each.
 *
 * Example:
 *
 *      const samplers = twgl.createSamplers(gl, {
 *        nearest: {
 *          minMag: gl.NEAREST,
 *        },
 *        nearestClampS: {
 *          minMag: gl.NEAREST,
 *          wrapS: gl.CLAMP_TO_NEAREST,
 *        },
 *        linear: {
 *          minMag: gl.LINEAR,
 *        },
 *        nearestClamp: {
 *          minMag: gl.NEAREST,
 *          wrap: gl.CLAMP_TO_EDGE,
 *        },
 *        linearClamp: {
 *          minMag: gl.LINEAR,
 *          wrap: gl.CLAMP_TO_EDGE,
 *        },
 *        linearClampT: {
 *          minMag: gl.LINEAR,
 *          wrapT: gl.CLAMP_TO_EDGE,
 *        },
 *      });
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler
 * @private
 */
function createSamplers(gl, samplerOptions) {
  const samplers = {};
  Object.keys(samplerOptions).forEach(function(name) {
    samplers[name] = createSampler(gl, samplerOptions[name]);
  });
  return samplers;
}

/**
 * Makes a 1x1 pixel
 * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.
 * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values
 * @return {Uint8Array} Unit8Array with color.
 * @private
 */
function make1Pixel(color) {
  color = color || defaults$1.textureColor;
  if (isArrayBuffer$1(color)) {
    return color;
  }
  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);
}

/**
 * Sets filtering or generates mips for texture based on width or height
 * If width or height is not passed in uses `options.width` and//or `options.height`
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @param {number} [width] width of texture
 * @param {number} [height] height of texture
 * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..
 * @memberOf module:twgl/textures
 */
function setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {
  options = options || defaults$1.textureOptions;
  internalFormat = internalFormat || RGBA;
  const target = options.target || TEXTURE_2D;
  width = width || options.width;
  height = height || options.height;
  gl.bindTexture(target, tex);
  if (canGenerateMipmap(gl, width, height, internalFormat)) {
    gl.generateMipmap(target);
  } else {
    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;
    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);
    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);
    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
  }
}

function shouldAutomaticallySetTextureFilteringForSize(options) {
  return options.auto === true || (options.auto === undefined && options.level === undefined);
}

/**
 * Gets an array of cubemap face enums
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @return {number[]} cubemap face enums
 * @private
 */
function getCubeFaceOrder(gl, options) {
  options = options || {};
  return options.cubeFaceOrder || [
      TEXTURE_CUBE_MAP_POSITIVE_X,
      TEXTURE_CUBE_MAP_NEGATIVE_X,
      TEXTURE_CUBE_MAP_POSITIVE_Y,
      TEXTURE_CUBE_MAP_NEGATIVE_Y,
      TEXTURE_CUBE_MAP_POSITIVE_Z,
      TEXTURE_CUBE_MAP_NEGATIVE_Z,
    ];
}

/**
 * @typedef {Object} FaceInfo
 * @property {number} face gl enum for texImage2D
 * @property {number} ndx face index (0 - 5) into source data
 * @ignore
 */

/**
 * Gets an array of FaceInfos
 * There's a bug in some NVidia drivers that will crash the driver if
 * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take
 * the user's desired order from his faces to WebGL and make sure we
 * do the faces in WebGL order
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but
 *    it's needed internally to sort the array of `ndx` properties by `face`.
 * @private
 */
function getCubeFacesWithNdx(gl, options) {
  const faces = getCubeFaceOrder(gl, options);
  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(
  const facesWithNdx = faces.map(function(face, ndx) {
    return { face: face, ndx: ndx };
  });
  facesWithNdx.sort(function(a, b) {
    return a.face - b.face;
  });
  return facesWithNdx;
}

/**
 * Set a texture from the contents of an element. Will also set
 * texture filtering or generate mips based on the dimensions of the element
 * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will
 * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {HTMLElement} element a canvas, img, or video element.
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 * @kind function
 */
function setTextureFromElement(gl, tex, element, options) {
  options = options || defaults$1.textureOptions;
  const target = options.target || TEXTURE_2D;
  const level = options.level || 0;
  let width = element.width;
  let height = element.height;
  const internalFormat = options.internalFormat || options.format || RGBA;
  const formatType = getFormatAndTypeForInternalFormat(internalFormat);
  const format = options.format || formatType.format;
  const type = options.type || formatType.type;
  setPackState(gl, options);
  gl.bindTexture(target, tex);
  if (target === TEXTURE_CUBE_MAP) {
    // guess the parts
    const imgWidth  = element.width;
    const imgHeight = element.height;
    let size;
    let slices;
    if (imgWidth / 6 === imgHeight) {
      // It's 6x1
      size = imgHeight;
      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];
    } else if (imgHeight / 6 === imgWidth) {
      // It's 1x6
      size = imgWidth;
      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];
    } else if (imgWidth / 3 === imgHeight / 2) {
      // It's 3x2
      size = imgWidth / 3;
      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];
    } else if (imgWidth / 2 === imgHeight / 3) {
      // It's 2x3
      size = imgWidth / 2;
      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];
    } else {
      throw "can't figure out cube map from element: " + (element.src ? element.src : element.nodeName);
    }
    const ctx = getShared2DContext();
    if (ctx) {
      ctx.canvas.width = size;
      ctx.canvas.height = size;
      width = size;
      height = size;
      getCubeFacesWithNdx(gl, options).forEach(function(f) {
        const xOffset = slices[f.ndx * 2 + 0] * size;
        const yOffset = slices[f.ndx * 2 + 1] * size;
        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);
        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);
      });
      // Free up the canvas memory
      ctx.canvas.width = 1;
      ctx.canvas.height = 1;
    } else if (typeof createImageBitmap !== 'undefined') {
      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's
      // note lossy? (alpha is not premultiplied? although I'm not sure what
      width = size;
      height = size;
      getCubeFacesWithNdx(gl, options).forEach(function(f) {
        const xOffset = slices[f.ndx * 2 + 0] * size;
        const yOffset = slices[f.ndx * 2 + 1] * size;
        // We can't easily use a default texture color here as it would have to match
        // the type across all faces where as with a 2D one there's only one face
        // so we're replacing everything all at once. It also has to be the correct size.
        // On the other hand we need all faces to be the same size so as one face loads
        // the rest match else the texture will be un-renderable.
        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);
        createImageBitmap(element, xOffset, yOffset, size, size, {
          premultiplyAlpha: 'none',
          colorSpaceConversion: 'none',
        })
        .then(function(imageBitmap) {
          setPackState(gl, options);
          gl.bindTexture(target, tex);
          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);
          if (shouldAutomaticallySetTextureFilteringForSize(options)) {
            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
          }
        });
      });
    }
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    const smallest = Math.min(element.width, element.height);
    const largest = Math.max(element.width, element.height);
    const depth = largest / smallest;
    if (depth % 1 !== 0) {
      throw "can not compute 3D dimensions of element";
    }
    const xMult = element.width  === largest ? 1 : 0;
    const yMult = element.height === largest ? 1 : 0;
    gl.pixelStorei(UNPACK_ALIGNMENT, 1);
    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);
    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);
    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);
    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);
    for (let d = 0; d < depth; ++d) {
      const srcX = d * smallest * xMult;
      const srcY = d * smallest * yMult;
      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);
      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);
      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);
    }
    setSkipStateToDefault(gl);
  } else {
    gl.texImage2D(target, level, internalFormat, format, type, element);
  }
  if (shouldAutomaticallySetTextureFilteringForSize(options)) {
    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
  }
  setTextureParameters(gl, tex, options);
}

function noop() {
}

/**
 * Checks whether the url's origin is the same so that we can set the `crossOrigin`
 * @param {string} url url to image
 * @returns {boolean} true if the window's origin is the same as image's url
 * @private
 */
function urlIsSameOrigin(url) {
  if (typeof document !== 'undefined') {
    // for IE really
    const a = document.createElement('a');
    a.href = url;
    return a.hostname === location.hostname &&
           a.port     === location.port &&
           a.protocol === location.protocol;
  } else {
    const localOrigin = (new URL(location.href)).origin;
    const urlOrigin = (new URL(url, location.href)).origin;
    return urlOrigin === localOrigin;
  }
}

function setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {
  return crossOrigin === undefined && !urlIsSameOrigin(url)
     ? 'anonymous'
     : crossOrigin;
}

/**
 * Loads an image
 * @param {string} url url to image
 * @param {string} crossOrigin
 * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
 *     if there was an error
 * @return {HTMLImageElement} the image being loaded.
 * @private
 */
function loadImage(url, crossOrigin, callback) {
  callback = callback || noop;
  let img;
  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;
  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);
  if (typeof Image !== 'undefined') {
    img = new Image();
    if (crossOrigin !== undefined) {
      img.crossOrigin = crossOrigin;
    }

    const clearEventHandlers = function clearEventHandlers() {
      img.removeEventListener('error', onError);  // eslint-disable-line
      img.removeEventListener('load', onLoad);  // eslint-disable-line
      img = null;
    };

    const onError = function onError() {
      const msg = "couldn't load image: " + url;
      error(msg);
      callback(msg, img);
      clearEventHandlers();
    };

    const onLoad = function onLoad() {
      callback(null, img);
      clearEventHandlers();
    };

    img.addEventListener('error', onError);
    img.addEventListener('load', onLoad);
    img.src = url;
    return img;
  } else if (typeof ImageBitmap !== 'undefined') {
    let err;
    let bm;
    const cb = function cb() {
      callback(err, bm);
    };

    const options = {};
    if (crossOrigin) {
      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin
    }
    fetch(url, options).then(function(response) {
      if (!response.ok) {
        throw response;
      }
      return response.blob();
    }).then(function(blob) {
      return createImageBitmap(blob, {
        premultiplyAlpha: 'none',
        colorSpaceConversion: 'none',
      });
    }).then(function(bitmap) {
      // not sure if this works. We don't want
      // to catch the user's error. So, call
      // the callback in a timeout so we're
      // not in this scope inside the promise.
      bm = bitmap;
      setTimeout(cb);
    }).catch(function(e) {
      err = e;
      setTimeout(cb);
    });
    img = null;
  }
  return img;
}

/**
 * check if object is a TexImageSource
 *
 * @param {Object} obj Object to test
 * @return {boolean} true if object is a TexImageSource
 * @private
 */
function isTexImageSource(obj) {
  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||
         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||
         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);
}

/**
 * if obj is an TexImageSource then just
 * uses it otherwise if obj is a string
 * then load it first.
 *
 * @param {string|TexImageSource} obj
 * @param {string} crossOrigin
 * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
 *     if there was an error
 * @private
 */
function loadAndUseImage(obj, crossOrigin, callback) {
  if (isTexImageSource(obj)) {
    setTimeout(function() {
      callback(null, obj);
    });
    return obj;
  }

  return loadImage(obj, crossOrigin, callback);
}

/**
 * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set
 * the default texture color is used which can be set by calling `setDefaultTextureColor`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 */
function setTextureTo1PixelColor(gl, tex, options) {
  options = options || defaults$1.textureOptions;
  const target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  if (options.color === false) {
    return;
  }
  // Assume it's a URL
  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.
  const color = make1Pixel(options.color);
  if (target === TEXTURE_CUBE_MAP) {
    for (let ii = 0; ii < 6; ++ii) {
      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);
    }
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);
  } else {
    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);
  }
}

/**
 * The src image(s) used to create a texture.
 *
 * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}
 * you can pass in urls for images to load into the textures. If it's a single url
 * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap
 * this will be a corresponding array of images for the cubemap.
 *
 * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc
 * @memberOf module:twgl
 */

/**
 * A callback for when an image finished downloading and been uploaded into a texture
 * @callback TextureReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {WebGLTexture} texture the texture.
 * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture
 * @memberOf module:twgl
 */

/**
 * A callback for when all images have finished downloading and been uploaded into their respective textures
 * @callback TexturesReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.
 * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.
 * @memberOf module:twgl
 */

/**
 * A callback for when an image finished downloading and been uploaded into a texture
 * @callback CubemapReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {WebGLTexture} tex the texture.
 * @param {HTMLImageElement[]} imgs the images for each face.
 * @memberOf module:twgl
 */

/**
 * A callback for when an image finished downloading and been uploaded into a texture
 * @callback ThreeDReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {WebGLTexture} tex the texture.
 * @param {HTMLImageElement[]} imgs the images for each slice.
 * @memberOf module:twgl
 */

/**
 * Loads a texture from an image from a Url as specified in `options.src`
 * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is
 * immediately useable. It will be updated with the contents of the image once the image has finished
 * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will
 *    be non null if there was an error.
 * @return {HTMLImageElement} the image being downloaded.
 * @memberOf module:twgl/textures
 */
function loadTextureFromUrl(gl, tex, options, callback) {
  callback = callback || noop;
  options = options || defaults$1.textureOptions;
  setTextureTo1PixelColor(gl, tex, options);
  // Because it's async we need to copy the options.
  options = Object.assign({}, options);
  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {
    if (err) {
      callback(err, tex, img);
    } else {
      setTextureFromElement(gl, tex, img, options);
      callback(null, tex, img);
    }
  });
  return img;
}

/**
 * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color
 * so that it is usable immediately unless `option.color === false`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will
 *    be non null if there was an error.
 * @memberOf module:twgl/textures
 */
function loadCubemapFromUrls(gl, tex, options, callback) {
  callback = callback || noop;
  const urls = options.src;
  if (urls.length !== 6) {
    throw "there must be 6 urls for a cubemap";
  }
  const level = options.level || 0;
  const internalFormat = options.internalFormat || options.format || RGBA;
  const formatType = getFormatAndTypeForInternalFormat(internalFormat);
  const format = options.format || formatType.format;
  const type = options.type || UNSIGNED_BYTE$2;
  const target = options.target || TEXTURE_2D;
  if (target !== TEXTURE_CUBE_MAP) {
    throw "target must be TEXTURE_CUBE_MAP";
  }
  setTextureTo1PixelColor(gl, tex, options);
  // Because it's async we need to copy the options.
  options = Object.assign({}, options);
  let numToLoad = 6;
  const errors = [];
  const faces = getCubeFaceOrder(gl, options);
  let imgs;  // eslint-disable-line

  function uploadImg(faceTarget) {
    return function(err, img) {
      --numToLoad;
      if (err) {
        errors.push(err);
      } else {
        if (img.width !== img.height) {
          errors.push("cubemap face img is not a square: " + img.src);
        } else {
          setPackState(gl, options);
          gl.bindTexture(target, tex);

          // So assuming this is the first image we now have one face that's img sized
          // and 5 faces that are 1x1 pixel so size the other faces
          if (numToLoad === 5) {
            // use the default order
            getCubeFaceOrder().forEach(function(otherTarget) {
              // Should we re-use the same face or a color?
              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);
            });
          } else {
            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);
          }

          if (shouldAutomaticallySetTextureFilteringForSize(options)) {
            gl.generateMipmap(target);
          }
        }
      }

      if (numToLoad === 0) {
        callback(errors.length ? errors : undefined, tex, imgs);
      }
    };
  }

  imgs = urls.map(function(url, ndx) {
    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));
  });
}

/**
 * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.
 * Will set the texture to a 1x1 pixel color
 * so that it is usable immediately unless `option.color === false`.
 *
 * If the width and height is not specified the width and height of the first
 * image loaded will be used. Note that since images are loaded async
 * which image downloads first is unknown.
 *
 * If an image is not the same size as the width and height it will be scaled
 * to that width and height.
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will
 *    be non null if there was an error.
 * @memberOf module:twgl/textures
 */
function loadSlicesFromUrls(gl, tex, options, callback) {
  callback = callback || noop;
  const urls = options.src;
  const internalFormat = options.internalFormat || options.format || RGBA;
  const formatType = getFormatAndTypeForInternalFormat(internalFormat);
  const format = options.format || formatType.format;
  const type = options.type || UNSIGNED_BYTE$2;
  const target = options.target || TEXTURE_2D_ARRAY;
  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {
    throw "target must be TEXTURE_3D or TEXTURE_2D_ARRAY";
  }
  setTextureTo1PixelColor(gl, tex, options);
  // Because it's async we need to copy the options.
  options = Object.assign({}, options);
  let numToLoad = urls.length;
  const errors = [];
  let imgs;  // eslint-disable-line
  const level = options.level || 0;
  let width = options.width;
  let height = options.height;
  const depth = urls.length;
  let firstImage = true;

  function uploadImg(slice) {
    return function(err, img) {
      --numToLoad;
      if (err) {
        errors.push(err);
      } else {
        setPackState(gl, options);
        gl.bindTexture(target, tex);

        if (firstImage) {
          firstImage = false;
          width = options.width || img.width;
          height = options.height || img.height;
          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);

          // put it in every slice otherwise some slices will be 0,0,0,0
          for (let s = 0; s < depth; ++s) {
            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);
          }
        } else {
          let src = img;
          let ctx;
          if (img.width !== width || img.height !== height) {
            // Size the image to fix
            ctx = getShared2DContext();
            src = ctx.canvas;
            ctx.canvas.width = width;
            ctx.canvas.height = height;
            ctx.drawImage(img, 0, 0, width, height);
          }

          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);

          // free the canvas memory
          if (ctx && src === ctx.canvas) {
            ctx.canvas.width = 0;
            ctx.canvas.height = 0;
          }
        }

        if (shouldAutomaticallySetTextureFilteringForSize(options)) {
          gl.generateMipmap(target);
        }
      }

      if (numToLoad === 0) {
        callback(errors.length ? errors : undefined, tex, imgs);
      }
    };
  }

  imgs = urls.map(function(url, ndx) {
    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));
  });
}

/**
 * Sets a texture from an array or typed array. If the width or height is not provided will attempt to
 * guess the size. See {@link module:twgl.TextureOptions}.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 */
function setTextureFromArray(gl, tex, src, options) {
  options = options || defaults$1.textureOptions;
  const target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  let width = options.width;
  let height = options.height;
  let depth = options.depth;
  const level = options.level || 0;
  const internalFormat = options.internalFormat || options.format || RGBA;
  const formatType = getFormatAndTypeForInternalFormat(internalFormat);
  const format = options.format || formatType.format;
  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);
  if (!isArrayBuffer$1(src)) {
    const Type = getTypedArrayTypeForGLType(type);
    src = new Type(src);
  } else if (src instanceof Uint8ClampedArray) {
    src = new Uint8Array(src.buffer);
  }

  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);
  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?
  if (numElements % 1) {
    throw "length wrong size for format: " + glEnumToString(gl, format);
  }
  let dimensions;
  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    if (!width && !height && !depth) {
      const size = Math.cbrt(numElements);
      if (size % 1 !== 0) {
        throw "can't guess cube size of array of numElements: " + numElements;
      }
      width = size;
      height = size;
      depth = size;
    } else if (width && (!height || !depth)) {
      dimensions = guessDimensions(gl, target, height, depth, numElements / width);
      height = dimensions.width;
      depth = dimensions.height;
    } else if (height && (!width || !depth)) {
      dimensions = guessDimensions(gl, target, width, depth, numElements / height);
      width = dimensions.width;
      depth = dimensions.height;
    } else {
      dimensions = guessDimensions(gl, target, width, height, numElements / depth);
      width = dimensions.width;
      height = dimensions.height;
    }
  } else {
    dimensions = guessDimensions(gl, target, width, height, numElements);
    width = dimensions.width;
    height = dimensions.height;
  }
  setSkipStateToDefault(gl);
  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);
  setPackState(gl, options);
  if (target === TEXTURE_CUBE_MAP) {
    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;
    const faceSize = numElements / 6 * elementsPerElement;

    getCubeFacesWithNdx(gl, options).forEach(f => {
      const offset = faceSize * f.ndx;
      const data = src.subarray(offset, offset + faceSize);
      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);
    });
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);
  } else {
    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);
  }
  return {
    width: width,
    height: height,
    depth: depth,
    type: type,
  };
}

/**
 * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.
 * You must set `options.width` and `options.height`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @memberOf module:twgl/textures
 */
function setEmptyTexture(gl, tex, options) {
  const target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  const level = options.level || 0;
  const internalFormat = options.internalFormat || options.format || RGBA;
  const formatType = getFormatAndTypeForInternalFormat(internalFormat);
  const format = options.format || formatType.format;
  const type = options.type || formatType.type;
  setPackState(gl, options);
  if (target === TEXTURE_CUBE_MAP) {
    for (let ii = 0; ii < 6; ++ii) {
      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);
    }
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);
  } else {
    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);
  }
}

/**
 * Creates a texture based on the options passed in.
 *
 * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES
 * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.
 * @return {WebGLTexture} the created texture.
 * @memberOf module:twgl/textures
 */
function createTexture(gl, options, callback) {
  callback = callback || noop;
  options = options || defaults$1.textureOptions;
  const tex = gl.createTexture();
  const target = options.target || TEXTURE_2D;
  let width  = options.width  || 1;
  let height = options.height || 1;
  const internalFormat = options.internalFormat || RGBA;
  gl.bindTexture(target, tex);
  if (target === TEXTURE_CUBE_MAP) {
    // this should have been the default for cubemaps :(
    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
  }
  let src = options.src;
  if (src) {
    if (typeof src === "function") {
      src = src(gl, options);
    }
    if (typeof (src) === "string") {
      loadTextureFromUrl(gl, tex, options, callback);
    } else if (isArrayBuffer$1(src) ||
               (Array.isArray(src) && (
                    typeof src[0] === 'number' ||
                    Array.isArray(src[0]) ||
                    isArrayBuffer$1(src[0]))
               )
              ) {
      const dimensions = setTextureFromArray(gl, tex, src, options);
      width  = dimensions.width;
      height = dimensions.height;
    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {
      if (target === TEXTURE_CUBE_MAP) {
        loadCubemapFromUrls(gl, tex, options, callback);
      } else {
        loadSlicesFromUrls(gl, tex, options, callback);
      }
    } else { // if (isTexImageSource(src))
      setTextureFromElement(gl, tex, src, options);
      width  = src.width;
      height = src.height;
    }
  } else {
    setEmptyTexture(gl, tex, options);
  }
  if (shouldAutomaticallySetTextureFilteringForSize(options)) {
    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
  }
  setTextureParameters(gl, tex, options);
  return tex;
}

/**
 * Resizes a texture based on the options passed in.
 *
 * Note: This is not a generic resize anything function.
 * It's mostly used by {@link module:twgl.resizeFramebufferInfo}
 * It will use `options.src` if it exists to try to determine a `type`
 * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided
 * for the texture. Texture parameters will be set accordingly
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the texture to resize
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {number} [width] the new width. If not passed in will use `options.width`
 * @param {number} [height] the new height. If not passed in will use `options.height`
 * @param {number} [depth] the new depth. If not passed in will use `options.depth`
 * @memberOf module:twgl/textures
 */
function resizeTexture(gl, tex, options, width, height, depth) {
  width = width || options.width;
  height = height || options.height;
  depth = depth || options.depth;
  const target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  const level = options.level || 0;
  const internalFormat = options.internalFormat || options.format || RGBA;
  const formatType = getFormatAndTypeForInternalFormat(internalFormat);
  const format = options.format || formatType.format;
  let type;
  const src = options.src;
  if (!src) {
    type = options.type || formatType.type;
  } else if (isArrayBuffer$1(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {
    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);
  } else {
    type = options.type || formatType.type;
  }
  if (target === TEXTURE_CUBE_MAP) {
    for (let ii = 0; ii < 6; ++ii) {
      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);
    }
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);
  } else {
    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);
  }
}

/**
 * Check if a src is an async request.
 * if src is a string we're going to download an image
 * if src is an array of strings we're going to download cubemap images
 * @param {*} src The src from a TextureOptions
 * @returns {bool} true if src is async.
 * @private
 */
function isAsyncSrc(src) {
  return typeof src === 'string' ||
         (Array.isArray(src) && typeof src[0] === 'string');
}

/**
 * Creates a bunch of textures based on the passed in options.
 *
 * Example:
 *
 *     const textures = twgl.createTextures(gl, {
 *       // a power of 2 image
 *       hftIcon: { src: "images/hft-icon-16.png", mag: gl.NEAREST },
 *       // a non-power of 2 image
 *       clover: { src: "images/clover.jpg" },
 *       // From a canvas
 *       fromCanvas: { src: ctx.canvas },
 *       // A cubemap from 6 images
 *       yokohama: {
 *         target: gl.TEXTURE_CUBE_MAP,
 *         src: [
 *           'images/yokohama/posx.jpg',
 *           'images/yokohama/negx.jpg',
 *           'images/yokohama/posy.jpg',
 *           'images/yokohama/negy.jpg',
 *           'images/yokohama/posz.jpg',
 *           'images/yokohama/negz.jpg',
 *         ],
 *       },
 *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)
 *       goldengate: {
 *         target: gl.TEXTURE_CUBE_MAP,
 *         src: 'images/goldengate.jpg',
 *       },
 *       // A 2x2 pixel texture from a JavaScript array
 *       checker: {
 *         mag: gl.NEAREST,
 *         min: gl.LINEAR,
 *         src: [
 *           255,255,255,255,
 *           192,192,192,255,
 *           192,192,192,255,
 *           255,255,255,255,
 *         ],
 *       },
 *       // a 1x2 pixel texture from a typed array.
 *       stripe: {
 *         mag: gl.NEAREST,
 *         min: gl.LINEAR,
 *         format: gl.LUMINANCE,
 *         src: new Uint8Array([
 *           255,
 *           128,
 *           255,
 *           128,
 *           255,
 *           128,
 *           255,
 *           128,
 *         ]),
 *         width: 1,
 *       },
 *     });
 *
 * Now
 *
 * *   `textures.hftIcon` will be a 2d texture
 * *   `textures.clover` will be a 2d texture
 * *   `textures.fromCanvas` will be a 2d texture
 * *   `textures.yohohama` will be a cubemap texture
 * *   `textures.goldengate` will be a cubemap texture
 * *   `textures.checker` will be a 2d texture
 * *   `textures.stripe` will be a 2d texture
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.
 * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.
 * @return {Object.<string,WebGLTexture>} the created textures by name
 * @memberOf module:twgl/textures
 */
function createTextures(gl, textureOptions, callback) {
  callback = callback || noop;
  let numDownloading = 0;
  const errors = [];
  const textures = {};
  const images = {};

  function callCallbackIfReady() {
    if (numDownloading === 0) {
      setTimeout(function() {
        callback(errors.length ? errors : undefined, textures, images);
      }, 0);
    }
  }

  Object.keys(textureOptions).forEach(function(name) {
    const options = textureOptions[name];
    let onLoadFn;
    if (isAsyncSrc(options.src)) {
      onLoadFn = function(err, tex, img) {
        images[name] = img;
        --numDownloading;
        if (err) {
          errors.push(err);
        }
        callCallbackIfReady();
      };
      ++numDownloading;
    }
    textures[name] = createTexture(gl, options, onLoadFn);
  });

  // queue the callback if there are no images to download.
  // We do this because if your code is structured to wait for
  // images to download but then you comment out all the async
  // images your code would break.
  callCallbackIfReady();

  return textures;
}

var textures = /*#__PURE__*/Object.freeze({
  __proto__: null,
  setTextureDefaults_: setDefaults$1,
  createSampler: createSampler,
  createSamplers: createSamplers,
  setSamplerParameters: setSamplerParameters,
  createTexture: createTexture,
  setEmptyTexture: setEmptyTexture,
  setTextureFromArray: setTextureFromArray,
  loadTextureFromUrl: loadTextureFromUrl,
  setTextureFromElement: setTextureFromElement,
  setTextureFilteringForSize: setTextureFilteringForSize,
  setTextureParameters: setTextureParameters,
  setDefaultTextureColor: setDefaultTextureColor,
  createTextures: createTextures,
  resizeTexture: resizeTexture,
  canGenerateMipmap: canGenerateMipmap,
  canFilter: canFilter,
  getNumComponentsForFormat: getNumComponentsForFormat,
  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,
  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * Low level shader program related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibility they are available at both `twgl.programs` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/programs
 */

const error$1 = error;
const warn$1 = warn;
function getElementById(id) {
  return (typeof document !== 'undefined' && document.getElementById)
      ? document.getElementById(id)
      : null;
}

const TEXTURE0                       = 0x84c0;
const DYNAMIC_DRAW                   = 0x88e8;

const ARRAY_BUFFER$1                   = 0x8892;
const ELEMENT_ARRAY_BUFFER$1           = 0x8893;
const UNIFORM_BUFFER                 = 0x8a11;
const TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;

const TRANSFORM_FEEDBACK             = 0x8e22;

const COMPILE_STATUS                 = 0x8b81;
const LINK_STATUS                    = 0x8b82;
const FRAGMENT_SHADER                = 0x8b30;
const VERTEX_SHADER                  = 0x8b31;
const SEPARATE_ATTRIBS               = 0x8c8d;

const ACTIVE_UNIFORMS                = 0x8b86;
const ACTIVE_ATTRIBUTES              = 0x8b89;
const TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;
const ACTIVE_UNIFORM_BLOCKS          = 0x8a36;
const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;
const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;
const UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;
const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;

const FLOAT$3                         = 0x1406;
const FLOAT_VEC2                    = 0x8B50;
const FLOAT_VEC3                    = 0x8B51;
const FLOAT_VEC4                    = 0x8B52;
const INT$3                           = 0x1404;
const INT_VEC2                      = 0x8B53;
const INT_VEC3                      = 0x8B54;
const INT_VEC4                      = 0x8B55;
const BOOL                          = 0x8B56;
const BOOL_VEC2                     = 0x8B57;
const BOOL_VEC3                     = 0x8B58;
const BOOL_VEC4                     = 0x8B59;
const FLOAT_MAT2                    = 0x8B5A;
const FLOAT_MAT3                    = 0x8B5B;
const FLOAT_MAT4                    = 0x8B5C;
const SAMPLER_2D                    = 0x8B5E;
const SAMPLER_CUBE                  = 0x8B60;
const SAMPLER_3D                    = 0x8B5F;
const SAMPLER_2D_SHADOW             = 0x8B62;
const FLOAT_MAT2x3                  = 0x8B65;
const FLOAT_MAT2x4                  = 0x8B66;
const FLOAT_MAT3x2                  = 0x8B67;
const FLOAT_MAT3x4                  = 0x8B68;
const FLOAT_MAT4x2                  = 0x8B69;
const FLOAT_MAT4x3                  = 0x8B6A;
const SAMPLER_2D_ARRAY              = 0x8DC1;
const SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;
const SAMPLER_CUBE_SHADOW           = 0x8DC5;
const UNSIGNED_INT$3                  = 0x1405;
const UNSIGNED_INT_VEC2             = 0x8DC6;
const UNSIGNED_INT_VEC3             = 0x8DC7;
const UNSIGNED_INT_VEC4             = 0x8DC8;
const INT_SAMPLER_2D                = 0x8DCA;
const INT_SAMPLER_3D                = 0x8DCB;
const INT_SAMPLER_CUBE              = 0x8DCC;
const INT_SAMPLER_2D_ARRAY          = 0x8DCF;
const UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;
const UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;
const UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;
const UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;

const TEXTURE_2D$1                    = 0x0DE1;
const TEXTURE_CUBE_MAP$1              = 0x8513;
const TEXTURE_3D$1                    = 0x806F;
const TEXTURE_2D_ARRAY$1              = 0x8C1A;

const typeMap = {};

/**
 * Returns the corresponding bind point for a given sampler type
 */
function getBindPointForSamplerType(gl, type) {
  return typeMap[type].bindPoint;
}

// This kind of sucks! If you could compose functions as in `var fn = gl[name];`
// this code could be a lot smaller but that is sadly really slow (T_T)

function floatSetter(gl, location) {
  return function(v) {
    gl.uniform1f(location, v);
  };
}

function floatArraySetter(gl, location) {
  return function(v) {
    gl.uniform1fv(location, v);
  };
}

function floatVec2Setter(gl, location) {
  return function(v) {
    gl.uniform2fv(location, v);
  };
}

function floatVec3Setter(gl, location) {
  return function(v) {
    gl.uniform3fv(location, v);
  };
}

function floatVec4Setter(gl, location) {
  return function(v) {
    gl.uniform4fv(location, v);
  };
}

function intSetter(gl, location) {
  return function(v) {
    gl.uniform1i(location, v);
  };
}

function intArraySetter(gl, location) {
  return function(v) {
    gl.uniform1iv(location, v);
  };
}

function intVec2Setter(gl, location) {
  return function(v) {
    gl.uniform2iv(location, v);
  };
}

function intVec3Setter(gl, location) {
  return function(v) {
    gl.uniform3iv(location, v);
  };
}

function intVec4Setter(gl, location) {
  return function(v) {
    gl.uniform4iv(location, v);
  };
}

function uintSetter(gl, location) {
  return function(v) {
    gl.uniform1ui(location, v);
  };
}

function uintArraySetter(gl, location) {
  return function(v) {
    gl.uniform1uiv(location, v);
  };
}

function uintVec2Setter(gl, location) {
  return function(v) {
    gl.uniform2uiv(location, v);
  };
}

function uintVec3Setter(gl, location) {
  return function(v) {
    gl.uniform3uiv(location, v);
  };
}

function uintVec4Setter(gl, location) {
  return function(v) {
    gl.uniform4uiv(location, v);
  };
}

function floatMat2Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix2fv(location, false, v);
  };
}

function floatMat3Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix3fv(location, false, v);
  };
}

function floatMat4Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix4fv(location, false, v);
  };
}

function floatMat23Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix2x3fv(location, false, v);
  };
}

function floatMat32Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix3x2fv(location, false, v);
  };
}

function floatMat24Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix2x4fv(location, false, v);
  };
}

function floatMat42Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix4x2fv(location, false, v);
  };
}

function floatMat34Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix3x4fv(location, false, v);
  };
}

function floatMat43Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix4x3fv(location, false, v);
  };
}

function samplerSetter(gl, type, unit, location) {
  const bindPoint = getBindPointForSamplerType(gl, type);
  return isWebGL2(gl) ? function(textureOrPair) {
    let texture;
    let sampler;
    if (isTexture(gl, textureOrPair)) {
      texture = textureOrPair;
      sampler = null;
    } else {
      texture = textureOrPair.texture;
      sampler = textureOrPair.sampler;
    }
    gl.uniform1i(location, unit);
    gl.activeTexture(TEXTURE0 + unit);
    gl.bindTexture(bindPoint, texture);
    gl.bindSampler(unit, sampler);
  } : function(texture) {
    gl.uniform1i(location, unit);
    gl.activeTexture(TEXTURE0 + unit);
    gl.bindTexture(bindPoint, texture);
  };
}

function samplerArraySetter(gl, type, unit, location, size) {
  const bindPoint = getBindPointForSamplerType(gl, type);
  const units = new Int32Array(size);
  for (let ii = 0; ii < size; ++ii) {
    units[ii] = unit + ii;
  }

  return isWebGL2(gl) ? function(textures) {
    gl.uniform1iv(location, units);
    textures.forEach(function(textureOrPair, index) {
      gl.activeTexture(TEXTURE0 + units[index]);
      let texture;
      let sampler;
      if (isTexture(gl, textureOrPair)) {
        texture = textureOrPair;
        sampler = null;
      } else {
        texture = textureOrPair.texture;
        sampler = textureOrPair.sampler;
      }
      gl.bindSampler(unit, sampler);
      gl.bindTexture(bindPoint, texture);
    });
  } : function(textures) {
    gl.uniform1iv(location, units);
    textures.forEach(function(texture, index) {
      gl.activeTexture(TEXTURE0 + units[index]);
      gl.bindTexture(bindPoint, texture);
    });
  };
}

typeMap[FLOAT$3]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };
typeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };
typeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };
typeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };
typeMap[INT$3]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };
typeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };
typeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };
typeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };
typeMap[UNSIGNED_INT$3]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };
typeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };
typeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };
typeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };
typeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };
typeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };
typeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };
typeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };
typeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };
typeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };
typeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };
typeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };
typeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };
typeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };
typeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };
typeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };
typeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };
typeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
typeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
typeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };
typeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
typeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };
typeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };
typeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
typeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
typeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };
typeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
typeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };
typeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
typeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };
typeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
typeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };

function floatAttribSetter(gl, index) {
  return function(b) {
    if (b.value) {
      gl.disableVertexAttribArray(index);
      switch (b.value.length) {
        case 4:
          gl.vertexAttrib4fv(index, b.value);
          break;
        case 3:
          gl.vertexAttrib3fv(index, b.value);
          break;
        case 2:
          gl.vertexAttrib2fv(index, b.value);
          break;
        case 1:
          gl.vertexAttrib1fv(index, b.value);
          break;
        default:
          throw new Error('the length of a float constant value must be between 1 and 4!');
      }
    } else {
      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
      gl.enableVertexAttribArray(index);
      gl.vertexAttribPointer(
          index, b.numComponents || b.size, b.type || FLOAT$3, b.normalize || false, b.stride || 0, b.offset || 0);
      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index, b.divisor);
      }
    }
  };
}

function intAttribSetter(gl, index) {
  return function(b) {
    if (b.value) {
      gl.disableVertexAttribArray(index);
      if (b.value.length === 4) {
        gl.vertexAttrib4iv(index, b.value);
      } else {
        throw new Error('The length of an integer constant value must be 4!');
      }
    } else {
      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
      gl.enableVertexAttribArray(index);
      gl.vertexAttribIPointer(
          index, b.numComponents || b.size, b.type || INT$3, b.stride || 0, b.offset || 0);
      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index, b.divisor);
      }
    }
  };
}

function uintAttribSetter(gl, index) {
  return function(b) {
    if (b.value) {
      gl.disableVertexAttribArray(index);
      if (b.value.length === 4) {
        gl.vertexAttrib4uiv(index, b.value);
      } else {
        throw new Error('The length of an unsigned integer constant value must be 4!');
      }
    } else {
      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
      gl.enableVertexAttribArray(index);
      gl.vertexAttribIPointer(
          index, b.numComponents || b.size, b.type || UNSIGNED_INT$3, b.stride || 0, b.offset || 0);
      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index, b.divisor);
      }
    }
  };
}

function matAttribSetter(gl, index, typeInfo) {
  const defaultSize = typeInfo.size;
  const count = typeInfo.count;

  return function(b) {
    gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
    const numComponents = b.size || b.numComponents || defaultSize;
    const size = numComponents / count;
    const type = b.type || FLOAT$3;
    const typeInfo = typeMap[type];
    const stride = typeInfo.size * numComponents;
    const normalize = b.normalize || false;
    const offset = b.offset || 0;
    const rowOffset = stride / count;
    for (let i = 0; i < count; ++i) {
      gl.enableVertexAttribArray(index + i);
      gl.vertexAttribPointer(
          index + i, size, type, normalize, stride, offset + rowOffset * i);
      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index + i, b.divisor);
      }
    }
  };
}



const attrTypeMap = {};
attrTypeMap[FLOAT$3]             = { size:  4, setter: floatAttribSetter, };
attrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };
attrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };
attrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };
attrTypeMap[INT$3]               = { size:  4, setter: intAttribSetter,   };
attrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };
attrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };
attrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };
attrTypeMap[UNSIGNED_INT$3]      = { size:  4, setter: uintAttribSetter,  };
attrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };
attrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };
attrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };
attrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };
attrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };
attrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };
attrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };
attrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };
attrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };
attrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };

const errorRE = /ERROR:\s*\d+:(\d+)/gi;
function addLineNumbersWithError(src, log = '', lineOffset = 0) {
  // Note: Error message formats are not defined by any spec so this may or may not work.
  const matches = [...log.matchAll(errorRE)];
  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {
    const lineNo = parseInt(m[1]);
    const next = matches[ndx + 1];
    const end = next ? next.index : log.length;
    const msg = log.substring(m.index, end);
    return [lineNo - 1, msg];
  }));
  return src.split('\n').map((line, lineNo) => {
    const err = lineNoToErrorMap.get(lineNo);
    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\n\n^^^ ${err}` : ''}`;
  }).join('\n');
}

/**
 * Error Callback
 * @callback ErrorCallback
 * @param {string} msg error message.
 * @param {number} [lineOffset] amount to add to line number
 * @memberOf module:twgl
 */

const spaceRE = /^[ \t]*\n/;

/**
 * Loads a shader.
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {string} shaderSource The shader source.
 * @param {number} shaderType The type of shader.
 * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.
 * @return {WebGLShader} The created shader.
 * @private
 */
function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {
  const errFn = opt_errorCallback || error$1;
  // Create the shader object
  const shader = gl.createShader(shaderType);

  // Remove the first end of line because WebGL 2.0 requires
  // #version 300 es
  // as the first line. No whitespace allowed before that line
  // so
  //
  // <script>
  // #version 300 es
  // </script>
  //
  // Has one line before it which is invalid according to GLSL ES 3.00
  //
  let lineOffset = 0;
  if (spaceRE.test(shaderSource)) {
    lineOffset = 1;
    shaderSource = shaderSource.replace(spaceRE, '');
  }

  // Load the shader source
  gl.shaderSource(shader, shaderSource);

  // Compile the shader
  gl.compileShader(shader);

  // Check the compile status
  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);
  if (!compiled) {
    // Something went wrong during compilation; get the error
    const lastError = gl.getShaderInfoLog(shader);
    errFn(`${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`);
    gl.deleteShader(shader);
    return null;
  }

  return shader;
}

/**
 * @typedef {Object} ProgramOptions
 * @property {function(string)} [errorCallback] callback for errors
 * @property {Object.<string,number>} [attribLocations] a attribute name to location map
 * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed
 *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise
 *   you can pass an array of names.
 * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.
 * @memberOf module:twgl
 */

/**
 * Gets the program options based on all these optional arguments
 * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in
 * @private
 */
function getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {
  let transformFeedbackVaryings;
  let transformFeedbackMode;
  if (typeof opt_locations === 'function') {
    opt_errorCallback = opt_locations;
    opt_locations = undefined;
  }
  if (typeof opt_attribs === 'function') {
    opt_errorCallback = opt_attribs;
    opt_attribs = undefined;
  } else if (opt_attribs && !Array.isArray(opt_attribs)) {
    // If we have an errorCallback we can just return this object
    // Otherwise we need to construct one with default errorCallback
    if (opt_attribs.errorCallback) {
      return opt_attribs;
    }
    const opt = opt_attribs;
    opt_errorCallback = opt.errorCallback;
    opt_attribs = opt.attribLocations;
    transformFeedbackVaryings = opt.transformFeedbackVaryings;
    transformFeedbackMode = opt.transformFeedbackMode;
  }

  const options = {
    errorCallback: opt_errorCallback || error$1,
    transformFeedbackVaryings: transformFeedbackVaryings,
    transformFeedbackMode: transformFeedbackMode,
  };

  if (opt_attribs) {
    let attribLocations = {};
    if (Array.isArray(opt_attribs)) {
      opt_attribs.forEach(function(attrib,  ndx) {
        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;
      });
    } else {
      attribLocations = opt_attribs;
    }
    options.attribLocations = attribLocations;
  }

  return options;
}

const defaultShaderType = [
  "VERTEX_SHADER",
  "FRAGMENT_SHADER",
];

function getShaderTypeFromScriptType(gl, scriptType) {
  if (scriptType.indexOf("frag") >= 0) {
    return FRAGMENT_SHADER;
  } else if (scriptType.indexOf("vert") >= 0) {
    return VERTEX_SHADER;
  }
  return undefined;
}

function deleteShaders(gl, shaders) {
  shaders.forEach(function(shader) {
    gl.deleteShader(shader);
  });
}

/**
 * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the
 * program and calls useProgram.
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgram(gl, [vs, fs], options);
 *     twgl.createProgram(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source
 * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {WebGLProgram?} the created program or null if error.
 * @memberOf module:twgl/programs
 */
function createProgram(
    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {
  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  const realShaders = [];
  const newShaders = [];
  for (let ndx = 0; ndx < shaders.length; ++ndx) {
    let shader = shaders[ndx];
    if (typeof (shader) === 'string') {
      const elem = getElementById(shader);
      const src = elem ? elem.text : shader;
      let type = gl[defaultShaderType[ndx]];
      if (elem && elem.type) {
        type = getShaderTypeFromScriptType(gl, elem.type) || type;
      }
      shader = loadShader(gl, src, type, progOptions.errorCallback);
      newShaders.push(shader);
    }
    if (isShader(gl, shader)) {
      realShaders.push(shader);
    }
  }

  if (realShaders.length !== shaders.length) {
    progOptions.errorCallback("not enough shaders for program");
    deleteShaders(gl, newShaders);
    return null;
  }

  const program = gl.createProgram();
  realShaders.forEach(function(shader) {
    gl.attachShader(program, shader);
  });
  if (progOptions.attribLocations) {
    Object.keys(progOptions.attribLocations).forEach(function(attrib) {
      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);
    });
  }
  let varyings = progOptions.transformFeedbackVaryings;
  if (varyings) {
    if (varyings.attribs) {
      varyings = varyings.attribs;
    }
    if (!Array.isArray(varyings)) {
      varyings = Object.keys(varyings);
    }
    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);
  }
  gl.linkProgram(program);

  // Check the link status
  const linked = gl.getProgramParameter(program, LINK_STATUS);
  if (!linked) {
    // something went wrong with the link
    const lastError = gl.getProgramInfoLog(program);
    progOptions.errorCallback(`${
      realShaders.map(shader => {
        const src = addLineNumbersWithError(gl.getShaderSource(shader), '', 0);
        const type = gl.getShaderParameter(shader, gl.SHADER_TYPE);
        return `${glEnumToString(gl, type)}\n${src}}`;
      }).join('\n')
    }\nError in program linking: ${lastError}`);

    gl.deleteProgram(program);
    deleteShaders(gl, newShaders);
    return null;
  }
  return program;
}

/**
 * Loads a shader from a script tag.
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {string} scriptId The id of the script tag.
 * @param {number} [opt_shaderType] The type of shader. If not passed in it will
 *     be derived from the type of the script tag.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.
 * @return {WebGLShader?} The created shader or null if error.
 * @private
 */
function createShaderFromScript(
    gl, scriptId, opt_shaderType, opt_errorCallback) {
  let shaderSource = "";
  const shaderScript = getElementById(scriptId);
  if (!shaderScript) {
    throw new Error(`unknown script element: ${scriptId}`);
  }
  shaderSource = shaderScript.text;

  const shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);
  if (!shaderType) {
    throw new Error('unknown shader type');
  }

  return loadShader(gl, shaderSource, shaderType, opt_errorCallback);
}

/**
 * Creates a program from 2 script tags.
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {string[]} shaderScriptIds Array of ids of the script
 *        tags for the shaders. The first is assumed to be the
 *        vertex shader, the second the fragment shader.
 * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {WebGLProgram?} the created program or null if error.
 * @memberOf module:twgl/programs
 */
function createProgramFromScripts(
    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {
  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  const shaders = [];
  for (let ii = 0; ii < shaderScriptIds.length; ++ii) {
    const shader = createShaderFromScript(
        gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);
    if (!shader) {
      return null;
    }
    shaders.push(shader);
  }
  return createProgram(gl, shaders, progOptions);
}

/**
 * Creates a program from 2 sources.
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {string[]} shaderSources Array of sources for the
 *        shaders. The first is assumed to be the vertex shader,
 *        the second the fragment shader.
 * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {WebGLProgram?} the created program or null if error.
 * @memberOf module:twgl/programs
 */
function createProgramFromSources(
    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  const shaders = [];
  for (let ii = 0; ii < shaderSources.length; ++ii) {
    const shader = loadShader(
        gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);
    if (!shader) {
      return null;
    }
    shaders.push(shader);
  }
  return createProgram(gl, shaders, progOptions);
}

/**
 * Returns true if attribute/uniform is a reserved/built in
 *
 * It makes no sense to me why GL returns these because it's
 * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`
 * with names that start with `gl_` (and `webgl_` in WebGL)
 *
 * I can only assume they are there because they might count
 * when computing the number of uniforms/attributes used when you want to
 * know if you are near the limit. That doesn't really make sense
 * to me but the fact that these get returned are in the spec.
 *
 * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or
 *    `gl.getActiveAttrib`.
 * @return {bool} true if it's reserved
 * @private
 */
function isBuiltIn(info) {
  const name = info.name;
  return name.startsWith("gl_") || name.startsWith("webgl_");
}

const tokenRE = /(\.|\[|]|\w+)/g;
const isDigit = s => s >= '0' && s <= '9';
function addSetterToUniformTree(fullPath, setter, node, uniformSetters) {
  const tokens = fullPath.split(tokenRE).filter(s => s !== '');
  let tokenNdx = 0;
  let path = '';

  for (;;) {
    const token = tokens[tokenNdx++];  // has to be name or number
    path += token;
    const isArrayIndex = isDigit(token[0]);
    const accessor = isArrayIndex
        ? parseInt(token)
        : token;
    if (isArrayIndex) {
      path += tokens[tokenNdx++];  // skip ']'
    }
    const isLastToken = tokenNdx === tokens.length;
    if (isLastToken) {
      node[accessor] = setter;
      break;
    } else {
      const token = tokens[tokenNdx++];  // has to be . or [
      const isArray = token === '[';
      const child = node[accessor] || (isArray ? [] : {});
      node[accessor] = child;
      node = child;
      uniformSetters[path] = uniformSetters[path] || function(node) {
        return function(value) {
          setUniformTree(node, value);
        };
      }(child);
      path += token;
    }
  }
}

/**
 * Creates setter functions for all uniforms of a shader
 * program.
 *
 * @see {@link module:twgl.setUniforms}
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLProgram} program the program to create setters for.
 * @returns {Object.<string, function>} an object with a setter by name for each uniform
 * @memberOf module:twgl/programs
 */
function createUniformSetters(gl, program) {
  let textureUnit = 0;

  /**
   * Creates a setter for a uniform of the given program with it's
   * location embedded in the setter.
   * @param {WebGLProgram} program
   * @param {WebGLUniformInfo} uniformInfo
   * @returns {function} the created setter.
   */
  function createUniformSetter(program, uniformInfo, location) {
    const isArray = uniformInfo.name.endsWith("[0]");
    const type = uniformInfo.type;
    const typeInfo = typeMap[type];
    if (!typeInfo) {
      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.
    }
    let setter;
    if (typeInfo.bindPoint) {
      // it's a sampler
      const unit = textureUnit;
      textureUnit += uniformInfo.size;
      if (isArray) {
        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);
      } else {
        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);
      }
    } else {
      if (typeInfo.arraySetter && isArray) {
        setter = typeInfo.arraySetter(gl, location);
      } else {
        setter = typeInfo.setter(gl, location);
      }
    }
    setter.location = location;
    return setter;
  }

  const uniformSetters = {};
  const uniformTree = {};
  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);

  for (let ii = 0; ii < numUniforms; ++ii) {
    const uniformInfo = gl.getActiveUniform(program, ii);
    if (isBuiltIn(uniformInfo)) {
      continue;
    }
    let name = uniformInfo.name;
    // remove the array suffix.
    if (name.endsWith("[0]")) {
      name = name.substr(0, name.length - 3);
    }
    const location = gl.getUniformLocation(program, uniformInfo.name);
    // the uniform will have no location if it's in a uniform block
    if (location) {
      const setter = createUniformSetter(program, uniformInfo, location);
      uniformSetters[name] = setter;
      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);
    }
  }

  return uniformSetters;
}

/**
 * @typedef {Object} TransformFeedbackInfo
 * @property {number} index index of transform feedback
 * @property {number} type GL type
 * @property {number} size 1 - 4
 * @memberOf module:twgl
 */

/**
 * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLProgram} program an existing WebGLProgram.
 * @return {Object<string, module:twgl.TransformFeedbackInfo>}
 * @memberOf module:twgl
 */
function createTransformFeedbackInfo(gl, program) {
  const info = {};
  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);
  for (let ii = 0; ii < numVaryings; ++ii) {
    const varying = gl.getTransformFeedbackVarying(program, ii);
    info[varying.name] = {
      index: ii,
      type: varying.type,
      size: varying.size,
    };
  }
  return info;
}

/**
 * Binds buffers for transform feedback.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.
 * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.
 * @memberOf module:twgl
 */
function bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {
  if (transformFeedbackInfo.transformFeedbackInfo) {
    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;
  }
  if (bufferInfo.attribs) {
    bufferInfo = bufferInfo.attribs;
  }
  for (const name in bufferInfo) {
    const varying = transformFeedbackInfo[name];
    if (varying) {
      const buf = bufferInfo[name];
      if (buf.offset) {
        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);
      } else {
        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);
      }
    }
  }
}

/**
 * Creates a transform feedback and sets the buffers
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}
 * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.
 * @return {WebGLTransformFeedback} the created transform feedback
 * @memberOf module:twgl
 */
function createTransformFeedback(gl, programInfo, bufferInfo) {
  const tf = gl.createTransformFeedback();
  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);
  gl.useProgram(programInfo.program);
  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);
  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);
  return tf;
}

/**
 * @typedef {Object} UniformData
 * @property {string} name The name of the uniform
 * @property {number} type The WebGL type enum for this uniform
 * @property {number} size The number of elements for this uniform
 * @property {number} blockNdx The block index this uniform appears in
 * @property {number} offset The byte offset in the block for this uniform's value
 * @memberOf module:twgl
 */

/**
 * The specification for one UniformBlockObject
 *
 * @typedef {Object} BlockSpec
 * @property {number} index The index of the block.
 * @property {number} size The size in bytes needed for the block
 * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices
 *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.
 * @property {bool} usedByVertexShader Self explanatory
 * @property {bool} usedByFragmentShader Self explanatory
 * @property {bool} used Self explanatory
 * @memberOf module:twgl
 */

/**
 * A `UniformBlockSpec` represents the data needed to create and bind
 * UniformBlockObjects for a given program
 *
 * @typedef {Object} UniformBlockSpec
 * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name
 * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.
 * @memberOf module:twgl
 */

/**
 * Creates a UniformBlockSpec for the given program.
 *
 * A UniformBlockSpec represents the data needed to create and bind
 * UniformBlockObjects
 *
 * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context
 * @param {WebGLProgram} program A WebGLProgram for a successfully linked program
 * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec
 * @memberOf module:twgl/programs
 */
function createUniformBlockSpecFromProgram(gl, program) {
  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);
  const uniformData = [];
  const uniformIndices = [];

  for (let ii = 0; ii < numUniforms; ++ii) {
    uniformIndices.push(ii);
    uniformData.push({});
    const uniformInfo = gl.getActiveUniform(program, ii);
    uniformData[ii].name = uniformInfo.name;
  }

  [
    [ "UNIFORM_TYPE", "type" ],
    [ "UNIFORM_SIZE", "size" ],  // num elements
    [ "UNIFORM_BLOCK_INDEX", "blockNdx" ],
    [ "UNIFORM_OFFSET", "offset", ],
  ].forEach(function(pair) {
    const pname = pair[0];
    const key = pair[1];
    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {
      uniformData[ndx][key] = value;
    });
  });

  const blockSpecs = {};

  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);
  for (let ii = 0; ii < numUniformBlocks; ++ii) {
    const name = gl.getActiveUniformBlockName(program, ii);
    const blockSpec = {
      index: gl.getUniformBlockIndex(program, name),
      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),
      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),
      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),
      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),
    };
    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;
    blockSpecs[name] = blockSpec;
  }

  return {
    blockSpecs: blockSpecs,
    uniformData: uniformData,
  };
}

const arraySuffixRE = /\[\d+\]\.$/;  // better way to check?

const pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;

function createUniformBlockUniformSetter(view, isArray, rows, cols) {
  if (isArray || rows) {
    cols = cols || 1;
    const numElements = view.length;
    const totalRows = numElements / 4;
    return function(value) {
      let dst = 0;
      let src = 0;
      for (let row = 0; row < totalRows; ++row) {
        for (let col = 0; col < cols; ++col) {
          view[dst++] = value[src++];
        }
        dst += 4 - cols;
      }
    };
  } else {
    return function(value) {
      if (value.length) {
        view.set(value);
      } else {
        view[0] = value;
      }
    };
  }
}

/**
 * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values
 * and a corresponding WebGLBuffer to hold those values on the GPU
 *
 * @typedef {Object} UniformBlockInfo
 * @property {string} name The name of the block
 * @property {ArrayBuffer} array The array buffer that contains the uniform values
 * @property {Float32Array} asFloat A float view on the array buffer. This is useful
 *    inspecting the contents of the buffer in the debugger.
 * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.
 * @property {number} [offset] offset into buffer
 * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.
 *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset
 *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`
 *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an
 *   `Int32Array` view, etc.
 * @property {Object<string, function>} setters A setter for this uniform.
 *   The reason to use setters is elements of arrays are padded to vec4 sizes which
 *   means if you want to set an array of 4 floats you'd need to set 16 values
 *   (or set elements 0, 4, 8, 12). In other words
 *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`
 *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in
 *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)
 *   or via {@link module:twgl.setBlockUniforms}
 * @memberOf module:twgl
 */

/**
 * Creates a `UniformBlockInfo` for the specified block
 *
 * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy
 * `UniformBlockInfo` is returned**. This is because when debugging GLSL
 * it is common to comment out large portions of a shader or for example set
 * the final output to a constant. When that happens blocks get optimized out.
 * If this function did not create dummy blocks your code would crash when debugging.
 *
 * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext
 * @param {WebGLProgram} program A WebGLProgram
 * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned
 *     from {@link module:twgl.createUniformBlockSpecFromProgram}.
 * @param {string} blockName The name of the block.
 * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo
 * @memberOf module:twgl/programs
 */
function createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {
  const blockSpecs = uniformBlockSpec.blockSpecs;
  const uniformData = uniformBlockSpec.uniformData;
  const blockSpec = blockSpecs[blockName];
  if (!blockSpec) {
    warn$1("no uniform block object named:", blockName);
    return {
      name: blockName,
      uniforms: {},
    };
  }
  const array = new ArrayBuffer(blockSpec.size);
  const buffer = gl.createBuffer();
  const uniformBufferIndex = blockSpec.index;
  gl.bindBuffer(UNIFORM_BUFFER, buffer);
  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);

  let prefix = blockName + ".";
  if (arraySuffixRE.test(prefix)) {
    prefix = prefix.replace(arraySuffixRE, ".");
  }
  const uniforms = {};
  const setters = {};
  const setterTree = {};
  blockSpec.uniformIndices.forEach(function(uniformNdx) {
    const data = uniformData[uniformNdx];
    let name = data.name;
    if (name.startsWith(prefix)) {
      name = name.substr(prefix.length);
    }
    const isArray = name.endsWith('[0]');
    if (isArray) {
      name = name.substr(0, name.length - 3);
    }
    const typeInfo = typeMap[data.type];
    const Type = typeInfo.Type;
    const byteLength = isArray
        ? pad(typeInfo.size, 16) * data.size
        : typeInfo.size * data.size;
    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);
    uniforms[name] = uniformView;
    // Note: I'm not sure what to do here. The original
    // idea was to create TypedArray views into each part
    // of the block. This is useful, for example if you have
    // a block with { mat4: model; mat4 view; mat4 projection; }
    // you'll get a Float32Array for each one suitable for
    // passing to most JS math libraries including twgl's and glMatrix.js.
    //
    // But, if you have a an array of structures, especially if that
    // array is large, you get a whole bunch of TypedArray views.
    // Every one of them has overhead and switching between them all
    // is probably a cache miss. In that case it would really be better
    // to just have one view (asFloat) and have all the setters
    // just reference the correct portion. But, then you can't easily
    // treat a matrix, or a vec4, as a standalone thing like you can
    // with all the views.
    //
    // Another problem with the views is they are not shared. With
    // uniforms you have one set of setters. With UniformBlockInfo
    // you have a set of setters *pre block instance*. That's because
    // TypedArray views can't be mapped to different buffers.
    //
    // My gut right now is if you really want the speed and compactness
    // then you should probably roll your own solution. TWGL's goal
    // here is ease of use as AFAICT there is no simple generic efficient
    // solution.
    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);
    setters[name] = setter;
    addSetterToUniformTree(name, setter, setterTree, setters);
  });
  return {
    name: blockName,
    array,
    asFloat: new Float32Array(array),  // for debugging
    buffer,
    uniforms,
    setters,
  };
}

/**
 * Creates a `UniformBlockInfo` for the specified block
 *
 * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy
 * `UniformBlockInfo` is returned**. This is because when debugging GLSL
 * it is common to comment out large portions of a shader or for example set
 * the final output to a constant. When that happens blocks get optimized out.
 * If this function did not create dummy blocks your code would crash when debugging.
 *
 * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext
 * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`
 *     as returned from {@link module:twgl.createProgramInfo}
 * @param {string} blockName The name of the block.
 * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo
 * @memberOf module:twgl/programs
 */
function createUniformBlockInfo(gl, programInfo, blockName) {
  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);
}

/**
 * Binds a uniform block to the matching uniform block point.
 * Matches by blocks by name so blocks must have the same name not just the same
 * structure.
 *
 * If you have changed any values and you upload the values into the corresponding WebGLBuffer
 * call {@link module:twgl.setUniformBlock} instead.
 *
 * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.
 * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`
 *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as
 *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.
 * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from
 *     {@link module:twgl.createUniformBlockInfo}.
 * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name
 *     no buffer is bound.
 * @memberOf module:twgl/programs
 */
function bindUniformBlock(gl, programInfo, uniformBlockInfo) {
  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;
  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];
  if (blockSpec) {
    const bufferBindIndex = blockSpec.index;
    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);
    return true;
  }
  return false;
}

/**
 * Uploads the current uniform values to the corresponding WebGLBuffer
 * and binds that buffer to the program's corresponding bind point for the uniform block object.
 *
 * If you haven't changed any values and you only need to bind the uniform block object
 * call {@link module:twgl.bindUniformBlock} instead.
 *
 * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.
 * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`
 *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as
 *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.
 * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from
 *     {@link module:twgl.createUniformBlockInfo}.
 * @memberOf module:twgl/programs
 */
function setUniformBlock(gl, programInfo, uniformBlockInfo) {
  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {
    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);
  }
}

/**
 * Sets values of a uniform block object
 *
 * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.
 * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given
 *    type of uniform. So for example given a block like
 *
 *       uniform SomeBlock {
 *         float someFloat;
 *         vec2 someVec2;
 *         vec3 someVec3Array[2];
 *         int someInt;
 *       }
 *
 *  You can set the values of the uniform block with
 *
 *       twgl.setBlockUniforms(someBlockInfo, {
 *          someFloat: 12.3,
 *          someVec2: [1, 2],
 *          someVec3Array: [1, 2, 3, 4, 5, 6],
 *          someInt: 5,
 *       }
 *
 *  Arrays can be JavaScript arrays or typed arrays
 *
 *  You can also fill out structure and array values either via
 *  shortcut. Example
 *
 *     // -- in shader --
 *     struct Light {
 *       float intensity;
 *       vec4 color;
 *     };
 *     uniform Lights {
 *       Light lights[2];
 *     };
 *
 *     // in JavaScript
 *
 *     twgl.setBlockUniforms(someBlockInfo, {
 *       lights: [
 *         { intensity: 5.0, color: [1, 0, 0, 1] },
 *         { intensity: 2.0, color: [0, 0, 1, 1] },
 *       ],
 *     });
 *
 *     // or the more traditional way
 *
 *     twgl.setBlockUniforms(someBlockInfo, {
 *       "lights[0].intensity": 5.0,
 *       "lights[0].color": [1, 0, 0, 1],
 *       "lights[1].intensity": 2.0,
 *       "lights[1].color": [0, 0, 1, 1],
 *     });
 *
 *   You can also specify partial paths
 *
 *     twgl.setBlockUniforms(someBlockInfo, {
 *       'lights[1]: { intensity: 5.0, color: [1, 0, 0, 1] },
 *     });
 *
 *   But you can not specify leaf array indices.
 *
 *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.
 *  For example the actual layout of `someVec3Array` above in memory
 *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values
 *  as shown about and copies them, skipping the padding. This might
 *  be confusing if you're already familiar with Uniform blocks.
 *
 *  If you want to deal with the padding yourself you can access the array
 *  buffer views directly. eg:
 *
 *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);
 *
 *  Any name that doesn't match will be ignored
 * @memberOf module:twgl/programs
 */
function setBlockUniforms(uniformBlockInfo, values) {
  const setters = uniformBlockInfo.setters;
  for (const name in values) {
    const setter = setters[name];
    if (setter) {
      const value = values[name];
      setter(value);
    }
  }
}

function setUniformTree(tree, values) {
  for (const name in values) {
    const prop = tree[name];
    if (typeof prop === 'function') {
      prop(values[name]);
    } else {
      setUniformTree(tree[name], values[name]);
    }
  }
}

/**
 * Set uniforms and binds related textures.
 *
 * example:
 *
 *     const programInfo = createProgramInfo(
 *         gl, ["some-vs", "some-fs"]);
 *
 *     const tex1 = gl.createTexture();
 *     const tex2 = gl.createTexture();
 *
 *     ... assume we setup the textures with data ...
 *
 *     const uniforms = {
 *       u_someSampler: tex1,
 *       u_someOtherSampler: tex2,
 *       u_someColor: [1,0,0,1],
 *       u_somePosition: [0,1,1],
 *       u_someMatrix: [
 *         1,0,0,0,
 *         0,1,0,0,
 *         0,0,1,0,
 *         0,0,0,0,
 *       ],
 *     };
 *
 *     gl.useProgram(program);
 *
 * This will automatically bind the textures AND set the
 * uniforms.
 *
 *     twgl.setUniforms(programInfo, uniforms);
 *
 * For the example above it is equivalent to
 *
 *     var texUnit = 0;
 *     gl.activeTexture(gl.TEXTURE0 + texUnit);
 *     gl.bindTexture(gl.TEXTURE_2D, tex1);
 *     gl.uniform1i(u_someSamplerLocation, texUnit++);
 *     gl.activeTexture(gl.TEXTURE0 + texUnit);
 *     gl.bindTexture(gl.TEXTURE_2D, tex2);
 *     gl.uniform1i(u_someSamplerLocation, texUnit++);
 *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);
 *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);
 *     gl.uniformMatrix4fv(u_someMatrix, false, [
 *         1,0,0,0,
 *         0,1,0,0,
 *         0,0,1,0,
 *         0,0,0,0,
 *       ]);
 *
 * Note it is perfectly reasonable to call `setUniforms` multiple times. For example
 *
 *     const uniforms = {
 *       u_someSampler: tex1,
 *       u_someOtherSampler: tex2,
 *     };
 *
 *     const moreUniforms {
 *       u_someColor: [1,0,0,1],
 *       u_somePosition: [0,1,1],
 *       u_someMatrix: [
 *         1,0,0,0,
 *         0,1,0,0,
 *         0,0,1,0,
 *         0,0,0,0,
 *       ],
 *     };
 *
 *     twgl.setUniforms(programInfo, uniforms);
 *     twgl.setUniforms(programInfo, moreUniforms);
 *
 * You can also add WebGLSamplers to uniform samplers as in
 *
 *     const uniforms = {
 *       u_someSampler: {
 *         texture: someWebGLTexture,
 *         sampler: someWebGLSampler,
 *       },
 *     };
 *
 * In which case both the sampler and texture will be bound to the
 * same unit.
 *
 * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from
 *        `createUniformSetters`.
 * @param {Object.<string, ?>} values an object with values for the
 *        uniforms.
 *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example
 *
 *     const sharedUniforms = {
 *       u_fogNear: 10,
 *       u_projection: ...
 *       ...
 *     };
 *
 *     const localUniforms = {
 *       u_world: ...
 *       u_diffuseColor: ...
 *     };
 *
 *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);
 *
 *     // is the same as
 *
 *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);
 *
 *     // is the same as
 *
 *     twgl.setUniforms(programInfo, sharedUniforms);
 *     twgl.setUniforms(programInfo, localUniforms};
 *
 *   You can also fill out structure and array values either via
 *   shortcut. Example
 *
 *     // -- in shader --
 *     struct Light {
 *       float intensity;
 *       vec4 color;
 *     };
 *     uniform Light lights[2];
 *
 *     // in JavaScript
 *
 *     twgl.setUniforms(programInfo, {
 *       lights: [
 *         { intensity: 5.0, color: [1, 0, 0, 1] },
 *         { intensity: 2.0, color: [0, 0, 1, 1] },
 *       ],
 *     });
 *
 *   or the more traditional way
 *
 *     twgl.setUniforms(programInfo, {
 *       "lights[0].intensity": 5.0,
 *       "lights[0].color": [1, 0, 0, 1],
 *       "lights[1].intensity": 2.0,
 *       "lights[1].color": [0, 0, 1, 1],
 *     });
 *
 *   You can also specify partial paths
 *
 *     twgl.setUniforms(programInfo, {
 *       'lights[1]: { intensity: 5.0, color: [1, 0, 0, 1] },
 *     });
 *
 *   But you can not specify leaf array indices
 *
 * @memberOf module:twgl/programs
 */
function setUniforms(setters, ...args) {  // eslint-disable-line
  const actualSetters = setters.uniformSetters || setters;
  const numArgs = args.length;
  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {
    const values = args[aNdx];
    if (Array.isArray(values)) {
      const numValues = values.length;
      for (let ii = 0; ii < numValues; ++ii) {
        setUniforms(actualSetters, values[ii]);
      }
    } else {
      for (const name in values) {
        const setter = actualSetters[name];
        if (setter) {
          setter(values[name]);
        }
      }
    }
  }
}

/**
 * Alias for `setUniforms`
 * @function
 * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from
 *        `createUniformSetters`.
 * @param {Object.<string, ?>} values an object with values for the
 * @memberOf module:twgl/programs
 */
const setUniformsAndBindTextures = setUniforms;

/**
 * Creates setter functions for all attributes of a shader
 * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.
 *
 * @see {@link module:twgl.setAttributes} for example
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLProgram} program the program to create setters for.
 * @return {Object.<string, function>} an object with a setter for each attribute by name.
 * @memberOf module:twgl/programs
 */
function createAttributeSetters(gl, program) {
  const attribSetters = {
  };

  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);
  for (let ii = 0; ii < numAttribs; ++ii) {
    const attribInfo = gl.getActiveAttrib(program, ii);
    if (isBuiltIn(attribInfo)) {
      continue;
    }
    const index = gl.getAttribLocation(program, attribInfo.name);
    const typeInfo = attrTypeMap[attribInfo.type];
    const setter = typeInfo.setter(gl, index, typeInfo);
    setter.location = index;
    attribSetters[attribInfo.name] = setter;
  }

  return attribSetters;
}

/**
 * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})
 *
 * Example:
 *
 *     const program = createProgramFromScripts(
 *         gl, ["some-vs", "some-fs");
 *
 *     const attribSetters = createAttributeSetters(program);
 *
 *     const positionBuffer = gl.createBuffer();
 *     const texcoordBuffer = gl.createBuffer();
 *
 *     const attribs = {
 *       a_position: {buffer: positionBuffer, numComponents: 3},
 *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
 *     };
 *
 *     gl.useProgram(program);
 *
 * This will automatically bind the buffers AND set the
 * attributes.
 *
 *     setAttributes(attribSetters, attribs);
 *
 * Properties of attribs. For each attrib you can add
 * properties:
 *
 * *   type: the type of data in the buffer. Default = gl.FLOAT
 * *   normalize: whether or not to normalize the data. Default = false
 * *   stride: the stride. Default = 0
 * *   offset: offset into the buffer. Default = 0
 * *   divisor: the divisor for instances. Default = undefined
 *
 * For example if you had 3 value float positions, 2 value
 * float texcoord and 4 value uint8 colors you'd setup your
 * attribs like this
 *
 *     const attribs = {
 *       a_position: {buffer: positionBuffer, numComponents: 3},
 *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
 *       a_color: {
 *         buffer: colorBuffer,
 *         numComponents: 4,
 *         type: gl.UNSIGNED_BYTE,
 *         normalize: true,
 *       },
 *     };
 *
 * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters
 * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.
 * @memberOf module:twgl/programs
 * @deprecated use {@link module:twgl.setBuffersAndAttributes}
 */
function setAttributes(setters, buffers) {
  for (const name in buffers) {
    const setter = setters[name];
    if (setter) {
      setter(buffers[name]);
    }
  }
}

/**
 * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate
 *
 * Example:
 *
 *     const programInfo = createProgramInfo(
 *         gl, ["some-vs", "some-fs");
 *
 *     const arrays = {
 *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *     };
 *
 *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);
 *
 *     gl.useProgram(programInfo.program);
 *
 * This will automatically bind the buffers AND set the
 * attributes.
 *
 *     setBuffersAndAttributes(gl, programInfo, bufferInfo);
 *
 * For the example above it is equivalent to
 *
 *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
 *     gl.enableVertexAttribArray(a_positionLocation);
 *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);
 *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);
 *     gl.enableVertexAttribArray(a_texcoordLocation);
 *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
 * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}
 * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.
 *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}
 * @memberOf module:twgl/programs
 */
function setBuffersAndAttributes(gl, programInfo, buffers) {
  if (buffers.vertexArrayObject) {
    gl.bindVertexArray(buffers.vertexArrayObject);
  } else {
    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);
    if (buffers.indices) {
      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);
    }
  }
}

/**
 * @typedef {Object} ProgramInfo
 * @property {WebGLProgram} program A shader program
 * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,
 * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,
 * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..
 * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks
 * @memberOf module:twgl
 */

/**
 * Creates a ProgramInfo from an existing program.
 *
 * A ProgramInfo contains
 *
 *     programInfo = {
 *        program: WebGLProgram,
 *        uniformSetters: object of setters as returned from createUniformSetters,
 *        attribSetters: object of setters as returned from createAttribSetters,
 *     }
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {WebGLProgram} program an existing WebGLProgram.
 * @return {module:twgl.ProgramInfo} The created ProgramInfo.
 * @memberOf module:twgl/programs
 */
function createProgramInfoFromProgram(gl, program) {
  const uniformSetters = createUniformSetters(gl, program);
  const attribSetters = createAttributeSetters(gl, program);
  const programInfo = {
    program,
    uniformSetters,
    attribSetters,
  };

  if (isWebGL2(gl)) {
    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);
    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);
  }

  return programInfo;
}

/**
 * Creates a ProgramInfo from 2 sources.
 *
 * A ProgramInfo contains
 *
 *     programInfo = {
 *        program: WebGLProgram,
 *        uniformSetters: object of setters as returned from createUniformSetters,
 *        attribSetters: object of setters as returned from createAttribSetters,
 *     }
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgramInfo(gl, [vs, fs], options);
 *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {string[]} shaderSources Array of sources for the
 *        shaders or ids. The first is assumed to be the vertex shader,
 *        the second the fragment shader.
 * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile
 * @memberOf module:twgl/programs
 */
function createProgramInfo(
    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  let good = true;
  shaderSources = shaderSources.map(function(source) {
    // Lets assume if there is no \n it's an id
    if (source.indexOf("\n") < 0) {
      const script = getElementById(source);
      if (!script) {
        progOptions.errorCallback("no element with id: " + source);
        good = false;
      } else {
        source = script.text;
      }
    }
    return source;
  });
  if (!good) {
    return null;
  }
  const program = createProgramFromSources(gl, shaderSources, progOptions);
  if (!program) {
    return null;
  }
  return createProgramInfoFromProgram(gl, program);
}

var programs = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createAttributeSetters: createAttributeSetters,
  createProgram: createProgram,
  createProgramFromScripts: createProgramFromScripts,
  createProgramFromSources: createProgramFromSources,
  createProgramInfo: createProgramInfo,
  createProgramInfoFromProgram: createProgramInfoFromProgram,
  createUniformSetters: createUniformSetters,
  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,
  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,
  createUniformBlockInfo: createUniformBlockInfo,
  createTransformFeedback: createTransformFeedback,
  createTransformFeedbackInfo: createTransformFeedbackInfo,
  bindTransformFeedbackInfo: bindTransformFeedbackInfo,
  setAttributes: setAttributes,
  setBuffersAndAttributes: setBuffersAndAttributes,
  setUniforms: setUniforms,
  setUniformsAndBindTextures: setUniformsAndBindTextures,
  setUniformBlock: setUniformBlock,
  setBlockUniforms: setBlockUniforms,
  bindUniformBlock: bindUniformBlock
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

const TRIANGLES                      = 0x0004;
const UNSIGNED_SHORT$3                 = 0x1403;

/**
 * Drawing related functions
 *
 * For backward compatibility they are available at both `twgl.draw` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/draw
 */

/**
 * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate
 *
 * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself
 * but calling this means if you switch from indexed data to non-indexed
 * data you don't have to remember to update your draw call.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or
 *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
 * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`
 * @param {number} [count] An optional count. Defaults to bufferInfo.numElements
 * @param {number} [offset] An optional offset. Defaults to 0.
 * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called
 * @memberOf module:twgl/draw
 */
function drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {
  type = type === undefined ? TRIANGLES : type;
  const indices = bufferInfo.indices;
  const elementType = bufferInfo.elementType;
  const numElements = count === undefined ? bufferInfo.numElements : count;
  offset = offset === undefined ? 0 : offset;
  if (elementType || indices) {
    if (instanceCount !== undefined) {
      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset, instanceCount);
    } else {
      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset);
    }
  } else {
    if (instanceCount !== undefined) {
      gl.drawArraysInstanced(type, offset, numElements, instanceCount);
    } else {
      gl.drawArrays(type, offset, numElements);
    }
  }
}

/**
 * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.
 *
 * You need either a `BufferInfo` or a `VertexArrayInfo`.
 *
 * @typedef {Object} DrawObject
 * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`
 * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...
 * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}
 * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}
 * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
 * @property {Object<string, ?>} uniforms The values for the uniforms.
 *   You can pass multiple objects by putting them in an array. For example
 *
 *     var sharedUniforms = {
 *       u_fogNear: 10,
 *       u_projection: ...
 *       ...
 *     };
 *
 *     var localUniforms = {
 *       u_world: ...
 *       u_diffuseColor: ...
 *     };
 *
 *     var drawObj = {
 *       ...
 *       uniforms: [sharedUniforms, localUniforms],
 *     };
 *
 * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.
 * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.
 * @property {number} [instanceCount] the number of instances. Defaults to undefined.
 * @memberOf module:twgl
 */

/**
 * Draws a list of objects
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {DrawObject[]} objectsToDraw an array of objects to draw.
 * @memberOf module:twgl/draw
 */
function drawObjectList(gl, objectsToDraw) {
  let lastUsedProgramInfo = null;
  let lastUsedBufferInfo = null;

  objectsToDraw.forEach(function(object) {
    if (object.active === false) {
      return;
    }

    const programInfo = object.programInfo;
    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;
    let bindBuffers = false;
    const type = object.type === undefined ? TRIANGLES : object.type;

    if (programInfo !== lastUsedProgramInfo) {
      lastUsedProgramInfo = programInfo;
      gl.useProgram(programInfo.program);

      // We have to rebind buffers when changing programs because we
      // only bind buffers the program uses. So if 2 programs use the same
      // bufferInfo but the 1st one uses only positions the when the
      // we switch to the 2nd one some of the attributes will not be on.
      bindBuffers = true;
    }

    // Setup all the needed attributes.
    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {
      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {
        gl.bindVertexArray(null);
      }
      lastUsedBufferInfo = bufferInfo;
      setBuffersAndAttributes(gl, programInfo, bufferInfo);
    }

    // Set the uniforms.
    setUniforms(programInfo, object.uniforms);

    // Draw
    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);
  });

  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {
    gl.bindVertexArray(null);
  }
}

var draw = /*#__PURE__*/Object.freeze({
  __proto__: null,
  drawBufferInfo: drawBufferInfo,
  drawObjectList: drawObjectList
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

const FRAMEBUFFER                    = 0x8d40;
const RENDERBUFFER                   = 0x8d41;
const TEXTURE_2D$2                     = 0x0de1;

const UNSIGNED_BYTE$3                  = 0x1401;

/* PixelFormat */
const DEPTH_COMPONENT$1                = 0x1902;
const RGBA$1                           = 0x1908;
const DEPTH_COMPONENT24$1              = 0x81a6;
const DEPTH_COMPONENT32F$1             = 0x8cac;
const DEPTH24_STENCIL8$1               = 0x88f0;
const DEPTH32F_STENCIL8$1              = 0x8cad;

/* Framebuffer Object. */
const RGBA4$1                          = 0x8056;
const RGB5_A1$1                        = 0x8057;
const RGB565$1                         = 0x8D62;
const DEPTH_COMPONENT16$1              = 0x81A5;
const STENCIL_INDEX                  = 0x1901;
const STENCIL_INDEX8                 = 0x8D48;
const DEPTH_STENCIL$1                  = 0x84F9;
const COLOR_ATTACHMENT0              = 0x8CE0;
const DEPTH_ATTACHMENT               = 0x8D00;
const STENCIL_ATTACHMENT             = 0x8D20;
const DEPTH_STENCIL_ATTACHMENT       = 0x821A;

/* TextureWrapMode */
const CLAMP_TO_EDGE$1                  = 0x812F;

/* TextureMagFilter */
const LINEAR$1                         = 0x2601;

/**
 * The options for a framebuffer attachment.
 *
 * Note: For a `format` that is a texture include all the texture
 * options from {@link module:twgl.TextureOptions} for example
 * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}
 * `auto` defaults to `false` for attachment textures but `min` and `mag` default
 * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`
 *
 * @typedef {Object} AttachmentOptions
 * @property {number} [attachmentPoint] The attachment point. Defaults
 *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type
 *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending
 *   on the format or attachment type.
 * @property {number} [format] The format. If one of `gl.RGBA4`,
 *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,
 *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a
 *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`
 * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.
 * @property {number} [target] The texture target for `gl.framebufferTexture2D`.
 *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.
 * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.
 * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.
 *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`
 * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.
 *    If provided will attach this Object. This allows you to share
 *    attachments across framebuffers.
 * @memberOf module:twgl
 * @mixes module:twgl.TextureOptions
 */

const defaultAttachments = [
  { format: RGBA$1, type: UNSIGNED_BYTE$3, min: LINEAR$1, wrap: CLAMP_TO_EDGE$1, },
  { format: DEPTH_STENCIL$1, },
];

const attachmentsByFormat = {};
attachmentsByFormat[DEPTH_STENCIL$1] = DEPTH_STENCIL_ATTACHMENT;
attachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;
attachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT$1] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT16$1] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT24$1] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT32F$1] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH24_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;
attachmentsByFormat[DEPTH32F_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;

function getAttachmentPointForFormat(format, internalFormat) {
  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];
}

const renderbufferFormats = {};
renderbufferFormats[RGBA4$1] = true;
renderbufferFormats[RGB5_A1$1] = true;
renderbufferFormats[RGB565$1] = true;
renderbufferFormats[DEPTH_STENCIL$1] = true;
renderbufferFormats[DEPTH_COMPONENT16$1] = true;
renderbufferFormats[STENCIL_INDEX] = true;
renderbufferFormats[STENCIL_INDEX8] = true;

function isRenderbufferFormat(format) {
  return renderbufferFormats[format];
}

/**
 * @typedef {Object} FramebufferInfo
 * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo
 * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.
 * @property {number} width The width of the framebuffer and its attachments
 * @property {number} height The width of the framebuffer and its attachments
 * @memberOf module:twgl
 */

/**
 * Creates a framebuffer and attachments.
 *
 * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.
 *
 * The simplest usage
 *
 *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer
 *     const fbi = twgl.createFramebufferInfo(gl);
 *
 * More complex usage
 *
 *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer
 *     const attachments = [
 *       { format: RGB565, mag: NEAREST },
 *       { format: STENCIL_INDEX8 },
 *     ]
 *     const fbi = twgl.createFramebufferInfo(gl, attachments);
 *
 * Passing in a specific size
 *
 *     const width = 256;
 *     const height = 256;
 *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);
 *
 * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.
 * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an
 *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.
 * @param {number} [width] the width for the attachments. Default = size of drawingBuffer
 * @param {number} [height] the height for the attachments. Default = size of drawingBuffer
 * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.
 * @memberOf module:twgl/framebuffers
 */
function createFramebufferInfo(gl, attachments, width, height) {
  const target = FRAMEBUFFER;
  const fb = gl.createFramebuffer();
  gl.bindFramebuffer(target, fb);
  width  = width  || gl.drawingBufferWidth;
  height = height || gl.drawingBufferHeight;
  attachments = attachments || defaultAttachments;
  let colorAttachmentCount = 0;
  const framebufferInfo = {
    framebuffer: fb,
    attachments: [],
    width: width,
    height: height,
  };
  attachments.forEach(function(attachmentOptions) {
    let attachment = attachmentOptions.attachment;
    const format = attachmentOptions.format;
    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);
    if (!attachmentPoint) {
      attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;
    }
    if (!attachment) {
      if (isRenderbufferFormat(format)) {
        attachment = gl.createRenderbuffer();
        gl.bindRenderbuffer(RENDERBUFFER, attachment);
        gl.renderbufferStorage(RENDERBUFFER, format, width, height);
      } else {
        const textureOptions = Object.assign({}, attachmentOptions);
        textureOptions.width = width;
        textureOptions.height = height;
        if (textureOptions.auto === undefined) {
          textureOptions.auto = false;
          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR$1;
          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR$1;
          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE$1;
          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE$1;
        }
        attachment = createTexture(gl, textureOptions);
      }
    }
    if (isRenderbuffer(gl, attachment)) {
      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);
    } else if (isTexture(gl, attachment)) {
      if (attachmentOptions.layer !== undefined) {
        gl.framebufferTextureLayer(
          target,
          attachmentPoint,
          attachment,
          attachmentOptions.level || 0,
          attachmentOptions.layer);
      } else {
        gl.framebufferTexture2D(
            target,
            attachmentPoint,
            attachmentOptions.target || TEXTURE_2D$2,
            attachment,
            attachmentOptions.level || 0);
      }
    } else {
      throw new Error('unknown attachment type');
    }
    framebufferInfo.attachments.push(attachment);
  });
  return framebufferInfo;
}

/**
 * Resizes the attachments of a framebuffer.
 *
 * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}
 * because TWGL has no idea the format/type of each attachment.
 *
 * The simplest usage
 *
 *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer
 *     const fbi = twgl.createFramebufferInfo(gl);
 *
 *     ...
 *
 *     function render() {
 *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {
 *         // resize the attachments
 *         twgl.resizeFramebufferInfo(gl, fbi);
 *       }
 *
 * More complex usage
 *
 *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer
 *     const attachments = [
 *       { format: RGB565, mag: NEAREST },
 *       { format: STENCIL_INDEX8 },
 *     ]
 *     const fbi = twgl.createFramebufferInfo(gl, attachments);
 *
 *     ...
 *
 *     function render() {
 *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {
 *         // resize the attachments to match
 *         twgl.resizeFramebufferInfo(gl, fbi, attachments);
 *       }
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.
 * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.
 * @param {number} [width] the width for the attachments. Default = size of drawingBuffer
 * @param {number} [height] the height for the attachments. Default = size of drawingBuffer
 * @memberOf module:twgl/framebuffers
 */
function resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {
  width  = width  || gl.drawingBufferWidth;
  height = height || gl.drawingBufferHeight;
  framebufferInfo.width = width;
  framebufferInfo.height = height;
  attachments = attachments || defaultAttachments;
  attachments.forEach(function(attachmentOptions, ndx) {
    const attachment = framebufferInfo.attachments[ndx];
    const format = attachmentOptions.format;
    if (isRenderbuffer(gl, attachment)) {
      gl.bindRenderbuffer(RENDERBUFFER, attachment);
      gl.renderbufferStorage(RENDERBUFFER, format, width, height);
    } else if (isTexture(gl, attachment)) {
      resizeTexture(gl, attachment, attachmentOptions, width, height);
    } else {
      throw new Error('unknown attachment type');
    }
  });
}

/**
 * Binds a framebuffer
 *
 * This function pretty much solely exists because I spent hours
 * trying to figure out why something I wrote wasn't working only
 * to realize I forget to set the viewport dimensions.
 * My hope is this function will fix that.
 *
 * It is effectively the same as
 *
 *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);
 *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.
 *   If falsy will bind the canvas.
 * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.
 * @memberOf module:twgl/framebuffers
 */

function bindFramebufferInfo(gl, framebufferInfo, target) {
  target = target || FRAMEBUFFER;
  if (framebufferInfo) {
    gl.bindFramebuffer(target, framebufferInfo.framebuffer);
    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);
  } else {
    gl.bindFramebuffer(target, null);
    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
  }
}

var framebuffers = /*#__PURE__*/Object.freeze({
  __proto__: null,
  bindFramebufferInfo: bindFramebufferInfo,
  createFramebufferInfo: createFramebufferInfo,
  resizeFramebufferInfo: resizeFramebufferInfo
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * vertex array object related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibility they are available at both `twgl.attributes` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/vertexArrays
 */

const ELEMENT_ARRAY_BUFFER$2           = 0x8893;

/**
 * @typedef {Object} VertexArrayInfo
 * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.
 * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..
 * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object
 * @memberOf module:twgl
 */

/**
 * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos
 *
 * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to
 * {@link module:twgl:drawBufferInfo}.
 *
 * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects
 *   assign buffers to specific attributes at creation time. That means they can only be used with programs
 *   who's attributes use the same attribute locations for the same purposes.
 *
 * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}
 *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.
 *
 * also
 *
 * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object
 *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**
 *   will affect the Vertex Array Object state.
 *
 * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos
 * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...
 *
 *    You need to make sure every attribute that will be used is bound. So for example assume shader 1
 *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo
 *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't
 *    now attribute D's location.
 *
 *    So, you can pass in both shader 1 and shader 2's programInfo
 *
 * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo
 *
 * @memberOf module:twgl/vertexArrays
 */
function createVertexArrayInfo(gl, programInfos, bufferInfo) {
  const vao = gl.createVertexArray();
  gl.bindVertexArray(vao);
  if (!programInfos.length) {
    programInfos = [programInfos];
  }
  programInfos.forEach(function(programInfo) {
    setBuffersAndAttributes(gl, programInfo, bufferInfo);
  });
  gl.bindVertexArray(null);
  return {
    numElements: bufferInfo.numElements,
    elementType: bufferInfo.elementType,
    vertexArrayObject: vao,
  };
}

/**
 * Creates a vertex array object and then sets the attributes on it
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters
 * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.
 * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices
 * @memberOf module:twgl/vertexArrays
 */
function createVAOAndSetAttributes(gl, setters, attribs, indices) {
  const vao = gl.createVertexArray();
  gl.bindVertexArray(vao);
  setAttributes(setters, attribs);
  if (indices) {
    gl.bindBuffer(ELEMENT_ARRAY_BUFFER$2, indices);
  }
  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER
  // like when creating buffers for other stuff will mess up this VAO's binding
  gl.bindVertexArray(null);
  return vao;
}

/**
 * Creates a vertex array object and then sets the attributes
 * on it
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters
 * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...
 * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices
 * @memberOf module:twgl/vertexArrays
 */
function createVAOFromBufferInfo(gl, programInfo, bufferInfo) {
  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);
}

var vertexArrays = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createVertexArrayInfo: createVertexArrayInfo,
  createVAOAndSetAttributes: createVAOAndSetAttributes,
  createVAOFromBufferInfo: createVAOFromBufferInfo
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
const defaults$2 = {
  addExtensionsToContext: true,
};

/**
 * Various default settings for twgl.
 *
 * Note: You can call this any number of times. Example:
 *
 *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });
 *     twgl.setDefaults({ attribPrefix: 'a_' });
 *
 * is equivalent to
 *
 *     twgl.setDefaults({
 *       textureColor: [1, 0, 0, 1],
 *       attribPrefix: 'a_',
 *     });
 *
 * @typedef {Object} Defaults
 * @property {string} [attribPrefix] The prefix to stick on attributes
 *
 *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`
 *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.
 *
 *   In other words I'll create arrays of geometry like this
 *
 *       const arrays = {
 *         position: ...
 *         normal: ...
 *         texcoord: ...
 *       };
 *
 *   But need those mapped to attributes and my attributes start with `a_`.
 *
 *   Default: `""`
 *
 * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1
 *
 *   The default texture color is used when loading textures from
 *   urls. Because the URL will be loaded async we'd like to be
 *   able to use the texture immediately. By putting a 1x1 pixel
 *   color in the texture we can start using the texture before
 *   the URL has loaded.
 *
 *   Default: `[0.5, 0.75, 1, 1]`
 *
 * @property {string} [crossOrigin]
 *
 *   If not undefined sets the crossOrigin attribute on images
 *   that twgl creates when downloading images for textures.
 *
 *   Also see {@link module:twgl.TextureOptions}.
 *
 * @property {bool} [addExtensionsToContext]
 *
 *   If true, then, when twgl will try to add any supported WebGL extensions
 *   directly to the context under their normal GL names. For example
 *   if ANGLE_instances_arrays exists then twgl would enable it,
 *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,
 *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`
 *   to the `WebGLRenderingContext`.
 *
 * @memberOf module:twgl
 */

/**
 * Sets various defaults for twgl.
 *
 * In the interest of terseness which is kind of the point
 * of twgl I've integrated a few of the older functions here
 *
 * @param {module:twgl.Defaults} newDefaults The default settings.
 * @memberOf module:twgl
 */
function setDefaults$2(newDefaults) {
  copyExistingProperties(newDefaults, defaults$2);
  setDefaults(newDefaults);  // eslint-disable-line
  setDefaults$1(newDefaults);  // eslint-disable-line
}

const prefixRE = /^(.*?)_/;
function addExtensionToContext(gl, extensionName) {
  glEnumToString(gl, 0);
  const ext = gl.getExtension(extensionName);
  if (ext) {
    const enums = {};
    const fnSuffix = prefixRE.exec(extensionName)[1];
    const enumSuffix = '_' + fnSuffix;
    for (const key in ext) {
      const value = ext[key];
      const isFunc = typeof (value) === 'function';
      const suffix = isFunc ? fnSuffix : enumSuffix;
      let name = key;
      // examples of where this is not true are WEBGL_compressed_texture_s3tc
      // and WEBGL_compressed_texture_pvrtc
      if (key.endsWith(suffix)) {
        name = key.substring(0, key.length - suffix.length);
      }
      if (gl[name] !== undefined) {
        if (!isFunc && gl[name] !== value) {
          warn(name, gl[name], value, key);
        }
      } else {
        if (isFunc) {
          gl[name] = function(origFn) {
            return function() {
              return origFn.apply(ext, arguments);
            };
          }(value);
        } else {
          gl[name] = value;
          enums[name] = value;
        }
      }
    }
    // pass the modified enums to glEnumToString
    enums.constructor = {
      name: ext.constructor.name,
    };
    glEnumToString(enums, 0);
  }
  return ext;
}

/*
 * If you're wondering why the code doesn't just iterate
 * over all extensions using `gl.getExtensions` is that it's possible
 * some future extension is incompatible with this code. Rather than
 * have thing suddenly break it seems better to manually add to this
 * list.
 *
 */
const supportedExtensions = [
  'ANGLE_instanced_arrays',
  'EXT_blend_minmax',
  'EXT_color_buffer_float',
  'EXT_color_buffer_half_float',
  'EXT_disjoint_timer_query',
  'EXT_disjoint_timer_query_webgl2',
  'EXT_frag_depth',
  'EXT_sRGB',
  'EXT_shader_texture_lod',
  'EXT_texture_filter_anisotropic',
  'OES_element_index_uint',
  'OES_standard_derivatives',
  'OES_texture_float',
  'OES_texture_float_linear',
  'OES_texture_half_float',
  'OES_texture_half_float_linear',
  'OES_vertex_array_object',
  'WEBGL_color_buffer_float',
  'WEBGL_compressed_texture_atc',
  'WEBGL_compressed_texture_etc1',
  'WEBGL_compressed_texture_pvrtc',
  'WEBGL_compressed_texture_s3tc',
  'WEBGL_compressed_texture_s3tc_srgb',
  'WEBGL_depth_texture',
  'WEBGL_draw_buffers',
];

/**
 * Attempts to enable all of the following extensions
 * and add their functions and constants to the
 * `WebGLRenderingContext` using their normal non-extension like names.
 *
 *      ANGLE_instanced_arrays
 *      EXT_blend_minmax
 *      EXT_color_buffer_float
 *      EXT_color_buffer_half_float
 *      EXT_disjoint_timer_query
 *      EXT_disjoint_timer_query_webgl2
 *      EXT_frag_depth
 *      EXT_sRGB
 *      EXT_shader_texture_lod
 *      EXT_texture_filter_anisotropic
 *      OES_element_index_uint
 *      OES_standard_derivatives
 *      OES_texture_float
 *      OES_texture_float_linear
 *      OES_texture_half_float
 *      OES_texture_half_float_linear
 *      OES_vertex_array_object
 *      WEBGL_color_buffer_float
 *      WEBGL_compressed_texture_atc
 *      WEBGL_compressed_texture_etc1
 *      WEBGL_compressed_texture_pvrtc
 *      WEBGL_compressed_texture_s3tc
 *      WEBGL_compressed_texture_s3tc_srgb
 *      WEBGL_depth_texture
 *      WEBGL_draw_buffers
 *
 * For example if `ANGLE_instanced_arrays` exists then the functions
 * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`
 * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the
 * `WebGLRenderingContext`.
 *
 * Note that if you want to know if the extension exists you should
 * probably call `gl.getExtension` for each extension. Alternatively
 * you can check for the existence of the functions or constants that
 * are expected to be added. For example
 *
 *    if (gl.drawBuffers) {
 *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2
 *      ....
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @memberOf module:twgl
 */
function addExtensionsToContext(gl) {
  for (let ii = 0; ii < supportedExtensions.length; ++ii) {
    addExtensionToContext(gl, supportedExtensions[ii]);
  }
}

/**
 * Creates a webgl context.
 * @param {HTMLCanvasElement} canvas The canvas tag to get
 *     context from. If one is not passed in one will be
 *     created.
 * @return {WebGLRenderingContext} The created context.
 * @private
 */
function create3DContext(canvas, opt_attribs) {
  const names = ["webgl", "experimental-webgl"];
  let context = null;
  for (let ii = 0; ii < names.length; ++ii) {
    context = canvas.getContext(names[ii], opt_attribs);
    if (context) {
      if (defaults$2.addExtensionsToContext) {
        addExtensionsToContext(context);
      }
      break;
    }
  }
  return context;
}

/**
 * Gets a WebGL1 context.
 *
 * Note: Will attempt to enable Vertex Array Objects
 * and add WebGL2 entry points. (unless you first set defaults with
 * `twgl.setDefaults({enableVertexArrayObjects: false})`;
 *
 * @param {HTMLCanvasElement} canvas a canvas element.
 * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes
 * @return {WebGLRenderingContext} The created context.
 * @memberOf module:twgl
 */
function getWebGLContext(canvas, opt_attribs) {
  const gl = create3DContext(canvas, opt_attribs);
  return gl;
}

/**
 * Creates a webgl context.
 *
 * Will return a WebGL2 context if possible.
 *
 * You can check if it's WebGL2 with
 *
 *     twgl.isWebGL2(gl);
 *
 * @param {HTMLCanvasElement} canvas The canvas tag to get
 *     context from. If one is not passed in one will be
 *     created.
 * @return {WebGLRenderingContext} The created context.
 */
function createContext(canvas, opt_attribs) {
  const names = ["webgl2", "webgl", "experimental-webgl"];
  let context = null;
  for (let ii = 0; ii < names.length; ++ii) {
    context = canvas.getContext(names[ii], opt_attribs);
    if (context) {
      if (defaults$2.addExtensionsToContext) {
        addExtensionsToContext(context);
      }
      break;
    }
  }
  return context;
}

/**
 * Gets a WebGL context.  Will create a WebGL2 context if possible.
 *
 * You can check if it's WebGL2 with
 *
 *    function isWebGL2(gl) {
 *      return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0 ") == 0;
 *    }
 *
 * Note: For a WebGL1 context will attempt to enable Vertex Array Objects
 * and add WebGL2 entry points. (unless you first set defaults with
 * `twgl.setDefaults({enableVertexArrayObjects: false})`;
 *
 * @param {HTMLCanvasElement} canvas a canvas element.
 * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes
 * @return {WebGLRenderingContext} The created context.
 * @memberOf module:twgl
 */
function getContext(canvas, opt_attribs) {
  const gl = createContext(canvas, opt_attribs);
  return gl;
}

/**
 * Resize a canvas to match the size it's displayed.
 * @param {HTMLCanvasElement} canvas The canvas to resize.
 * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.
 * @return {boolean} true if the canvas was resized.
 * @memberOf module:twgl
 */
function resizeCanvasToDisplaySize(canvas, multiplier) {
  multiplier = multiplier || 1;
  multiplier = Math.max(0, multiplier);
  const width  = canvas.clientWidth  * multiplier | 0;
  const height = canvas.clientHeight * multiplier | 0;
  if (canvas.width !== width || canvas.height !== height) {
    canvas.width = width;
    canvas.height = height;
    return true;
  }
  return false;
}




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*************************************!*\
  !*** ./games/Avalonika/src/main.js ***!
  \*************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _lib_iconPack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lib/iconPack */ "./engine/src/lib/iconPack.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config */ "./games/Avalonika/src/config.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./global */ "./games/Avalonika/src/global.js");
/* harmony import */ var _world_world__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./world/world */ "./games/Avalonika/src/world/world.js");
/* harmony import */ var _world_gameMap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./world/gameMap */ "./games/Avalonika/src/world/gameMap.js");
/* harmony import */ var _entity_player__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./entity/player */ "./games/Avalonika/src/entity/player.js");
/* harmony import */ var _entity_pet__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./entity/pet */ "./games/Avalonika/src/entity/pet.js");
/* harmony import */ var _entity_npc__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./entity/npc */ "./games/Avalonika/src/entity/npc.js");
/* harmony import */ var _entity_item__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./entity/item */ "./games/Avalonika/src/entity/item.js");
/* harmony import */ var _interface_interface__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./interface/interface */ "./games/Avalonika/src/interface/interface.js");
/* harmony import */ var _saveLoad__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./saveLoad */ "./games/Avalonika/src/saveLoad.js");
/* harmony import */ var _lib_random__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @lib/random */ "./engine/src/lib/random.js");
/* harmony import */ var _entity_entityComponents__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./entity/entityComponents */ "./games/Avalonika/src/entity/entityComponents.js");
//flatfast.init(360, 640);

// Application.init( { logicalWidth: 180,logicalHeight: 320 } );
_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.init( 180,320 ,60,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Application.ScaleModes.LETTERBOX );


        

















// gui.add( application.logicalViewport, "width" );
// gui.add( application.logicalViewport, "height" );


// _accelerometer = new Accelerometer();
// _accelerometer.start();

_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.setBackgroundColor( 0x000000 );
//GLOBAL.stage = ScaledStage.new(720 / 3.5, 1280 / 3.5, true)
_global__WEBPACK_IMPORTED_MODULE_3__["default"].stage = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.stage;//new ScaledStage(750 / 4, 1334 / 4);// , true)
//GLOBAL.stage = ScaledStage.new(750 / 2, 1334 / 2)// , true)
// GLOBAL.stage.setFullScreen(true);
// GLOBAL.stage.addToStage();
// GLOBAL.stage.setScanline(true);
//TODO:
//GLOBAL.console = new DebugConsole(Interface.uiTtf);

// GLOBAL.world = null;
// GLOBAL.player = null;
// GLOBAL.interface = null;
// GLOBAL.saveLoad = null;


// let tm = new TileMap(10, 10, new Texture("tile.png"), 16, 24, 0, 0, 0, 0, 16, 24);
// for (let y = 0; y < 10; y++) {
//     for (let x = 0; x < 10; x++) {
//         tm.setTile(x, y, x, y);
//     }
// }
// stage.addChild(tm);
// let ip = new IconPack(new Texture("prop.png"), 3, 2, 16, 24, 0xffffff, 1, 0, 0);
// stage.addChild(ip);
// let tf = TextField.fromTextWrap("안녕하십니까\n안녕하시냐고요");
// tf.y = 50;
//tf.setTextColor(0xff0000);
// stage.addChild(tf);
// console.log(`텍스트 세로크기 ${tf.getHeight()}`);
// let f = new Font("font_bitmap.fnt", "font_bitmap.png");


// import RemoteComponent from "@engine/remoteComponent";


// import MotionBlurSprite from "./engine/motionBlurSprite";

_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 1000, () => {
    // const t = new Texture( "WindowFrame.png" );
    // const b = new MotionBlurSprite( t );

    // stage.addChild( b );
    // b.y = 60;
    // b.move( 150,250,400,{ ease: "inOutCubic" , repeatCount: 0, reflect: true } );

    // let s = new Spine( "Spines/HumanSide/human_side.json" );
    // let s = new Spine( "Spines/human_side" );

    // s.on( Event.READY,()=>{

    //     s.x = 100;
    //     s.y = 200;
    //     s.scale = 0.2;
    //     // let ss = s.__pixi.spineData.skins[ "loderunner" ];

    //     // s.__pixi.skeleton.setSkin( ss );
    //     stage.addChild( s );

    // } );

    // let s = new Sprite();
    // let c = new RemoteComponent();

    // stage.addChild( s );
    // s.addComponent( c );

    // c.locked = 1;
    // console.log( `잠긴값 테스트 ${c.locked}` );
    // let r = c.testMethod( c );

    // s.on( Event.UPDATE,( e )=>{

    //     console.log( `잠긴값 테스트2 ${c.locked}` );
    
    // } );
    // s.on( "test",( e )=>{

    //     console.log( "이벤트잡음",e );
    
    // } );
    // s.dispatchEvent( "hello" );

    // const dd = ComponentHolder.getAllComponents( RemoteComponent );

    // console.log( "컴퍼넌트찾기",dd );
    
    // const dd2 = ComponentHolder.getAllComponentHolders( RemoteComponent );

    // console.log( "홀더찾기",dd2 );
    
    // // c.requestModify( this.__dirtyList );

    // r.then( ( e )=>console.log( e ) );

    // export default class CH extends ComponentHolder {

    //     constructor() {

    //         super();
    //         this.life =  this.addComponent( new Params( 10 ) );
    //         this.motion = this.addComponent( new Motion() );
    //         this.a = this.createComponent( Props,{ a: 999 } );
    //         console.log( "체크",this.hasAllComponents( Params,Motion,Props ) );
        
    //     }

    // }



    // let ch = new CH();
    // let [p] = ch.getCompatibleComponents( Props );

    // console.log( p.a,p.b );
    // ch.dispatchEvent( "motion" );
    // ch.dispatchEvent( "motion" );
    // // ch.removeComponent( ch.getComponent( Motion ) );    
    // ch.removeComponent( Motion );    
    // ch.dispatchEvent( "motion" );

    /** 
     * 
    */
    // Component.C = C;
    


    // const sz = new Serializer( [[Item, { construct: ( src )=>new Item( src.name,src.tileX,src.tileY ) }]] );
    
    // const t = new Texture( "WindowFrame.png" );
    // const b = new Bitmap( t );

    // const i1 = new Item( "곡괭이" );
    // const o = { it: i1,hello: "world", x: [1, 2, 3, 4], t: "?" };

    // console.log( sz.parse( sz.stringify( o ) ) );


    // const s = new Sprite().triggerable();
    // //s.addTrigger("aaa", { x: true }, (o, k) => o[k] > 1 );
    // //s.on("aaa", () => { console.log("이벤트트리거") ; } );
    // // stage.addChild(s);
    // // s.move(100, 100, 1000);
    // const e = s.newEvent( { a: 10 } );

    // e.on( function( x ) {

    //     console.log( "이벤트왔당",x,this ); 

    // } );
    // e.dispatch();

    // const t = new Texture( "WindowFrame.png" );
    // //b.x += 30;
    // // b.y += 30;3
    // const b = new Bitmap( t );

    // // b.setRotation(45);
    // // b.x = 50;
    // stage.addChild( b );
    // b.wait( 500, () => console.log( "다기다렸다" ) ).move( 100, 100, 1000, "outBounce" )
    //     .wait( 500 )
    //     .move( 0, 200, 1000 );
    // console.log( b.hitTestPoint( 24, 24 ) );

    // b.setInteractive( {
    //     down: ( e, i ) => {

    //         console.log( e, i );
        
    //     },
    //     dragX: true,
    //     dragY: true
    // } );
    
    // const s1 = new Storage( "xxx" );

    // s1.write( "1", "완전히 성공했습니다" ).then( () => {

    //     s1.read( "1" ).then( r => console.log( r ) );
    
    // } );

    //let tf = new TextField(null, "abcdefg\ndefgdg");

    // tf.x = 50;
    // tf.y = 50;
    // let ff = PIXI.BitmapText.fonts["font_bitmap.fnt"];
    //stage.addChild(tf);
    // console.log("logicalViewport", application.logicalViewport);
    // console.log("logicalViewportScale", application.logicalViewportScale);
    // console.log("renderViewport", stage.renderViewport);
    // console.log("renderViewportScale", stage.renderViewportScale);
    // console.log("deviceViewport", stage.deviceViewport);
    // console.log("logicalViewportOffset", application.logicalViewportOffset);
    // console.log("logicalRenderBounds",application.logicalRenderBounds);
} );
//let t = new Texture("Tile.png");
// let b = new Bitmap(t);
// b.x = 0;
// b.alpha = 0.1;
// stage.addChild(b);


//b.__pixi.rotation = Math.PI * 1.9;
//let g = new PIXI.Graphics();
//g.beginFill(0x000000, 1);
//g.drawRect(100, 0, 200, 100);
//g.endFill();
//stage.__pixi.addChild(g);
//b.__pixi.mask = g;
//b.setClip(0, 0, 100, 100);
//stage.__pixi.addChild(b.__pixi);
// let s1 = new Sprite();
// s1.addChild(b);
// s1.setAnchorPoint(0, 0);
// stage.addChild(s1);
// //new Tween(b, 1000, { x: 100 }, { ease: easing.outCubic });
// mc.setGotoAction(60, 0);
// stage.addChild(mc);

//stage.addChild(new Pixel(0x00ffff, 0.5, 10, 10));
// Timer.delayedCall(1000, () => {
    
//     console.log(t.getWidth());
//     let b = new Bitmap(t);
//     //stage.addChild(b);
// let m = new Mesh();
// m.setIndexArray([0, 1, 2, 1, 3, 2]);
// m.setVertexArray([0, 0, 100, 0, 0, 100, 100, 100]);
// m.setTexture(t);
// m.setColorArray([0xffffff, 1.0, 0xffffff, 1.0, 0xffffff, 1, 0xffffff, 1]);
// m.setTextureCoordinateArray([0, 0, 100, 0, 0, 100, 100, 100]);
// //m.setTextureCoordinates(0,100, 0, 1,200, 0, 2,100, 100, 3,200, 100);
// //m.setTextureCoordinateArray([0, 0, 1, 0, 0, 1, 1, 1]);
// m.alpha = 0.5;
// stage.addChild(m);

//     // let rt = new RenderTarget(application,512, 512);
//     // rt.clear(0xff0000, 1);
//     // rt.draw(b);
//     // let b1 = new Bitmap(rt);
//     // stage.addChild(b1);
//     // b1.y = 50;
// });


//application.setFullscreen( true );

const [px, py, pw, ph] = [0,0,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.width,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.height];

_global__WEBPACK_IMPORTED_MODULE_3__["default"].sceneManager = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.SceneManager( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application, px, py, pw, ph, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.width, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.height );
_global__WEBPACK_IMPORTED_MODULE_3__["default"].stage.addChild( _global__WEBPACK_IMPORTED_MODULE_3__["default"].sceneManager );


_global__WEBPACK_IMPORTED_MODULE_3__["default"].world = new _world_world__WEBPACK_IMPORTED_MODULE_4__["default"]( {
    seed:          5,
    type:          "dungeon",
    cave:          0.1,
    numOfFloor:    { min: 10, max: 15 },
    numOfCampfire: 5,
    floor:         1,
} );

/*
    GLOBAL.world = World.new({
        type="wildness",
        width=512,
        height=512,
    })
*/

/*
    GLOBAL.world = World.new({
        url="http://bitria2.homeip.net:8080/worldgen/gen.php?w=200&h=200&randomSeed=3",
    })
*/


/*
    GLOBAL.world = World.new({
        worldGen = {
            seed = 3,
            width = 200,
            height = 200,

            maxRiverCount = 128,
            seaLevel = 0.35,
            temperatureYTop = 0.3,
            temperatureYMid = 0.5,
            temperatureYBottom = 0.7,
            rainNoiseOctaveCount = 8,
            rainNoisePersistance = 0.5,
            rainNoiseMidAmplify = 1.5,
        }
    })
*/


_global__WEBPACK_IMPORTED_MODULE_3__["default"].sceneManager.changeScene( _global__WEBPACK_IMPORTED_MODULE_3__["default"].world, 1000, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.SceneManager.circleOutRT, _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.easing.outCubic );
//GLOBAL.sceneManager.changeScene(GLOBAL.world, 5000, SceneManager.circleInOut, easing.outCubic);
//GLOBAL.sceneManager.changeScene(GLOBAL.world, 1000, SceneManager.moveFromTop, easing.outCubic);
/*
    GLOBAL.world = World.new({
        type="dungeon",
        cave=0.5,
        numOfFloor={ min=40, max=40 },
        floor=1,
    })
*/

const s =
    `
..@......P..................................
..@..........*..I...........................
..@...P.....MMMMMMM..........BBBBBBBBBBBB...
..@....MM...M|)|||M++........B..........B...
..@.........MZZZZ|MMMMM......B....*+++++B...
..@.*.......M|||||D++.M......B.....++++.B...
..@@@@@@..##M|||||M++WWWWWWW.BBBBBBBDBBBB...
....MM.@..#.M|||||M++W}...)W....+++++.......
....MM.@T.#.MMMMMMM++D.)HHHW....+.......#...
.......@..#....#..@++W...).W.++++....*..#...
..>>...@.MMM####..@.+WWWWWWW.+..........####
......M@...M......@~+++::+++++..........#...
..P...T@.......I..@~..+::...~~..###D#####...
.......@@@@@@@@@@@@~...::.~~~...#.#.....#...
....P..@@@@@..F@@.@|@@@::@|@@@@@#...........
...........@@@@@@..~~~~::~~...#@@@@T....*...
....................~..::.....#.............
`;


//GLOBAL.stage.addChild(GLOBAL.world)
_global__WEBPACK_IMPORTED_MODULE_3__["default"]["interface"] = new _interface_interface__WEBPACK_IMPORTED_MODULE_10__["default"]();
_global__WEBPACK_IMPORTED_MODULE_3__["default"].stage.addChild( _global__WEBPACK_IMPORTED_MODULE_3__["default"]["interface"] );


_global__WEBPACK_IMPORTED_MODULE_3__["default"].saveLoad = null;

_global__WEBPACK_IMPORTED_MODULE_3__["default"].world.on( "ready", function () {
    //TODO:
    _global__WEBPACK_IMPORTED_MODULE_3__["default"].saveLoad = new _saveLoad__WEBPACK_IMPORTED_MODULE_11__["default"]( "save.json" );

    let [x, y] = [_global__WEBPACK_IMPORTED_MODULE_3__["default"].world.enterX, _global__WEBPACK_IMPORTED_MODULE_3__["default"].world.enterY];

    if ( x == null ) {
        [x, y] = [100, 196];
    }

    while ( ( _global__WEBPACK_IMPORTED_MODULE_3__["default"].world.getProperty( x, y ).wall & _world_gameMap__WEBPACK_IMPORTED_MODULE_5__["default"].BLOCK_PASS ) != 0 ) {
        x = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,_global__WEBPACK_IMPORTED_MODULE_3__["default"].world.map.width );
        y = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,_global__WEBPACK_IMPORTED_MODULE_3__["default"].world.map.height );
    }
    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player = new _entity_player__WEBPACK_IMPORTED_MODULE_6__["default"]( null, x, y );// , { imageCol=1, imageRow=3 })
    _global__WEBPACK_IMPORTED_MODULE_3__["default"].world.entityManager.addEntity( _global__WEBPACK_IMPORTED_MODULE_3__["default"].player );

    const item1 = new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "도끼" );

    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( item1 );
    item1.equip();

    const item2 = new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "숏보우" );

    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( item2 );

    const item3 = new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "나이프" );

    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( item3 );
    item2.equip();
    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.selectAction( item2 );

    const item4 = new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "곡괭이" );

    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( item4 );
    item4.equip();

    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "하프" ) );
    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "만돌린" ) );
    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "레트로MSX" ) );
    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "레트로APPLE" ) );
    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "악보1" ) );
    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "악보2" ) );
    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "악보3" ) );
    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "악보4" ) );
    _global__WEBPACK_IMPORTED_MODULE_3__["default"].player.inventory.addItem( new _entity_item__WEBPACK_IMPORTED_MODULE_9__["default"]( "악보5" ) );

    // let nao = new Npc("나오", 100, 199);
    // nao.places["room"] = { x: 103, y: 193 };
    // nao.places["bed"] = { x: 102, y: 191 };
    // nao.places["work"] = { x: 96, y: 194 };
    // GLOBAL.world.entityManager.addEntity(nao);
    const cat = new _entity_pet__WEBPACK_IMPORTED_MODULE_7__["default"]( "고양이" );

    _global__WEBPACK_IMPORTED_MODULE_3__["default"].world.entityManager.addEntity( cat );
} );


/*[local prop1 = Prop.new("@", x + 1, y)
GLOBAL.world.addEntity(prop1)
*/

//GLOBAL.interface.autoMap.drawAll(true)


//w.addEntity(new Item(w, 6, 6, { imageCol=2, imageRow=14, drop=true, dropX=5, dropY=5 }))

//helper.playSound("sound/bgm_1.mp3", 0.2, true)

//application.setKeyboardVisibility(true)

//log("////////////////////", application.getLogicalScaleY(), application.getScreenDensity())

// console.log( application.logicalViewportScale );


// console.log( GLOBAL );


// let t = new Texture( "shadowMask.png" );
// let b = new Bitmap( t );

// // b.setBlendMode( Sprite.BlendModes.ADD );
// stage.addChild( b );



// {
//     stage.on( Event.MOUSE_DOWN,e=>{
//         let p = new Pixel( 0xffff00,1,5,5 );

//         p.xy = stage.globalToLocal( e.x,e.y );
//         stage.addChild( p );
//     } );      
// }


// Timer.delayedCall( 100,
//                    ()=>{
//                        let s = "abcdef<aaa>ddddd</aaag>dddd";

//                        console.log( TextField.splitTag( s ) );
//                    }
// );


})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,