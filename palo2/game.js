/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./engine/src/Application.js":
/*!***********************************!*\
  !*** ./engine/src/Application.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Application": () => (/* binding */ Application),
/* harmony export */   "application": () => (/* binding */ application),
/* harmony export */   "stage": () => (/* binding */ stage)
/* harmony export */ });
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Stage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Stage */ "./engine/src/Stage.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");








const MAX_UPDATE_PER_LOGIC_TICK = 5;


/**
 * 
 *
 * @export
 * @class Application
 */
class Application extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher {
    constructor() {
        super();
        console.log( "🎮 Application start." );
        this.stage = new _Stage__WEBPACK_IMPORTED_MODULE_3__.Stage();
        this.lastUpdate = performance.now();
        onmessage = this.onRenderMessage.bind( this );
        this.paused = false;
        this.inputEnabled = true;
        this.physicsReady = false;
        this.physicsWorker = new Worker( "physics.js" );
        this.physicsWorker.onmessage = this.onPhysicsMessage.bind( this );
        this.physicsWorker.postMessage( { msg: "setStageBound",args: [640,480,true,true,true,true] } );

        this.touchEnabled = self._deviceInfo.touchEnabled;
        /** 
         * 논리적인 뷰포트를 얻는다
         * position은 renderViewport로부터의 위치
         * size는 논리 뷰포트 크기 
         */
        this.logicalViewport = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( 0,0,0,0 );
        /** 
         * 렌더 뷰포트의 좌상단 지점에서 로지컬 뷰포트의 원점까지의 로지컬 좌표계로 거리 
         */
        this.logicalViewportOffset = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( self._deviceInfo.logicalViewportOffset );
        /**
         * 렌더 뷰포트 크기:로직 뷰포트 크기
         * 로직이 렌더보다 크면 1 미만
         * 렌더가 로직보다 크면 1 초과 
         */
        this.logicalViewportScale = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( self._deviceInfo.logicalViewportScale );
        /**
         * 디바이스상의 해상도를 얻는다
         * position은 html콘텍스트 상에서의 좌표
         * size 디바이스 뷰포트 크기
         */
        this.deviceViewport = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( self._deviceInfo.deviceViewport );
        

        this.init( 640,480,60,Application.ScaleModes.LETTERBOX );
    }

    init( width,height,fps = 60,scaleMode = Application.ScaleModes.LETTERBOX ) {
        this.logicalViewport = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( 0,0,width,height );
        this.setUpdateFPS( fps );
        this.postMessageToRender( { msg: "addCommand",class: "Application",method: "setLogicalViewport",args: [this.logicalViewport.xywh,scaleMode] } );
    }

    onPhysicsMessage( msg ) {
        const data = msg.data;

        if ( data.msg == "ready" ) {
            console.log( "👍 Physics ready." );       
            this.physicsReady = true;
        } else if ( data.msg == "deviceInfo" ) {
            self._deviceInfo = msg.data.info;
            this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_6__.Event.RESIZE );
        }
    }

    onRenderMessage( msg ) {
        const data = msg.data;

        if ( data.msg == "render" ) {
            this.renderTick();
        } else if ( data.msg == "deviceInfo" ) {
            this.deviceViewport = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( data.info.deviceViewport );
            this.logicalViewportOffset = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( data.info.logicalViewportOffset );
            this.logicalViewportScale = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( data.info.logicalViewportScale );
            this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_6__.Event.RESIZE );
        } else if ( data.msg == "Asset_loadCompleted" ) {
            _Asset__WEBPACK_IMPORTED_MODULE_0__.Asset.dispatchLoadedEvent( data.id );
        } else if ( data.msg == "input" && this.enableInput ) {
            this.onInputMessage( data.inputType,data.secondlyInputType,data.inputData );
        } else {
            console.log( "onRenderMessage",msg );
        }
    }

    /** 
     * 로직 뷰포트에서의 렌더 뷰포트의 범위
     * 이 범위로 박스를 생성하면 화면을 모두 가릴 수 있다 
     */
    get logicalRenderBounds() {
        return new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( -this.logicalViewportOffset.x,-this.logicalViewportOffset.y,this.logicalViewport.width + this.logicalViewportOffset.x * 2,this.logicalViewport.height + this.logicalViewportOffset.y * 2 );
    }

    onInputMessage( inputType, secondlyInputType, inputData ) {
        const e = new _Event__WEBPACK_IMPORTED_MODULE_6__.Event( inputType );

        Object.assign( e,inputData );
        this.stage.dispatchEventWithChildren( e );
        if ( !e.stopped && secondlyInputType ) {
            e.name = secondlyInputType;
            this.stage.dispatchEventWithChildren( e );
        }
    }

    renderTick() {
        const now = performance.now();
        const delta =  ( now - this.lastUpdate ) / ( 1000 / this.updateFPS );
        // 프레임 경계에서 안맞을까봐 round처리 해봄
        const numOfUpdate = Math.round( delta );

        if ( !this.paused ) {
            for ( let i = 0; i < Math.min( MAX_UPDATE_PER_LOGIC_TICK,numOfUpdate ); i++ ) {
                this.update();
            }
        }
        this.lastUpdate += ( 1000 / this.updateFPS ) * numOfUpdate;
    }

    /**
     * stage에 update메시지를 발송하고
     * sprite 상태를 main thread로 보낸다
     *
     * @memberof Application
     */
    update() {
        this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_6__.Event.BEFORE_UPDATE );
        _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.doEnterFrame();
        let [buf,transferList] = this.stage.encodeRenderingInfoWithChildren();

        // console.log( buf,extraBuf,strings );
        if ( this.physicsReady ) {
            this.physicsWorker.postMessage( { msg: "update" } );
        } 
        //@ts-ignore
        this.postMessageToRender( { msg: "update",renderingInfo: buf }, transferList );
        this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_6__.Event.AFTER_UPDATE );
    }

    setUpdateFPS( FPS ) {
        this.updateFPS = FPS;
        this.postMessageToRender( { msg: "addCommand", class: "Application",method: "setUpdateFPS",args: [this.updateFPS] } );
    }


    /**
     * 엔진을 완전히 정지시키거나 다시 켠다.
     * ENTER_FRAME과 입력 이벤트를 멈추는 것
     *
     * @param {*} v
     * @memberof Application
     */
    setPaused( v ) {
        this.paused = v;
        this.enableInput( !v );
    }

    enableInput( v ) {
        this.inputEnabled = v;
    }

    setBackgroundColor( c ) {
        this.postMessageToRender( { msg: "addCommand", class: "Application", method: "setBackgroundColor",args: [_Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.hex2rgba( c )] } );
    }

    postMessageToRender( msg,transfer ) {
        postMessage( msg,transfer );
    }

    preload( assetFilenames,progressCallback ) {
        return _Asset__WEBPACK_IMPORTED_MODULE_0__.Asset.preload( assetFilenames,progressCallback );
    }
}

Application.ScaleModes = {
    NO_SCALE:   "NO_SCALE",
    CENTER:     "CENTER",
    CROP:       "CROP",
    LETTERBOX:  "LETTERBOX",
    STRETCH:    "STRETCH",
    FIT_WIDTH:  "FIT_WIDTH",
    FIT_HEIGHT: "FIT_HEIGHT",
};


//@ts-ignore
if ( self.application == null ) {
    //@ts-ignore
    self.application = new Application();
} 

/** @type {Application} */
//@ts-ignore
const application = self.application;
/** @type {Stage} */
//@ts-ignore
const stage = self.application.stage;

console.assert( _Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.isWebWorker(),`Application을 메인쓰레드에 만들려고 하고 있음` );


/***/ }),

/***/ "./engine/src/Asset.js":
/*!*****************************!*\
  !*** ./engine/src/Asset.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Asset": () => (/* binding */ Asset)
/* harmony export */ });
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");





const fontInfoCache = {};


class Asset extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher {
    /**
     * Creates an instance of AssetProxy.
     * @param {string=} name 관리되는 이름. 이름이 같으면 같은 어셋으로 간주된다.
     * @param {string=} assetType 어셋의 종류
     * @memberof AssetProxy
     */
    constructor( name, assetType ) {
        super();
        this.id = Asset.lastId++;
        if ( name != null && name.indexOf( "*" ) >= 0 ) {
            this.name = name.replace( "*",this.id.toString() );
        } else {
            this.name = name == null ? "" : name;
        }
        this.type = assetType == null ? Asset.guessType( this.name ) : assetType;

        Asset.finalizationRegistry.register( this,{ thisObjId: this.id, thisType: this.type } );

        this.loaded = undefined;
        this.onLoadedHandler = this.onLoaded.bind( this, [this.id] );

        if ( this.type == Asset.AssetTypes.TrueTypeFont
            || this.type == Asset.AssetTypes.BitmapFont
            || this.type == Asset.AssetTypes.Sound
            || this.type == Asset.AssetTypes.Texture ) {
            //LOADED 이벤트를 받아야 하는 타입만 걸어준다
            Asset.loadedEventDispatcher.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED,this.onLoadedHandler );
        }
        this.loadFontInfo( name );
    }

    /**
     * 폰트를 로딩하는 경우 폰트 정보가 따로 필요하다
     *
     * @param {*} name
     * @memberof Asset
     */
    loadFontInfo( name ) {
        if ( this.type == Asset.AssetTypes.TrueTypeFont ) {
            if ( fontInfoCache[name] ) {
                // 캐시에 있는 경우
                this.fontInfo = fontInfoCache[name];
                console.log( `폰트 ${this.name} 로드 완료.(캐시)` );
                this.loaded = true;
                this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED );
            } else {
                fetch( `asset/${name}.json` )
                    .then( response => {
                        console.assert( response.ok,`asset/${name}.json 로드하지 못했음.` );
                        return response.json();
                    } )
                    .then( data => {
                        this.fontInfo = data;
                        if ( this.fontLoaded ) {
                            fontInfoCache[this.name] = this.fontInfo;
                            console.log( `폰트 ${this.name} 로드 완료.(json을 늦게 로딩)` );
                            this.loaded = true;
                            this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED );
                        }
                    } );
            }
        } else if ( this.type == Asset.AssetTypes.BitmapFont || this.type == Asset.AssetTypes.MsdfFont ) {
            // 비트맵도 json을 따로 로딩하는 처리 필요
            const json = _Utils__WEBPACK_IMPORTED_MODULE_3__.Utils.getEmbeddedFile( name + ".json" );

            this.fontInfo = JSON.parse( json );
            this.loaded = true;
        }
    }


    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @param {boolean} [isOnce=false]
     * @returns {Asset}
     * @memberof Asset
     */
    addEventListener( eventName, func, context = null, isOnce = false ) {
        //@ts-ignore
        return super.addEventListener( eventName, func, context, isOnce );
    }

    release() {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand", class: "Asset", method: "release",args: [this.id] } );
    }

    load( extraData ) {
        // asset.extraData = extraData;
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { 
            msg:    "executeCommand",
            class:  "Asset",
            method: "load",
            args:   [
                { 
                    id:        this.id,
                    type:      this.type,
                    name:      this.name,
                    extraData: extraData,
                }
            ] } );
    }

    update( extraData ) {
        // asset.extraData = extraData;
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { 
            msg:    "addCommand",
            class:  "Asset",
            method: "load",
            args:   [
                { 
                    id:        this.id,
                    type:      this.type,
                    name:      this.name,
                    extraData: extraData,
                }
            ] } );
    }

    onLoaded( id, event ) {
        if ( id == event.id ) {
            // 내 것과 같은 id인 경우에만 이벤트를 부른다
            Asset.loadedEventDispatcher.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED,this.onLoadedHandler );
            // console.log( Asset.loadedEventDispatcher.eventEmitter );
            if ( this.type == Asset.AssetTypes.TrueTypeFont ) {
                this.fontLoaded = true;
                if ( this.fontInfo ) {
                    fontInfoCache[this.name] = this.fontInfo;
                    console.log( `폰트 ${this.name} 로드 완료.(ttf늦게 로딩)` );
                    this.loaded = true;
                    this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED );
                }
            } else {
                this.loaded = true;
                this.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED );
            }
        }
    }

    static finalizeHandler( obj ) {
        // GC에 의해 수거되었으면 릴리즈를 보낸다.
        // console.log( `GC ${obj.thisObjId}` );
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand", class: "Asset", method: "release",args: [obj.thisObjId] } );
    }

    static dispatchLoadedEvent( id ) {
        Asset.loadedEventDispatcher.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED,{ id } );
    }

    static guessType( name ) {
        const extMatch = /\.[^.]+$/.exec( name );
        const ext = extMatch != null ? extMatch[0].toLowerCase() : "";


        if ( ext == ".png" || ext == ".jpg" ) {
            return Asset.AssetTypes.Texture;
        } else if ( ext == ".wav" || ext == ".mp3" ) {
            return Asset.AssetTypes.Sound;
        } else if ( ext == ".ttf" ) {
            return Asset.AssetTypes.TrueTypeFont;
        // } else if ( ext == ".fnt") {
        //     return Asset.AssetTypes.BitmapFont;
        // } else if ( ext == ".msdf") {
        //     return Asset.AssetTypes.MsdfFont;
        } return null;
    }

    static findPreloadedAsset( name ) {
        for ( let asset of Asset.preloadAssets ) {
            if ( asset.name == name ) return asset;
        } 
        return null;
    }

    static preload( assetFilenames,progressCallback ) {
        return new Promise( ( resolve,reject )=>{
            for ( let name of assetFilenames ) {
                const asset = new Asset( name );

                asset.load();
                Asset.preloadAssets.push( asset );
                Asset.preloadAssetPromises.push( asset.eventToPromise( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED ) );
            }
            Promise.all( Asset.preloadAssetPromises ).then( resolve );
        } );
    }
}
Asset.AssetTypes = {
    Texture:           "Texture",
    RenderTarget:      "RenderTarget",
    Sound:             "Sound",
    Shader:            "Shader",
    TrueTypeFont:      "TrueTypeFont",
    MsdfFont:          "MsdfFont",
    BitmapFont:        "BitmapFont",
    PostProcessFilter: "PostProcessFilter",
};
Asset.lastId = 1;
Asset.finalizationRegistry = new FinalizationRegistry( Asset.finalizeHandler );
Asset.loadedEventDispatcher = new _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher();

Asset.preloadAssets = [];
Asset.preloadAssetPromises = [];


/***/ }),

/***/ "./engine/src/Bitmap.js":
/*!******************************!*\
  !*** ./engine/src/Bitmap.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bitmap": () => (/* binding */ Bitmap)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _TextureBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TextureBase */ "./engine/src/TextureBase.js");



class Bitmap extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    /**
     * Creates an instance of Bitmap.
     * @param {TextureBase} texture
     * @memberof Bitmap
     */
    constructor( texture ) {
        super();
        this._$$spriteType = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.SpriteTypes.BITMAP;
        this._$$updateCode = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.texture = texture;
        this._$$localBounds.x = 0;
        this._$$localBounds.y = 0;
        this._$$localBounds.width = texture.width;
        this._$$localBounds.height = texture.height;
    }

    encodeExtraRenderingInfo() {
        let encodedBuffer = new Float32Array( 9 );

        encodedBuffer[0] = this.texture.asset.id;
        encodedBuffer.set( this.texture.uvRect.getCornerPoints(),1 );
        return [encodedBuffer];
    }

    /**
     * 비트맵의 텍스쳐를 교체한다.
     * 텍스쳐만 바뀌고 비트맵의 크기는 변하지 않는다.
     *
     * @param {TextureBase} texture
     * @memberof Bitmap
     */
    setTexture( texture ) {
        this.texture = texture;
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
    }
}


/***/ }),

/***/ "./engine/src/BitmapFont.js":
/*!**********************************!*\
  !*** ./engine/src/BitmapFont.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BitmapFont": () => (/* binding */ BitmapFont)
/* harmony export */ });
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _FontBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FontBase */ "./engine/src/FontBase.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");




class BitmapFont extends _FontBase__WEBPACK_IMPORTED_MODULE_1__.FontBase {
    constructor( bitmapFontName,referenceSize, styles, filter ) {
        super( bitmapFontName, referenceSize, styles );
        // Bitmap
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_0__.Asset( bitmapFontName,_Asset__WEBPACK_IMPORTED_MODULE_0__.Asset.AssetTypes.BitmapFont );
        // 페이지가 여러개 있는 폰트는 아직 처리 못함
        const page = this.asset.fontInfo.pages[0];
        const pngSize = _Utils__WEBPACK_IMPORTED_MODULE_2__.Utils.getImageSize( page.file );

        this.asset.load( { 
            bitmap:        page.file, 
            width:         pngSize.width,
            height:        pngSize.height,
            referenceSize: this.referenceSize,
            styles:        this.styles,
            fontInfo:      this.asset.fontInfo,
            filter:        filter
        } );
        this.fontLoaded = false;
    }    

    measureTextWidth( str,size ) {
        super.measureTextWidth( str,size );

        const fontInfo = this.asset.fontInfo;
        const scale = size ? size / fontInfo.info.size : 1;

        let width = 0;

        for ( let i = 0; i < str.length; i++ ) {
            const char = str.charCodeAt( i );
            const charInfo = fontInfo.chars[char];

            width += charInfo.xadvance * scale;
        }
        return width;        
    }
}




/***/ }),

/***/ "./engine/src/Component.js":
/*!*********************************!*\
  !*** ./engine/src/Component.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Component": () => (/* binding */ Component)
/* harmony export */ });
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _ComponentHolder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ComponentHolder */ "./engine/src/ComponentHolder.js");






/**
 * 이 클래스를 상속해서 기능을 구현한다.
 * 컴포넌트는 ComponentHolder에 자유롭게 add, remove할 수 있다.
 * add 될 때는 onAdd( holder )가 remove 될 때는 onRemove( holder )가 호출된다.
 * 
 * @class Component
 * 
 */
class Component {
    constructor() {
        // /** 
        //  * 컴포넌트가 holder에 추가될 때 호출된다.
        //  * @callback
        //  * @param {ComponentHolder=} holder
        //  * @memberof Component
        //  */
        // this.onAdded = undefined;
        // /** 
        //  * 컴포넌트가 holder에서 분리될 때 호출된다.
        //  * @callback
        //  * @param {ComponentHolder=} holder
        //  * @memberof Component
        //  */
        // this.onRemoved = undefined;

        /** 
         * 이 컴포넌트가 붙은 ComponentHolder 개체.
         * 이 개체는 addEventListener를 후킹해서 저장해두고 있으므로
         * 명시적으로 분리하지 않아도 자동으로 처리된다.
         * 
         * @readonly
         * @type {ComponentHolder}
         * 
         */
        this.holder = undefined;

        /** @type {Object.<string,[]>} */
        this.__savedHandlers = undefined;

        this.__name = this.constructor.name;
    }
   
    /**
     * 이 개체에 트리거를 추가할 수 있도록 Triggerable Proxy를 반환한다
     * 
     * @returns {Component} - EventDispatcher의 Proxy를 리턴한다
     * @memberof Component
     */
    triggerable() {
        // EventDispatcher의 triggerable을 빌려서 쓴다.
        // dispatchEvent를 구현했기 때문에 빌려써도 괜찮다.
        return _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.triggerable.call( this );
    }

    /**
     * 이 개체의 holder가 소유한 이벤트를 생성한다.
     * 
     * @param {object=} extenedValues 
     * @param {string=} eventName 
     * @returns {Event}
     * @memberof Component
     */
    newEvent( extenedValues,eventName ) {
        return _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.newEvent.call( this.holder, extenedValues, eventName );
    }

    /**
     * 
     * 이 개체의 holder가 소유한 트리거를 생성한다.
     * 트리거는 이 개체의 특정 프로퍼티값이 바뀔 때 자동으로 이벤트가 발생되도록 할 수 있다.
     * 
     * @param {object} props - 트리거를 걸 프로퍼티의 목록. { a:true, b:false } 로 하면 a에는 걸고 b에는 지운다.
     * @param {function=} filterFunction - true를 리턴한 경우에만 이벤트가 실행된다
     * @param {string=} eventName - 생략하면 자동으로 이벤트 이름이 부여된다
     * @returns {Event}
     * @memberof Component
     */
    newTrigger( props, filterFunction, eventName ) {
        return _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.newTrigger.call( this, props, filterFunction, eventName );
    }

    /**
     * 컴포넌트의 이름을 돌려준다
     * 
     * @returns {string}
     * @memberof Component
     */
    getName() {
        return this.__name;
    }

    /**
     * 컴포넌트의 이름을 설정한다. 기본 값은 클래스 이름이다.
     * 이 값을 바꿔서 같은 타입의 컴포넌트를 여러개 붙일 수 있다.
     * 만약 이름이 같다면 원래 있던 컴포넌트는 분리된다.
     * 
     * @param {string} v
     * @memberof Component
     */
    setName( v ) {
        this.__name = v;
    }

    /**
     *
     *
     * @param {Event|string} eventOrName
     * @param {object=} extendedValues
     * @returns {boolean}
     * @memberof Component
     */
    dispatchEvent( eventOrName, extendedValues ) {
        console.assert( this.holder, `컴포넌트 홀더가 없는데 이벤트를 발생시키려고 한다` );
        let event;

        if ( typeof eventOrName == "string" ) {
            event = new _Event__WEBPACK_IMPORTED_MODULE_0__.Event( eventOrName );
        } else {
            event = eventOrName;
        }

        event.target = this.holder;
        event.component = this;
        Object.assign( event,extendedValues );

        return this.holder.dispatchEvent( event );
    }


    isAdded() {
        return this.holder != null;
    }

    removeFromHolder() {
        console.assert( this.holder, `컴포넌트 홀더가 없는데 제거하려고 한다` );
        this.holder.removeComponent( this );
    }
}



/***/ }),

/***/ "./engine/src/ComponentHolder.js":
/*!***************************************!*\
  !*** ./engine/src/ComponentHolder.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentHolder": () => (/* binding */ ComponentHolder)
/* harmony export */ });
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");



const searchMap = new WeakMap();


class ComponentHolder extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {
    constructor() {
        super();
        this.__components = {};
    }

    addComponent( com ) {
        const comName = com.getName();

        if ( com.holder != null ) {
            // 붙이려는 컴포넌트가 다른데 붙어있었던 경우 제거
            com.removeFromHolder();
        }
        if ( this.__components[comName] != null ) {
            // 같은 이름의 컴포넌트가 붙어있던 경우 이전 컴포넌트를 제거
            this.__components[comName].removeFromHolder();
        }
        this.__components[comName] = com;
        const arr = searchMap.get( com.constructor ) || [];

        if ( !arr.includes( com ) ) {
            arr.push( com );
            searchMap.set( com.constructor,arr );
        }
        com.holder = new Proxy( this, {
            get: ( t,k ) => {
                if ( k == "addEventListener" ) {
                    return function( eventName, func, context, isOnce ) {
                        // console.log( `${comName}의 ${eventName}이벤트 핸들러를 후킹해서 저장한다` );
                        com.__savedHandlers = com.__savedHandlers || {};
                        com.__savedHandlers[eventName] = com.__savedHandlers[eventName] || [];
                        com.__savedHandlers[eventName].push( [func,context] );
                        //원본을 실행해준다
                        //@ts-ignore
                        t.addEventListener( ...arguments );
                    };
                } else return t[k];
            }
        } );
        if ( com.onAdded ) {
            com.onAdded.call( com, com.holder );
        } else if ( Object.getPrototypeOf( com ).onAdded ) {
            Object.getPrototypeOf( com ).onAdded.call( com, com.holder );
        }

        return com;
    }

    createComponent( classType,obj ) {
        const newCom = new classType();

        this.addComponent( Object.assign( newCom,obj ) );

        return newCom;
    }


    removeComponent( com ) {
        if ( typeof com == "function" && com.prototype != null ) {
            // ClassType으로 삭제를 시도하는 경우
            // 해당 타입의 컴포넌트를 모두 삭제한다
            for ( const key in this.__components ) {
                if ( com.getName() == key ) {
                    this.removeComponent( this.__components[key] );
                }
            }

            return;
        }
        const comName = com.getName();

        if ( com.onRemoved ) {
            com.onRemoved.call( com, com.holder );
        } else if ( Object.getPrototypeOf( com ).onRemoved ) {
            Object.getPrototypeOf( com ).onRemoved.call( com, com.holder );
        }
        delete this.__components[comName];

        if ( com.__savedHandlers ) {
            console.log( `${comName}의 이벤트 핸들러를 정리한다` );
            for ( const eventName in com.__savedHandlers ) {
                for ( const [func,context] of com.__savedHandlers[eventName] ) {
                    console.log( `${eventName} 이벤트 핸들러 삭제` );
                    this.removeEventListener( eventName,func,context );
                }
            }
        }

        const arr = searchMap.get( com.constructor );

        console.assert( Array.isArray( arr ) );
        const i = arr.indexOf( com );

        if ( i >= 0 ) {
            arr.splice( i,1 );
            if ( arr.length > 0 ) {
                searchMap.set( com.constructor,arr );
            } else {
                searchMap.delete( com.constructor );
            }
        }
    }

    hasComponent( comType ) {
        return this.__components[comType.name] != null;
    }

    get components() {
        return this.__components;
    }

    getComponent( comType ) {
        return this.__components[typeof comType == "string" ? comType : comType.name];
    }

    getCompatibleComponents( comType ) {
        const r = [];

        for ( const comName in this.__components ) {
            const com = this.__components[comName];

            if ( com instanceof comType ) {
                r.push( com );
            }
        }

        return r;
    }

    static getAllComponents( comType ) {
        return searchMap.get( comType );
    }

    static getAllComponentHolders( ...comTypes ) {
        let arr;

        arr = this.getAllComponents( comTypes[0] );
        for ( let i = 1; i < comTypes.length; i++ ) {
            const arr2 = this.getAllComponents( comTypes[i] );

            arr = arr2.filter( ( v,i,a ) => arr.includes( v ) );
        }
 
        const r = [];

        for ( const n of arr ) {
            r.push( n.holder );
        }

        return r;
    }

    hasAllComponents( ...comTypes ) {
        for ( const comType of comTypes ) {
            if ( !this.hasComponent( comType ) ) return false;
        }

        return true;
    }
}
ComponentHolder.registeredHolders = {};



/***/ }),

/***/ "./engine/src/Event.js":
/*!*****************************!*\
  !*** ./engine/src/Event.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Event": () => (/* binding */ Event)
/* harmony export */ });

/** @typedef {import("./Component").Component} Component */
/** @typedef {import("./Sprite").Sprite} Sprite */
/** @typedef {import("./EventDispatcher").EventDispatcher} EventDispatcher */

/**
 * 
 * @class Event
  */
class Event {
    /**
     *Creates an instance of Event.
     * @param {string=} name
     * @param {object=} extendedValues
     * @param {EventDispatcher=} owner
     * @memberof Event
     */
    constructor( name = "@EVENT" + ( ++Event.nextId ), extendedValues,owner ) {
        this.name = name;
        this.stopped = false;
        /** @type {EventDispatcher} */
        this.target = undefined;
        /** @type {Component} */
        this.component = undefined;
        /** @type {EventDispatcher} */
        this.owner = owner;
        this.forwarded = false;

        if ( extendedValues ) {
            Object.assign( this, extendedValues );
        }
    }

    /**
     *
     *
     * @param {function} func
     * @param {object=} context
     * @returns {Event}
     * @memberof Event
     */
    on( func, context ) {
        if ( this.owner == null ) this.owner = new Event.EventDispatcher();
        this.owner.on( this.name, func, context );

        return this;
    }

    /**
     *
     *
     * @param {function} func
     * @param {object=} context
     * @returns {Event}
     * @memberof Event
     */
    once( func, context ) {
        if ( this.owner == null ) this.owner = new Event.EventDispatcher();
        this.owner.once( this.name, func, context );

        return this;
    }

    /**
     *
     *
     * @param {function} func
     * @param {object=} context
     * @param {Sprite=} refSprite
     * @returns {Event}
     * @memberof Event
     */
    onStage( func, context,refSprite ) {
        //@ts-ignore
        console.assert( this.owner && this.owner.addChild, "Sprite가 아니면 onStage를 할 수 없습니다." );
        this.owner.onStage( this.name, func, context, refSprite );

        return this;
    }

    /**
     *
     *
     * @param {function} func
     * @param {object=} context
     * @returns {Event}
     * @memberof Event
     */
    remove( func, context ) {
        if ( this.owner == null ) this.owner = new Event.EventDispatcher();
        this.owner.removeEventListener( this.name, func, context );

        return this;
    }

    /**
     *
     *
     * @param {object=} extendedValues
     * @returns {Event}
     * @memberof Event
     */
    dispatch( extendedValues ) {
        if ( this.owner == null ) this.owner = new Event.EventDispatcher();
        Object.assign( this, extendedValues );
        this.owner.dispatchEvent( this );

        return this;
    }
    

    stopPropagation() {
        this.stopped = true;
    }

    getTarget() {
        return this.target;
    }

    static isInputEvent( eventName ) {
        const att = Event.eventAttribs[eventName];

        if ( att != null ) {
            return att.isInput == true;
        }
    }
}

Event.STAGE_VISIBLE = "stageVisible";
Event.STAGE_FOCUS = "stageFocus";
Event.ENTER_FRAME = "enterFrame";
Event.RENDER = "render";
Event.ADDED_TO_STAGE = "addedToStage";
Event.REMOVED_FROM_STAGE = "removedFromStage";
Event.POINTER_DOWN = "pointerDown";
Event.POINTER_UP = "pointerUp";
Event.POINTER_MOVE = "pointerMove";
Event.MOUSE_DOWN = "mouseDown";
Event.MOUSE_UP = "mouseUp";
Event.MOUSE_MOVE = "mouseMove";
Event.MOUSE_WHEEL = "mouseWheel";
Event.TOUCHES_BEGIN = "touchesBegin";
Event.TOUCHES_MOVE = "touchesMove";
Event.TOUCHES_END = "touchesEnd";
Event.TOUCHES_CANCEL = "touchesCancel";
Event.KEY_UP = "keyUp";
Event.KEY_DOWN = "keyDown";
Event.TIMER = "timer";
Event.TEXTURE_UPDATE = "textureUpdate";
Event.RESIZE = "resize";
Event.READY = "ready";
Event.COMPLETE = "complete";
Event.ERROR = "error";
Event.BEFORE_UPDATE = "beforeUpdate";
Event.AFTER_UPDATE = "afterUpdate";
Event.LOADED = "loaded";
Event.ALL = "*";
Event.APPLICATION_INIT = "APPLICATION_INIT";
Event.APPLICATION_START = "APPLICATION_START";

Event.eventAttribs = {
    [Event.POINTER_DOWN]:   { isInput: true },
    [Event.POINTER_UP]:     { isInput: true },
    [Event.POINTER_MOVE]:   { isInput: true },
    [Event.MOUSE_DOWN]:     { isInput: true, device: "mouse" },
    [Event.MOUSE_UP]:       { isInput: true, device: "mouse" },
    [Event.MOUSE_MOVE]:     { isInput: true, device: "mouse" },
    [Event.MOUSE_WHEEL]:    { isInput: true, device: "mouse" },
    [Event.TOUCHES_BEGIN]:  { isInput: true, device: "touch" },
    [Event.TOUCHES_END]:    { isInput: true, device: "touch" },
    [Event.TOUCHES_MOVE]:   { isInput: true, device: "touch" },
    [Event.TOUCHES_CANCEL]: { isInput: true, device: "touch" },
    [Event.KEY_UP]:         { isInput: true, device: "keyboard" },
    [Event.KEY_DOWN]:       { isInput: true, device: "keyboard" },
};

Event.EventDispatcher = undefined;
Event.nextId = 0;




/***/ }),

/***/ "./engine/src/EventDispatcher.js":
/*!***************************************!*\
  !*** ./engine/src/EventDispatcher.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventDispatcher": () => (/* binding */ EventDispatcher)
/* harmony export */ });
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");



// eventemitter3에서 _events 폴더에 이벤트를 보관한다고 가정하고 쓰여진 코드임


class EventDispatcher {
    constructor() {
        this.eventEmitter = new (eventemitter3__WEBPACK_IMPORTED_MODULE_0___default())();
    }

    /**
     * 이 개체에 트리거를 추가할 수 있도록 Triggerable Proxy를 반환한다
     * 
     * @returns {EventDispatcher} - EventDispatcher의 Proxy를 리턴한다
     * @memberof EventDispatcher
     */
    triggerable() {
        this.__triggers = {};

        return new Proxy( this, {
            set( target, key, value, receiver ) {
                const r = Reflect.set( target, key, value, receiver );
                const triggers = target.__triggers[key];

                if ( triggers ) {
                    for ( const [eventName, func] of triggers ) {
                        if ( func == null || func( target, key ) ) target.dispatchEvent( eventName, { key } );
                    }
                }

                return r;
            }
        } );
    }

    /**
     * 이 개체가 소유한 이벤트를 생성한다.
     * 
     * @param {object=} extenedValues 
     * @param {string=} eventName 
     * @returns {Event}
     */
    newEvent( extenedValues,eventName ) {
        return new _Event__WEBPACK_IMPORTED_MODULE_1__.Event( eventName, extenedValues, this );
    }

    
    /**
     * 
     * 이 개체가 소유한 트리거를 생성한다.
     * 트리거는 이 개체의 특정 프로퍼티값이 바뀔 때 자동으로 이벤트가 발생되도록 할 수 있다.
     * 
     * @param {object} props - 트리거를 걸 프로퍼티의 목록. { a:true, b:false } 로 하면 a에는 걸고 b에는 지운다.
     * @param {function=} filterFunction - true를 리턴한 경우에만 이벤트가 실행된다
     * @param {string=} eventName - 생략하면 자동으로 이벤트 이름이 부여된다
     * @returns {Event}
     */
    newTrigger( props, filterFunction, eventName ) {
        console.assert( this.__triggers != null, "이 개체는 triggerable이 아닙니다." );
        const e = new _Event__WEBPACK_IMPORTED_MODULE_1__.Event( eventName );

        for ( const prop in props ) {
            if ( props[prop] ) {
                this.__triggers[prop] = this.__triggers[prop] != null ? this.__triggers[prop] : [];
                this.__triggers[prop].push( [e.name, filterFunction] );
            } else {
                delete this.__triggers[prop];
            }
        }

        return e;
    }

    hasEventListener( eventName ) {
        return this.eventEmitter.listeners( eventName ).length > 0;
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @param {boolean} [isOnce=false]
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    addEventListener( eventName, func, context = null, isOnce = false ) {
        if ( isOnce ) {
            //@ts-ignore
            this.eventEmitter.once( eventName, func, context || this );
        } else {
            //@ts-ignore
            this.eventEmitter.on( eventName, func, context || this );
        }

        if ( eventName == _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME || eventName == _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RENDER ) {
            this.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ADDED_TO_STAGE, () => {
                //@ts-ignore
                EventDispatcher.enterFrameList.set( this,this.eventEmitter._events[eventName] != null ? this.eventEmitter._events[eventName].length : 1 );
            } );
            this.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.REMOVED_FROM_STAGE, () => {
                EventDispatcher.enterFrameList.delete( this );
            } );

            // @ts-ignore   this가 sprite로 가정
            if ( this.isOnStage() ) {
                //@ts-ignore
                EventDispatcher.enterFrameList.set( this,this.eventEmitter._events[eventName] != null ? this.eventEmitter._events[eventName].length : 1 );
            }
        } else {
            if ( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.isInputEvent( eventName ) ) {
                this.hasInputEvents = true;
            }
        }

        return this;
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @param {boolean} [isOnce=false]
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    addUniqueEventListener( eventName, func, context, isOnce = false ) {
        this.removeEventListener( eventName, func, context );
        this.addEventListener( eventName, func, context, isOnce );

        return this;
    }
    
    /**
     *
     *
     * @param {Event|string} eventOrName
     * @param {object=} extendedValues
     * @returns {boolean} - 이벤트 핸들러가 있으면 true
     * @memberof EventDispatcher
     */
    dispatchEvent( eventOrName,extendedValues ) {
        let event;

        if ( typeof eventOrName == "string" ) {
            event = new _Event__WEBPACK_IMPORTED_MODULE_1__.Event( eventOrName );
        } else {
            event = eventOrName;
        }

        event.target = this;
        Object.assign( event,extendedValues );

        if ( !event.forwarded ) this.eventEmitter.emit( "*",event );

        return this.eventEmitter.emit( event.name, event );
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @memberof EventDispatcher
     */
    removeEventListener( eventName, func, context ) {
        //@ts-ignore
        this.eventEmitter.removeListener( eventName, func, context || this );

        //@ts-ignore
        if ( ( eventName == _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME || eventName == _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RENDER ) && ( this.eventEmitter._events[eventName] == null || this.eventEmitter._events[eventName].length == 0 ) ) {
            EventDispatcher.enterFrameList.delete( this );
        }

        if ( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.isInputEvent( eventName ) ) {
            //@ts-ignore
            for ( const i in this.eventEmitter._events ) {
                if ( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.isInputEvent( i ) ) {
                    this.hasInputEvents = true;
                    break;
                }
            }
        }
    }

    /**
     *
     *
     * @param {string=} eventName
     * @memberof EventDispatcher
     */
    removeAllEventListeners( eventName ) {
        this.eventEmitter.removeAllListeners( eventName );

        //@ts-ignore
        if ( ( eventName == _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME || eventName == _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RENDER ) && ( eventName && this.eventEmitter._events[eventName] == null || this.eventEmitter._events[eventName].length == 0 ) ) {
            EventDispatcher.enterFrameList.delete( this );
        }

        if ( eventName && _Event__WEBPACK_IMPORTED_MODULE_1__.Event.isInputEvent( eventName ) ) {
            //@ts-ignore
            for ( const i in this.eventEmitter._events ) {
                if ( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.isInputEvent( i ) ) {
                    this.hasInputEvents = true;
                    break;
                }
            }
        }
    }


    /**
     *
     *
     * @param {string} event
     * @param {function} func
     * @param {any=} context
     * @param {EventDispatcher} [refSprite=this]
     * @param {boolean} [isOnce=false]
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    addEventListenerOnStage( event, func, context, refSprite = this, isOnce = false ) {
        const self = this;

        const onAdded = () => {
            self.addEventListener( event, func, context, isOnce );
        };

        const onRemoved = () => {
            self.removeEventListener( event, func, context );
        };

        refSprite.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ADDED_TO_STAGE, onAdded, this );
        refSprite.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.REMOVED_FROM_STAGE, onRemoved, this );

        return this;
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    on( eventName, func, context ) {
        return this.addEventListener( eventName, func, context );
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    once( eventName, func, context ) {
        return this.addEventListener( eventName, func, context, true );
    }

    /**
     *
     *
     * @param {string} event
     * @param {function} func
     * @param {any=} context
     * @param {EventDispatcher} [refSprite=this]
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    onStage( event, func, context, refSprite = this ) {
        return this.addEventListenerOnStage( event, func, context, refSprite );
    }

    beforeRender( func, context, isUnique = true ) {
        if ( isUnique ) {
            this.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RENDER, func, context );
        }

        this.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RENDER, func, context, true );
    }

    startForwardEvents( eventList,dstEventDispatcher ) {
        for ( let i = 0; i < eventList.length; i++ ) {
            const event = eventList[i];

            this.addEventListener( event,dstEventDispatcher.dispatchEvent.bind( dstEventDispatcher,[event] ) );
        }
    }

    stopForwardEvents( eventList,dstEventDispatcher ) {
        for ( let i = 0; i < eventList.length; i++ ) {
            const event = eventList[i];

            this.removeEventListener( event,dstEventDispatcher.dispatchEvent.bind( dstEventDispatcher,[event] ) );
        }
    }


    /**
     * 이벤트를 모두 기다려서 딱한번 func를 실행한다.
     * 이벤트 목록은 <이벤트이름> 혹은 [이벤트이름, 대상 EventDispatcher]
     *
     * @param {any[]} events
     * @param {function} func
     * @param {any=} context
     * @memberof EventDispatcher
     */
    waitEvents( events, func, context ) {
        const counts = [];
        let waitHandler;

        const removeAll = () => {
            let count = 0;

            for ( const i in events ) {
                let eventName;
                let target = this;

                if ( Array.isArray( events[i] ) ) {
                    [eventName, target] = events[i];
                } else eventName = events[i];
                target.removeEventListener( eventName, waitHandler, count );
                count++;
            }
        };

        waitHandler = function() {
            // this로 받았음
            // @ts-ignore
            counts[this - 1]++;

            for ( let j = 0; j < counts.length; j++ ) {
                if ( counts[j] == 0 ) return;
            }

            removeAll();
            func.call( context );
        };

        for ( const i in events ) {
            let eventName;
            let target = this;

            if ( Array.isArray( events[i] ) ) {
                [eventName, target] = events[i];
            } else eventName = events[i];
            // 0이면 EventEmitter3 내부에서 || 로 걸러지기 때문에 +1 해준다
            const countIndex = counts.length + 1;

            target.addEventListener( eventName, waitHandler, countIndex );
            counts.push( 0 );
        }
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {any[]} events
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    addCombinedEvents( eventName, events ) {
        this.waitEvents( events, () => {
            this.dispatchEvent( eventName );
        } );

        return this;
    }


    eventToPromise( eventName ) {
        return new Promise( ( resolve, reject ) => {
            this.addEventListener( eventName, resolve );
        } );
    }

    static doEnterFrame() {
        if ( EventDispatcher.enterFramePaused ) return 0;
        let totalEventCount = 0;

        for ( const [spr, count] of EventDispatcher.enterFrameList.entries() ) {
            // if (spr.isVisibleDeeply()) {
            spr.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME );
            spr.dispatchEvent( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RENDER );
            totalEventCount += count;
            // }
        }

        return totalEventCount;
    }
}


/**
 * @callback tween
 * @param {number} duration
 * @param {object} values
 * @param {string|function|import("./tween.js").Prop=} props
 * @returns {import("./tween.js").prototype}
 * @memberof EventDispatcher
 * @type {tween}
 */

EventDispatcher.prototype.tween = undefined;

/**
 * @callback move
 * @param {number} x
 * @param {number} y
 * @param {number} [duration=0]
 * @param {string|function|import("./tween.js").Prop=} props
 * @returns {Tween}
 * @memberof EventDispatcher
 * @type {move}
 */

EventDispatcher.prototype.move = undefined;

/**
 * @callback wait
 * @param {number} [duration=0]
 * @param {function=} func
 * @param {object=} context
 * @returns {import("./tween.js").prototype}
 * @memberof EventDispatcher
 * @type {wait}
 */

EventDispatcher.prototype.wait = undefined;


/** 
 * @callback getTweens
 * @param {boolean=} playingOnly
 * @returns {import("./tween.js").prototype[]}
 * @memberof EventDispatcher
 * 
 */

EventDispatcher.prototype.getTweens = undefined;

/**
 * @callback stopAllTweens
 * @memberof EventDispatcher
 */
EventDispatcher.prototype.stopAllTweens = undefined;

EventDispatcher.enterFramePaused = false;


_Event__WEBPACK_IMPORTED_MODULE_1__.Event.EventDispatcher = EventDispatcher;
EventDispatcher.enterFrameList = new Map();




/***/ }),

/***/ "./engine/src/FontBase.js":
/*!********************************!*\
  !*** ./engine/src/FontBase.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FontBase": () => (/* binding */ FontBase)
/* harmony export */ });
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Texture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Texture */ "./engine/src/Texture.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");








class FontBase extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher {
    constructor( name, referenceSize, styles ) {
        super();
        this.name = name;
        this.referenceSize = referenceSize || 1;
        this.styles = styles;
        /** @type {Asset} */
        this.asset;
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @param {boolean} [isOnce=false]
     * @returns {FontBase}
     * @memberof FontBase
     */
    addEventListener( eventName, func, context = null, isOnce = false ) {
        if ( eventName == _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED ) {
            this.asset.addEventListener( eventName, this.dispatchEvent.bind( this,_Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED ), null, isOnce );
        } 
        //@ts-ignore
        return super.addEventListener( eventName, func, context, isOnce );
    }

    getAscender( size ) {
        if ( !this.asset.loaded ) {
            console.log( `로딩이 안된 상태로 사이즈를 구하려고 한다. ${this.asset.name}` );
            return 0;
        }
        const fontInfo = this.asset.fontInfo;

        return fontInfo.ascender / fontInfo.unitsPerEm * ( size || this.referenceSize ); 
    }


    measureTextWidth( str,size ) {
        if ( !this.asset.loaded ) {
            console.log( `로딩이 안된 상태로 사이즈를 구하려고 한다. ${this.asset.name}` );
            return 0;
        }
        // 상속 받은 클래스에서 구현
    }
}



/***/ }),

/***/ "./engine/src/KeyCode.js":
/*!*******************************!*\
  !*** ./engine/src/KeyCode.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeyCode": () => (/* binding */ KeyCode)
/* harmony export */ });

const KeyCode = {
    ESC:    "Escape",
    ENTER:  "Enter",
    SPACE:  "Space",
    LEFT:   "ArrowLeft",
    RIGHT:  "ArrowRight",
    UP:     "ArrowUp",
    DOWN:   "ArrowDown",
    CTRL:   "ControlLeft",
    A:      "KeyA",
    B:      "KeyB",
    C:      "KeyC",
    D:      "KeyD",
    E:      "KeyE",
    F:      "KeyF",
    G:      "KeyG",
    H:      "KeyH",
    I:      "KeyI",
    J:      "KeyJ",
    K:      "KeyK",
    L:      "KeyL",
    M:      "KeyM",
    N:      "KeyN",
    O:      "KeyO",
    P:      "KeyP",
    Q:      "KeyQ",
    R:      "KeyR",
    S:      "KeyS",
    T:      "KeyT",
    U:      "KeyU",
    V:      "KeyV",
    W:      "KeyW",
    X:      "KeyX",
    Y:      "KeyY",
    Z:      "KeyZ",
    Digit0: "Digit0",
    Digit1: "Digit1",
    Digit2: "Digit2",
    Digit3: "Digit3",
    Digit4: "Digit4",
    Digit5: "Digit5",
    Digit6: "Digit6",
    Digit7: "Digit7",
    Digit8: "Digit8",
    Digit9: "Digit9",
};





/***/ }),

/***/ "./engine/src/Layout.js":
/*!******************************!*\
  !*** ./engine/src/Layout.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Layout": () => (/* binding */ Layout)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");









class Layout extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( x = 0,y = 0,w = 0,h = 0 ) {
        super();
        this.__locations = {};
        this.__width = w;
        this.__height = h;
        this.x = x;
        this.y = y;
    }

    resize( w, h ) {
        this.__width = w;
        this.__height = h;
        this._onResizeEvent();
    }

    setRect( x, y, w, h ) {
        this.x = x;
        this.y = y;
        this.resize( w, h );
    }

    _onResizeEvent() {
        for ( const key in this.__locations ) {
            const locSpr = this.__locations[key];

            if ( key == "origin" ) {
                locSpr.x = -this.x;
                locSpr.y = -this.y;
            } else {
                const [x, y] = key.split( "," );

                locSpr.x = this.__width * parseFloat( x );
                locSpr.y = this.__height * parseFloat( y );
            }
        }

        this.dispatchEvent( new _Event__WEBPACK_IMPORTED_MODULE_1__.Event( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RESIZE, { width: this.__width, height: this.__height } ) );
    }

    get origin() {
        return this.location( "origin" );
    }

    get topLeft() {
        return this.location( 0, 0 );
    }

    get topMiddle() {
        return this.location( 0.5, 0 );
    }

    get topRight() {
        return this.location( 1, 0 );
    }

    get bottomLeft() {
        return this.location( 0, 1 );
    }

    get bottomMiddle() {
        return this.location( 0.5, 1 );
    }

    get bottomRight() {
        return this.location( 1, 1 );
    }

    get leftMiddle() {
        return this.location( 0, 0.5 );
    }

    get rightMiddle() {
        return this.location( 1, 0.5 );
    }

    get center() {
        return this.location( 0.5, 0.5 );
    }


    /**
     *
     *
     * @param {string|number} x
     * @param {number} [y=null]
     * @returns {Layout}
     * @memberof Layout
     */
    location( x, y = null ) {
        const id = y != null ? x + "," + y : x;
        let locSpr = this.__locations[id];

        if ( locSpr != null ) return locSpr;
        locSpr = ( this.__locations[id] = new Layout() );

        if ( y == null ) {
            if ( id == "origin" ) {
                locSpr.x = -this.x;
                locSpr.y = -this.y;
            }
        } else {
            // @ts-ignore
            locSpr.x = this.__width * x;
            locSpr.y = this.__height * y;
        }

        this.addChild( locSpr );

        return locSpr;
    }

    get width() {
        return this.__width;
    }

    set width( v ) {
        this.__width = v;
        this._onResizeEvent();
    }

    get height() {
        return this.__height;
    }

    set height( v ) {
        this.__height = v;
        this._onResizeEvent();
    }

    /**
     * 
     * @returns {Point}
     * @memberof Layout
     */
    get size() {
        return new _Types__WEBPACK_IMPORTED_MODULE_2__.Point( this.__width, this.__height );
    }

    /**
     * @param {Point} v
     *
     * @memberof Layout
     */
    set size( v ) {
        this.__width = v.x;
        this.__height = v.y;
        this._onResizeEvent();
    }


    static fromRenderViewport() {
        const layout = new Layout( _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.x, _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.y,_Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.width, _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.height );

        _Application__WEBPACK_IMPORTED_MODULE_3__.application.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RESIZE, () => {
            layout.x = _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.x;
            layout.y = _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.y;
            layout.resize( _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.width, _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalRenderBounds.height );
        } );

        return layout;
    }

    static fromLogicalViewpoer() {
        const layout = new Layout( 0,0,_Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalViewport.width, _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalViewport.height );

        _Application__WEBPACK_IMPORTED_MODULE_3__.application.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.RESIZE, () => {
            layout.resize( _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalViewport.width, _Application__WEBPACK_IMPORTED_MODULE_3__.application.logicalViewport.height );
        } );

        return layout;
    }
}




/***/ }),

/***/ "./engine/src/Matrix.js":
/*!******************************!*\
  !*** ./engine/src/Matrix.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Matrix": () => (/* binding */ Matrix)
/* harmony export */ });



class Matrix {
    constructor( m11 = 1, m12 = 0, m21 = 0, m22 = 1, tx = 0, ty = 0 ) {
        this.__pixi = new PIXI.Matrix( m11, m12, m21, m22, tx, ty );
    }
}


/***/ }),

/***/ "./engine/src/Mesh.js":
/*!****************************!*\
  !*** ./engine/src/Mesh.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Mesh": () => (/* binding */ Mesh)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Texture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Texture */ "./engine/src/Texture.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");





class Mesh extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    /**
     * Creates an instance of Mesh.
     * @memberof Mesh
     */
    constructor() {
        super();
        this._$$spriteType = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.SpriteTypes.MESH;
        this._$$updateCode = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_NOTHING;
        this.dirty = {
            positionOffset: 0,
            positionLength: 0,
            texCoordOffset: 0,
            texCoordLength: 0,
            colorOffset:    0,
            colorLength:    0,
            indexOffset:    0,
            indexLength:    0,
            textureReset:   false,
            positionReset:  false,
            texCoordReset:  false,
            colorReset:     false,
            indexReset:     false,
        };
        this.a_position = undefined;
        this.a_texCoord = undefined;
        this.a_color = undefined;
        this.indices = undefined;
        this.a_genericArray = undefined;
    }

    setTexture( texture ) {
        this.texture = texture;
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.textureReset = true;
    }

    setTextureCoordinateArray( arr ) {
        this.dirty.texCoordReset = !( this.a_texCoord && this.a_texCoord.length >= arr.length );
        this.a_texCoord = new Float32Array( arr );
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.texCoordOffset = 0;
        this.dirty.texCoordLength = this.a_texCoord.length;
    }

    /**
     * @param {...number} args
     * @memberof Mesh
     */
    setTextureCoordinates( ...args ) {
        let minIndex = Infinity;
        let maxIndex = -Infinity;

        for ( let i = 0; i < args.length; i += 3 ) {
            const index = args[i];
            const x = args[i + 1];
            const y = args[i + 2];

            this.a_texCoord[index * 2] = x;
            this.a_texCoord[index * 2 + 1] = y;
            minIndex = Math.min( minIndex,index );
            maxIndex = Math.max( maxIndex,index );
        }
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.texCoordOffset = Math.min( this.dirty.texCoordOffset / 2,minIndex ) * 2;
        this.dirty.texCoordLength = Math.max( ( this.dirty.texCoordOffset + this.dirty.texCoordLength ) / 2 ,maxIndex ) * 2;
    }

    setTextureCoordinate( i,x,y ) {
        this.a_texCoord[i * 2] = x;
        this.a_texCoord[i * 2 + 1] = y;
    }

    getTextureCoordinate( i ) {
        return new _Types__WEBPACK_IMPORTED_MODULE_2__.Point( this.a_texCoord[i * 2],this.a_texCoord[i * 2 + 1] );
    }

    _calculateLocalBounds( startIndex = 0,endIndex = this.a_position.length / 2 ) {
        let minX = Infinity,maxX = -Infinity,minY = Infinity ,maxY = -Infinity;

        for ( let i = startIndex; i < endIndex * 2; i += 2 ) {
            const x = this.a_position[i];
            const y = this.a_position[i + 1];

            minX = Math.min( x,minX );
            maxX = Math.max( x,maxX );
            minY = Math.min( y,minY );
            maxY = Math.max( y,maxY );
        }
        this._$$localBounds.x = minX;
        this._$$localBounds.y = minY;
        this._$$localBounds.width = maxX - minX;
        this._$$localBounds.height = maxY - minY;
    }

    setVertexArray( arr ) {
        this.dirty.positionReset = !( this.a_position && this.a_position.length >= arr.length );
        this.a_position = new Float32Array( arr );
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        if ( !this.useCustomLocalBounds ) this._calculateLocalBounds();
        this.dirty.positionOffset = 0;
        this.dirty.positionLength = this.a_position.length;
    }

    /**
     * @param {...number} args
     * @memberof Mesh
     */
    setVertices( ...args ) {
        let minIndex = Infinity;
        let maxIndex = -Infinity;

        let minX = this._$$localBounds.left;
        let maxX = this._$$localBounds.right;
        let minY = this._$$localBounds.top;
        let maxY = this._$$localBounds.bottom;

        for ( let i = 0; i < args.length; i += 3 ) {
            const index = args[i];
            const x = args[i + 1];
            const y = args[i + 2];

            this.a_position[index * 2] = x;
            this.a_position[index * 2 + 1] = y;
            minX = Math.min( x,minX );
            maxX = Math.max( x,maxX );
            minY = Math.min( y,minY );
            maxY = Math.min( y,maxY );
            minIndex = Math.min( minIndex,index );
            maxIndex = Math.max( maxIndex,index );
        }
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;

        if ( !this.useCustomLocalBounds ) {
            this._$$localBounds.x = minX;
            this._$$localBounds.y = minY;
            this._$$localBounds.width = maxX - minX;
            this._$$localBounds.height = maxY - minY;
        }

        this.dirty.positionOffset = Math.min( this.dirty.positionOffset / 2,minIndex ) * 2;
        this.dirty.positionLength = Math.max( ( this.dirty.positionOffset + this.dirty.positionLength ) / 2,maxIndex ) * 2;
    }

    setVertex( i,x,y ) {
        this.a_position[i * 2] = x;
        this.a_position[i * 2 + 1] = y;
    }

    getVertex( i ) {
        return new _Types__WEBPACK_IMPORTED_MODULE_2__.Point( this.a_position[i * 2],this.a_position[i * 2 + 1] );
    }


    setColorArray( arr ) {
        this.dirty.colorReset = !( this.a_color && this.a_color.length >= arr.length * 2 );
        this.a_color = new Uint8Array( arr.length * 2 );
        for ( let i = 0; i < arr.length; i += 2 ) {
            this.a_color[i * 2 + 0] = ( arr[i] >> 16 ) & 0xff;
            this.a_color[i * 2 + 1] = ( arr[i] >> 8 ) & 0xff;
            this.a_color[i * 2 + 2] = ( arr[i] ) & 0xff;
            this.a_color[i * 2 + 3] =  arr[i + 1] * 255;
        }
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.colorOffset = 0;
        this.dirty.colorLength = this.a_color.length;
    }

    /**
     * @param {...number} args
     * @memberof Mesh
     */
    setColors( ...args ) {
        let minIndex = Infinity;
        let maxIndex = -Infinity;

        for ( let i = 0; i < args.length; i += 3 ) {
            const index = args[i];
            const c = args[i + 1];
            const a = args[i + 2];

            this.a_color[index * 4] = ( c >> 16 ) & 0xff;
            this.a_color[index * 4 + 1] = ( c >> 8 ) & 0xff;
            this.a_color[index * 4 + 2] = c & 0xff;
            this.a_color[index * 4 + 3] = a * 255;
            minIndex = Math.min( minIndex,index );
            maxIndex = Math.max( maxIndex,index );
        }
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.colorOffset = Math.min( this.dirty.colorOffset / 4,minIndex ) * 4;
        this.dirty.colorLength = Math.max( ( this.dirty.colorOffset + this.dirty.colorLength ) / 4,maxIndex ) * 4;
    }


    getColorArraySize() {
        // Utils.legacy();
        return this.a_color.length / 4;
    }

    setRgbaColorArray( arr ) {
        this.dirty.colorReset = !( this.a_color && this.a_color.length >= arr.length );
        this.a_color = new Uint8Array( arr.map( v=>v * 255 ) );
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.colorOffset = 0;
        this.dirty.colorLength = this.a_color.length;
    }

    setColor( i,c,a ) {
        const arr = _Utils__WEBPACK_IMPORTED_MODULE_3__.Utils.hex2rgba( c,a );

        this.a_color[i * 4] = arr[0];
        this.a_color[i * 4 + 1] = arr[1];
        this.a_color[i * 4 + 2] = arr[2];
        this.a_color[i * 4 + 3] = arr[3];
    }

    getColor( i ) {
        const c = _Utils__WEBPACK_IMPORTED_MODULE_3__.Utils.rgba2hex( this.a_color,i * 4 );

        return { color: c & 0xffffff,alpha: this.a_color[i * 4 + 3] };
    }


    setIndexArray( arr ) {
        this.dirty.indexReset = true;
        this.indices = new Uint16Array( Math.ceil( arr.length / 2 ) * 2 ); // float32로 바꿔야 하기 때문에 정렬
        this.indices.set( arr );
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.indexOffset = 0;
        this.dirty.indexLength = this.indices.length;
    }

    /**
     * @param {...number} args
     * @memberof Mesh
     */
    setIndices( ...args ) {
        let minIndex = Infinity;
        let maxIndex = -Infinity;

        for ( let i = 0; i < args.length; i += 2 ) {
            const index = args[i];
            const vi = args[i + 1];

            this.indices[index] = vi;
            minIndex = Math.min( minIndex,index );
            maxIndex = Math.max( maxIndex,index );
        }
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.dirty.indexOffset = Math.min( this.dirty.indexOffset,minIndex );
        this.dirty.indexLength = Math.max( this.dirty.indexOffset + this.dirty.indexLength,maxIndex );
    }

    getIndex( i ) {
        return this.indices[i];
    }

    setIndex( i,v ) {
        this.indices[i] = v;
    }

    /**
     *
     *
     * @param {string} attribName
     * @param {number[]} arr
     * @param {Mesh.ArrayTypes} arrayType
     * @param {number} [size=1]
     * @param {boolean} [normalize = false]
     * @memberof Mesh
     */
    setGenericArray( attribName, arr, arrayType = Mesh.ArrayTypes.FLOAT32, size = 1, normalize = false ) {
        this.a_genericArray = this.a_genericArray || {};
        this.a_genericArray[attribName] = { 
            data:          new arrayType( arr ),
            numComponents: size,
            normalize:     normalize 
        };
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
    }

    static createBox( x, y, w, h, color = 0xffffff, alpha = 1 ) {
        const m = new Mesh();

        m.setVertexArray( [x, y, x + w, y, x, y + h, x + w, y + h] );
        m.setColorArray( [color, alpha, color, alpha, color, alpha, color, alpha] );
        m.setIndexArray( [0, 1, 2, 1, 3, 2] );

        return m;
    }


    encodeExtraRenderingInfo() {
        const encodedBuffer = new Float32Array( 
            14 + 
             this.dirty.positionLength + 
             this.dirty.texCoordLength + 
             Math.ceil( this.dirty.colorLength / 4 ) + 
             Math.ceil( this.dirty.indexLength / 2 ) );

        encodedBuffer.set( [
            this.texture != null ? this.texture.asset.id : 0,
            this.dirty.positionOffset,
            this.dirty.positionLength,
            this.dirty.texCoordOffset,
            this.dirty.texCoordLength,
            this.dirty.colorOffset,
            this.dirty.colorLength,
            this.dirty.indexOffset,
            this.dirty.indexLength,
            +this.dirty.textureReset,
            +this.dirty.positionReset,
            +this.dirty.texCoordReset,
            +this.dirty.colorReset,
            +this.dirty.indexReset,
        ] );
        let offset = 14;

        if ( this.dirty.positionLength > 0 ) {
            encodedBuffer.set( _Types__WEBPACK_IMPORTED_MODULE_2__.TypedArrayHelper.subarray( this.a_position,this.dirty.positionOffset, this.dirty.positionLength ),offset );
            offset +=  this.dirty.positionLength;
        }
        if ( this.dirty.texCoordLength > 0 ) {
            encodedBuffer.set( _Types__WEBPACK_IMPORTED_MODULE_2__.TypedArrayHelper.subarray( this.a_texCoord,this.dirty.texCoordOffset, this.dirty.texCoordLength ),offset );
            offset +=  this.dirty.texCoordLength;
        }
        if ( this.dirty.colorLength > 0 ) {
            encodedBuffer.set( _Types__WEBPACK_IMPORTED_MODULE_2__.TypedArrayHelper.Uint8ToFloat32( this.a_color,this.dirty.colorOffset, this.dirty.colorLength ),offset );
            offset +=  this.dirty.colorLength / 4;
        }
        if ( this.dirty.indexLength > 0 ) {
            encodedBuffer.set( _Types__WEBPACK_IMPORTED_MODULE_2__.TypedArrayHelper.Uint16ToFloat32( this.indices,this.dirty.indexOffset, this.dirty.indexLength ),offset );
        }

        this.dirty.textureReset = false;
        this.dirty.positionReset = false;
        this.dirty.texCoordReset = false;
        this.dirty.colorReset = false;
        this.dirty.indexReset = false;

        let genericData;
        let transfer;

        if ( this.a_genericArray ) {
            genericData = this.a_genericArray;
            transfer = [];
            for ( let name in this.a_genericArray ) {
                transfer.push( this.a_genericArray[name].data.buffer );
            }            
        }

        return [encodedBuffer,null,genericData,transfer];
    }
}
/** 
 * 
 * @enum {object} 
 */
Mesh.ArrayTypes = {
    UINT32:  Uint32Array,
    UINT16:  Uint16Array,
    UINT8:   Uint8Array,
    FLOAT32: Float32Array,
};



/***/ }),

/***/ "./engine/src/MovieClip.js":
/*!*********************************!*\
  !*** ./engine/src/MovieClip.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MovieClip": () => (/* binding */ MovieClip)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _easing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./easing */ "./engine/src/easing.js");




const EMPTY_KEY = "$";
const STOP_MARK = -1;

/** 
 * @typedef {object} Options 
 * @param {boolean} autoPlay
*/

/** @type {Options} */
const defaultOptions = {
    autoPlay: true
};

// 
/*
    스테이지에 붙어 있을 때만 작동한다.
    일반 개체의 값을 조정할 때도 사용할 수 있다.

    "ease",
    [0,10,target,{x:[0,100,ease]}]
    [0,"goto","event"]
    [0,"stop"]

*/

//  * @typedef {Object.<string,Range>} Props

/**
 * @typedef {number|*[]} Range
 * @typedef {Object.<string,Range>} Props
 * @typedef {[number,number,object|string]|[number,number,object|string,Props]|[number,string,string|number]|[number,string]} Line
 * @typedef {Line[]} Timeline
 * @typedef {Object.<string,Timeline>} TimelineGroup
 */

/**
 *
 * @this MovieClip
 * @param {Event} e
 */
function onEnterFrame( e ) {
    /** @type {{timeline:object,action:object,lastFrame:number}} */
    const ani = this.__mc.animations[this.__mc.currentAnimation];

    if ( ani == null ) return;
    for ( let [target, timeline] of ani.timeline.entries() ) {
        let noKey = true;

        //console.assert(targetSprite instanceof Sprite);
        if ( typeof target == "string" ) {
            target = this.__mc.targets[target];
            console.assert( target != null, `MovieClip의 타겟을 찾을 수 없습니다.` );
        }

        for ( const param in timeline ) {
            const value = timeline[param][this.__mc.currentFrame];

            if ( param == EMPTY_KEY ) {
                noKey = false;
            } else if ( value != null ) {
                target[param] = value;
                noKey = false;
            }
        }

        if ( target instanceof _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite ) {
            if ( noKey ) {
                if ( this.contains( target ) ) this.removeChild( target );
            } else {
                if ( !this.contains( target ) ) this.addChild( target );
            }
        }
    }

    const action = ani.action[this.__mc.currentFrame];

    if ( action != null ) {
        if ( action == STOP_MARK ) {
            this.stop();
        } else if ( typeof action == "string" ) {
            const [header, value, extra] = action.split( ":" );

            if ( header == "ani" ) {
                this.gotoAndPlay( extra != null ? value + ":" + extra : value );
            } else if ( header == "sound" ) {
                //TODO:
            } else if ( header == "event" ) {
                //TODO:
            }
        } else {
            this.__mc.currentFrame = parseInt( action );
        }
    } else {
        if ( this.__mc.playing == false || this.__mc.currentFrame >= ani.lastFrame ) this.stop();
        else this.__mc.currentFrame++;
    }
}

/**
 * @this MovieClip
 * @param {Timeline} tl
 * @returns {{timeline:object,action:object,lastFrame:number}}
 */
function parseTimeline( tl ) {
    const timeline = new Map();
    const action = {};
    let paramTimeline;
    let lastFrame = 0;

    for ( const i in tl ) {
        const line = tl[i];

        if ( typeof line[1] == "string" ) {
            const [frame, command, label] = line;

            if ( command == "stop" ) {
                action[frame] = STOP_MARK;
            } else if ( command == "goto" ) {
                action[frame] = typeof label == "number" ? label : "ani:" + label;
            } else if ( command == "event" ) {
                action[frame] = "event:" + label;
            } else if ( command == "sound" ) {
                action[frame] = "sound:" + label;
            }
        } else {
            const [startFrame, endFrame, targetObject, props] = line;

            paramTimeline = timeline.get( targetObject ) || {};

            if ( props == null ) {
                paramTimeline[EMPTY_KEY] = paramTimeline[EMPTY_KEY] || {};
            
                //@ts-ignore
                for ( let frame = startFrame; frame <= endFrame; frame++ ) {
                    paramTimeline[EMPTY_KEY][frame] = 1;
                }
            } else {
            //@ts-ignore
                for ( const key in props ) {
                    paramTimeline[key] = paramTimeline[key] || {};

                    if ( Array.isArray( props[key] ) ) {
                        const [startValue, endValue, ease] = props[key];
                        const easingFunc = ( typeof ease == "function" ? ease : _easing__WEBPACK_IMPORTED_MODULE_2__.easing[ease] ) || _easing__WEBPACK_IMPORTED_MODULE_2__.easing.linear;

                        for ( let frame = startFrame; frame <= endFrame; frame++ ) {
                        //@ts-ignore
                            paramTimeline[key][frame] = easingFunc( ( frame - startFrame ) / ( endFrame - startFrame ) ) * ( endValue - startValue ) + startValue;
                        }
                    } else {
                        const value = props[key];

                        for ( let frame = startFrame; frame <= endFrame; frame++ ) {
                            paramTimeline[key][frame] = value;
                        }
                    }
                }
            }

            timeline.set( targetObject, paramTimeline );
            //@ts-ignore
            lastFrame = Math.max( lastFrame, endFrame );
        }
    }

    return { action,timeline,lastFrame };
}


class MovieClip extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    /**
     * 자동으로 애니메이션을 하는 MovieClip 개체를 만든다.
     * MovieClip은 Tween이나 show,hide를 시간순에 맞게 보여줄 수 있다.
     * 
     * 예제1) Array를 사용한 경우
     * 
     * new MovieClip([
     *     [0,10,targetSpr,{ x:[0,100,"outCubic"], y:20, alpha:[0.5,1] }],
     *     [11,20,targetSpr,{ x:[100,0,easing.inBounce] }]
     *     [20,"goto",0] // 이렇게 루프를 시킬 수도 있다. 없으면 마지막 프레임에서 멈춤. "stop", "event", "sound" 등을 쓸 수 있다.
     * ])
     * 
     * 예제2) Object를 사용한 경우
     * 
     * new MovieClip({
     *      default: [
     *          [0,10,targetSpr, { y: 10 }]
     *          :
     *      ],
     *      show: [
     *          [0,20,targetSpr, { x: 5 }]
     *          [20,"goto","default"]
     *      ]
     * });
     * 
     * @param {Timeline|TimelineGroup=} timelineData - 하나의 타임라인 애니메이션을 Array로 넣거나 다수의 애니메이션을 Object로 넣을 수 있다
     * @param {Options=} options
     * @memberof MovieClip
     */
    constructor( timelineData, options  ) {
        super();
        this.__mc = {};
        this.__mc.currentFrame = 0;
        this.__mc.currentAnimation = undefined;
        this.__mc.playing = false;
        this.__mc.targets = {};
        this.__mc.animations = {};
        this.__mc.options = Object.assign( defaultOptions, options );
        if ( timelineData ) this.addAnimations( timelineData );
        if ( this.__mc.options.autoPlay ) {
            this.play();
        }
    }

    /**
     * MovieClip에 animation을 추가한다.
     * 
     * @param {Timeline|TimelineGroup} timelineData - 하나의 타임라인 애니메이션을 Array로 넣거나 다수의 애니메이션을 Object로 넣을 수 있다
     * @memberof MovieClip
     */
    addAnimations( timelineData ) {
        if ( timelineData != null ) {
            if ( Array.isArray( timelineData ) ) {
                this.__mc.animations["default"] = parseTimeline.call( this, timelineData );
                this.__mc.currentAnimation = "default";
            } else {
                for ( const label in timelineData ) {
                    // 첫번째 애니메이션을 디폴트로
                    if ( this.__mc.currentAnimation == null ) this.__mc.currentAnimation = label;
                    this.__mc.animations[label] = parseTimeline.call( this, timelineData[label] );
                }
            }
        }
    }

    /**
     * 두 개의 MovieClip을 병합한다
     *
     * @param {MovieClip} mc
     * @param {boolean} replace
     * @memberof MovieClip
     */
    merge( mc,replace ) {
        for ( const label in mc.__mc.animations ) {
            const ani = mc.__mc.animations[label];

            if ( replace || this.__mc.animations[label] == null ) this.__mc.animations[label] = ani;
        }
    }


    setTarget( name, target ) {
        this.__mc.targets[name] = target;
    }


    /**
     *
     *
     * @param {string|number} f
     * @memberof MovieClip
     */
    gotoAndPlay( f ) {
        if ( typeof f == "string" ) {
            //@ts-ignore
            const [animationName, frame] = f.split( ":" );

            this.__mc.currentAnimation = animationName;
            this.__mc.currentFrame = frame != null ? parseInt( frame ) : 0;
        } else {
            console.assert( typeof f == "number" );
            //@ts-ignore
            this.__mc.currentFrame = parseInt( f );
        }

        this.play();
    }

    /**
     *
     *
     * @param {number} f
     * @memberof MovieClip
     */
    gotoAndStop( f ) {
        if ( typeof f == "string" ) {
            //@ts-ignore
            const [animationName, frame] = f.split( ":" );

            this.__mc.currentAnimation = animationName;
            this.__mc.currentFrame = frame != null ? parseInt( frame ) : 0;
        } else {
            console.assert( typeof f == "number" );
            //@ts-ignore
            this.__mc.currentFrame = parseInt( f );
        }

        this.stop();
    }

    play( aniName ) {
        if ( aniName != null ) {
            this.gotoAndPlay( aniName );
        }

        if ( !this.__mc.playing ) {
            this.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME,onEnterFrame,this );
            this.__mc.playing = true;
        }
    }

    stop() {
        if ( this.__mc.playing ) {
            this.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME,onEnterFrame,this );
            this.__mc.playing = false;
        }
    }

    /**
     *
     *
     * @param {number} f
     * @param {string|number} destination
     * @memberof MovieClip
     */
    setGotoAction( f, destination ) {
        //@ts-ignore
        if ( parseInt( destination ) == destination ) destination = parseInt( destination );
        this.__mc.animations[this.__mc.currentAnimation].action[f] = destination;
    }

    /**
     *
     *
     * @param {number} f
     * @memberof MovieClip
     */
    setStopAction( f ) {
        this.__mc.animations[this.__mc.currentAnimation].action[f] = STOP_MARK; // stop
    }


    /**
     * target을 제외하고 모든 내용이 동일한 MovieClip을 만든다.
     *
     * @returns {MovieClip}
     * @memberof MovieClip
     */
    instance() {
        const newObj = new MovieClip( null );

        newObj.__mc.animations = this.__mc.animations;
        newObj.__mc.currentAnimation = Object.keys( this.__mc.animations )[0];
        Object.assign( newObj.__mc.targets, this.__mc.targets );
        newObj.play();

        return newObj;
    }
}

// let b = new Sprite();
// new MovieClip([
//     [0, 0, b, { x: [0,1,easing.outCubic],y: [1,1] }],
// ]);




/***/ }),

/***/ "./engine/src/MsdfFont.js":
/*!********************************!*\
  !*** ./engine/src/MsdfFont.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MsdfFont": () => (/* binding */ MsdfFont)
/* harmony export */ });
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _FontBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FontBase */ "./engine/src/FontBase.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");




class MsdfFont extends _FontBase__WEBPACK_IMPORTED_MODULE_1__.FontBase {
    constructor( MsdfFontName,referenceSize, styles ) {
        super( MsdfFontName, referenceSize, styles );
        // Bitmap
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_0__.Asset( MsdfFontName,_Asset__WEBPACK_IMPORTED_MODULE_0__.Asset.AssetTypes.MsdfFont );
        // 페이지가 여러개 있는 폰트는 아직 처리 못함
        const page = this.asset.fontInfo.pages[0];
        const pngSize = _Utils__WEBPACK_IMPORTED_MODULE_2__.Utils.getImageSize( page.file );

        this.asset.load( { 
            bitmap:        page.file, 
            width:         pngSize.width,
            height:        pngSize.height,
            referenceSize: this.referenceSize,
            styles:        this.styles,
            fontInfo:      this.asset.fontInfo 
        } );
        this.fontLoaded = false;
    }    

    measureTextWidth( str,size ) {
        super.measureTextWidth( str,size );

        const fontInfo = this.asset.fontInfo;
        const scale = size ? size / fontInfo.info.size : 1;

        let width = 0;

        for ( let i = 0; i < str.length; i++ ) {
            const char = str.charCodeAt( i );
            const charInfo = fontInfo.chars[char];

            width += charInfo.xadvance * scale;
        }
        return width;        
    }
}




/***/ }),

/***/ "./engine/src/Particles.js":
/*!*********************************!*\
  !*** ./engine/src/Particles.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Particles": () => (/* binding */ Particles)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");

 



class Particles extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor() {
        super();
    }

    addParticles( ...args ) {

    }

    setTexture( ...args ) {

    }
}



/***/ }),

/***/ "./engine/src/Pixel.js":
/*!*****************************!*\
  !*** ./engine/src/Pixel.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Pixel": () => (/* binding */ Pixel)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");





class Pixel extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( color = 0xffffff, alpha = 1, width = 1, height = 1 ) {
        super();
        this._$$spriteType = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.SpriteTypes.PIXEL;
        this._$$updateCode = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.pixelColor = _Utils__WEBPACK_IMPORTED_MODULE_1__.Utils.hex2rgba( color,alpha );
        this.pixelWidth = width;
        this.pixelHeight = height;    
        this._$$localBounds.x = 0;
        this._$$localBounds.y = 0;
        this._$$localBounds.width = width;
        this._$$localBounds.height = height;
    }

    setColor( color = 0xffffff, alpha = 1 ) {
        this.pixelColor = _Utils__WEBPACK_IMPORTED_MODULE_1__.Utils.hex2rgba( color,alpha );
        this._$$updateCode = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
    }

    encodeExtraRenderingInfo() {
        let encodedBuffer = new Float32Array( 6 );

        encodedBuffer[0] = this.pixelWidth;
        encodedBuffer[1] = this.pixelHeight;
        encodedBuffer.set( this.pixelColor,2 );
        return [encodedBuffer];
    }
}



/***/ }),

/***/ "./engine/src/RenderTarget.js":
/*!************************************!*\
  !*** ./engine/src/RenderTarget.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RenderTarget": () => (/* binding */ RenderTarget)
/* harmony export */ });
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");
/* harmony import */ var _TextureBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TextureBase */ "./engine/src/TextureBase.js");
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
//
// 렌더링과 로직 쓰레드가 분리되어 있기 때문에 RT가 가장 만들기 어렵다.
// RT를 요청하는 시점에서 메인쓰레드에 생성
// draw할 때 그릴 스프라이트 트리의 스냅샷을 전송
// main에서는 받은 스냅샷을 가지고 draw를 즉시 수행
// RT는 수동으로 파기 해주어야 함












class RenderTarget extends _TextureBase__WEBPACK_IMPORTED_MODULE_1__.TextureBase {
    /**
     *Creates an instance of RenderTarget.
     * @param {number} width
     * @param {number} height
     * @param {boolean} filter
     * @memberof RenderTarget
     */
    constructor( width, height, filter = false ) {
        super();
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_6__.Asset( "<RT:*>",_Asset__WEBPACK_IMPORTED_MODULE_6__.Asset.AssetTypes.RenderTarget );
        this.width = width;
        this.height = height;
        this.uvRect = new _Types__WEBPACK_IMPORTED_MODULE_5__.Rect( 0,0,this.width,this.height );

        this.asset.load( { width: this.width,height: this.height,filter: filter } );
    }

    /**
     *
     *
     * @param {number} [color=0]
     * @param {number} [alpha=0]
     * @memberof RenderTarget
     */
    clear( color = 0 , alpha = 0 ) {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand", class: "RenderTarget", method: "clear",args: [this.asset.id, _Utils__WEBPACK_IMPORTED_MODULE_4__.Utils.hex2rgba( color,alpha )] } );
    }

    /**
     *
     *
     * @param {Sprite} spr
     * @memberof RenderTarget
     */
    draw( spr ) {
        let [buf,transferList] = spr.encodeRenderingInfoWithChildren();

        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand", class: "RenderTarget", method: "draw",args: [this.asset.id, buf] }, transferList );
    }
}


/***/ }),

/***/ "./engine/src/SceneManager.js":
/*!************************************!*\
  !*** ./engine/src/SceneManager.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SceneManager": () => (/* binding */ SceneManager)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Timer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Timer */ "./engine/src/Timer.js");
/* harmony import */ var _Mesh__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Mesh */ "./engine/src/Mesh.js");
/* harmony import */ var _RenderTarget__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./RenderTarget */ "./engine/src/RenderTarget.js");







// const Sprite = require("./sprite");
// const Mesh = require("./mesh");
// const RenderTarget = require("./renderTarget");
// const Utils = require("./utils");
// const Event = require("./event");

function rad( d ) {
    return d * Math.PI / 180;
}

let _needRT;

function defaultEase( ratio ) {
    return ratio;
}



class SceneManager extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( application, x, y, w, h, lw, lh ) {
        super();
        this.application = application;
        this.stage = application.stage;
        this.x1 = x;
        this.y1 = y;
        this.x2 = x + w;
        this.y2 = y + h;
        this.lw = lw;
        this.lh = lh;
        this.tweening = false;
        this.transitionEventCatcher = new _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        /** @type {Mesh} */
        this._blackMesh = null;
        /** @type {RenderTarget} */
        this._RT = null;
    }

    //#region [Transitions]
	
    // scene2 == newScene;
    //---------------------------------------------------------------------------------------------------
    // 트랜지션들
    //---------------------------------------------------------------------------------------------------


    static accordionLeft( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        //let h = self.lh;
        const scale1 = ( 1 - t );
        const scale2 = t;

        scene1.setScaleX( scale1 );
        scene2.setX( w * scale1 );
        scene2.setScaleX( scale2 );
    }

    static accordionRight( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        //let h = self.lh;
        const scale1 = ( 1 - t );
        const scale2 = t;

        scene1.setX( w * scale2 );
        scene1.setScaleX( scale1 );
        scene2.setScaleX( scale2 );
    }


    static zoomOut( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const scale1 = t + 1;
        const scale2 = t;
        const alpha = 1 - t * 1.2;

        scene1.setAlpha( alpha );
        if ( alpha <= 0 ) scene1.setVisible( false );

        scene1.setScale( scale1 );
        scene1.setPosition( -( w * scale1 - w ) / 2, -( h * scale1 - h ) / 2 );
        scene2.setAlpha( t );
        scene2.setScale( scale2 );
        scene2.setPosition( -( w * scale2 - w ) / 2, -( h * scale2 - h ) / 2 );
    }

    static zoomIn( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const scale1 = t + 1;
        const scale2 = t;

        scene1.setAlpha( 1 - t );
        scene1.setScale( scale1 );
        scene1.setPosition( -( w * scale1 - w ) / 2, -( h * scale1 - h ) / 2 );
        scene2.setAlpha( t );
        scene2.setScale( scale2 );
        scene2.setPosition( -( w * scale2 - w ) / 2, -( h * scale2 - h ) / 2 );
    }

    static zoomOutCross( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const scale1 = t + 1;
        const scale2 = ( 1 - t ) + 1;
        const alpha = 1 - t * 1.2;

        scene1.setAlpha( alpha );
        if ( alpha <= 0 ) scene1.setVisible( false );

        scene1.setScale( scale1 );
        scene1.setPosition( -( w * scale1 - w ) / 2, -( h * scale1 - h ) / 2 );
        scene2.setAlpha( t );
        scene2.setScale( scale2 );
        scene2.setPosition( -( w * scale2 - w ) / 2, -( h * scale2 - h ) / 2 );
    }

    static zoomInCross( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const scale1 = ( 1 - t );
        const scale2 = t;

        scene1.setAlpha( 1 - t );
        scene1.setScale( scale1 );
        scene1.setPosition( -( w * scale1 - w ) / 2, -( h * scale1 - h ) / 2 );
        scene2.setAlpha( t );
        scene2.setScale( scale2 );
        scene2.setPosition( -( w * scale2 - w ) / 2, -( h * scale2 - h ) / 2 );
    }


    static spinCW( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        //	let a1 = (1-t) * 360;
        const a1 = t * 180;
        const a2 = 180 + t * 180;
        //let l = Math.sqrt((w / 2) ** 2, (h / 2) ** 2);
        const [x1, y1] = [Math.cos( rad( a1 ) ) * w / 2 - Math.sin( rad( a1 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a1 ) ) * w / 2 + Math.cos( rad( a1 ) ) * h / 2 - h / 2];
        const [x2, y2] = [Math.cos( rad( a2 ) ) * w / 2 - Math.sin( rad( a2 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a2 ) ) * w / 2 + Math.cos( rad( a2 ) ) * h / 2 - h / 2];

        scene1.setAlpha( 1 - t );
        scene2.setAlpha( t );
        scene1.setRotation( a1 );
        scene2.setRotation( a2 );
        scene1.setPosition( -x1, -y1 );
        scene2.setPosition( -x2, -y2 );
    }

    static spinCCW( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        //	let a1 = (1-t) * 360;
        const a1 = 180 + ( 1 - t ) * 180;
        const a2 = ( 1 - t ) * 180;
        //let l = Math.sqrt((w / 2) ** 2, (h / 2) ** 2);
        const [x1, y1] = [Math.cos( rad( a1 ) ) * w / 2 - Math.sin( rad( a1 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a1 ) ) * w / 2 + Math.cos( rad( a1 ) ) * h / 2 - h / 2];
        const [x2, y2] = [Math.cos( rad( a2 ) ) * w / 2 - Math.sin( rad( a2 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a2 ) ) * w / 2 + Math.cos( rad( a2 ) ) * h / 2 - h / 2];

        scene1.setAlpha( 1 - t );
        scene2.setAlpha( t );
        scene1.setRotation( a1 );
        scene2.setRotation( a2 );
        scene1.setPosition( -x1, -y1 );
        scene2.setPosition( -x2, -y2 );
    }

    static spinCrossCW( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const a1 = -t * 180;
        const a2 = 180 + t * 180;
        //let l = Math.sqrt((w / 2) ** 2, (h / 2) ** 2);
        const [x1, y1] = [Math.cos( rad( a1 ) ) * w / 2 - Math.sin( rad( a1 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a1 ) ) * w / 2 + Math.cos( rad( a1 ) ) * h / 2 - h / 2];
        const [x2, y2] = [Math.cos( rad( a2 ) ) * w / 2 - Math.sin( rad( a2 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a2 ) ) * w / 2 + Math.cos( rad( a2 ) ) * h / 2 - h / 2];

        scene1.setAlpha( 1 - t );
        scene2.setAlpha( t );
        scene1.setRotation( a1 );
        scene2.setRotation( a2 );
        scene1.setPosition( -x1, -y1 );
        scene2.setPosition( -x2, -y2 );
    }

    static spinCrossCCW( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const a1 = t * 180;
        const a2 = 180 + -t * 180;
        //let l = Math.sqrt((w / 2) ** 2, (h / 2) ** 2);
        const [x1, y1] = [Math.cos( rad( a1 ) ) * w / 2 - Math.sin( rad( a1 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a1 ) ) * w / 2 + Math.cos( rad( a1 ) ) * h / 2 - h / 2];
        const [x2, y2] = [Math.cos( rad( a2 ) ) * w / 2 - Math.sin( rad( a2 ) ) * h / 2 - w / 2,
                          Math.sin( rad( a2 ) ) * w / 2 + Math.cos( rad( a2 ) ) * h / 2 - h / 2];

        scene1.setAlpha( 1 - t );
        scene2.setAlpha( t );
        scene1.setRotation( a1 );
        scene2.setRotation( a2 );
        scene1.setPosition( -x1, -y1 );
        scene2.setPosition( -x2, -y2 );
    }


    static balloon( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const scale1x = t + 1;
        const scale2x = ( 1 - t ) + 1;
        const scale1y = ( 1 - t );
        const scale2y = t;

        scene1.setAlpha( 1 - t );
        scene1.setScale( scale1x, scale1y );
        scene1.setPosition( -( w * scale1x - w ) / 2, -( h * scale1y - h ) / 2 );
        scene2.setAlpha( t );
        scene2.setScale( scale2x, scale2y );
        scene2.setPosition( -( w * scale2x - w ) / 2, -( h * scale2y - h ) / 2 );
    }


    static tv( self, scene1, scene2, t, rawT ) {
        const w = self.lw;
        const h = self.lh;
        const scale1x = t * 3 + 1;
        const scale2x = t * 0.2 + 0.8;//1--(1-t)*3+1;
        const scale1y = ( 1 - t );
        const scale2y = t;

        scene1.setAlpha( 1 - t );
        //let color = Math.max(1-t*2,0);
        //scene1.setColorMultiplier(color,color,color);
        scene1.setScale( scale1x, scale1y );
        scene1.setPosition( -( w * scale1x - w ) / 2, -( h * scale1y - h ) / 2 );
        scene2.setAlpha( t );
        scene2.setScale( scale2x, scale2y );
        scene2.setPosition( -( w * scale2x - w ) / 2, -( h * scale2y - h ) / 2 );
    }

    static getWiperV2( self, w, h ) {
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( [0, 0, w, 0, 0, h * 1.2, w, h, 0, h * 1.4, w, h * 1.2] );
        m.setColorArray( [0x000000, 1, 0x000000, 1, 0x000000, 1, 0x000000, 1, 0x000000, 0, 0x000000, 0] );
        m.setIndexArray( [0, 1, 2, 1, 3, 2, 2, 3, 4, 3, 4, 5] );
        m.setColorMultiplier( 0, 0, 0 );

        return m;
    }

    static getWiperV( self, w, h ) {
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( [0, 0, w, 0, 0, h, w, h, 0, h * 1.2, w, h * 1.2] );
        m.setColorArray( [0x000000, 1, 0x000000, 1, 0x000000, 1, 0x000000, 1, 0x000000, 0, 0x000000, 0] );
        m.setIndexArray( [0, 1, 2, 1, 3, 2, 2, 3, 4, 3, 4, 5] );
        m.setColorMultiplier( 0, 0, 0 );

        return m;
    }

    static getWiperH( self, w, h ) {
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( [0, 0, w, 0, 0, h, w, h, w * 1.2, 0, w * 1.2, h] );
        m.setColorArray( [0x000000, 1, 0x000000, 1, 0x000000, 1, 0x000000, 1, 0x000000, 0, 0x000000, 0] );
        m.setIndexArray( [0, 1, 2, 1, 3, 2, 1, 4, 3, 4, 5, 3] );
        m.setColorMultiplier( 0, 0, 0 );

        return m;
    }

    static wipeUp2( self, scene1, scene2, t, rawT ) {
        const physicalMarginX = -self.x1;
        const physicalMarginY = -self.y1;
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( t < 0.5 ) {
            //let t2 = t * 2;
            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getWiperV2( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setScaleY( -1 );
            m.setX( -physicalMarginX );
            m.setY( h * ( 1 + ( 1 - t * 2 ) * 1.4 ) - physicalMarginY );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getWiperV2( self,w, h );

            self._blackMesh = m;
            m.setScaleX( -1 );
            self.addChild( m );
            m.setX( w - physicalMarginX );
            m.setY( h * ( -t2 * 1.4 ) - physicalMarginY );
        }
    }


    static wipeDown( self, scene1, scene2, t, rawT ) {
        const physicalMarginX = -self.x1;
        const physicalMarginY = -self.y1;
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( t < 0.5 ) {
            const t2 = t * 2;

            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getWiperV( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setX( -physicalMarginX );
            m.setY( -h * ( 1 - t2 ) * 1.2 - physicalMarginY );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getWiperV( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setScaleY( -1 );
            m.setX( -physicalMarginX );
            m.setY( h * ( 1 + t2 * 1.2 ) - physicalMarginY );
        }
    }

    static wipeUp( self, scene1, scene2, t, rawT ) {
        const physicalMarginX = -self.x1;
        const physicalMarginY = -self.y1;
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( t < 0.5 ) {
            //let t2 = t * 2;
            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getWiperV( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setScaleY( -1 );
            m.setX( -physicalMarginX );
            m.setY( h * ( 1 + ( 1 - t * 2 ) * 1.2 ) - physicalMarginY );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getWiperV( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setX( -physicalMarginX );
            m.setY( h * ( -t2 * 1.2 ) - physicalMarginY );
        }
    }

    static wipeRight( self, scene1, scene2, t, rawT ) {
        const physicalMarginX = -self.x1;
        const physicalMarginY = -self.y1;
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( t < 0.5 ) {
            const t2 = t * 2;

            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getWiperH( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setX( -w * ( 1 - t2 ) * 1.2 - physicalMarginX );
            m.setY( -physicalMarginY );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getWiperH( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setScaleX( -1 );
            m.setX( w * ( 1 + t2 * 1.2 ) - physicalMarginX );
            m.setY( -physicalMarginY );
        }
    }

    static wipeLeft( self, scene1, scene2, t, rawT ) {
        const physicalMarginX = -self.x1;
        const physicalMarginY = -self.y1;
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( t < 0.5 ) {
            //let t2 = t * 2;
            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getWiperH( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setScaleX( -1 );
            m.setX( w * ( 1 + ( 1 - t * 2 ) * 1.2 ) - physicalMarginX );
            m.setY( -physicalMarginY );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getWiperH( self,w, h );

            self._blackMesh = m;
            self.addChild( m );
            m.setX( w * ( -t2 * 1.2 ) - physicalMarginX );
            m.setY( -physicalMarginY );
        }
    }


    static getClockMesh( self, w, h, ratio ) {
        if ( ratio < 0 ) {
            ratio = 0;
        }

        if ( ratio > 1 ) {
            ratio = 1;
        }

        const angle = ratio * 360;
        const angleZone = Math.floor( ratio * 8 ) + 1;
        const angle2 = ( angle % 45 );
        const triWidth = Math.sin( rad( angle2 ) );
        let v = [];
        let idx = [];

        if ( ratio == 1 ) {
            v = [0 * w, 0 * h, 1 * w, 0 * h, 1 * w, 1 * h, 0 * w, 1 * h];
            idx = [0, 1, 2, 2, 3, 0];
        } else if ( angleZone == 1 ) {
            v = [0.5 * w, 0 * h, ( 0.5 + triWidth ) * w, 0 * h, 0.5 * w, 0.5 * h];
            idx = [0, 1, 2];
        } else if ( angleZone == 2 ) {
            v = [1 * w, 0 * h, 1 * w, triWidth * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h];
            idx = [0, 1, 2, 3, 0, 2];
        } else if ( angleZone == 3 ) {
            v = [1 * w, 0.5 * h, 1 * w, ( 0.5 + triWidth ) * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h, 1 * w, 0 * h];
            idx = [0, 1, 2, 3, 4, 2, 4, 0, 2];
        } else if ( angleZone == 4 ) {
            v = [1 * w, 1 * h, ( 1 - triWidth ) * w, 1 * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h, 1 * w, 0 * h];
            idx = [0, 1, 2, 3, 4, 2, 4, 0, 2];
        } else if ( angleZone == 5 ) {
            v = [0.5 * w, 1 * h, ( 0.5 - triWidth ) * w, 1 * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h, 1 * w, 0 * h, 1 * w, 1 * h];
            idx = [0, 1, 2, 3, 4, 0, 4, 5, 0];
        } else if ( angleZone == 6 ) {
            v = [0 * w, 1 * h, 0 * w, ( 1 - triWidth ) * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h, 1 * w, 0 * h, 1 * w, 1 * h];
            idx = [0, 1, 2, 3, 4, 2, 4, 5, 0];
        } else if ( angleZone == 7 ) {
            v = [0 * w, 0.5 * h, 0 * w, ( 0.5 - triWidth ) * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h, 1 * w, 0 * h, 1 * w, 1 * h, 0 * w, 1 * h];
            idx = [0, 1, 2, 3, 4, 2, 4, 5, 6, 0, 2, 6];
        } else {
            v = [0 * w, 0 * h, triWidth * w, 0 * h, 0.5 * w, 0.5 * h, 0.5 * w, 0 * h, 1 * w, 0 * h, 1 * w, 1 * h, 0 * w, 1 * h];
            idx = [0, 1, 2, 3, 4, 2, 4, 5, 6, 0, 2, 6];
        }

        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        //m.setTexture(tex);
        //m.setTextureCoordinateArray(v);
        m.setVertexArray( v );
        m.setIndexArray( idx );
        m.setColorMultiplier( 0, 0, 0 );

        return m;
    }



    static getCircleMesh( self, radius ) {
        const sides = 64;
        const v = [0, 0];
        const idx = [];
        const c = [0x000000, 1];

        for ( let i = 0; i < sides; i++ ) {
            const angle = ( i / sides ) * 2 * Math.PI;

            v[2 + i * 4] = Math.cos( angle ) * radius;
            v[2 + i * 4 + 1] = Math.sin( angle ) * radius;
            v[2 + i * 4 + 2] = Math.cos( angle ) * radius * 1.2;
            v[2 + i * 4 + 3] = Math.sin( angle ) * radius * 1.2;
            c[2 + i * 4] = 0x000000;
            c[2 + i * 4 + 1] = 1;
            c[2 + i * 4 + 2] = 0x000000;
            c[2 + i * 4 + 3] = 0;
            idx[ i * 9] = 0;	//origin;
            idx[ i * 9 + 1] = ( i * 2 ) + 1;
            idx[ i * 9 + 2] = ( i * 2 ) + 3;
            idx[ i * 9 + 3] = ( i * 2 ) + 1;
            idx[ i * 9 + 4] = ( i * 2 ) + 2;
            idx[ i * 9 + 5] = ( i * 2 ) + 4;
            idx[ i * 9 + 6] = ( i * 2 ) + 1;
            idx[ i * 9 + 7] = ( i * 2 ) + 4;
            idx[ i * 9 + 8] = ( i * 2 ) + 3;

            if ( i == sides - 1 ) {
                idx[ i * 9 + 2] = 1;
                idx[ i * 9 + 5] = 2;
                idx[ i * 9 + 7] = 2;
                idx[ i * 9 + 8] = 1;
            }
        }

        //log(Log.UI, table.concat(idx,","));
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( v );
        m.setIndexArray( idx );
        m.setColorArray( c );

        return m;
    }

    static getCircleHoleMesh( self, radius1, radius2 ) {
        const sides = 32;
        const v = [];
        const idx = [];
        const c = [];

        for ( let i = 0; i < sides; i++ ) {
            const angle = ( i / sides ) * 2 * Math.PI;

            v[ i * 6] = Math.cos( angle ) * radius1 / 1.2;
            v[ i * 6 + 1] = Math.sin( angle ) * radius1 / 1.2;
            v[ i * 6 + 2] = Math.cos( angle ) * radius1;
            v[ i * 6 + 3] = Math.sin( angle ) * radius1;
            v[ i * 6 + 4] = Math.cos( angle ) * radius2;
            v[ i * 6 + 5] = Math.sin( angle ) * radius2;
            c[ i * 6] = 0x000000;
            c[ i * 6 + 1] = 0;
            c[ i * 6 + 2] = 0x000000;
            c[ i * 6 + 3] = 1;
            c[ i * 6 + 4] = 0x000000;
            c[ i * 6 + 5] = 1;
            idx[ i * 12] = ( i * 3 ) + 0;
            idx[ i * 12 + 1] = ( i * 3 ) + 4;
            idx[ i * 12 + 2] = ( i * 3 ) + 3;
            idx[ i * 12 + 3] = ( i * 3 ) + 0;
            idx[ i * 12 + 4] = ( i * 3 ) + 1;
            idx[ i * 12 + 5] = ( i * 3 ) + 4;
            idx[ i * 12 + 6] = ( i * 3 ) + 1;
            idx[ i * 12 + 7] = ( i * 3 ) + 2;
            idx[ i * 12 + 8] = ( i * 3 ) + 5;
            idx[ i * 12 + 9] = ( i * 3 ) + 1;
            idx[ i * 12 + 10] = ( i * 3 ) + 5;
            idx[ i * 12 + 11] = ( i * 3 ) + 4;

            if ( i == sides - 1 ) {
                idx[ i * 12 + 1] = 1;
                idx[ i * 12 + 2] = 0;
                idx[ i * 12 + 5] = 1;
                idx[ i * 12 + 8] = 2;
                idx[ i * 12 + 10] = 2;
                idx[ i * 12 + 11] = 1;
            }
        }

        //log(Log.UI, table.concat(idx,","));
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( v );
        m.setIndexArray( idx );
        m.setColorArray( c );

        return m;
    }

    static circleInOut( self, scene1, scene2, t, rawT ) {
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;
        const radius = Math.sqrt( ( w / 2 ) ** 2 + ( h / 2 ) ** 2 );

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( ( t < 0.5 ) ) {
            const t2 = t * 2;

            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getCircleHoleMesh( self,radius * ( 1 - t2 ) * 1.2, radius * 1.2 );

            self._blackMesh = m;
            self.addChild( m );
            //m.setScale(t);
            m.setX( self.lw / 2 );
            m.setY( self.lh / 2 );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getCircleHoleMesh( self,radius * t2 * 1.2, radius * 1.2 );

            self._blackMesh = m;
            self.addChild( m );
            //m.setScale(t);
            m.setX( self.lw / 2 );
            m.setY( self.lh / 2 );
        }
    }


    static circleOut( self, scene1, scene2, t, rawT ) {
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;
        const radius = Math.sqrt( ( w / 2 ) ** 2 + ( h / 2 ) ** 2 );

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( ( t < 0.5 ) ) {
            const t2 = t * 2;

            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getCircleMesh( self,radius * 1.2 );

            self._blackMesh = m;
            self.addChild( m );
            m.setScale( t2 );
            m.setX( self.lw / 2 );
            m.setY( self.lh / 2 );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getCircleHoleMesh( self,radius * t2 * 1.2, radius * 1.2 );

            self._blackMesh = m;
            self.addChild( m );
            //m.setScale(t);
            m.setX( self.lw / 2 );
            m.setY( self.lh / 2 );
        }
    }

    static circleIn( self, scene1, scene2, t, rawT ) {
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;
        const radius = Math.sqrt( ( w / 2 ) ** 2 + ( h / 2 ) ** 2 );

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( ( t < 0.5 ) ) {
            const t2 = t * 2;

            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getCircleHoleMesh( self,radius * ( 1 - t2 ) * 1.2, radius * 1.2 );

            self._blackMesh = m;
            self.addChild( m );
            //m.setScale(t);
            m.setX( self.lw / 2 );
            m.setY( self.lh / 2 );
        } else {
            const t2 = ( t - 0.5 ) * 2;

            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getCircleMesh( self,radius * 1.2 );

            self._blackMesh = m;
            self.addChild( m );
            m.setScale( 1 - t2 );
            m.setX( self.lw / 2 );
            m.setY( self.lh / 2 );
        }
    }


    static clock( self, scene1, scene2, t, rawT ) {
        const physicalMarginX = -self.x1;
        const physicalMarginY = -self.y1;
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        if ( ( t < 0.5 ) ) {
            scene1.setVisible( true );
            scene2.setVisible( false );
            const m = SceneManager.getClockMesh( self,w, h, t * 2 );

            m.setX( -physicalMarginX );
            m.setY( -physicalMarginY );
            self._blackMesh = m;
            self.addChild( m );
        } else {
            scene1.setVisible( false );
            scene2.setVisible( true );
            const m = SceneManager.getClockMesh( self,w, h, 1 - ( t - 0.5 ) * 2 );

            m.setScaleX( -1 );
            m.setX( w - physicalMarginX );
            m.setY( -physicalMarginY );
            self._blackMesh = m;
            self.addChild( m );
        }
    }



    //-----------------------------------------------------
    // RT transition;
    //-----------------------------------------------------

    static getCircleMeshRT( self, radius ) {
        const sides = 64;
        const v = [0, 0];
        const t = [( self.x2 - self.x1 ) / 2, ( self.y2 - self.y1 ) / 2];
        const idx = [];
        const c = [0xffffff, 1];

        for ( let i = 0; i < sides; i++ ) {
            const angle = ( i / sides ) * 2 * Math.PI;

            v[2 + i * 4] = Math.cos( angle ) * radius;
            v[2 + i * 4 + 1] = Math.sin( angle ) * radius;
            v[2 + i * 4 + 2] = Math.cos( angle ) * radius * 1.2;
            v[2 + i * 4 + 3] = Math.sin( angle ) * radius * 1.2;
            t[2 + i * 4] = t[1] + v[2 + i * 4];
            t[2 + i * 4 + 1] = t[2] + v[2 + i * 4 + 1];
            t[2 + i * 4 + 2] = t[1] + v[2 + i * 4 + 2];
            t[2 + i * 4 + 3] = t[2] + v[2 + i * 4 + 3];
            c[2 + i * 4] = 0xffffff;
            c[2 + i * 4 + 1] = 1;
            c[2 + i * 4 + 2] = 0xffffff;
            c[2 + i * 4 + 3] = 0;
            idx[i * 9] = 0;	//origin;
            idx[i * 9 + 1] = ( i * 2 ) + 1;
            idx[i * 9 + 2] = ( i * 2 ) + 3;
            idx[i * 9 + 3] = ( i * 2 ) + 1;
            idx[i * 9 + 4] = ( i * 2 ) + 2;
            idx[i * 9 + 5] = ( i * 2 ) + 4;
            idx[i * 9 + 6] = ( i * 2 ) + 1;
            idx[i * 9 + 7] = ( i * 2 ) + 4;
            idx[i * 9 + 8] = ( i * 2 ) + 3;

            if ( i == sides - 1 ) {
                idx[i * 9 + 2] = 1;
                idx[i * 9 + 5] = 2;
                idx[i * 9 + 7] = 2;
                idx[i * 9 + 8] = 1;
            }
        }

        //log(Log.UI, table.concat(idx,","));
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( v );
        m.setIndexArray( idx );
        m.setColorArray( c );
        m.setTextureCoordinateArray( t );
        m.setTexture( self._RT );

        return m;
    }

    static getCircleHoleMeshRT( self, radius1, radius2 ) {
        const sides = 32;
        const [cx, cy] = [( self.x2 - self.x1 ) / 2, ( self.y2 - self.y1 ) / 2];
        const v = [];
        const t = [];
        const idx = [];
        const c = [];

        for ( let i = 0; i < sides; i++ ) {
            const angle = ( i / sides ) * 2 * Math.PI;

            v.push(
                Math.cos( angle ) * radius1 / 1.2, Math.sin( angle ) * radius1 / 1.2,
                Math.cos( angle ) * radius1, Math.sin( angle ) * radius1,
                Math.cos( angle ) * radius2, Math.sin( angle ) * radius2
            );
            t.push(
                cx + v[i * 6], cy + v[i * 6 + 1],
                cx + v[i * 6 + 2], cy + v[i * 6 + 3],
                cx + v[i * 6 + 4], cy + v[i * 6 + 5]
            );
            c.push(
                0xffffff, 0,
                0xffffff, 1,
                0xffffff, 1
            );
            idx.push(
                ( i * 3 ) + 0, ( i * 3 ) + 4, ( i * 3 ) + 3,
                ( i * 3 ) + 0, ( i * 3 ) + 1, ( i * 3 ) + 4,
                ( i * 3 ) + 1, ( i * 3 ) + 2, ( i * 3 ) + 5,
                ( i * 3 ) + 1, ( i * 3 ) + 5, ( i * 3 ) + 4
            );

            if ( i == sides - 1 ) {
                idx[i * 12 + 1] = 1;
                idx[i * 12 + 2] = 0;
                idx[i * 12 + 5] = 1;
                idx[i * 12 + 8] = 2;
                idx[i * 12 + 10] = 2;
                idx[i * 12 + 11] = 1;
            }
        }

        //log(Log.UI, table.concat(idx,","));
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( v );
        m.setIndexArray( idx );
        m.setColorArray( c );
        m.setTextureCoordinateArray( t );
        m.setTexture( self._RT );

        return m;
    }


    static circleOutRT( self, scene1, scene2, t, rawT ) {
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh != null ) {
            self._blackMesh.removeFromParent();
        }

        const radius = Math.sqrt( ( w / 2 ) ** 2 + ( h / 2 ) ** 2 );

        scene1.setVisible( false );
        scene2.setVisible( true );
        const m = SceneManager.getCircleHoleMeshRT( self,radius * t * 1.2, radius * 1.2 );

        self._blackMesh = m;
        self.addChild( m );
        //m.setScale(t);
        m.setX( self.lw / 2 );
        m.setY( self.lh / 2 );
    }

    static circleInRT( self, scene1, scene2, t, rawT ) {
        const w = self.x2 - self.x1;
        const h = self.y2 - self.y1;

        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        const radius = Math.sqrt( ( w / 2 ) ** 2 + ( h / 2 ) ** 2 );

        scene1.setVisible( false );
        scene2.setVisible( true );
        const m = SceneManager.getCircleMeshRT( self,radius * ( 1 - t ) * 1.2 );

        self._blackMesh = m;
        self.addChild( m );
        m.setX( self.lw / 2 );
        m.setY( self.lh / 2 );
    }

    static getPaperMeshRT( self, clip1, clip2 ) {
        //let sides = 32;
        const v = [
            self.x1, self.y1,
            self.x2 - clip1 - clip2, self.y1,
            self.x1, self.y2,
            self.x2 - clip1 - clip2, self.y2
        ];
        const t = [0 + clip1, 0, ( self.x2 - self.x1 ) - clip2, 0, 0 + clip1, ( self.y2 - self.y1 ), ( self.x2 - self.x1 ) - clip2, ( self.y2 - self.y1 )];
        const idx = [0, 1, 2, 1, 3, 2];
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_4__.Mesh();

        m.setVertexArray( v );
        m.setIndexArray( idx );
        m.setTextureCoordinateArray( t );
        m.setTexture( self._RT );

        return m;
    }


    static paperDownRT( self, scene1, scene2, t, rawT ) {
        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        scene1.setVisible( false );
        scene2.setVisible( true );
        const clip1 = Math.sin( rad( t * 180 ) ) * ( self.x2 - self.x1 ) / 2;
        const clip2 = ( t < 0.5 ) ? 0 : ( 1 - Math.cos( rad( ( t - 0.5 ) * 180 ) ) ) * ( self.x2 - self.x1 );
        const m = SceneManager.getPaperMeshRT( self,clip1, clip2 );

        scene2.setX( Math.sin( rad( t * 180 ) ) * ( self.x2 - self.x1 ) / 2 );
        m.setX( 0 );
        const b1 = 1 - t * 0.5;
        const b2 = Math.max( 0, t * 2 - 1 );

        scene2.setColorMultiplier( b2, b2, b2 );
        m.setColorMultiplier( b1, b1, b1 );
        self._blackMesh = m;
        self.addChild( m );
    }

    static paperUpRT( self, scene1, scene2, t, rawT ) {
        if ( self._blackMesh ) {
            self._blackMesh.removeFromParent();
        }

        scene1.setVisible( false );
        scene2.setVisible( true );
        scene2.setX( -Math.sin( rad( t * 180 ) ) * ( self.x2 - self.x1 ) / 2 );
        const x2 = ( t < 0.5 ) ? Math.sin( rad( t * 180 ) ) * ( self.x2 - self.x1 ) / 2 : scene2.getX() + ( self.x2 - self.x1 );
        const clip1 = ( t < 0.5 ) ? 0 : x2 - ( self.x2 - self.x1 ) / 2 - Math.cos( rad( ( t - 90 ) * 180 ) ) * ( self.x2 - self.x1 ) / 2;
        const clip2 = x2 - clip1;
        const m = SceneManager.getPaperMeshRT( self,clip1, clip2 );

        m.setX( x2 );
        const b1 = 1 - t * 0.5;
        const b2 = Math.max( 0, t * 2 - 1 );

        scene2.setColorMultiplier( b2, b2, b2 );
        m.setColorMultiplier( b1, b1, b1 );
        self._blackMesh = m;
        self.addChild( m );
    }



    static moveFromRight( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene1.setX( -t * width );
        scene2.setX( ( 1 - t ) * width );
    }

    static moveFromLeft( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene1.setX( t * width );
        scene2.setX( ( t - 1 ) * width );
    }

    static overFromRight( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene2.setX( ( 1 - t ) * width );
    }

    static overFromLeft( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene2.setX( ( t - 1 ) * width );
    }

    static moveFromRightWithFade( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene1.setAlpha( 1 - t );
        scene1.setX( -t * width );
        scene2.setX( ( 1 - t ) * width );
    }

    static moveFromLeftWithFade( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene1.setAlpha( 1 - t );
        scene1.setX( t * width );
        scene2.setX( ( t - 1 ) * width );
    }

    static overFromRightWithFade( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene1.setAlpha( 1 - t );
        scene2.setX( ( 1 - t ) * width );
    }

    static overFromLeftWithFade( self, scene1, scene2, t, rawT ) {
        const width = self.lw + -self.x1 * 2;

        scene1.setAlpha( 1 - t );
        scene2.setX( ( t - 1 ) * width );
    }

    static moveFromBottom( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene1.setY( -t * height );
        scene2.setY( ( 1 - t ) * height );
    }

    static moveFromTop( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene1.setY( t * height );
        scene2.setY( ( t - 1 ) * height );
    }

    static overFromBottom( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene2.setY( ( 1 - t ) * height );
    }

    static overFromTop( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene2.setY( ( t - 1 ) * height );
    }

    static moveFromBottomWithFade( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene1.setAlpha( 1 - t );
        scene1.setY( -t * height );
        scene2.setY( ( 1 - t ) * height );
    }

    static moveFromTopWithFade( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene1.setAlpha( 1 - t );
        scene1.setY( t * height );
        scene2.setY( ( t - 1 ) * height );
    }


    static overFromBottomWithFade( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene1.setAlpha( 1 - t );
        scene2.setY( ( 1 - t ) * height );
    }

    static overFromTopWithFade( self, scene1, scene2, t, rawT ) {
        const height = self.lh;

        scene1.setAlpha( 1 - t );
        scene2.setY( ( t - 1 ) * height );
    }

    static fade( self, scene1, scene2, t, rawT ) {
        if ( t < 0.5 ) {
            scene1.setAlpha( ( 0.5 - t ) * 2 );
        } else {
            scene1.setAlpha( 0 );
        }

        if ( t < 0.5 ) {
            scene2.setAlpha( 0 );
        } else {
            scene2.setAlpha( ( t - 0.5 ) * 2 );
        }
    }

    static crossfade( self, scene1, scene2, t, rawT ) {
        scene1.setAlpha( 1 - t );
        scene2.setAlpha( t );
    }

    static flip( self, scene1, scene2, t, rawT ) {
        const width = self.lw;

        if ( t < 0.5 ) {
            const s = ( 0.5 - t ) * 2;

            scene1.setScaleX( s );
            scene1.setX( ( 1 - s ) * width * 0.5 );
        } else {
            scene1.setScaleX( 0 );
            scene1.setX( width * 0.5 );
        }

        if ( t < 0.5 ) {
            scene2.setScaleX( 0 );
            scene2.setX( width * 0.5 );
        } else {
            const s = ( t - 0.5 ) * 2;

            scene2.setScaleX( s );
            scene2.setX( ( 1 - s ) * width * 0.5 );
        }
    }

    static flipWithFade( self, scene1, scene2, t, rawT ) {
        const width = self.lw;

        if ( t < 0.5 ) {
            const s = ( 0.5 - t ) * 2;

            scene1.setScaleX( s );
            scene1.setX( ( 1 - s ) * width * 0.5 );
            scene1.setAlpha( s );
        } else {
            scene1.setScaleX( 0 );
            scene1.setX( width * 0.5 );
            scene1.setAlpha( 0 );
        }

        if ( t < 0.5 ) {
            scene2.setScaleX( 0 );
            scene2.setX( width * 0.5 );
            scene2.setAlpha( 0 );
        } else {
            const s = ( t - 0.5 ) * 2;

            scene2.setScaleX( s );
            scene2.setX( ( 1 - s ) * width * 0.5 );
            scene2.setAlpha( s );
        }
    }

    static flipWithShade( self, scene1, scene2, t, rawT ) {
        const width = self.lw;

        if ( t < 0.5 ) {
            const s = ( 0.5 - t ) * 2;

            scene1.setScaleX( s );
            scene1.setX( ( 1 - s ) * width * 0.5 );
            scene1.setColorMultiplier( 1 - t, 1 - t, 1 - t, 1 );
        } else {
            scene1.setScaleX( 0 );
            scene1.setX( width * 0.5 );
            scene1.setColorMultiplier( 0.5, 0.5, 0.5, 1 );
        }

        if ( t < 0.5 ) {
            scene2.setScaleX( 0 );
            scene2.setX( width * 0.5 );
            scene2.setColorMultiplier( 0.5, 0.5, 0.5, 1 );
        } else {
            const s = ( t - 0.5 ) * 2;

            scene2.setScaleX( s );
            scene2.setX( ( 1 - s ) * width * 0.5 );
            scene2.setColorMultiplier( t, t, t, 1 );
        }
    }


    //#endregion

    //---------------------------------------------------------------------------------------------------
    //
    // 메인 코드
    //
    //---------------------------------------------------------------------------------------------------


    getCurrentSceneName() {
        return this.currentScene;
    }

    getCurrentScene() {
        if ( this.scene2 ) {
            return this.scene2;
        }

        return this.scene1;
    }

    isChanging() {
        return this.changingScene;
    }

    changeScene( sprOrFunc, duration, transition, ease, options ) {
        let spr;

        if ( typeof sprOrFunc == "function" ) {
            spr = sprOrFunc();
        } else {
            spr = sprOrFunc;
        }

        //log(Log.SCENE, "changeScene: " .. (this.currentScene ~= null and this.currentScene or "null") .. " to " .. (scene ~= null and scene or "null"));
        if ( !this.active ) {
            //if (GLOBAL.layerShieldForSceneChange) { GLOBAL.layerShieldForSceneChange.show() }
            this.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME, this.onEnterFrame, this );
            this.active = true;
        }

        this.changingScene = true;	 // 신 전환시 입력을 막거나 할 때 쓰려고. tweening하고는 시점이 좀 다르다
        this.eventFilter = options != null ? options.eventFilter : null;
        this.currentScene = spr;

        // henjeon, 2014.12.01;
        // 한 프레임에 onEnterFrame() 전에 changeScene() 연속으로 호출되면 begin이벤트 없이 } 이벤트가 호출되는 문제가 있다.
        // changeScene()에서 transitionBegin 이벤트를 바로 호출할 경우 코드 흐름이 전과 달라져서 여러 가지 문제가 발생하여,
        // 호출 순서는 그대로 유지하도록 여기서 this.time이 0이 아닐때만 이벤트를 호출하도록 처리함
        //		
        if ( this.tweening ) {
            if ( this.time != 0 ) {
                //return;
                this.dispatchEvent( "transitionEnd" );
                this.scene1.dispatchEvent( "exitEnd" );
                this.scene2.dispatchEvent( "enterEnd" );
                this.onTransitionEnd();
                this.scene1.removeFromParent();
                this.scene1 = this.scene2;
                this.scene2 = null;
                this.tweening = false;
                this.changingScene = false;
            } else {
                if ( this.scene2 ) {
                    this.scene2.removeFromParent();
                    this.scene2 = null;
                }
            }
        }

        if ( this.scene1 == null ) {
            //이전 씬이 없는 경우이다.
            this.scene1 = new _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        }

        this.duration = duration;
        this.transition = transition;
        this.ease = ease || defaultEase;
        this.scene2 = spr; //this.scenes[scene].new(options and options.userData);
        this.scene2.setVisible( false );
        this.addChild( this.scene2 );
        this.time = 0;
        this.currentTimer = _Timer__WEBPACK_IMPORTED_MODULE_3__.Timer.now();
        this.tweening = true;

        if ( _needRT.get( transition ) ) {
            const ss = this.stage.getScale();
            const w = ( this.x2 - this.x1 ); //* ss;
            const h = ( this.y2 - this.y1 ); //* ss;
            const sx = this.stage.getX();

            this.stage.setScale( 1 );
            const rt = new _RenderTarget__WEBPACK_IMPORTED_MODULE_5__.RenderTarget( w, h, true );

            rt.clear( 0x000000, 1 );
            this.stage.setPosition( -this.x1, -this.y1 );
            rt.draw( this.stage );
            this.stage.setX( sx );
            this.stage.setScale( ss.x,ss.y );
            this._RT = rt;
        }

        return this.scene2;
    }

    resetCurrentScene( currentScene ) {
        this.scene1 = currentScene;
        this.addChild( this.scene1 );
    }

    filterTransitionEvents( event ) {
        event.stopPropagation();
    }

    onTransitionBegin() {
        if ( this.eventFilter ) {
            this.stage.addChild( this.transitionEventCatcher );

            for ( const i in this.eventFilter ) {
                const event = this.eventFilter[i];

                this.transitionEventCatcher.addEventListener( event, this.filterTransitionEvents, this );
            }
        }
    }

    onTransitionEnd() {
        if ( this.eventFilter ) {
            for ( const i in this.eventFilter ) {
                const event = this.eventFilter[i];

                this.transitionEventCatcher.removeEventListener( event, this.filterTransitionEvents, this );
            }

            this.transitionEventCatcher.removeFromParent();
        }
    }

    onEnterFrame( event ) {
        // 이벤트필터링개체를 always on top 시킨다
        this.stage.addChild( this.transitionEventCatcher );

        // 트랜지션 종료시 이곳에서 일괄 처리
        if ( !this.tweening ) {
            //if (GLOBAL.layerShieldForSceneChange) { GLOBAL.layerShieldForSceneChange.hide() }
            this.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.ENTER_FRAME, this.onEnterFrame, this );
            this.scene1.removeFromParent();
            this.scene1 = this.scene2;
            this.scene2 = null;
            this.active = null;
            this.changingScene = false;

            //wiper remove;
            if ( this._blackMesh ) {
                this._blackMesh.removeFromParent();
                this._blackMesh = null;
            }
		
            if ( this._RT ) {
                this._RT = null;
            }

            return;
        }

        if ( this.time == 0 ) {
            this.onTransitionBegin();
            this.scene2.setVisible( true );
            this.dispatchEvent( "transitionBegin" );
            this.scene1.dispatchEvent( "exitBegin" );
            this.scene2.dispatchEvent( "enterBegin" );
        }

        const timer = _Timer__WEBPACK_IMPORTED_MODULE_3__.Timer.now();
        const deltaTime = 1000 / 60; // timer - this.currentTimer;

        this.currentTimer = timer;
        const t = ( this.duration == 0 ) ? 1 : ( this.time / this.duration );

        this.transition( this, this.scene1, this.scene2, this.ease( t ), t );

        if ( this.time == this.duration ) {
            this.dispatchEvent( "transitionEnd" );
            this.scene1.dispatchEvent( "exitEnd" );
            this.scene2.dispatchEvent( "enterEnd" );
            this.onTransitionEnd();
            this.tweening = false;
        }

        this.time = this.time + deltaTime;

        if ( this.duration < this.time ) {
            this.time = this.duration;
        }
    }
}

_needRT = new Map( [
    [SceneManager.circleInRT, true],
    [SceneManager.circleOutRT, true],
    [SceneManager.paperDownRT, true],
    [SceneManager.paperUpRT, true],
] );



/***/ }),

/***/ "./engine/src/Serializer.js":
/*!**********************************!*\
  !*** ./engine/src/Serializer.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Serializer": () => (/* binding */ Serializer)
/* harmony export */ });

//import EventDispatcher from "./eventDispatcher";


/** 
 * @typedef {object} ClassDefOptions
 * @param {function=} construct
 * @param {boolean=} fill
 * @param {string[]=} white
 * @param {string[]=} black
 * @param {string[]=} keep
 * @param {boolean=} dataOnly
 */

/**
 * @typedef {[object,ClassDefOptions]} _ClassDef
 * 
 */

/**
 * @typedef {object|_ClassDef} ClassDef
 * 
 */

const S = {
    undefined:     "$$UDF",
    function:      "$$FNC",
    unknown:       "$$UKN",
    NaN:           "$$NAN",
    Infinity:      "$$INF",
    MinusInfinity: "$$MIF",
    Date:          "$$DAT",
    RegExp:        "$$RGX",
    Reference:     "$$REF"
};

const defaultOptions = {
    ignorePrefix:     "__",
    ignoreList:       ["__pixi"],
    skipUndefined:    true,
    skipUnknownClass: true
};

/** 
 * @typedef {object} SerializerOptions
 * @property {string=} ignorePrefix
 * @property {string[]=} ignoreList
 * @property {boolean=} skipUndefined
 * @property {boolean=} skipUnknownClass
 * 
 */


function copyObject( dst, src, keep ) {
    if ( keep == null ) {
        Object.assign( dst, src );
    } else {
        for ( const k in src ) {
            if ( typeof src[k] == "object" && dst[k] && keep.includes( k ) ) {
                // 대상이 프록시일 경우 그냥 복사하면 프록시 핸들러를 잃어버리기 때문에 
                // keep 리스트의 것들은 주소를 보존시켜야한다.
                Object.assign( dst[k], src[k] );
            } else {
                dst[k] = src[k];
            }
        }
    }
}

/**
 * 게임 오브젝트를 직렬화하고 다시 게임오브젝트로 만들 수 있도록 한다.
 * 직렬화한 오브젝트는 네트웍으로 보내거나 파일에 저장할 수 있다.
 * 
 * 직렬화할 오브젝트가 생성자에서 Proxy를 만드는 경우 주의가 필요함
 * Proxy가 다층으로 구성될 경우 Proxy의 handler를 잃어버릴 수 있다.
 * 그런 것들은 keep 옵션을 사용해서 타겟 개체의 프로토타입을 유지하도록 할 것
 *
 * @class Serializer
 */
class Serializer {
    /**
     *Creates an instance of Serializer.
     * @param {ClassDef[]} classList
     * @param {SerializerOptions} [options={}]
     * @memberof Serializer
     */
    constructor( classList, options = defaultOptions ) {
        //super();

        /** @type {Object.<string,_ClassDef>} */
        this.classList = {};
        this.options = options;
        for ( const classDef of classList ) {
            if ( Array.isArray( classDef ) ) {
                this.classList[classDef[0].name] = [classDef,classDef[1]];
            } else {
                this.classList[classDef.name] = [classDef,null];
            }
        }
        this.__objectToId = undefined;
        this.__idToObject = undefined;
        this.__refCount = undefined;
        //console.log( this.classList );
    }

    /**
     *
     *
     * @param {*} obj
     * @returns {object}
     * @memberof Serializer
     */
    _getSerializableObject( obj ) {
        if ( this.__objectToId.has( obj ) ) {
            this.__refCount[this.__objectToId.get( obj )] = ( this.__refCount[this.__objectToId.get( obj )] || 0 ) + 1;

            return S.Reference + ":" + this.__objectToId.get( obj );
        }
        if ( typeof obj == "undefined" ) {
            return S.undefined;
        } else if ( obj === null ) {
            return null;
        } else if ( obj instanceof RegExp ) {
            return S.RegExp + ":" + obj.toString();
        } else if ( obj instanceof Date ) {
            return S.Date + ":" + obj.getTime();
        } else if ( typeof obj == "string" || typeof obj == "number" || typeof obj == "boolean" ) {
            //@ts-ignore
            if ( Number.isNaN( obj ) ) {
                return S.NaN;
            } else if ( obj === Number.POSITIVE_INFINITY ) {
                return S.Infinity;
            } else if ( obj === Number.NEGATIVE_INFINITY ) {
                return S.MinusInfinity;
            } else {
                return obj;
            }
        } else if ( typeof obj == "function" ) {
            return S.function;
        } else if ( typeof obj == "object" )  {
            if ( this.options.skipUnknownClass && obj.constructor !== Object && obj.constructor !== Array && this.classList[obj.constructor.name] == null ) {
                return S.unknown;
            }

            const id = this.__objectToId.size;

            this.__objectToId.set( obj, id );
            let result;

            if ( Array.isArray( obj ) ) {
                result = [];
                for ( let i = 0; i < obj.length; i++ ) {
                    const convertedObj = this._getSerializableObject( obj[i] );

                    if ( this.options.skipUndefined && convertedObj == S.undefined ) continue;
                    if ( convertedObj != S.function && convertedObj != S.unknown ) {
                        result[i] = convertedObj;
                    }
                }
            } else {
                /** @type {ClassDefOptions} */
                const classOptions = obj.constructor !== Object ? this.classList[obj.constructor.name][1] : null;

                result = !( classOptions && classOptions.dataOnly ) && obj.constructor !== Object ? { __class: obj.constructor.name } : {};
                
                const sortedKey = Object.keys( obj ).sort();

                for ( const k of sortedKey ) {
                    // console.assert( k != "entityManager" );
                    if ( !this.options.ignoreList.includes( k ) && !k.startsWith( this.options.ignorePrefix ) ) {
                        if ( classOptions && classOptions.black && classOptions.black.includes( k ) ) continue;
                        if ( classOptions && classOptions.white && !classOptions.white.includes( k ) ) {
                            continue;
                        }
                        const convertedObj = this._getSerializableObject( obj[k] );

                        if ( this.options.skipUndefined && convertedObj == S.undefined ) continue;
                        if ( convertedObj != S.function && convertedObj != S.unknown ) {
                            result[k] = convertedObj;
                        }
                    }
                }
            }
            this.__idToObject[id] = result;
            //@ts-ignore
            result.__refId = id;

            return result;
        }
        throw new Error( `알 수 없는 타입 발견 ${obj}` );
    }

    getSerializableObject( obj ) {
        this.__objectToId = new Map();
        this.__idToObject = {};
        this.__refCount = {};

        const r = this._getSerializableObject( obj );

        // 리퍼런스 정리

        for ( const id in this.__idToObject ) {
            if ( this.__refCount[id] == null ) {
                delete this.__idToObject[id].__refId;
            }
        }
        delete this.__objectToId;
        delete this.__idToObject;
        delete this.__refCount;
        
        return r;
    }

    /**
     *
     *
     * @param {object} obj
     * @returns {string}
     * @memberof Serializer
     */
    stringify( obj ) {
        return JSON.stringify( this.getSerializableObject( obj ) );
    }

    /**
     * 직렬화된 개체를 복구한다.
     * 
     *
     * @param {string|object} s - 문자열 혹은 직렬화 처리된 개체
     * @param {object=} parseOptions
     * @returns {object}
     * @memberof Serializer
     */
    parse( s , parseOptions ) {
        /** @type {Serializer} */
        const self = this;
        const receiver = function ( k, v ) {
            if ( v == null ) {
                return v;
            } else if ( typeof v == "object" ) {
                if ( Array.isArray( v ) || v._$$class == null ) {
                    return v;
                } else {
                    console.assert( !self.__objectToId.has( v ) );

                    let newObj;
                    
                    console.assert( self.classList[v._$$class] );
                    const [classObj, classDefOptions] = self.classList[v._$$class];

                    if ( classDefOptions == null ) {
                        console.assert( classObj.length == 0,`${v._$$class}의 생성자의 인수는 ${classObj.length}인데 인수 없이 생성을 시도하고 있다. construct 옵션이 필요함` );
                        newObj = new classObj();
                        Object.assign( newObj, v );
                    } else {
                        if ( classDefOptions.construct ) {
                            newObj = classDefOptions.construct.call( self, v, parseOptions );
                        
                            if ( classDefOptions.fill !== false ) {
                                copyObject( newObj, v,classDefOptions.keep );
                            }
                        } else {
                            copyObject( newObj, v, classDefOptions.keep );
                        }
                    }
                    const id = v.__refId;

                    if ( id != null ) {
                        self.__objectToId.set( v, id );
                        self.__idToObject[id] = newObj;
                    
                        delete newObj.__refId;
                    }

                    delete newObj._$$class;

                    return newObj;
                }
            } else if ( typeof v == "string" ) {
                if ( Object.values( S ).includes( v.substr( 0, 5 ) ) ) {
                    // 내부타입 발견
                    const type = v.substr( 0, 5 );

                    if ( type == S.NaN ) return Number.NaN;
                    else if ( type == S.Infinity ) return Number.POSITIVE_INFINITY;
                    else if ( type == S.MinusInfinity ) return Number.NEGATIVE_INFINITY;
                    else if ( type == S.RegExp ) return new RegExp( v.substr( 6 ) );
                    else if ( type == S.Date ) return new Date( v.substr( 6 ) );
                    else if ( type == S.Reference ) {
                        const id = v.substr( 6 );

                        if ( self.__idToObject[id] ) return self.__idToObject[id];

                        throw new Error( "리퍼런스 개체가 만들어지기 전에 리퍼런스를 연결하려고 함" );
                    } else {
                        throw new Error( `parse 할 수 없는 개체 ${v}` );
                    }
                } else {
                    return v;
                }
            } else {
                return v;
            }
        };

        this.__objectToId = new Map();
        this.__idToObject = {};
        console.log( s );
        
        let r;

        if ( typeof s == "object" ) {
            const parseObject = function ( o ) {
                if ( o == null ) {
                    return o;
                } else if ( typeof o == "object" ) {
                    const r = Array.isArray( o ) ? [] : {};

                    for ( const k in o ) {
                        r[k] = receiver.call( r, k, parseObject( o[k] ) );
                    }

                    return r;
                } else {
                    return o;
                }
            };

            r = parseObject( s );
        } else if ( typeof s == "string" ) {
            r = JSON.parse( s, receiver );
        }

        delete this.__idToObject;
        delete this.__objectToId;

        console.log( r );

        return r;
    }
}




/***/ }),

/***/ "./engine/src/Shader.js":
/*!******************************!*\
  !*** ./engine/src/Shader.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Shader": () => (/* binding */ Shader)
/* harmony export */ });
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _TextureBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TextureBase */ "./engine/src/TextureBase.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");






class Shader {
    /**
     *Creates an instance of Shader.
     * @param {string} vertexSrc
     * @param {string} fragmentSrc
     * @param {TextureBase[]=} textures
     * @param {object=} constants
     * @memberof Shader
     */
    constructor( vertexSrc, fragmentSrc, textures, constants ) {
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_1__.Asset( "<Shader:*>",_Asset__WEBPACK_IMPORTED_MODULE_1__.Asset.AssetTypes.Shader );
        this.textures = textures != null ? textures : {};
        this.constants = constants != null ? constants : {};
        this.dirty = false;
        this.asset.load( { vertexSrc: vertexSrc,fragmentSrc: fragmentSrc,textures: this._getTextureIds(),constants: this.constants } );
    }

    _getTextureIds() {
        const textureIds = {};

        for ( let name in this.textures ) {
            textureIds[name] = this.textures[name].asset.id;
        }
        return textureIds;
    }

    _update() {
        this.dirty = true;
    }

    forceUpdate() {
        if ( this.dirty ) {
            this.asset.update( { textures: this._getTextureIds(),constants: this.constants } );
            this.dirty = false;
        }
    }

    release() {
        this.asset.release();
    }

    setConstant( name, value ) {
        this.constants[name] = value;
        this._update();

        return this;
    }

    setConstants( constants ) {
        Object.assign( this.constants,constants );
        this._update();

        return this;
    }

    /**
     * 셰이더에 텍스쳐를 바인딩한다
     * name을 지정하면 셰이더안에 nameSampler로 읽을 수 있다.
     * Sampler가 붙는 것에 주의할 것
     *
     * @param {string} name
     * @param {TextureBase} texture
     * @returns {Shader}
     * @memberof Shader
     */
    setTexture( name, texture ) {
        this.textures[name] = texture;
        this._update();

        return this;
    }

    /**
     *
     *
     * @returns {Shader} 
     * @memberof Shader
     */
    clone() {
        const newShader = { textures: {},constants: {} };

        newShader.asset = new _Asset__WEBPACK_IMPORTED_MODULE_1__.Asset( "<Shader:*>",_Asset__WEBPACK_IMPORTED_MODULE_1__.Asset.AssetTypes.Shader );
        Object.assign( newShader.textures,this.textures );
        Object.assign( newShader.constants,this.constants );
        Object.setPrototypeOf( newShader,Shader.prototype );
        newShader.asset.load( { copyFrom: this.asset.id, textures: newShader._getTextureIds(),constants: newShader.constants } );
        //@ts-ignore
        return newShader;
    }
}
Shader.lastId = 0;


/***/ }),

/***/ "./engine/src/Shape.js":
/*!*****************************!*\
  !*** ./engine/src/Shape.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Shape": () => (/* binding */ Shape)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");




// gideros와 완전히 호환은 안됨. 
// 대충 만든 다음에 API를 바꿀 것


class Shape extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( texture ) {
        super();
        this._$$spriteType = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.SpriteTypes.SHAPE;
        this._$$updateCode = _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
        this.beginPath();
        this.setLineStyle( 0,0x000000,0 );
        this.setFillStyle( Shape.SOLID,0x000000,0 );
    }

    get currentSubPathPoints() {
        return this.subPaths[this.subPaths.length - 1];
    }

    setLineStyle( width, color, alpha ) {
        this.lineWidth = width;
        this.lineColor = _Utils__WEBPACK_IMPORTED_MODULE_1__.Utils.hex2rgba( color,alpha );
    }

    setFillStyle( type, ...args ) {
        if ( type == Shape.SOLID ) {
            const [color, alpha] = args;

            this.fillColor = _Utils__WEBPACK_IMPORTED_MODULE_1__.Utils.hex2rgba( color,alpha );
        }
    }

    beginPath( winding ) {
        this.startX = 0;
        this.startY = 0;
        this.lastX = 0;
        this.lastY = 0;
        this.subPaths = [[]];
    }

    clear() {
        this.subPaths = [];
    }

    moveTo( x,y ) {
        this.endPath();
        if ( this.currentSubPathPoints.length == 0 ) {
            this.startX = x;
            this.startY = y;
        }
        this.currentSubPathPoints.push( x,y );
        this.lastX = x;
        this.lastY = y;
        this._$$localBounds.extendPoint( x,y );
    }

    lineTo( x,y ) {
        if ( this.currentSubPathPoints.length == 0 ) return this.moveTo( x,y );
        this.currentSubPathPoints.push( x, y );
        this.lastX = x;
        this.lastY = y;
        this._$$localBounds.extendPoint( x,y );
    }

    endPath() {
    }

    closePath() {
        if ( this.currentSubPathPoints.length > 0 ) {
            this.currentSubPathPoints.push( this.startX,this.startY );
            this.subPaths.push( [] );
        }
        this._$$updateCode |= _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.UpdateCodes.UPDATE_EXTRA;
    }


    makeBox( x, y, w, h, c, a ) {
        this.beginPath();
        this.setFillStyle( Shape.SOLID, c, a );
        this.moveTo( x,y );
        this.lineTo( x + w,y );
        this.lineTo( x + w,y + h );
        this.lineTo( x,y + h );
        this.closePath();
    }

    static makeBox( x, y, w, h, c, a ) {
        const sh = new Shape();

        sh.makeBox( x, y, w, h, c, a );
        return sh;
    }

    encodeExtraRenderingInfo() {
        const getArray = ()=> {
            const arr = [];

            arr.push( this.subPaths.length - ( this.currentSubPathPoints.length == 0 ? 1 : 0 ) );
            this.subPaths.forEach( path => {
                arr.push( path.length );
                arr.push( ...path );
            } );
            return arr;
        };

        let arr2 = getArray();
        let encodedBuffer = new Float32Array( 9 + arr2.length );

        encodedBuffer[0] = this.lineWidth;
        encodedBuffer.set( this.lineColor,1 );
        encodedBuffer.set( this.fillColor,5 );
        encodedBuffer.set( arr2,9 );

        return [encodedBuffer];
    }
}

Shape.NONE = "none";
Shape.SOLID = "solid";
Shape.TEXTURE = "texture";
Shape.LINEAR_GRADIENT = "linearGradient";
Shape.RADIAL_GRADIENT = "radialGradient";
Shape.NON_ZERO = "noneZero";



/***/ }),

/***/ "./engine/src/Sound.js":
/*!*****************************!*\
  !*** ./engine/src/Sound.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Sound": () => (/* binding */ Sound)
/* harmony export */ });
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");







class Sound extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher {
    constructor( name ) {
        super();
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_1__.Asset( name,_Asset__WEBPACK_IMPORTED_MODULE_1__.Asset.AssetTypes.Sound );
        this.asset.load();
        this.playing = false;
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @param {boolean} [isOnce=false]
     * @returns {Sound}
     * @memberof Sound
     */
    addEventListener( eventName, func, context = null, isOnce = false ) {
        if ( eventName == _Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED ) {
            this.asset.addEventListener( eventName, this.dispatchEvent.bind( this,_Event__WEBPACK_IMPORTED_MODULE_2__.Event.LOADED ), null, isOnce );
        }
        //@ts-ignore
        return super.addEventListener( eventName, func, context, isOnce );
    }

    play( startTime,looping,paused ) {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound", method: "play",args: [this.asset.id, startTime,looping,paused] } );
        this.playing = true;
    }

    setVolume( v ) {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "setVolume",args: [this.asset.id, v] } );
    }

    setPitch( v ) {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "setPitch",args: [this.asset.id, v] } );
    }

    isPlaying() {
        return this.playing;
    }

    setPaused( v ) {
        if ( v ) {
            _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "setPaused",args: [this.asset.id, v] } );
        } else {
            this.play();
        }
        this.playing = !v;
    }

    setPosition( v ) {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "setPosition",args: [this.asset.id, v] } );
    }

    stop() {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "stop",args: [this.asset.id] } );
        this.playing = false;
    }

    getLength() {
        throw new Error( "Not implemented" );
    }

    static playSound( name ) {
        return ( new Sound( name ) ).play();
    }

    /**
     * 같은 key를 사용히면 항상 하나의 사운드만 나오게 한다.
     * 만약 같은 key인데 name이 다를 경우 이전 사운드는 중지시키고 새로 연주
     *
     * @static
     * @param {*} name
     * @param {*} vol
     * @param {*} loop
     * @param {*} [key=name]
     * @memberof Sound
     */
    static playSingleSound( name,vol,loop,key = name ) {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "playSingleSound",args: [name,vol,loop,key] } );
    }

    static stopAllSingleSound() {
        _Application__WEBPACK_IMPORTED_MODULE_0__.application.postMessageToRender( { msg: "addCommand",class: "Sound",method: "stopAllSingleSound",args: [] } );
    }
}




/***/ }),

/***/ "./engine/src/Spine.js":
/*!*****************************!*\
  !*** ./engine/src/Spine.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Spine": () => (/* binding */ Spine)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _TextField__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TextField */ "./engine/src/TextField.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _Storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Storage */ "./engine/src/Storage.js");

// import {SpinePixi from "./ext/spine-pixi";






//pixi-spine docs
//https://github.com/pixijs/pixi-spine/blob/next/examples/index.md

class Spine extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( spineFilename ) {
        super();
 
        this.loader = new SpinePixi.AssetManager();
        this.loader.loadText( spineFilename + ".json" );
        // this.loader.loadText( spineFilename + ".atlas" );
        // this.loader.loadTexture( spineFilename + ".png" );
        // this.loader.loadTexture( spineFilename + "2.png" );
        // this.loader.loadTexture( spineFilename + "3.png" );
        // this.loader.loadTexture( spineFilename + "4.png" );
        this.loader.loadText( "Spines/Spine_Player_3.atlas" );
        this.loader.loadTexture( "Spines/Spine_Player_3.png" );

        // Storage.loadFile( spineFilename ).on( Event.COMPLETE,( e )=>{

        //     this.spine = new SpinePixi( e.data );
        //     this.on( Event.READY,()=>{

        //         this.onStage( Event.ENTER_FRAME,()=>{

        //             this.spine.update();
                
        //         } );
            
        //     } );
        
        // } );
        this.spineFilename = spineFilename;
        requestAnimationFrame( ()=>this.load() );
    }

    load() {
        if ( this.loader.isLoadingComplete() ) {
            console.log( "완료" );
            let data = this.loadSkeleton( this.spineFilename );

            this.skeleton = data.skeleton;
            this.state = data.state;
            this.bounds = data.bounds;
            this.skeletonData = data;
            // this.onStage( Event.ENTER_FRAME,()=>{

            //     s.update( 1000 / 60 );
            // } );
            this.renderer = new SpinePixi.SkeletonRenderer( this.__pixi );
            this.onStage( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.ENTER_FRAME,()=>{
                this.state.update( 1 / 60 );
                this.state.apply( this.skeleton );
                this.renderer.draw( this.skeleton );
            } );

            this.__pixi.emit( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.READY );
        } else {
            requestAnimationFrame( ()=>this.load() );
        }
    }

    loadSkeleton( name ) {
        let basePath = name.substr( 0,name.lastIndexOf( "/" ) );
        //        let atlas = new SpinePixi.core.TextureAtlas( this.loader.get( name.replace( "-pro", "" ).replace( "-ess", "" ) + ".atlas" ), ( path ) => {
        let atlas = new SpinePixi.core.TextureAtlas( this.loader.get( "Spines/Spine_Player_3.atlas" ), ( path ) => {
            return this.loader.get( basePath + "/" + path );
        } );

        // Create a AtlasAttachmentLoader, which is specific to the WebGL backend.
        let atlasLoader = new SpinePixi.core.AtlasAttachmentLoader( atlas );
        // Create a SkeletonJson instance for parsing the .json file.
        let skeletonJson = new SpinePixi.core.SkeletonJson( atlasLoader );

        let skeletonData = skeletonJson.readSkeletonData( this.loader.get( name + ".json" ) );
        let skeleton = new SpinePixi.core.Skeleton( skeletonData );

        skeleton.flipY = true;
        let bounds = this.calculateBounds( skeleton );

        skeleton.setSkinByName( "runner" );
        // Create an AnimationState, and set the initial animation in looping mode.
        var animationState = new SpinePixi.core.AnimationState( new SpinePixi.core.AnimationStateData( skeleton.data ) );

        animationState.setAnimation( 0, "standing", true );

        //@ts-ignore
        animationState.addListener( {
            event: function( trackIndex, event ) {
                // console.log("Event on track " + trackIndex + ": " + JSON.stringify(event));
            },
            complete: function( trackIndex, loopCount ) {
                // console.log("Animation on track " + trackIndex + " completed, loop count: " + loopCount);
            },
            start: function( trackIndex ) {
                // console.log("Animation on track " + trackIndex + " started");
            },
            end: function( trackIndex ) {
                // console.log("Animation on track " + trackIndex + " ended");
            }
        } );

        // Pack everything up and return to caller.
        return { skeleton: skeleton, state: animationState, bounds: bounds };
    }

    calculateBounds( skeleton ) {
        var data = skeleton.data;

        skeleton.setToSetupPose();
        skeleton.updateWorldTransform();
        var offset = new SpinePixi.core.Vector2();
        var size = new SpinePixi.core.Vector2();

        skeleton.getBounds( offset, size, [] );

        return { offset: offset, size: size };
    }
}

// Spine은 자체적으로 차일드를 생성하기 때문에 차일드 수가 꼬일 수 있음
// 같은 처리를 하고 있는 TextField의 것을 쓰자
Spine.prototype.getChildAt = _TextField__WEBPACK_IMPORTED_MODULE_1__.TextField.prototype.getChildAt;
Spine.prototype.getNumChildren = _TextField__WEBPACK_IMPORTED_MODULE_1__.TextField.prototype.getNumChildren;
Spine.prototype.sortChildren = _TextField__WEBPACK_IMPORTED_MODULE_1__.TextField.prototype.sortChildren;
Spine.prototype.refreshColor = _TextField__WEBPACK_IMPORTED_MODULE_1__.TextField.prototype.refreshColor;



/***/ }),

/***/ "./engine/src/Sprite.js":
/*!******************************!*\
  !*** ./engine/src/Sprite.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Sprite": () => (/* binding */ Sprite)
/* harmony export */ });
/* harmony import */ var twgl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.module.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _ComponentHolder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ComponentHolder */ "./engine/src/ComponentHolder.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");
/* harmony import */ var _easing__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./easing */ "./engine/src/easing.js");
/* harmony import */ var _Transform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Transform */ "./engine/src/Transform.js");
/* harmony import */ var _Shader__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Shader */ "./engine/src/Shader.js");













class Sprite extends _ComponentHolder__WEBPACK_IMPORTED_MODULE_3__.ComponentHolder {
    constructor() {
        super();
        this._$$id = Sprite.lastId++;
        Sprite.finalizationRegistry.register( this,{ thisObjId: this._$$id } );
        this._$$spriteType = Sprite.SpriteTypes.SPRITE;
        this._$$updateCode = Sprite.UpdateCodes.UPDATE_NOTHING;
        this.transform = new _Transform__WEBPACK_IMPORTED_MODULE_9__.Transform();
        this.transform.invalidateCallback = this.onInvalidateTransform.bind( this );
        this._$$localBounds = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( 0,0,0,0 );
        this._$$boundsDirty = true;
        this._$$bounds = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( 0,0,0,0 );
        /** @type {Rect} */
        this.customBounds = undefined;
        // this.boundsDirty
        this.useCustomLocalBounds = false;
        this.worldMatrix = undefined;
        this.colorOverride = [1,1,1,1];
        this.colorAdd = [0,0,0,0];
        this.clipRegion = null;
        /** @type {Sprite[]} */
        this.children = [];
        this.parent = null;
        this._$$visible = true;
        this.customPrev;

        /** @type {Asset} */
        this.asset;

        this.cacheBitmapMode = Sprite.CacheBitmapModes.NO_CACHE;
        this.cacheBitmapDstId = 0;
        /** @type {Asset} */
        this.cacheBitmapAsset;
        this.blendMode = Sprite.BlendModes.NORMAL;
        this.motionBlur = true;

        /** @type {Shader} */
        this.shader;
    }

    static finalizeHandler( obj ) {
        // GC에 의해 수거되었으면 릴리즈를 보낸다.
        _Application__WEBPACK_IMPORTED_MODULE_7__.application.postMessageToRender( { msg: "addCommand",class: "Sprite", method: "release",args: [obj.thisObjId] } );
    }


    release() {
        // 강제로 삭제
        if ( this.asset != null )  {
            this.asset.release();
        }
        // 스프라이트 지우라는 메시지 보내야함
        for ( let key in this ) {
            delete this[key];
        }
        _Application__WEBPACK_IMPORTED_MODULE_7__.application.postMessageToRender( { msg: "addCommand",executionTiming: 2,class: "Sprite",method: "release",args: [this._$$id] } );
    }

    /**
     * 스프라이트의 복사본을 만든다
     * 얕은 복사를 하기 때문에 스프라이트를 상속한 개체인 경우 값이 아니라 참조가 복사되는 것에 주의 할 것
     *
     * @returns {Sprite} 
     * @memberof Sprite
     */
    clone() {
        /** @type {Sprite} */
        const newObj = {};

        Object.assign( newObj,this );
        Object.setPrototypeOf( newObj,Object.getPrototypeOf( this ) );
        newObj._$$id = Sprite.lastId++;
        // 개체를 공유하게 되기 때문에 clone을 다시 해주어야 한다
        newObj.transform = newObj.transform.clone();
        newObj.transform.invalidateCallback = newObj.onInvalidateTransform.bind( newObj );
        newObj._$$localBounds = newObj._$$localBounds.clone();
        newObj._$$bounds = newObj._$$bounds.clone();
        newObj.worldMatrix = ( newObj.worldMatrix != null ) ? twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.copy( newObj.worldMatrix ) : null;
        newObj.colorOverride = [...newObj.colorOverride];
        newObj.colorAdd = [...newObj.colorAdd];
        newObj.clipRegion = ( newObj.clipRegion != null ) ? newObj.clipRegion.clone() : null;
        newObj.children = [...newObj.children];
        newObj.customPrev = ( newObj.customPrev != null ) ? ( Object.assign( {},newObj.customPrev ) ) : null;
        newObj._$$updateCode |= Sprite.UpdateCodes.UPDATE_EXTRA;
        return newObj;
    }

    onInvalidateTransform() {
        let spr = this;

        do {
            spr._$$boundsDirty = true;
            spr = spr.parent;
        } while ( spr != null );
        return spr;
    }

    getPath( detailInfo ) {
        const path = [];
        let spr = this;

        while ( spr.parent != null ) {
            if ( detailInfo ) {
                path.unshift( spr.parent.children.indexOf( spr ) + ":" + spr.constructor.name );
            } else {
                path.unshift( spr.parent.children.indexOf( spr ) );
            }
            spr = spr.parent;
        }
        //@ts-ignore
        if ( spr.isStage ) {
            return "//" + path.join( "/" );
        } else {
            return "?/" + path.join( "/" );
        }
    }


    /**
     * @returns {Point} 
     * @memberof Sprite
     */
    get position() {
        return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( this.transform.x,this.transform.y );
    }

    /**
     * @param {Point} v
     * @memberof Sprite
     */
    set position( v ) {
        this.transform.x = v.x;
        this.transform.y = v.y;
    }

    setPosition( x,y ) {
        this.transform.x = x;
        this.transform.y = y;
    }

    getPosition() {
        return this.position;
    }


    get x() { return this.transform.x; }

    set x( v ) { this.transform.x = v; }

    getX() { return this.transform.x; }

    setX( v ) { this.transform.x = v; } 

    get y() { return this.transform.y; }

    set y( v ) { this.transform.y = v; }

    getY() { return this.transform.y; }

    setY( v ) { this.transform.y = v; } 

    /**
     * [x,y] 형태로 반환한다.
     *
     * @returns {[number,number]}
     * @memberof Sprite
     */
    get xy() { return [this.x, this.y]; }

    /**
     * [x,y] 형태로만 받는다.
     * 
     * @param {number[]|Point} v
     * @memberof Sprite
     */
    set xy( v ) {
        if ( Array.isArray( v ) ) {
            this.x = v[0];
            this.y = v[1];
        } else {
            //@ts-ignore
            this.x = v.x;
            //@ts-ignore
            this.y = v.y;
        }
    }

    /**
     * @returns {number}
     * @memberof Sprite
     */
    getRotation() { return this.transform.rotation; }

    /**
     * @param {number} v
     * @memberof Sprite
     */
    setRotation( v ) { this.transform.rotation = v; }

    get anchorX() { 
        return this.transform.anchorX / ( this.bounds.width || 1 ); 
    }

    /**
     * @returns {Point}
     * @memberof Sprite
     */
    get anchorPosition() {
        return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( this.transform.anchorX,this.transform.anchorY );
    }

    /**
     * @param {Point} v
     * @memberof Sprite
     */
    set anchorPosition( v ) {
        this.transform.anchorX = v.x;
        this.transform.anchorY = v.y;
    }

    get anchorPositionX() {
        return this.transform.anchorX;
    }

    set anchorPositionX( v ) {
        this.transform.anchorX = v;
    }

    get anchorPositionY() {
        return this.transform.anchorY;
    }

    set anchorPositionY( v ) {
        this.transform.anchorY = v;
    }


    set anchorX( v ) { 
        this.transform.anchorX = v * this.bounds.width; 
    }

    get anchorY() { 
        return this.transform.anchorY / ( this.bounds.height || 1 ); 
    }

    set anchorY( v ) { 
        this.transform.anchorY = v * this.bounds.height; 
    }

    getAnchorPoint() {
        return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( this.anchorX,this.anchorY );
    }

    setAnchorPoint( ax,ay ) {
        this.anchorX = ax;
        this.anchorY = ay;
    }

    get scaleX() { return this.transform.scaleX; }

    set scaleX( v ) { this.transform.scaleX = v; }

    getScaleX() { return this.transform.scaleX; }

    setScaleX( v ) { this.transform.scaleX = v; }
    

    get scaleY() { return this.transform.scaleY; }

    set scaleY( v ) { this.transform.scaleY = v; }

    getScaleY() { return this.transform.scaleY; }

    setScaleY( v ) { this.transform.scaleY = v; }



    /**
     * @returns {Point}
     * @memberof Sprite
     */
    get scale() { return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( this.transform.scaleX,this.transform.scaleY ); }

    /**
     * @param {number|Point} v
     *
     * @memberof Sprite
     */

    /**
     * @param {[number,number]|Float32Array|number|Point} v
     * @memberof Sprite
     */
    set scale( v ) {
        if ( typeof v === "number" ) {
            // 스케일은 동시에 넣을 수 있으면 편리
            this.transform.scaleX = v;
            this.transform.scaleY = v;
        } else {
            const p = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( v );

            this.transform.scaleX = p.x;
            this.transform.scaleY = p.y;
        }
    } 

    getScale() {
        return this.scale;
    }

    setScale( x,y ) {
        this.scaleX = x;
        this.scaleY = y == null ? x : y;
    }

    get rotation() {
        return this.transform.rotation;
    }

    set rotation( v ) {
        this.transform.rotation = v;
    }

    /**
     * 자식 스프라이트를 제외하고 순수하게 자기 자신의 크기
     *
     * @readonly
     * @memberof Sprite
     */
    get localBounds() {
        const r = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( this._$$localBounds );

        r.x -= this.transform.anchorX;
        r.y -= this.transform.anchorY;
        return r;
    }

    /**
     * 자신과 자식 모두를 포함한 경계 사각형을 구한다.
     *
     * @readonly
     * @memberof Sprite
     */
    get bounds() {
        if ( this.customBounds ) {
            return this.customBounds;
        }
        if ( !this._$$boundsDirty ) {
            return this._$$bounds;
        }
        // 여기 느리다. 나중에 최적화 할 것
        // 하위 개체가 추가/삭제되거나 이동하면 다시 계산하도록 해야 한다.
        // 다시 계산이 필요한 경우 상위로 전파시켜줘야할 것 같음
        let matFrom = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.identity();
        let bounds = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect();
        let boundsPoints = [];

        const search = ( spr,mat )=>{
            if ( !spr._$$boundsDirty ) {
                // 자식 스프라이트가 바뀐게 없으면 보관된 점들을 사용한다.
                boundsPoints.push( ... spr._$$boundsPoints );
            } else {
                if ( spr.spriteType != 0 ) {
                    const [x1,y1,x2,y2,x3,y3,x4,y4] = spr.localBounds.getCornerPoints();
                    let x,y;

                    [x,y] = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( mat,[x1,y1,0] );
                    boundsPoints.push( x,y );
                    [x,y] = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( mat,[x2,y2,0] );
                    boundsPoints.push( x,y );
                    [x,y] = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( mat,[x3,y3,0] );
                    boundsPoints.push( x,y );
                    [x,y] = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( mat,[x4,y4,0] );
                    boundsPoints.push( x,y );
                }
                for ( let child of spr.children ) {
                    if ( child.visible ) {
                        search( child,twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.multiply( mat,child.transform.matrix ) );
                    }
                }
            }
        };

        search( this,matFrom );
        for ( let i = 0; i < boundsPoints.length; i += 2 ) {
            bounds.extendPoint( boundsPoints[i],boundsPoints[i + 1] );
        }

        this._$$bounds = bounds;
        this._$$boundsDirty = false;
        this._$$boundsPoints = boundsPoints;
        return bounds;      
    }

    getBounds() {
        return this.bounds;
    }

    updateLocalBounds() {

    }    

    get visible() {
        return this._$$visible;
    }

    set visible( v ) {
        if ( !this._$$visible && v ) {
            this._updateChildren( Sprite.UpdateCodes.UPDATE_CLEAR_PREV ); 
        }
        this._$$visible = v;
    }

    isVisible() {
        return this.visible;
    }

    setVisible( v ) {
        this.visible = v;
    }

    isVisibleDeeply() {
        let spr;

        for ( spr = this; spr != null && !spr.isStage; spr = spr.parent ) {
            if ( !spr.visible ) return false;
        }
        if ( spr == null ) return false;

        return true;
    }

    get redMultiplier() { return this.colorOverride[0]; }

    set redMultiplier( v ) { this.colorOverride[0] = v; }

    get greenMultiplier() { return this.colorOverride[1]; }

    set greenMultiplier( v ) { this.colorOverride[1] = v; }

    get blueMultiplier() { return this.colorOverride[2]; }

    set blueMultiplier( v ) { this.colorOverride[2] = v; }

    get alpha() {
        return this.colorOverride[3];
    }

    set alpha( v ) {
        this.colorOverride[3] = v;
    }

    setAlpha( v ) {
        this.colorOverride[3] = v;
    }

    getAlpha( v ) {
        return this.colorOverride[3];
    }

    setColorMultiplier( r,g,b,a ) {
        this.colorOverride[0] = r;
        this.colorOverride[1] = g;
        this.colorOverride[2] = b;
        if ( a != null ) this.colorOverride[3] = a; 
    }

    setOverrideColor( c,a ) {
        const arr = _Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.hex2rgba( c,a );

        this.colorOverride[0] = arr[0];
        this.colorOverride[1] = arr[1];
        this.colorOverride[2] = arr[2];
        if ( a != null ) this.colorOverride[3] = arr[3];
    }

    get width() {
        return this.bounds.width;
    }

    set width( v ) {
        this.customBounds = this.customBounds || this.bounds;
        this.customBounds.width = v;
    }

    get height() {
        return this.bounds.height;
    }

    set height( v ) {
        this.customBounds = this.customBounds || this.bounds;
        this.customBounds.height = v;
    }

    setCustomBounds( x,y,w,h ) {
        this.customBounds.x = x;
        this.customBounds.y = y;
        this.customBounds.width = w;
        this.customBounds.height = h;
    }


    getWidth() {
        return this.width;
    }

    getHeight() {
        return this.height;
    }

    localToGlobal( x,y ) {
        let matArr = [];

        for ( let spr = this; ; spr = spr.parent ) {
            matArr.unshift( spr.transform.matrix );
            if ( spr.parent == null ) break;
        }
        let mat = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.identity();

        matArr.forEach( v=>{
            twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.multiply( mat,v,mat );
        } );
        let p = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( mat,[x,y,0] );

        return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( p[0],p[1] );
    }

    globalToLocal( x,y ) {
        //@ts-ignore
        if ( this.parent == null || this.isStage ) {
            return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( x,y );
        }
        // 지난 프레임에 구해놓은 worldMatrix를 사용하면 빠르게 할 수 있다.
        // 지금은 그냥 둔다
        let matArr = [];

        for ( let spr = this; ; spr = spr.parent ) {
            matArr.push( twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.inverse( spr.transform.matrix ) );
            if ( spr.parent == null ) break;
        }
        let mat = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.identity();

        matArr.forEach( v=>{
            twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.multiply( mat,v,mat );
        } );
        let p = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( mat,[x,y,0] );

        return new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( p[0],p[1] );
    }

    setBlendMode( v ) {
        this.blendMode = v;        
    }


    //#region addChild & removeChild

    _updateChildren( updateCodeToON ) {
        for ( const s of this.searchChildren() ) {
            s.updateCode |= updateCodeToON;
        }
    }

    /**
     *
     *
     * @param {Sprite} spr
     * @param {number=} i
     * @memberof Sprite
     */
    addChildAt( spr, i ) {
        if ( i == null ) {
            i = this.children.length;
        }
        const oldIndex = this.children.indexOf( spr );
            
        this.children.splice( i,0, spr );
        if ( oldIndex >= 0 ) {
            // 원래 있던 경우 위치 이동
            if ( oldIndex > i ) {
                this.children.splice( oldIndex + 1,1 );
            } else if ( oldIndex < i ) {
                this.children.splice( oldIndex,1 );
            }
        }
        spr.parent = this;
        if ( this.isOnStage() ) {
            spr._updateChildren( Sprite.UpdateCodes.UPDATE_CLEAR_PREV ); 
            spr.dispatchEventWithChildren( new _Event__WEBPACK_IMPORTED_MODULE_2__.Event( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.ADDED_TO_STAGE ) );
        }
        this.onInvalidateTransform();
    }


    /**
     *
     *
     * @param {...Sprite} sprs
     * @memberof Sprite
     */
    addChild( ...sprs ) {
        for ( const spr of sprs ) {
            this.addChildAt( spr );
        }
    }


    removeChildAt( i ) {
        const child = this.children[i];

        child.parent = null;
        this.children.splice( i,1 );
        if ( this.isOnStage() ) {
            child.dispatchEventWithChildren( new _Event__WEBPACK_IMPORTED_MODULE_2__.Event( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.REMOVED_FROM_STAGE ) );
        }
        this.onInvalidateTransform();
    }

    /**
     *
     *
     * @param {Sprite} spr
     * @memberof Sprite
     */
    removeChild( spr ) {
        let index = this.children.indexOf( spr );

        if ( index != -1 ) this.removeChildAt( index );
    }

    removeFromParent() {
        if ( this.parent ) {
            this.parent.removeChild( this );
        }
    }

    clearChildren() {
        for ( let i = this.children.length - 1; i >= 0; i-- ) {
            this.removeChildAt( i );
        }
    }

    getChildIndex( spr ) {
        return this.children.indexOf( spr );
    }

    getChildAt( i ) {
        return this.children[i];
    }

    //#endregion

    getStage() {
        let spr;

        for ( spr = this; spr != null && !spr.isStage; spr = spr.parent );
        return spr;
    }

    isOnStage() {
        return this.getStage() != null;
    }

    /**
     *
     *
     * @param {Event|string} eventOrName
     * @param {object=} extendedValues
     * @memberof Sprite
     */
    dispatchEventWithChildren( eventOrName,extendedValues ) {
        let event;

        if ( typeof eventOrName == "string" ) {
            event = new _Event__WEBPACK_IMPORTED_MODULE_2__.Event( eventOrName );
        } else {
            event = eventOrName;
        }
        Object.assign( event,extendedValues );
        // const inputOnly = Event.isInputEvent( event.name );

        for ( const spr of this.searchChildren( true ) ) {
            if ( event.stopped ) return;
            spr.dispatchEvent( event );
        }
    }

    /**
     * 
     * @param {boolean} [bottomUp=false]
     */
    *searchChildren( bottomUp ) {
        yield* Sprite.searchChildren( this, bottomUp );
    }

    /**
     *
     *
     * @static
     * @param {Sprite} startObj
     * @param {boolean} [bottomUp=false]
     * @memberof Sprite
     */
    static *searchChildren( startObj, bottomUp = false ) {
        const searchRecursive = function* ( cur ) {
            if ( bottomUp ) {
                if ( cur.children.length > 0 ) {
                    for ( let i = cur.children.length - 1; i >= 0; i-- ) {
                        const child = cur.children[i];

                        if ( child ) yield* searchRecursive( child );
                    }
                }
                yield cur;
            } else {
                yield cur;
                if ( cur.children.length > 0 ) {
                    for ( let i = 0; i < cur.children.length; i++ ) {
                        const child = cur.children[i];

                        if ( child ) yield* searchRecursive( child );
                    }
                }
            }
        };

        yield* searchRecursive( startObj );
    }

    findChildById( id ) {
        for ( let spr of this.searchChildren( ) ) {
            if ( spr.id == id ) return spr;
        }
    }


    getNumChildren() {
        return this.children.length;
    }

    /**
     *
     *
     * @returns {Sprite}
     * @memberof Sprite
     */
    getParent() {
        return this.parent;
    }

    /**
     *
     *
     * @param {Sprite} spr
     * @returns {boolean}
     * @memberof Sprite
     */
    contains( spr ) {
        return this.children.includes( spr );
    }

    hitTestPoint( x, y ) {
        const p = this.globalToLocal( x,y );
        const rect = this.bounds;

        return rect.contains( p.x,p.y );
    }

    setClip( x,y,width,height ) {
        this.clipRegion = new _Types__WEBPACK_IMPORTED_MODULE_4__.Rect( x,y,width,height );
    }

    setShader( shader ) {
        this.shader = shader;
    }

    getShader() {
        return this.shader;
    }


    //#region setInteractive() 
    
    /**
     * @callback AnimationHandler
     * @param {{x:number,y:number,button:*,target:Sprite}} event
     * @param {{downPointerPosition:Point,downThisPosition:Point,downOffset:Point,downButton:*,pushed:boolean,clickCancled:boolean,state:string,moveDeltaPosition:Point,moveThisPosition:Point}} info
     * @return {Tween}
     */
    /**
     * @callback InteractiveHandler
     * @param {{x:number,y:number,button:*,target:Sprite}} event
     * @param {{downPointerPosition:Point,downThisPosition:Point,downOffset:Point,downButton:*,pushed:boolean,clickCancled:boolean,state:string,moveDeltaPosition:Point,moveThisPosition:Point}} info
     */
    /**
     *
     * @param {object} options
     * @param {AnimationHandler=} options.pressAnimation - 눌러지는 애니메이션을 틀기. tween를 리턴해야한다.
     * @param {AnimationHandler=} options.releaseAnimation - 올라오는 애니메이션을 틀기. tween을 리턴해야한다.
     * @param {InteractiveHandler=} options.down - 영역안에서 down한 경우
     * @param {InteractiveHandler=} options.move - down 후 move할 경우
     * @param {InteractiveHandler=} options.up - down 후 up할 경우
     * @param {InteractiveHandler=} options.click - down에서 멀리 떨어지지 않은 위치에서 up
     * @param {InteractiveHandler=} options.press - down 후 up할 때 영역 안
     * @param {boolean=} options.preventRelease - click이나 press에서 releaseAnimation하지 않도록
     * @param {boolean=} options.disableBasicAnimation - 기본 애니메이션 끄기
     * @param {number=} options.pressOffsetY - 기본 pressAnimation에서 얼마나 아래로 내려가는가
     * @param {number=} options.clickRadius - click으로 판정하는 반지름
     * @param {boolean=} options.dragX - 가로축으로 드래그
     * @param {boolean=} options.dragY - 세로축으로 드래그
     * @param {number=} options.dragReleaseDistance - 이 거리를 벗어나면 drag가 취소된다.
     * @param {boolean=} options.allowDragOutside - 화면 밖으로 못 끌고 나가도록 한다
     * @memberof Sprite
     */
    setInteractive( options = null ) {
        this.__interactive = this.__interactive || {};
        const _i = this.__interactive;
        const clickCancelDistance = ( options && options.clickRadius != null ) ? options.clickRadius : 10;
        const defaultPressOffsetY = 3;// 실제 픽셀기준으로 해야함
        const pointerDown = ( e ) => {
            if ( this.hitTestPoint( e.x, e.y ) ) {
                _i.downPointerPosition = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( e.x, e.y );
                _i.downThisPosition = this.getPosition().clone();
                _i.downOffset = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( e.x - this.x, e.y - this.y );
                _i.downButton = e.button;
                _i.pushed = true;
                _i.clickCanceled = false;
                _i.state = "down";
                if ( !options.disableBasicAnimation ) {
                    if ( _i.tween ) _i.tween.stop();
                    _i.tween = this.move(
                        _i.downThisPosition.x,
                        _i.downThisPosition.y + ( options.pressOffsetY != null ? options.pressOffsetY : defaultPressOffsetY ),
                        300,
                        _easing__WEBPACK_IMPORTED_MODULE_8__.easing.outBack );
                    e.stopPropagation();
                } else if ( options.pressAnimation ) {
                    if ( _i.tween ) _i.tween.stop();
                    _i.tween = options.pressAnimation.call( this, e, _i );
                    e.stopPropagation();
                }
                if ( options.down != null ) {
                    options.down.call( this, e, _i );
                }
            }
        };
        const pointerMove = ( e ) => {
            if ( _i.state == "down" || _i.state == "move" ) {
                _i.state = "move";
                _i.moveDeltaPosition = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( e.x - _i.downPointerPosition.x , e.y - _i.downPointerPosition.y );
                _i.moveThisPosition = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point(
                    options.dragX ? _i.downThisPosition.x + _i.moveDeltaPosition.x : _i.downThisPosition.x,
                    options.dragY ? _i.downThisPosition.y + _i.moveDeltaPosition.y : _i.downThisPosition.y,
                );
                if ( !options.allowDragOutside ) {
                    _i.moveThisPosition.x = _Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.clamp( _i.moveThisPosition.x, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.left - _i.downOffset.x, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.right - _i.downOffset.x );
                    _i.moveThisPosition.y = _Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.clamp( _i.moveThisPosition.y, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.top - _i.downOffset.y, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.bottom - _i.downOffset.y );
                }
                if ( options.dragX || options.dragY ) {
                    if ( _i.tween ) _i.tween.cancel();
                }
                if ( options.dragX ) this.x = _i.moveThisPosition.x;
                if ( options.dragY ) this.y = _i.moveThisPosition.y;
                if ( _i.clickCanceled == false ) {
                    if ( Math.sqrt( _i.moveDeltaPosition.x ** 2 + _i.moveDeltaPosition.y ** 2 ) > clickCancelDistance ) {
                        _i.clickCanceled = true;
                    }
                }
                e.stopPropagation();
                if ( options.move != null ) {
                    options.move.call( this,e, _i );
                }
                if ( _i.pushed && !this.hitTestPoint( e.x, e.y ) ) {
                    _i.pushed = false;
                    if ( !options.disableBasicAnimation ) {
                        if ( _i.tween ) _i.tween.stop();
                        _i.tween = this.move(
                            _i.moveThisPosition.x,
                            _i.moveThisPosition.y,
                            200,
                            _easing__WEBPACK_IMPORTED_MODULE_8__.easing.outCubic );
                        e.stopPropagation();
                    } else if ( options.releaseAnimation ) {
                        if ( _i.tween ) _i.tween.stop();
                        _i.tween = options.releaseAnimation.call( this, e, _i );
                        e.stopPropagation();
                    }
                } else if ( !_i.pushed && this.hitTestPoint( e.x, e.y ) ) {
                    _i.pushed = true;
                    if ( !options.disableBasicAnimation ) {
                        if ( _i.tween ) _i.tween.stop();
                        _i.tween = this.move(
                            _i.moveThisPosition.x,
                            _i.moveThisPosition.y + ( options.pressOffsetY != null ? options.pressOffsetY : defaultPressOffsetY ),
                            100,
                            _easing__WEBPACK_IMPORTED_MODULE_8__.easing.outCubic );
                        e.stopPropagation();
                    } else if ( options.pressAnimation ) {
                        if ( _i.tween ) _i.tween.stop();
                        _i.tween = options.pressAnimation.call( this, e, _i );
                        e.stopPropagation();
                    }
                }
            }
        };
        const pointerUp = ( e ) => {
            if ( _i.state == "down" || _i.state == "move" ) {
                _i.state = "up";
                _i.moveDeltaPosition = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point( e.x - _i.downPointerPosition.x , e.y - _i.downPointerPosition.y );
                _i.moveThisPosition = new _Types__WEBPACK_IMPORTED_MODULE_4__.Point(
                    options.dragX ? _i.downThisPosition.x + _i.moveDeltaPosition.x : _i.downThisPosition.x,
                    options.dragY ? _i.downThisPosition.y + _i.moveDeltaPosition.y : _i.downThisPosition.y,
                );
                if ( options.dragX ) this.x = _i.moveThisPosition.x;
                if ( options.dragY ) this.y = _i.moveThisPosition.y;
                if ( !options.allowDragOutside ) {
                    _i.moveThisPosition.x = _Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.clamp( _i.moveThisPosition.x, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.left - _i.downOffset.x, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.right - _i.downOffset.x );
                    _i.moveThisPosition.y = _Utils__WEBPACK_IMPORTED_MODULE_5__.Utils.clamp( _i.moveThisPosition.y, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.top - _i.downOffset.y, _Application__WEBPACK_IMPORTED_MODULE_7__.application.logicalRenderBounds.bottom - _i.downOffset.y );
                }
                if ( _i.clickCanceled == false ) {
                    if ( Math.sqrt( _i.moveDeltaPosition.x ** 2 + _i.moveDeltaPosition.y ** 2 ) < clickCancelDistance ) {
                        if ( options.click != null ) options.click.call( this, e, _i );
                    }
                }
                if ( this.hitTestPoint( e.x, e.y ) ) {
                    _i.pushed = true;
                    if ( options.press != null ) options.press.call( this,e, _i );
                }
                if ( !options.preventRelease ) {
                    if ( !options.disableBasicAnimation ) {
                        if ( _i.tween ) _i.tween.stop();
                        _i.tween = this.move(
                            _i.moveThisPosition.x,
                            _i.moveThisPosition.y,
                            300,
                            _easing__WEBPACK_IMPORTED_MODULE_8__.easing.outBounce );
                        e.stopPropagation();
                    } else if ( options.releaseAnimation ) {
                        if ( _i.tween ) _i.tween.stop();
                        _i.tween = options.releaseAnimation.call( this, e, _i );
                        e.stopPropagation();
                    }
                }
                if ( options.up != null ) {
                    options.up.call( this, e, _i );
                }
            }
        };

        if ( options != null ) {
            this.on( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.POINTER_DOWN, pointerDown );
            this.on( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.POINTER_MOVE, pointerMove );
            this.on( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.POINTER_UP, pointerUp );
        } else {
            this.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.POINTER_DOWN, pointerDown );
            this.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.POINTER_MOVE, pointerMove );
            this.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.POINTER_UP, pointerUp );
            delete this.__interactive;
        }
    }

    //#endregion    


    encodeRenderingInfo() {
        // id(1),type(1),updateCode(1),colorOverride(4),colorAdd(4),anchor(2),shaderId(1),matrix(16),clipRegion(4)
        const encodedBuffer = new Float32Array( 38 );

        // encodedBuffer[0] = this.id;
        // encodedBuffer[1] = this.spriteType;
        // encodedBuffer[2] = this.updateCode; 
        // // encodedBuffer.set( this.colorOverride,3 );
        // encodedBuffer[3] = this.colorOverride[0];
        // encodedBuffer[4] = this.colorOverride[1];
        // encodedBuffer[5] = this.colorOverride[2];
        // encodedBuffer[6] = this.colorOverride[3];
        // // encodedBuffer.set( this.colorAdd,7 );
        // encodedBuffer[7] = this.colorAdd[0];
        // encodedBuffer[8] = this.colorAdd[1];
        // encodedBuffer[9] = this.colorAdd[2];
        // encodedBuffer[10] = this.colorAdd[3];
        // encodedBuffer[11] = this.transform.anchorX;
        // encodedBuffer[12] = this.transform.anchorY;

        encodedBuffer.set( [this._$$id,
                            this._$$spriteType,
                            this._$$updateCode,
                            this.colorOverride[0],
                            this.colorOverride[1],
                            this.colorOverride[2],
                            this.colorOverride[3],
                            this.colorAdd[0],
                            this.colorAdd[1],
                            this.colorAdd[2],
                            this.colorAdd[3],
                            this.transform.anchorX,
                            this.transform.anchorY] );

        if ( this.shader != null ) {
            this.shader.forceUpdate();
            encodedBuffer[13] = this.shader.asset.id;
        } else {
            encodedBuffer[13] = 0;
        }
        // for ( let i = 0; i < 16; i++ ) {
        //     encodedBuffer[14 + i] = this.transform.matrix[i]; 
        // }
        // encodedBuffer.set( this.transform.matrix,14 );
        _Types__WEBPACK_IMPORTED_MODULE_4__.TypedArrayHelper.memcpy( encodedBuffer,14,this.transform.matrix,0,16 );

        encodedBuffer.set( ( this.clipRegion != null ) ? this.clipRegion.xywh : [NaN,NaN,NaN,NaN],30 );
        encodedBuffer[34] = this.cacheBitmapAsset != null ? this.cacheBitmapAsset.id : 0;
        encodedBuffer[35] = this.cacheBitmapDstId;
        encodedBuffer[36] = this.blendMode;
        encodedBuffer[37] = +this.motionBlur;

        return encodedBuffer;
    }

    encodeCustomPrev() {
        const encodedBuffer = new Float32Array( 22 );

        encodedBuffer.set( [
            this.customPrev.colorOverride[0],
            this.customPrev.colorOverride[1],
            this.customPrev.colorOverride[2],
            this.customPrev.colorOverride[3],
            this.customPrev.anchorPositionX,
            this.customPrev.anchorPositionY] );
        // encodedBuffer.set( this.customPrev.worldMatrix,6 );
        _Types__WEBPACK_IMPORTED_MODULE_4__.TypedArrayHelper.memcpy( encodedBuffer,6,this.customPrev.worldMatrix,0,16 );
        return encodedBuffer;
    }

    sortChildren( prop = "y" ) {
        this.children.sort( ( a, b ) => a[prop] - b[prop] );
    }


    setCustomPrev( worldMatrix,colorOverride,anchorPositionX,anchorPositionY ) {
        this.customPrev = {
            worldMatrix,
            colorOverride,
            anchorPositionX,
            anchorPositionY,
        };
        this._$$updateCode |= Sprite.UpdateCodes.UPDATE_CUSTOM_PREV;
    }

    setCacheMode( mode ) {
        if ( this.cacheBitmapMode == Sprite.CacheBitmapModes.SNAPSHOT ) {
            this._updateChildren( Sprite.UpdateCodes.UPDATE_CLEAR_PREV );   
        }
        if ( this.cacheBitmapAsset ) {            
            this.cacheBitmapAsset.release();

            /**
             *
             *
             * @param {Sprite} spr
             */
            const clearDstId = ( spr )=>{
                if ( spr.cacheBitmapMode == Sprite.CacheBitmapModes.NO_CACHE ) {
                    this.cacheBitmapAsset = null;
                    spr.cacheBitmapDstId = 0;
                    for ( let spr2 of spr.children ) {
                        clearDstId( spr2 );
                    }
                }   
            };

            this.cacheBitmapMode = Sprite.CacheBitmapModes.NO_CACHE;
            clearDstId( this );
        }
        this.cacheBitmapMode = mode;
    }


    encodeRenderingInfoWithChildren() {
        const encodedBuffers = [];
        const transferList = [];

        /**
         *
         *
         * @param {Sprite} spr
         * @param {m4.Mat4} worldMatrix
         * @param {[number,number,number,number]|Float32Array} colorOverride
         * @param {[number,number,number,number]|Float32Array|null} clipRect
         * @param {number} cacheBitmapDstId
         */
        function encodeChildren( spr,worldMatrix,colorOverride, clipRect, cacheBitmapDstId ) {
            const buf = spr.encodeRenderingInfo();
            const bufMatrix = buf.subarray( 14,14 + 16 );
            const curColorOverride = buf.subarray( 3,3 + 4 );
            const curClipRect = buf.subarray( 30,30 + 4 );
            let assetId = 0;
            let extra;
            let strs;
            let genericData;
            let customPrev;
            let needMakeRT = false;

            // clipRegion 트랜스폼
            if ( !Number.isNaN( curClipRect[0] ) ) {
                let clipPos = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.transformPoint( worldMatrix,[curClipRect[0],curClipRect[1],0] );

                curClipRect[0] = clipPos[0] + spr.x;
                curClipRect[1] = clipPos[1] + spr.y;
            }

            // 매트릭스는 트리 하단으로 갈 수록 곱한다.
            twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.multiply( worldMatrix,bufMatrix,bufMatrix );
            // 월드 매트릭스로 보관. 한 프레임 늦은 값이다.
            // copy하는 이유는 postMessage로 원본이 보내져서 사라지기 때문
            spr.worldMatrix = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.copy( bufMatrix );


            if ( spr.cacheBitmapMode != Sprite.CacheBitmapModes.NO_CACHE ) {
                if ( spr.cacheBitmapAsset == null ) {
                    needMakeRT = true;
                } else if ( spr.cacheBitmapMode == Sprite.CacheBitmapModes.FILTER ) {
                    // 필터링 모드
                    spr.cacheBitmapAsset.release();
                    needMakeRT = true;
                }
            } 
            
            if ( needMakeRT ) {
                const rect = spr.bounds;
                const asset = new _Asset__WEBPACK_IMPORTED_MODULE_6__.Asset( "<RT:*>",_Asset__WEBPACK_IMPORTED_MODULE_6__.Asset.AssetTypes.RenderTarget );

                asset.load( { 
                    x:           rect.x,
                    y:           rect.y,
                    width:       Math.min( 2048, rect.width ),
                    height:      Math.min( 2048,rect.height ), 
                    worldMatrix: spr.worldMatrix  } );
                spr.cacheBitmapAsset = asset;
                assetId = asset.id;
                spr.cacheBitmapDstId = assetId;
                cacheBitmapDstId = assetId;
                // console.log( `Cache ${assetId} src=${spr.cacheBitmapSrcId}` );
            } else {
                spr.cacheBitmapDstId = cacheBitmapDstId || spr.cacheBitmapDstId;
            }
            buf[35] = spr.cacheBitmapDstId;

            // 컬러는 RGBA각각을 곱해나간다. 0~1 값
            curColorOverride[0] = curColorOverride[0] * colorOverride[0];
            curColorOverride[1] = curColorOverride[1] * colorOverride[1];
            curColorOverride[2] = curColorOverride[2] * colorOverride[2];
            curColorOverride[3] = curColorOverride[3] * colorOverride[3];
            // clipRect는 NaN이면 부모 것을 가져온다
            if ( Number.isNaN( curClipRect[0] ) && !Number.isNaN( clipRect[0] ) ) {
                curClipRect.set( clipRect );
            }
            if ( spr._$$spriteType != 0 ) {
                //@ts-ignore
                if ( ( spr._$$updateCode & Sprite.UpdateCodes.UPDATE_EXTRA ) && spr.encodeExtraRenderingInfo != null ) {
                    let transfer;

                    //@ts-ignore
                    [extra,strs,genericData,transfer] = spr.encodeExtraRenderingInfo();
                    if ( transfer ) transferList.push( ...transfer );
                }
                if ( ( spr._$$updateCode & Sprite.UpdateCodes.UPDATE_CUSTOM_PREV ) ) {
                    customPrev = spr.encodeCustomPrev();
                }
                // RT에 그릴 것이라서 srcId=0
                buf[34] = 0;
                encodedBuffers.push( [buf,extra,strs,customPrev,genericData] );
            } 
            
            if ( spr.cacheBitmapMode == Sprite.CacheBitmapModes.SNAPSHOT && spr.cacheBitmapDstId == 0 ) {
                // 캐시된 경우
            } else {
                // 비트맵에 캐시한 경우가 아니면 차일드를 그린다.
                spr.children.forEach( child => {
                    if ( child.visible ) {
                        encodeChildren( child, bufMatrix,curColorOverride, curClipRect, cacheBitmapDstId );
                        if ( spr.cacheBitmapMode == Sprite.CacheBitmapModes.SNAPSHOT ) {
                            child.cacheBitmapDstId = 0;
                        }
                    }
                } );
                if ( spr.cacheBitmapMode == Sprite.CacheBitmapModes.SNAPSHOT ) {
                    spr.cacheBitmapDstId = 0;
                }
            }

            if ( spr.cacheBitmapAsset ) {
                // 텍스쳐를 그려야 함
                const buf2 = new Float32Array( buf );

                buf2[34] = assetId;
                buf2[35] = 0;
                encodedBuffers.push( [buf2,null,null,customPrev,null] );
            }
            spr._$$updateCode = Sprite.UpdateCodes.UPDATE_NOTHING;
        }

        if ( this.visible ) {
            encodeChildren( this,twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.identity(), [1,1,1,1], [NaN,NaN,NaN,NaN], 0 );

            for ( let i = 0; i < encodedBuffers.length; i++ ) {
                transferList.push( encodedBuffers[i][0].buffer );
                if ( encodedBuffers[i][1] ) {
                    transferList.push( encodedBuffers[i][1].buffer );
                }
                if ( encodedBuffers[i][3] ) {
                    transferList.push( encodedBuffers[i][3].buffer );
                }
            }
            return [encodedBuffers,transferList];
        } else {
            return [null,null];
        }
    }
}

Sprite.lastId = 1;
Sprite.finalizationRegistry = new FinalizationRegistry( Sprite.finalizeHandler );
Sprite.loadedEventDispatcher = new _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher();


Sprite.SpriteTypes = {
    SPRITE:    0,
    BITMAP:    1,
    MESH:      2,
    TEXTFIELD: 3,
    PIXEL:     4,
    SHAPE:     5,
};
Sprite.UpdateCodes = {
    UPDATE_NOTHING:     0,
    UPDATE_EXTRA:       1,
    UPDATE_CLEAR_PREV:  2,
    UPDATE_CUSTOM_PREV: 4,
};
Sprite.CacheBitmapModes = {
    NO_CACHE: 0,
    SNAPSHOT: 1,
    FILTER:   2,
};


/** 
 * @enum {number}
*/
Sprite.BlendModes = {
    NORMAL:     0, //[gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    MULTIPLY:   1, //[gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA];
    ADD:        2, //[gl.ONE, gl.DST_ALPHA];
    SCREEN:     3, //[gl.ONE, gl.ONE_MINUS_SRC_COLOR];
    NORMAL_NPM: 4, //[gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];
    ADD_NPM:    5, //[gl.SRC_ALPHA, gl.DST_ALPHA, gl.ONE, gl.DST_ALPHA];
    SCREEN_NPM: 6, //[gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_COLOR];
};


/***/ }),

/***/ "./engine/src/Stage.js":
/*!*****************************!*\
  !*** ./engine/src/Stage.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Stage": () => (/* binding */ Stage)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var twgl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.module.js");






class Stage extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor() {
        super();
        this.isStage = true;
    }
}

/***/ }),

/***/ "./engine/src/Storage.js":
/*!*******************************!*\
  !*** ./engine/src/Storage.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Storage": () => (/* binding */ Storage)
/* harmony export */ });
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Timer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Timer */ "./engine/src/Timer.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");






// 각 스토리지 설명
//https://blog.sessionstack.com/how-javascript-works-storage-engines-how-to-choose-the-proper-storage-api-da50879ef576
// 캐시 데이터는 Cache API
// 유저 데이터는 IndexedDB 쓰라고 권고 하고 있다

class Storage extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {
    constructor( dbName ) {
        super();
        console.assert( self.indexedDB, "indexedDB가 지원되지 않는 브라우저" );

        const version = 1;
        const request = self.indexedDB.open( dbName,version );

        request.onerror = ( event ) => {
            throw new Error( "indexedDB 열기 실패" );
        };
        request.onupgradeneeded = ( event ) => {
            const thisDb = event.target.result;

            // console.log( "upgrade" );
            thisDb.createObjectStore( "files", { keyPath: "path" } );
        };
        request.onsuccess = ( event ) => {
            const db = request.result;

            this.db = db;

            // console.log( event );
            this.dispatchEvent( "ready" );
        };
    }

    read( key ) {
        return new Promise( ( resolve, reject ) => {
            const func = () => {
                const request = this.db.transaction( "files", "readonly" ).objectStore( "files" ).get( key );

                request.onsuccess = ( event ) => {
                    this.dispatchEvent( new _Event__WEBPACK_IMPORTED_MODULE_2__.Event( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.COMPLETE, { content: event.target.result.content } ) );
                    resolve( event.target.result.content );
                };
            };

            if ( this.db ) {
                func();
            } else {
                this.once( "ready", func );
            }
        } );
    }

    write( key, value ) {
        return new Promise( ( resolve, reject ) => {
            const func = () => {
                const request = this.db.transaction( "files", "readwrite" ).objectStore( "files" ).put( { path: key, content: value } );

                request.onsuccess = ( event ) => {
                    this.dispatchEvent( new _Event__WEBPACK_IMPORTED_MODULE_2__.Event( _Event__WEBPACK_IMPORTED_MODULE_2__.Event.COMPLETE ) );
                    resolve();
                };
            };

            if ( this.db ) {
                func();
            } else {
                this.once( "ready", func );
            }
        } );
    }


    static loadFile( filename ) {
        // /** @type {PIXI.Loader} */
        // //@ts-ignore
        // const loader = PIXI.Loader.shared;
        // const r = new EventDispatcher();

        // if ( loader.resources[filename] ) {
        //     if ( loader.resources[filename].isComplete ) {
        //         Timer.delayedCall( 0, ()=> r.dispatchEvent( Event.COMPLETE,{ data: loader.resources[filename].data } ) );
        //     } else {
        //         loader.load( ( loader,resources )=> r.dispatchEvent( Event.COMPLETE,{ data: resources[filename].data } ) );
        //     }
        // } else {
        //     loader.add( filename,filename );
        //     loader.load( ( loader,resources )=> {
        //         if ( resources[filename].error ) throw new Error( resources[filename].error );
        //         r.dispatchEvent( Event.COMPLETE,{ data: resources[filename].data } );
        //     }
        //     );
        // }

        // return r;
    }
}



/***/ }),

/***/ "./engine/src/TextField.js":
/*!*********************************!*\
  !*** ./engine/src/TextField.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextField": () => (/* binding */ TextField)
/* harmony export */ });
/* harmony import */ var _FontBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FontBase */ "./engine/src/FontBase.js");
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _TrueTypeFont__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TrueTypeFont */ "./engine/src/TrueTypeFont.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");







class TextField extends _Sprite__WEBPACK_IMPORTED_MODULE_1__.Sprite {
    /**
     * Creates an instance of TextField.
     * @param {Font} font
     * @param {string} text
     * @param {*} styles
     * @memberof TextField
     */
    constructor( font, text, styles ) {
        super();
        this.font = font;
        this.styles = styles;
        this.useBaseline = false;
        this._$$spriteType = _Sprite__WEBPACK_IMPORTED_MODULE_1__.Sprite.SpriteTypes.TEXTFIELD;
        this._$$updateCode = _Sprite__WEBPACK_IMPORTED_MODULE_1__.Sprite.UpdateCodes.UPDATE_EXTRA;
        // 트루타입폰트를 캔버스에 그렸다가 텍스쳐로 바꾸는데 이 때 알파에 검정이 섞이는 것을 빼려면 다음과 같이 해야한다.
        this.colorAdd = ( font instanceof _TrueTypeFont__WEBPACK_IMPORTED_MODULE_2__.TrueTypeFont ) ? [1,1,1,0] : [0,0,0,0];
        this.customBounds = new _Types__WEBPACK_IMPORTED_MODULE_3__.Rect();
        this.text = text;
    }

    get text() {
        return this._text;
    }

    set text( text ) {
        if ( text != this._text ) {
            this.customBounds.width = this.font.measureTextWidth( text,this.fontSize );
            this.customBounds.height = this.fontSize;
        }
        this._text = text;
    }

    get fontSize() {
        return this.font.referenceSize;
    }

    getTextWidth() {
        return this.width;
    }

    setTextColor( c,a ) {
        // this.colorAdd = Utils.hex2rgba( c,a );
        this.setOverrideColor( c,a );
    }

    static fromTextWrap( text, areaWidth, areaHeight, lineSpacing, font, align, ignoreWordWrap ) {
        const wordWrapStyle = {
            align:         align != null ? align : "left",
            lineHeight:    lineSpacing,
            wordWrap:      areaWidth != null && !ignoreWordWrap,
            whiteSpate:    "normal",
            trim:          true,
            breakWord:     areaWidth != null && !ignoreWordWrap,
            wordWrapWidth: areaWidth
        };

        const tf = new TextField( font, text, wordWrapStyle );

        //spr.addChild( tf );
        //TODO: 틀렸음
        tf.anchorX = ( align == "center" ) ? 0.5 : ( align == "right" ? 1.0 : 0.0 );

        //tf.__pixi.x = (align == "center") ? areaWidth * 0.5 : (align == "right" ? areaWidth : 0.0);
        if ( areaWidth != null ) {
            tf.x += areaWidth * tf.anchorPosition.x;
        }

        return tf;
    }



    encodeExtraRenderingInfo() {
        let encodedBuffer = new Float32Array( 2 );

        encodedBuffer[0] = this.font.asset.id;
        encodedBuffer[1] = +this.useBaseline;

        return [encodedBuffer,[this.text]];
    }
}


/***/ }),

/***/ "./engine/src/Texture.js":
/*!*******************************!*\
  !*** ./engine/src/Texture.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Texture": () => (/* binding */ Texture)
/* harmony export */ });
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _TextureBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TextureBase */ "./engine/src/TextureBase.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");





class Texture extends _TextureBase__WEBPACK_IMPORTED_MODULE_1__.TextureBase {
    /**
     * Creates an instance of Texture.
     * @param {string} filename
     * @param {boolean} filter
     * @param {*} option
     * @memberof Texture
     */
    constructor( filename, filter = false, option = {} ) {
        super();
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_0__.Asset( filename,_Asset__WEBPACK_IMPORTED_MODULE_0__.Asset.AssetTypes.Texture );
        const size = _Utils__WEBPACK_IMPORTED_MODULE_3__.Utils.getImageSize( filename );

        this.uvRect = option.rect || new _Types__WEBPACK_IMPORTED_MODULE_2__.Rect( 0,0,size.width,size.height );
        this.width = this.uvRect.width;
        this.height = this.uvRect.height;
        this.asset.load( { width: size.width,height: size.height,uvRect: this.uvRect, filter: filter } );
    }

    /**
     *
     *
     * @param {string} eventName
     * @param {function} func
     * @param {any=} context
     * @param {boolean} [isOnce=false]
     * @returns {Texture}
     * @memberof Texture
     */
    addEventListener( eventName, func, context = null, isOnce = false ) {
        if ( eventName == _Event__WEBPACK_IMPORTED_MODULE_4__.Event.LOADED ) {
            this.asset.addEventListener( eventName, this.dispatchEvent.bind( this,_Event__WEBPACK_IMPORTED_MODULE_4__.Event.LOADED ), null, isOnce );
        } 
        //@ts-ignore
        return super.addEventListener( eventName, func, context, isOnce );
    }
}



/***/ }),

/***/ "./engine/src/TextureBase.js":
/*!***********************************!*\
  !*** ./engine/src/TextureBase.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextureBase": () => (/* binding */ TextureBase)
/* harmony export */ });
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");




class TextureBase extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher {
    constructor() {
        super();
        this.width = 0;
        this.height = 0;
        /** @type {Asset} */
        this.asset = undefined;
        /** @type {Rect} */
        this.uvRect = undefined;
    }

    get size() {
        return [this.width,this.height];
    }
}



/***/ }),

/***/ "./engine/src/TexturePack.js":
/*!***********************************!*\
  !*** ./engine/src/TexturePack.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TexturePack": () => (/* binding */ TexturePack)
/* harmony export */ });
/* harmony import */ var _TextureBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TextureBase */ "./engine/src/TextureBase.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _Types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Types */ "./engine/src/Types.js");
/* harmony import */ var _Texture__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Texture */ "./engine/src/Texture.js");







class TexturePack extends _TextureBase__WEBPACK_IMPORTED_MODULE_0__.TextureBase {
    /**
     *Creates an instance of TexturePack.
     * @param {string|object} txtfile
     * @param {string} imagefile
     * @param {TextureBase.Filters} filter
     * @param {object=} options
     * @memberof TexturePack
     */
    constructor( txtfile,imagefile,filter,options ) {
        super();
        this.filename =  imagefile;
        this.regions = {};

        if ( typeof( txtfile ) == "string" ) {
            const s = _Utils__WEBPACK_IMPORTED_MODULE_1__.Utils.getEmbeddedFile( txtfile );


            if ( s != null ) {
                const lines = s.split( "\n" );

                for ( const line of lines ) {
                //console.log(line);
                    const result = /([^,]+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+)/.exec( line );

                    if ( result != null ) {
                        const [, name, x, y, width, height] = result;
                        //console.log(`${name} ${x} ${y} ${width} ${height}`);
                        const rect = new _Types__WEBPACK_IMPORTED_MODULE_3__.Rect( parseFloat( x ), parseFloat( y ), parseFloat( width ), parseFloat( height ) );

                        this.regions[name] = new _Texture__WEBPACK_IMPORTED_MODULE_4__.Texture( this.filename,false,{ rect } );
                    }
                }
            }
        } else {
            // txtfile 부분에 개체를 넣은 경우
            for ( let name in txtfile ) {
                let rectArr = txtfile[name];
                let rect = new _Types__WEBPACK_IMPORTED_MODULE_3__.Rect( ...rectArr );

                this.regions[name] = new _Texture__WEBPACK_IMPORTED_MODULE_4__.Texture( this.filename,filter,{ rect } );
            }
        }
    }

    getTextureRegion( name ) {
        return this.regions[name];
    }
}



/***/ }),

/***/ "./engine/src/TileMap.js":
/*!*******************************!*\
  !*** ./engine/src/TileMap.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TileMap": () => (/* binding */ TileMap)
/* harmony export */ });
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _Mesh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Mesh */ "./engine/src/Mesh.js");
/* harmony import */ var _Shader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Shader */ "./engine/src/Shader.js");
/* harmony import */ var _TextureBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TextureBase */ "./engine/src/TextureBase.js");





/*

2019-10-05
resize가 너무 느려서 처음에 메시를 만들어 두는 쪽으로 했다

2021-11-21

mesh를 child로 가지고 있는 것을 그냥 mesh를 extend하게 수정하거나
숨겨줘야함

*/



/**
 * @this {TileMap}
 *
 * @param {number} tx
 * @param {number} ty
 * @returns {number[]}
 */
function tileToRect( tx, ty ) {
    const x1 = tx * ( this.__tileWidth + this.__spacingX ) + this.__marginX;
    const y1 = ty * ( this.__tileHeight + this.__spacingY ) + this.__marginY;

    // 기데로스의 uv좌표 변환시 생기는 문제 때문에 0.99999를 곱함
    //return [x1,y1,x1 + this.__tileWidth * 0.99999,y1 + this.__tileHeight * 0.99999];
    //return [x1, y1, x1 + this.__tileWidth ,y1 + this.__tileHeight];
    // return [x1 >>> 0, y1 >>> 0, x1 + this.__tileWidth >>> 0, y1 + this.__tileHeight >>> 0];
    return [x1, y1, x1 + this.__tileWidth, y1 + this.__tileHeight];
    // let [a, b, c, d] = [0.03,0.125,-0.03,-0.125];
    // return [x1 + a, y1 + b, x1 + this.__tileWidth + c, y1 + this.__tileHeight + d];
}

function replaceMeshData( m, i, x1, y1, x2, y2, tx1, ty1, tx2, ty2, c1, a1, c2, a2, c3, a3, c4, a4 ) {
    const [nVtx, nUv, nVc, nIdx] = [i * 4,i * 4, i * 4, i * 6];

    m.setVertices(
        nVtx + 0, x1, y1,
        nVtx + 1, x2, y1,
        nVtx + 2, x1, y2,
        nVtx + 3, x2, y2
    );
    m.setTextureCoordinates(
        nUv + 0, tx1, ty1,
        nUv + 1, tx2, ty1,
        nUv + 2, tx1, ty2,
        nUv + 3, tx2, ty2
    );
    m.setColors(
        nVc + 0, c1, a1,
        nVc + 1, c2, a2,
        nVc + 2, c3, a3,
        nVc + 3, c4, a4
    );
    m.setIndices(
        nIdx + 0, nVtx + 0,
        nIdx + 1, nVtx + 1,
        nIdx + 2, nVtx + 2,
        nIdx + 3, nVtx + 1,
        nIdx + 4, nVtx + 3,
        nIdx + 5, nVtx + 2
    );
}



class TileMap extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    /**
     *Creates an instance of TileMap.
     * @param {number} width
     * @param {number} height
     * @param {TextureBase} texture
     * @param {number} tileWidth
     * @param {number} tileHeight
     * @param {number} [spacingX=0]
     * @param {number} [spacingY=0]
     * @param {number} [marginX=0]
     * @param {number} [marginY=0]
     * @param {number} [displayWidth=tileWidth]
     * @param {number} [displayHeight=tileHeight]
     * @memberof TileMap
     */
    constructor( width, height, texture, tileWidth, tileHeight, spacingX = 0, spacingY = 0, marginX = 0, marginY = 0, displayWidth = tileWidth, displayHeight = tileHeight ) {
        super();
        this.__mapWidth = width;
        this.__mapHeight = height;
        this.__texture = texture;
        this.__tileWidth = tileWidth;
        this.__tileHeight = tileHeight;
        this.__spacingX = spacingX;
        this.__spacingY = spacingY;
        this.__marginX = marginX;
        this.__marginY = marginY;
        this.__displayWidth = displayWidth || tileWidth;
        this.__displayHeight = displayHeight || tileHeight;
        const m = new _Mesh__WEBPACK_IMPORTED_MODULE_1__.Mesh();

        m.setTexture( texture );
        this.__mesh = m;
        this.useCustomLocalBounds = true;
        this._$$localBounds.width = width * tileWidth;
        this._$$localBounds.height = height * tileHeight;
        this.clearAllTiles();
        this.addChild( m );
    }

    clearAllTiles() {
        const [vtx, idx, uv, vc] = [[], [], [], []];

        for ( let y = 0; y < this.__mapHeight; y++ ) {
            for ( let x = 0; x < this.__mapWidth; x++ ) {
                const [x1,y1,x2,y2] = [x * this.__displayWidth,y * this.__displayHeight,( x + 1 ) * this.__displayWidth,( y + 1 ) * this.__displayHeight];

                vtx.push( x1,y1,x2,y1,x1,y2,x2,y2 );
                uv.push( 0,0,0,0,0,0,0,0 );
                vc.push( 0,0,0,0,0,0,0,0 );
                idx.push( 0,0,0, 0,0,0 );
            }
        }
        let m = this.__mesh;

        m.setVertexArray( vtx );
        m.setIndexArray( idx );
        m.setTextureCoordinateArray( uv );
        m.setColorArray( vc );
        this.__map = [];
    }
	
    /**
     *
     *
     * @param {number} x
     * @param {number} y
     * @param {number} tx
     * @param {number} ty
     * @param {boolean} [flip=false]
     * @param {number} [c1=0xffffff]
     * @param {number} [a1=1.0]
     * @param {number} [c2=c1]
     * @param {number} [a2=a1]
     * @param {number} [c3=c1]
     * @param {number} [a3=a1]
     * @param {number} [c4=c1]
     * @param {number} [a4=a1]
     * @memberof TileMap
     */
    setTile( x,y,tx,ty,flip = false,c1 = 0xffffff,a1 = 1.0,c2 = c1,a2 = a1,c3 = c1,a3 = a1,c4 = c1,a4 = a1 ) {
        if ( tx == null || ty == null ) {
            this.clearTile( x,y );
        }

        const w = this.__mapWidth;
        const [x1,y1,x2,y2] = [x * this.__displayWidth,y * this.__displayHeight,( x + 1 ) * this.__displayWidth,( y + 1 ) * this.__displayHeight];
        const m = this.__mesh;
        const [tx1,ty1,tx2,ty2] = tileToRect.call( this,tx,ty );
        let t = this.__map[y * this.__mapWidth + x];

        // if ( t == null ) {

        //     const nVtx = m.getVertexArraySize();

        //     m.resizeVertexArray( nVtx + 4 );
        //     m.resizeTextureCoordinateArray( nVtx + 4 );
        //     m.resizeColorArray( nVtx + 4 );
        //     m.resizeIndexArray( nVtx / 4 * 6 + 6 );
        //     replaceMeshData( m, nVtx / 4 ,
        //                      x1, y1, x2, y2,
        //                      tx1, ty1, tx2, ty2,
        //                      c1, a1, c2, a2, c3, a3, c4, a4 );
        //     t = [tx, ty, flip, c1, a1, c2, a2, c3, a3, c4, a4, nVtx / 4 ];
        
        // } else {

        replaceMeshData( m, x + y * this.__mapWidth,// t[11],
                         x1,y1,x2,y2,
                         tx1,ty1,tx2,ty2,
                         c1,a2,c2,a2,c3,a3,c4,a4 );
        t = [tx, ty, flip, c1, a1, c2, a2, c3, a3, c4, a4, x + y * this.__mapWidth];//t[11]];
        
        // }

        this.__map[y * this.__mapWidth + x] = t;
    }
	
    getTile( x,y ) {
        const t = this.__map[y * this.__mapWidth + x];

        if ( t != null ) {
            return t;
        }
    }
	
    getArray( x,y ) {
        const t = this.__map[y * this.__mapWidth + x];

        if ( t == null ) {
            return;
        }

        const pos = t[11];
        const [nVtx,nIdx] = [pos * 4,pos * 6];
        const m = this.__mesh;
        const vtx = [];
        const uv = [];
        const vc = [];
        const idx = [];

        for ( let i = 0; i < 4; i++ ) {
            const { x, y } = m.getVertex( nVtx + i );

            vtx.push( x,y );
            const { x: u, y: v } = m.getTextureCoordinate( nVtx + i );

            uv.push( u,v );
            const { color, alpha } = m.getColor( nVtx + i );

            vc.push( color,alpha );
        }

        for ( let i = 0; i < 6; i++ ) {
            const v = m.getIndex( nIdx + i );

            idx.push( v );
        }

        return [vtx,uv,vc,idx];
    }
	
    clearTile( x,y ) {
        const t = this.__map[y * this.__mapWidth + x];

        if ( t != null ) {
            const nIdx = t[11] * 6;

            this.__mesh.setIndices(
                nIdx + 0, 0,
                nIdx + 1, 0,
                nIdx + 2, 0,
                nIdx + 3, 0,
                nIdx + 4, 0,
                nIdx + 5, 0
            );
        }

        this.__map[y * this.__mapWidth + x] = null;
    }
    /*
	shift(offsetX,offsetY) {
	
	}
	*/


    setTexture( texture ) {
        this.__mesh.setTexture( texture );//, matrix);
    }


    /**
     *
     *
     * @param {Shader} shader
     * @memberof TileMap
     */
    setShader( shader ) {
        this.__mesh.setShader( shader );
    }

    setTileColor( x, y, color, alpha, isCorner ) {
        const w = this.__mapWidth;

        if ( !isCorner ) {
            const t = this.__map[y * this.__mapWidth + x];

            if ( t ) {
                const nVc = t[11] * 4;

                this.__mesh.setColors(
                    nVc + 0, color, alpha,
                    nVc + 1, color, alpha,
                    nVc + 2, color, alpha,
                    nVc + 3, color, alpha
                );
            }
        } else {
            // 코너의 컬러
            // 12
            // 30
            const t0 = this.__map[y * this.__mapWidth + x];
            const t1 = ( y > 0 && x > 0 ) ? this.__map[( y - 1 ) * this.__mapWidth + x - 1] : null;
            const t2 = ( y > 0 ) ? this.__map[( y - 1 ) * this.__mapWidth + x] : null;
            const t3 = ( x > 0 ) ? this.__map[y * this.__mapWidth + x - 1] : null;

            if ( t0 ) {
                this.__mesh.setColor( t0[11] * 4 + 0, color, alpha );
            }

            if ( t1 ) {
                this.__mesh.setColor( t1[11] * 4 + 3, color, alpha );
            }

            if ( t2 ) {
                this.__mesh.setColor( t2[11] * 4 + 2, color, alpha );
            }

            if ( t3 ) {
                this.__mesh.setColor( t3[11] * 4 + 1, color, alpha );
            }
        }
    }
}
TileMap.FLIP_DIAGONAL = "flipDiagonal";
TileMap.FLIP_HORIZONTAL = "flipHorizontal";
TileMap.FLIP_VERTICAL = "flipVertical";




/***/ }),

/***/ "./engine/src/Timer.js":
/*!*****************************!*\
  !*** ./engine/src/Timer.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Timer": () => (/* binding */ Timer)
/* harmony export */ });
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");





class Timer extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {
    /**
     * 타이머 개체를 만든다.
     * 타이머는 바로 시작하지 않으며 start를 불러야 시작한다.
     * 
     * @param {number} delay - ms 단위
     * @param {number} [repeatCount=0] - 몇 번을 반복하는 타이머인가? 0이면 무한 반복
     * @memberof Timer
     */
    constructor( delay, repeatCount = 0 ) {
        super();
        this.delay = delay;
        this.repeatCount = repeatCount;
        this.count = 0;
    }

    start() {
        this.stop();
        this.__timer = setInterval( () => {
            this.count++;
            const e = new _Event__WEBPACK_IMPORTED_MODULE_1__.Event( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.TIMER );

            // @ts-ignore
            e.timer = this;
            this.dispatchEvent( e );

            if ( this.repeatCount != 0 && this.count >= this.repeatCount ) {
                this.stop();
            }
        }, this.delay );
    }

    stop() {
        if ( this.__timer ) {
            clearInterval( this.__timer );
            this.__timer = null;
        }
    }

    getCurrentCount() {
        return this.count;
    }

    getDelay() {
        return this.delay;
    }

    /**
     * delay 만큼의 지연시간 후에 함수를 실행한다
     *
     * @static
     * @param {number} delay - ms 단위. 0을 줘도 동기적으로 실행되지 않는다.
     * @param {function} func
     * @param {object=} context
     * @returns {Timer}
     * @memberof Timer
     */
    static delayedCall( delay, func, context ) {
        console.assert( func != null );
        const t = new Timer( delay, 1 );

        t.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_1__.Event.TIMER, func, context );
        t.start();

        return t;
    }

    /**
     * 현재 시간을 밀리세컨드 단위로 돌려준다
     *
     * @static
     * @returns {number}
     * @memberof Timer
     */
    static now() {
        return ( +new Date );
    }

    /**
     * 퍼포먼스 타이머는 Timer.now()보다 더 정확한 시간 간격을 측정할 수 있지만
     * 이것이 현재 시간을 표시하고 있는 것은 아님에 주의. Timer.now()와 다른 값이다.
     * 간격은 매우 정확하며 1ms 이상의 해상도를 돌려준다. 그러나 이 호출 자체가 비싸다.
     *
     * @static
     * @returns {number}
     * @memberof Timer
     */
    static getPerformaceTimer() {
        return performance.now();
    }

    /**
     * 파일이름이나 로그에 출력할 때 사용하기 편한 ISO포멧의 시간 표시를 돌려준다
     *
     * @static
     * @param {Date} [date=new Date()]
     * @returns {string}
     * @memberof Timer
     */
    static getShortDate( date = new Date() ) {
        return date.toISOString();
    }

    static wait( ms ) {
        return new Promise( ( resolve,reject )=>{
            this.delayedCall( ms,resolve );
        } );
    }

    static waitFrame( frame ) {
        return new Promise( ( resolve,reject )=>{
            this.delayedCall( 1000 / 60 * frame,resolve );
        } );
    }
}



/***/ }),

/***/ "./engine/src/Transform.js":
/*!*********************************!*\
  !*** ./engine/src/Transform.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Transform": () => (/* binding */ Transform)
/* harmony export */ });
/* harmony import */ var twgl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! twgl.js */ "./node_modules/twgl.js/dist/4.x/twgl-full.module.js");



class Transform {
    constructor() {
        this._x = 0;
        this._y = 0;
        this._anchorX = 0;
        this._anchorY = 0;
        this._scaleX = 1;
        this._scaleY = 1;
        this._rotation = 0;
        this._matrixDirty = false;
        this._matrix = twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.identity();
        this.invalidateCallback = null;
    }

    get x() {
        return this._x;
    }

    get y() {
        return this._y;
    }

    get anchorX() {
        return this._anchorX;
    }

    get anchorY() {
        return this._anchorY;
    }


    get scaleX() {
        return this._scaleX;
    }

    get scaleY() {
        return this._scaleY;
    }

    get rotation() {
        return this._rotation;       
    }

    set x( v ) {
        this.setDirty( this._x != v );
        this._x = v;
    }

    set y( v ) {
        this.setDirty( this._y != v );
        this._y = v;
    }

    set anchorX( v ) {
        this.setDirty( this._anchorX != v );
        this._anchorX = v;
    }

    set anchorY( v ) {
        this.setDirty( this._anchorY != v );
        this._anchorY = v;
    }

    set scaleX( v ) {
        this.setDirty( this._scaleX != v );
        this._scaleX = v;
    }

    set scaleY( v ) {
        this.setDirty( this._scaleY != v );
        this._scaleY = v;
    }

    set rotation( v ) {
        this.setDirty( this._rotation != v );
        this._rotation = v;
    }

    get matrix() {
        if ( this._matrixDirty ) {
            const mat =  twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.translation( [this._x,this._y,0] );

            // 앵커만큼 역으로 이동한 다음
            // 여기가 구버전과 다른 점
            // m4.translate( mat, [this.anchorPosition.x,this.anchorPosition.y,0],mat );
            twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.scale( mat, [this._scaleX,this._scaleY,1] ,mat );
            twgl_js__WEBPACK_IMPORTED_MODULE_0__.m4.rotateZ( mat,this._rotation * Math.PI / 180 ,mat );        
            // 여기서 다시 앵커만큼 이동해야 하는데
            // 이 처리는 vs에서 한다
            this._matrix = mat;
            this._matrixDirty = false;
        } 
        return this._matrix;
    }

    setDirty( v ) {
        if ( this.invalidateCallback && v ) {
            // _matrixDirty가 이번에 false에서 true가 될 때만 호출하는게 아니고
            // true에서 true가 될 때도 호출 한다.
            // 그래야 _boundsDirty가 제대로 처리 되기 때문
            this.invalidateCallback();
        }
        this._matrixDirty = this._matrixDirty || v;
    }

    /**
     *
     *
     * @returns {Transform} 
     * @memberof Transform
     */
    clone() {
        const newTransform = {};

        Object.assign( newTransform,this );
        Object.setPrototypeOf( newTransform,this.constructor.prototype );
        //@ts-ignore
        return newTransform;
    }
}




/***/ }),

/***/ "./engine/src/TrueTypeFont.js":
/*!************************************!*\
  !*** ./engine/src/TrueTypeFont.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TrueTypeFont": () => (/* binding */ TrueTypeFont)
/* harmony export */ });
/* harmony import */ var _Asset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Asset */ "./engine/src/Asset.js");
/* harmony import */ var _FontBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FontBase */ "./engine/src/FontBase.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utils */ "./engine/src/Utils.js");





class TrueTypeFont extends _FontBase__WEBPACK_IMPORTED_MODULE_1__.FontBase {
    constructor( trueTypeFontName,referenceSize, styles ) {
        super( trueTypeFontName, referenceSize, styles );
        // TTF
        this.asset = new _Asset__WEBPACK_IMPORTED_MODULE_0__.Asset( trueTypeFontName,_Asset__WEBPACK_IMPORTED_MODULE_0__.Asset.AssetTypes.TrueTypeFont );
        this.asset.load( { 
            referenceSize: this.referenceSize, 
            styles:        this.styles 
        } );
        this.fontLoaded = false;
    }    

    measureTextWidth( str,size ) {
        super.measureTextWidth( str,size );

        const fontInfo = this.asset.fontInfo;

        let width = 0;

        for ( let i = 0; i < str.length; i++ ) {
            const char = str.charCodeAt( i );
            const charInfo = fontInfo.chars[char];

            if ( Array.isArray( charInfo ) ) {
                width += charInfo[0];
                if ( false ) {}   
            } else if ( charInfo != null ) {
                width += charInfo;
            }
            if ( i < str.length - 1 && fontInfo.kerningPairs ) {
            //마지막 글자가 아닌경우 kerning
                const charNext = str.charCodeAt( i + 1 );

                const kerning = fontInfo.kerningPairs[char + "," + charNext];

                if ( kerning ) {
                    width += kerning;
                }
            }
        }
        return width / fontInfo.unitsPerEm * ( size || this.referenceSize );
    }
}




/***/ }),

/***/ "./engine/src/Tween.js":
/*!*****************************!*\
  !*** ./engine/src/Tween.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tween": () => (/* binding */ Tween)
/* harmony export */ });
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Event */ "./engine/src/Event.js");
/* harmony import */ var _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventDispatcher */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Sprite */ "./engine/src/Sprite.js");
/* harmony import */ var _easing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./easing */ "./engine/src/easing.js");
/* harmony import */ var _Stage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Stage */ "./engine/src/Stage.js");
/* harmony import */ var _Application__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Application */ "./engine/src/Application.js");







/**
 * @typedef Prop
 * @property {function|string=} ease
 * @property {boolean=} autoPlay
 * @property {boolean=} swapValues
 * @property {boolean=} reflect
 * @property {number=} delay
 * @property {number=} repeatCount
 * @property {boolean=} dispatchEvents
 * @property {number=} timeScale
 * @property {Tween=} nextTween
 */



/*
base on GTween for Gideros;
This code is MIT licensed, see http://www.opensource.org/licenses/mit-license.php;
Copyright (c) 2010 - 2011 Gideros Mobile;
Based on Tween 2.01 for ActionScript 3;
http://gskinner.com/libraries/GTween/
GTween 2.01 for ActionScript 3 is MIT licensed, see http://www.opensource.org/licenses/mit-license.php;
Copyright (c) 2009 Grant Skinner;
Notes:
* Documentation is derived from GTween 2.01's original documentation.
*/

/*
	* Tween is a light-weight instance oriented tween engine. This means that you instantiate tweens for specific purposes, && then reuse, update || discard them.
	* This is different than centralized tween engines where you "register" tweens with a global object. This provides a more familiar && useful interface;
	* for object oriented programmers.

	* Tween boasts a number of advanced features:
	* - frame && time based durations/positions which can be set per tween;
	* - simple sequenced tweens using .nextTween;
	* - pause && resume individual tweens || all tweens;
	* - jump directly to the } || beginning of a tween with :toEnd() || :toBeginning();
	* - jump to any arbitrary point in the tween with :setPosition();
	* - complete, init, && change callbacks;
	* - smart garbage collector interactions (prevents collection while active, allows collection if target is collected);
	* - easy to set up in a single line of code;
	* - can repeat || reflect a tween a specified number of times;
	* - deterministic, so setting a position on a tween will (almost) always result in predictable results;
*/

function hexToRgb( c ) {
    return [( c >> 16 ) / 255, ( ( c >> 8 ) & 0xff ) / 255, ( c & 0xff ) / 255];
}


const copyTickList = [];

class Tween extends _EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher {
    /**
     *Creates an instance of Tween.
     * @param {object} target
     * @param {number} duration
     * @param {object=} values
     * @param {string|function|Prop=} props
     * @memberof Tween
     */
    constructor( target, duration, values, props ) {
        super();
        this._delay = 0;
        this._paused = true;
        this._position = Number.NaN;
        this._isEnd = false;
        this.autoPlay = true;
        this.repeatCount = 1;
        this.timeScale = 1;
        this.ease = Tween.defaultEase;
        this.dispatchEvents = Tween.defaultDispatchEvents;
        this.target = target;
        this.duration = duration;
        this.reflect = undefined;
        this.nextTween = undefined;
        let swap = null;

        if ( typeof props == "function" || typeof props == "string" ) {
            //@ts-ignore
            props = { ease: props };
        }

        if ( props != null ) {
            //@ts-ignore
            swap = props.swapValues;
            //@ts-ignore
            props.swapValues = null;
            Object.assign( this, props );
        }

        if ( typeof this.ease == "string" ) {
            this.ease = _easing__WEBPACK_IMPORTED_MODULE_3__.easing[this.ease];
        }

        console.assert( this.ease != null );
        this.resetValues( values );

        if ( swap ) {
            this.swapValues();
        }

        if ( this.duration == 0 && this.getDelay() == 0 && this.autoPlay ) {
            this.calculatedPosition = null;
            this.setPosition( 0 );
        }

        if ( !Tween.active ) {
            _Application__WEBPACK_IMPORTED_MODULE_5__.application.stage.addEventListener( _Event__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, Tween.onTick );
            Tween.active = true;
        }
    }

    /*
		* Plays or pauses a tween. You can still change the position value externally on a paused;
		* tween, but it will !be updated automatically. While paused is false, the tween is also prevented;
		* from being garbage collected while it is active.
		* This is achieved in one of two ways:
		* 1. If the target object derives from EventDispatcher, then the tween will subscribe to a dummy event using a hard reference. This allows;
		* the tween to be garbage collected if its target is also collected, && there are no other external references to it.
		* 2. If the target object is !an EventDispatcher, then the tween is placed in a global list, to prevent collection until it is paused || completes.
		* Note that pausing all tweens via the Tween.pauseAll static property will !free the tweens for collection.
	*/
    /**
     *
     *
     * @returns {boolean}
     * @memberof Tween
     */
    isPaused() {
        return this._paused;
    }


    isEnd() {
        return this._isEnd;
    }

    stop() {
        this.setPaused( true );
    }

    /**
     *
     *
     * @param {boolean} value
     * @memberof Tween
     */
    setPaused( value ) {
        if ( value == this._paused ) {
            return;
        }

        this._paused = value;

        if ( this._paused ) {
            Tween.activeTweenList.delete( this );
        } else {
            if ( Number.isNaN( this._position ) || ( this.repeatCount != 0 && this._position >= this.repeatCount * this.duration ) ) {
                // reached the end, reset.
                this._inited = false;
                this.calculatedPosition = 0;
                this.calculatedPositionOld = 0;
                this.ratio = 0;
                this.ratioOld = 0;
                this.positionOld = 0;
                this._position = -this.getDelay();
            }

            Tween.activeTweenList.set( this,true );
        }
    }

    stopAll() {
        for ( const [tween] of Tween.activeTweenList ) {
            tween.stop();
        }
    }


    /*
		* Gets && sets the position of the tween in frames || seconds (depending on .useFrames). This value will;
		* be constrained between -delay && repeatCount*duration. It will be resolved to a .calculatedPosition before;
		* being applied.
		*
		* Negative values:
		* Values below 0 will always resolve to a calculatedPosition of 0. Negative values can be used to set up a delay on the tween, as the tween will have to count up to 0 before initing.
		*
		* Positive values:
		* Positive values are resolved based on the duration, repeatCount, && reflect properties.
	*/
    getPosition() {
        return this._position;
    }

    /**
     *
     *
     * @param {number} pos
     * @returns {Tween}
     * @memberof Tween
     */
    setPosition( pos ) {
        this.positionOld = this._position;
        this.ratioOld = this.ratio;
        this.calculatedPositionOld = this.calculatedPosition;
        const maxPosition = this.repeatCount * this.duration;
        const isEnd = pos >= maxPosition && this.repeatCount > 0;

        if ( isEnd ) {
            if ( this.calculatedPositionOld == maxPosition ) {
                return;
            }

            this._position = maxPosition;
            this.calculatedPosition = ( this.reflect && ( this.repeatCount % 2 == 0 ) ) && 0 || this.duration;
        } else {
            this._position = pos;
            this.calculatedPosition = ( this._position < 0 ) ? 0 : ( this._position % this.duration );

            if ( this.reflect && Math.floor( this.getPosition() / this.duration ) % 2 != 0 ) {
                this.calculatedPosition = this.duration - this.calculatedPosition;
            }
        }

        this.ratio = ( this.duration == 0 && this._position >= 0 ) ? 1 : this.ease( this.calculatedPosition / this.duration, 0, 1, 1 );

        if ( this.target && ( this._position >= 0 || this.positionOld >= 0 ) && this.calculatedPosition != this.calculatedPositionOld ) {
            if ( !this._inited ) {
                this.init();
            }

            for ( const n in this._endValues ) {
                let initVal, rangeVal, val;

                if ( n == "color" ) {
                    // 컬러는 쪼개서 트윈해야한다
                    initVal = this._initValues[n];
                    rangeVal = this._rangeValues[n];
                    const val1  = initVal[0] + rangeVal[0] * this.ratio;
                    const val2  = initVal[1] + rangeVal[1] * this.ratio;
                    const val3  = initVal[2] + rangeVal[2] * this.ratio;

                    this.target.setColorMultiplier( val1, val2, val3 );
                } else {
                    initVal = this._initValues[n];
                    rangeVal = this._rangeValues[n];
                    val = initVal + rangeVal * this.ratio;
                    console.assert( this.target[n] != null );
                    this.target[n] = val;
                }
            }
        }

        if ( this.dispatchEvents ) {
            this.dispatchEvent( "change" );
        }

        if ( isEnd ) {
            this._isEnd = true;
            this.setPaused( true );

            if ( this.nextTween ) {
                this.nextTween.setPaused( false );
            }

            if ( this.dispatchEvents ) {
                this.dispatchEvent( "complete" );
            }
        }

        return this;
    }


    /*
		* The length of the delay in frames || seconds (depending on .useFrames).
		* The delay occurs before a tween reads initial values || starts playing.
	*/
    /**
     *
     *
     * @returns {number}
     * @memberof Tween
     */
    getDelay() {
        return this._delay;
    }

    /**
     *
     *
     * @param {number} value
     * @returns {Tween}
     * @memberof Tween
     */
    setDelay( value ) {
        if ( this._position <= 0 ) {
            this._position = -value;
        }

        this._delay = value;

        return this;
    }


    /*
		* Sets the numeric end value for a property on the target object that you would like to tween.
		* For example, if you wanted to tween to a new x position, you could use: myTween.setValue("x",400).
		*
		* name: The name of the property to tween.
		* value: The numeric end value (the value to tween to).
	*/
    /**
     *
     *
     * @param {string} name
     * @param {*} value
     * @returns {Tween}
     * @memberof Tween
     */
    setValue( name, value ) {
        this._endValues[name] = value;
        this.invalidate();

        return this;
    }

    /*
		* Returns the end value for the specified property if one exists.
		*
		* name: The name of the property to return a } value for.
	*/
    getValue( name ) {
        return this._endValues[name];
    }

    /*
		* Removes a end value from the tween. This prevents the Tween instance from tweening the property.
		*
		* name: The name of the end property to delete.
	*/
    deleteValue( name ) {
        this._rangeValues[name] = null;
        this._initValues[name] = null;
        const result = this._endValues[name] != null;

        this._endValues[name] = null;

        return result;
    }


    /*
		* Shorthand method for making multiple setProperty calls quickly.
		* This adds the specified properties to the values list.
		* 
		* Example: set x and y end values:
		* myTween.setEndValues({x:200, y:400});
		*
		* properties: An object containing end property values.
	*/
    /**
     *
     *
     * @param {object} values
     * @returns {Tween}
     * @memberof Tween
     */
    setValues( values ) {
        Object.assign( this._endValues, values );
        this.invalidate();

        return this;
    }

    /*
		* Similar to .setEndValues(), but clears all previous end values;
		* before setting the new ones.
		*
		* properties: An object containing end property values.
	*/
    /**
     *
     *
     * @param {*} values
     * @returns {Tween}
     * @memberof Tween
     */
    resetValues( values ) {
        this._endValues = {};
        this.setValues( values );

        return this;
    }

    /*
		* Returns the table of all end properties && their values. This is a copy of values, so modifying;
		* the returned object will not affect the tween.
	*/
    /**
     *
     *
     * @returns {object}
     * @memberof Tween
     */
    getValues() {
        return Object.assign( {}, this._endValues );
    }

    /*
		* Returns the initial value for the specified property.
		* Note that the value will not be available until the tween inits.
	*/
    /**
     *
     *
     * @param {string} name
     * @returns {*}
     * @memberof Tween
     */
    getInitValue( name ) {
        return this._initValues[name];
    }

    /*
		* Swaps the init && } values for the tween, effectively reversing it.
		* This should generally only be called before the tween starts playing.
		* This will force the tween to init if it hasn't already done so, which;
		* may result in an onInit call.
		* It will also force a render (so the target immediately jumps to the new values;
		* immediately) which will result in the onChange callback being called.
		* 
		* You can also use the special "swapValues" property on the props parameter of;
		* the Tween constructor to call :swapValues() after the values are set.
		* 
		* The following example would tween the target from 100,100 to its current position:
		* new Tween(ball, 2, {x=100, y=100}, {swapValues=true});
	*/
    swapValues() {
        if ( !this._inited ) {
            this.init();
        }

        const o = this._endValues;

        this._endValues = this._initValues;
        this._initValues = o;

        for ( const n in this._rangeValues ) {
            const v = this._rangeValues[n];

            this._rangeValues[n] = -v;
        }

        this.calculatedPosition = null;

        if ( this._position < 0 ) {
            const pos = this.positionOld;

            this.setPosition( 0 );
            this._position = this.positionOld;
            this.positionOld = pos;
        } else {
            this.setPosition( this._position );
        }
    }

    /*
		* Reads all of the initial values from target && calls the onInit callback.
		* This is called automatically when a tween becomes active (finishes delaying);
		* && when :swapValues() is called. It would rarely be used directly;
		* but is exposed for possible use by power users.
	*/
    init() {
        this._inited = true;
        this._initValues = {};
        this._rangeValues = {};

        for ( const key in this._endValues ) {
            if ( key == "color" ) {
                // hex로 들어온 값을 r, g, b 값으로 나눠서 저장한다
                this._initValues[key] = hexToRgb( this.target.colorMultiplier );
                let value;

                value = hexToRgb( this._endValues[key] );
                this._rangeValues[key] = [
                    value[0] - parseFloat( this._initValues[key][0] ),
                    value[1] - parseFloat( this._initValues[key][1] ),
                    value[2] - parseFloat( this._initValues[key][2] )
                ];
            } else {
                //나머지 원본으로
                console.assert( this.target[key] != null, `트윈으로 조작하려는 값이 null이다.` );
                this._initValues[key] = this.target[key];
                this._rangeValues[key] = this._endValues[key] - this._initValues[key];
            }
        }

        if ( this.dispatchEvents ) {
            this.dispatchEvent( "init" );
        }
    }

    /*
		* Jumps the tween to its beginning && pauses it. This is the same as calling .setPosition(0) and .setPaused(true).
	*/
    toStart() {
        this.setPosition( 0 );
        //this.setPaused(true);
    }

    cancel() {
        this.setPosition( 0 );
        this.stop();
    }

    /*
		* Jumps the tween to its end and pauses it. This is roughly the same as calling .setPosition(repeatCount*duration).
	*/
    toEnd() {
        this.setPosition( ( this.repeatCount > 0 ) && this.repeatCount * this.duration || this.duration );
    }

    invalidate() {
        this._inited = false;

        if ( this._position > 0 ) {
            this._position = 0;
        }

        if ( this.autoPlay ) {
            this.setPaused( false );
        }
    }


    /**
     *
     *
     * @returns {Tween}
     * @memberof Tween
     */
    onCompleteRemoveFromParent() {
        this.addEventListener( "complete",
                               () => {
                                   this.target.removeFromParent();
                                   this.target = null;
                               },this );

        return this;
    }

    /**
     *
     *
     * @param {function} func
     * @param {any=} data
     * @returns {Tween}
     * @memberof Tween
     */
    onComplete( func,data ) {
        this.addEventListener( "complete",func,data );

        return this;
    }

    /**
     *
     *
     * @param {function} func
     * @param {any=} data
     * @returns {Tween}
     * @memberof Tween
     */
    onChange( func,data ) {
        this.addEventListener( "change",func,data );

        return this;
    }

    /**
     *
     *
     * @param {Tween} tween
     * @returns {Tween}
     * @memberof Tween
     */
    setNextTween( tween ) {
        this.nextTween = tween;

        return this;
    }

    /**
     *
     *
     * @param {number} duration
     * @param {object} values
     * @param {string|function|Prop=} props
     * @returns {Tween}
     * @memberof Tween
     */
    tween( duration, values, props ) {
        const newTween = new Tween( this.target, duration, values, props );

        if ( !this.isEnd() ) {
            newTween.setPaused( true );
            this.setNextTween( newTween );
        }

        return newTween;
    }

    /**
     *
     *
     * @param {number} x
     * @param {number} y
     * @param {number} [duration = 0]
     * @param {string|function|Prop=} props
     * @returns {Tween}
     * @memberof Tween
     */
    move( x, y, duration = 0, props ) {
        const newTween = new Tween( this.target, duration, { x: x, y: y }, props );

        if ( !this.isEnd() ) {
            newTween.setPaused( true );
            this.setNextTween( newTween );
        }

        return newTween;
    }

    /**
     *
     *
     * @param {number} [duration=0]
     * @param {function=} func
     * @param {object=} context
     * @returns {Tween}
     * @memberof Tween
     */
    wait( duration = 0, func, context ) {
        const newTween = new Tween( this.target, duration );

        if ( func ) {
            this.onComplete( func, context );
        }

        if ( !this.isEnd() ) {
            newTween.setPaused( true );
            this.setNextTween( newTween );
        }

        return newTween;
    }

    stopTweenChain() {
        Tween.stopTarget( this.target );
    }


    static linearEase( a, b, c, d ) {
        return a;
    }

    static onTick() {
        if ( Tween.pauseAll ) {
            return;
        }

        const dt = 1 / 60 * Tween.timeScaleAll * 1000;

        for ( const [tween] of Tween.activeTweenList ) {
            copyTickList.push( tween );
        }

        for ( let i = 0; i < copyTickList.length; i++ ) {
            const tween = copyTickList[i];

            tween.setPosition( tween._position + ( tween.useFrames && Tween.timeScaleAll || dt ) * tween.timeScale );
        }

        if ( copyTickList.length == 0 ) {
            _Application__WEBPACK_IMPORTED_MODULE_5__.application.stage.removeEventListener( _Event__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, Tween.onTick );
            Tween.active = null;
        }

        copyTickList.length = 0;
    }

    // 타겟에 걸린 트윈 모두 정지
    static stopTarget( target ) {
        for ( const [tween] of Tween.activeTweenList ) {
            if ( tween.target == target ) {
                tween.stop();
            }
        }
    }

    /*
	* Constructs a new Tween instance.
	*
	* target: The object whose properties will be tweened.
	* duration: The length of the tween in frames || seconds depending on the timingMode.
	* values: An object containing } property values. For example, to tween to x=100, y=100, you could pass {x=100, y=100} as the values object.
	* props: An object containing properties to set on this tween. For example, you could pass {ease=myEase} to set the ease property of the new instance. It also supports a single special property "swapValues" that will cause :swapValues() to be called after the values specified in the values parameter are set.
    */
}

/*

트윈을 연결해서 애니메이션을 만들 수 있도록 하기 위해서 작성
Sprite 파일에 함수를 정의하면 상호참조 때문에 안됨
spr.move(10,10,100).move(100,50,200)...

*/

_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.tween = function ( duration, values, props ) {
    return new Tween( this, duration, values, props );
};

_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.move = function ( x, y, duration = 0, props ) {
    return new Tween( this, duration, { x: x, y: y }, props );
};

_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.wait = function ( duration = 0, func, context ) {
    return new Tween( this, duration ).onComplete( func,context );
};

_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.getTweens = function ( playingOnly ) {
    const tweens = [];

    for ( const [tween] of Tween.activeTweenList ) {
        if ( tween.target == this ) {
            if ( !playingOnly || tween.paused ) {
                tweens.push( tween );
            }
        }
    }

    return tweens.length > 0 ? tweens : null;
};

_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher.prototype.stopAllTweens = function () {
    Tween.stopTarget( this );
};

Tween.active = false;
Tween.defaultDispatchEvents = true;
Tween.defaultEase = Tween.linearEase;
Tween.pauseAll = false;
Tween.timeScaleAll = 1;
Tween.activeTweenList = new Map();




/***/ }),

/***/ "./engine/src/Types.js":
/*!*****************************!*\
  !*** ./engine/src/Types.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Rect": () => (/* binding */ Rect),
/* harmony export */   "Point": () => (/* binding */ Point),
/* harmony export */   "TypedArrayHelper": () => (/* binding */ TypedArrayHelper)
/* harmony export */ });

function getRectLike( r ) {
    if ( Array.isArray( r ) || r instanceof Float32Array ) {
        return { x: r[0],y: r[1], width: r[2],height: r[3] };
    } else {
        return r;
    }
}

function getPointLike( p ) {
    if ( Array.isArray( p ) || p instanceof Float32Array ) {
        return { x: p[0],y: p[1] };
    } else {
        return p;
    }
}


class Rect {
    /**
     * Creates an instance of Rect.
     * @param {[number,number,number,number]|Float32Array|number|Rect=} x
     * @param {number=} y
     * @param {number=} width
     * @param {number=} height
     * @memberof Rect
     */
    constructor( x,y,width,height ) {
        if ( Array.isArray( x ) || x instanceof Float32Array ) {
            this.x  = x[0];
            this.y = x[1];
            this.width = x[2];
            this.height = x[3];
        } else if ( typeof x === "object" ) {
            this.x = x.x;
            this.y = x.y;
            this.width = x.width;
            this.height = x.height;
        } else {
            this.x = x || 0;
            this.y = y || 0;
            this.width = width || 0;
            this.height = height || 0;
        }
    }

    /**
     *
     *
     * @returns {Rect}
     * @memberof Rect
     */
    clone() {
        return new Rect( this );    
    }


    getCornerPoints() {
        const { x,y,width,height } = this;

        return [x,y,x + width,y,x,y + height,x + width,y + height];
    }

    getArray() {
        return [this.x,this.y,this.width,this.height];
    }

    extendPoint( x,y ) {
        if ( this.x == null ) {
            this.x = x;
            this.y = y;
            this.width = 0;
            this.height = 0;
        } else {
            if ( x < this.x ) {
                this.width += this.x - x;
                this.x = x;
            }
            if ( y < this.y ) {
                this.height += this.y - y;
                this.y = y;
            }
            this.width = Math.max( this.right,x ) - this.x;
            this.height = Math.max( this.bottom,y ) - this.y;
        }
    }

    extendRect( r ) {
        this.extendPoint( r.x,r.y );
        this.extendPoint( r.right,r.y );
        this.extendPoint( r.x,r.bottom );
        this.extendPoint( r.right,r.bottom );
    }

    get xywh() {
        return [this.x,this.y,this.width,this.height];
    }

    set xywh( r ) {
        const r2 = getRectLike( r );

        this.x = r2.x;
        this.y = r2.y;
        this.width = r2.width;
        this.height = r2.height;
    }

    get left() { return this.x; }

    get right() { return this.x + this.width; }

    get top() { return this.y; }

    get bottom() { return this.y + this.height; }

    contains( x,y ) {
        return ( x >= this.left && x < this.right && y >= this.top && y < this.bottom );
    }
}


class Point {
    /**
     * Creates an instance of Point.
     * @param {[number,number]|Float32Array|number|Point=} x
     * @param {number=} y
     * @memberof Point
     */
    constructor( x,y ) {
        if ( Array.isArray( x ) || x instanceof Float32Array ) {
            this.x = x[0];
            this.y = x[1];
        } else if ( typeof x === "object" ) {
            this.x = x.x;
            this.y = x.y;
        } else {
            this.x = x || 0;
            this.y = y || 0;
        }
    }

    /**
     *
     *
     * @returns {Point}
     * @memberof Point
     */
    clone() {
        return new Point( this );    
    }

    getArray() {
        return [this.x,this.y];
    }

    get xy() {
        return [this.x,this.y];
    }

    set xy( p ) {
        const p2 = getPointLike( p );

        this.x = p2.x;
        this.y = p2.y;
    }

    /**
     * Point를 더한다.
     *
     * @param {Point|number} p
     * @returns {Point}
     * @memberof Point
     */
    add( p ) {
        const p2 = getPointLike( p );

        this.x += p2.x;
        this.y += p2.y;
        return new Point( this );
    }

    /**
     * Point를 뺀다.
     *
     * @param {Point|number} p
     * @returns {Point}
     * @memberof Point
     */
    subtract( p ) {
        const p2 = getPointLike( p );

        this.x -= p2.x;
        this.y -= p2.y;
        return new Point( this );
    }

    /**
     *
     *
     * @param {Point|number} p
     * @returns {Point}
     * @memberof Point
     */
    mul( p ) {
        const p2 = getPointLike( p );

        this.x *= p2.x;
        this.y *= p2.y;
        return new Point( this );
    }
}


class TypedArrayHelper {
    /**
     *
     *
     * @static
     * @param {Uint8Array} uint8Arr
     * @param {number} begin
     * @param {number=} length
     * @returns {Float32Array} 
     * @memberof TypedArrayHelper
     */
    static Uint8ToFloat32( uint8Arr,begin = 0,length = null ) {
        return new Float32Array( uint8Arr.buffer,uint8Arr.byteOffset + begin,( length != null ) ? Math.ceil( length / 4 ) : null );
    }

    /**
     *
     *
     * @static
     * @param {Uint16Array} uint16Arr
     * @param {number} begin
     * @param {number=} length
     * @returns {Float32Array} 
     * @memberof TypedArrayHelper
     */
    static Uint16ToFloat32( uint16Arr,begin = 0,length = null ) {
        return new Float32Array( uint16Arr.buffer,uint16Arr.byteOffset + begin * 2,length != null ? Math.ceil( length / 2 ) : null );
    }

    /**
     *
     *
     * @static
     * @param {Float32Array} float32Arr
     * @param {number} begin
     * @param {number=} length
     * @returns {Uint8Array} 
     * @memberof TypedArrayHelper
     */
    static Float32ToUint8( float32Arr,begin = 0,length = null ) {
        return new Uint8Array( float32Arr.buffer,float32Arr.byteOffset + begin * 4,length != null ? length * 4 : null );
    }

    /**
     *
     *
     * @static
     * @param {Float32Array} float32Arr
     * @param {number} begin
     * @param {number=} length
     * @returns {Uint16Array} 
     * @memberof TypedArrayHelper
     */
    static Float32ToUint16( float32Arr,begin = 0,length = null ) {
        return new Uint16Array( float32Arr.buffer,float32Arr.byteOffset + begin * 4,length != null ? length * 2 : null );
    }

    /**
     *
     *
     * @static
     * @param {Float32Array|Uint16Array|Uint8Array} typedArr
     * @param {number} begin
     * @param {number=} length
     * @returns {*} 
     * @memberof TypedArrayHelper
     */
    static subarray( typedArr,begin = 0,length = null ) {        
        return typedArr.subarray( begin, length != null ? begin + length : null );
    }

    /**
     *
     *
     * @static
     * @param {Float32Array|Uint16Array|Uint8Array} typedArr
     * @param {number} newSize
     * @returns {Float32Array|Uint16Array|Uint8Array}
     * @memberof TypedArrayHelper
     */
    static resize( typedArr, newSize ) {
        //@ts-ignore
        const newArr = new ( typedArr.constructor )( newSize );

        newArr.set( typedArr,0,Math.min( newSize,typedArr.length ) );
        return newArr;
    }

    static memcpy( dst,dstOffset,src,srcOffset,srcLength ) {
        // webpack polyfill 을 사용하는 코드
        // const elementSize = dst.constructor.BYTES_PER_ELEMENT;

        // dstOffset = dst.byteOffset + dstOffset * elementSize;
        // srcOffset = src.byteOffset + srcOffset * elementSize;
        // srcLength *= elementSize;

        // Buffer.from( src.buffer, srcOffset,srcLength ).copy( Buffer.from( dst.buffer, dstOffset, srcLength ) );

        if ( srcLength < 100 ) {
            const dst2 = dst.subarray( dstOffset );
            const src2 = src.subarray( srcOffset );

            for ( let i = 0; i < srcLength; i++ ) {
                dst2[i] = src2[i];
            }
        } else {
            const byteLength = srcLength * src.BYTES_PER_ELEMENT;
            const u8dst = new Uint8Array( dst.buffer,dst.byteOffset + dstOffset * dst.BYTES_PER_ELEMENT );
            const u8src = new Uint8Array( src.buffer,src.byteOffset + srcOffset * src.BYTES_PER_ELEMENT,byteLength );

            u8dst.set( u8src );
        }
    }    
}


/***/ }),

/***/ "./engine/src/Utils.js":
/*!*****************************!*\
  !*** ./engine/src/Utils.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Utils": () => (/* binding */ Utils)
/* harmony export */ });



class AsyncValue {
    constructor() {
        this.value = undefined;
        this.promise = new Promise( ( resolve,reject ) => {
            this._resolve = resolve;
            this._reject = reject;
        } );
    }

    resolve( v ) {
        this.value = v;
        this._resolve( v );
        delete this.promise;
        delete this._resolve;
        delete this._reject;
    }

    reject( e ) {
        this._reject( e );
        delete this.promise;
        delete this._resolve;
        delete this._reject;
    }
}

const Utils = {

    AsyncValue,
    /**
     * Ctrl-shift-H
     * Alt-R 상태로 다음 조건 변환하여 일괄 삭제할 수 있다
     * Utils\.nullReplace\(([^,]+)\s*,\s*([^)]+)\)
     * $1 != null ? $1 : $2
     * 
     * @param {*} target
     * @param {*} value
     * @returns {*}
     * @memberof Utils
     */
    nullReplace( target, value ) {
        return target != null ? target : value;
    },

    /**
     *
     *
     * @param {number=} a
     * @param {number=} b
     * @returns {number}
     * @memberof Utils
     */
    random( a, b ) {
        console.assert( ( a == null && b == null ) || ( a != null && b != null ), `random(${a},${b}) 구문은 허용되지 않음. random(1,a) 혹은 random(0,a)를 명확히 쓸 것` );

        if ( b == null ) {
            // [1,i]
            return Math.floor( Math.random() * a + 1 );
        } else if ( a == null ) {
            return Math.random();
        } else {
            // [i,j]
            return Math.floor( Math.random() * ( b - a + 1 ) + a );
        }
    },

    /**
     *
     *
     * @param {number|string} a
     * @param {number} b
     * @returns {number}
     * @memberof Utils
     */
    precision( a, b ) {
        //@ts-ignore
        return parseFloat( a ).toPrecision( b );
    },

    /**
     *
     *
     * @param {number} a
     * @param {number} b
     * @returns {number}
     * @memberof Utils
     */
    idiv( a, b ) {
        // 음수에 대해서 바르게 처리함
        return a / b >> 0;
    },

    /**
     *
     *
     * @param {number} v0
     * @param {number} v1
     * @param {number} a
     * @returns {number}
     * @memberof Utils
     */
    lerp( v0, v1, a ) {
        return v0 + ( v1 - v0 ) * a;
    },

    /**
     *
     *
     * @param {number} v
     * @param {number} min
     * @param {number} max
     * @returns {number}
     * @memberof Utils
     */
    clamp( v, min, max ) {
        return Math.min( Math.max( v, min ), max );
    },

    /**
     *
     *
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @returns {number}
     * @memberof Utils
     */
    distance( x1, y1, x2, y2 ) {
        return Math.sqrt( ( x2 - x1 ) * ( x2 - x1 ) + ( y2 - y1 ) * ( y2 - y1 ) );
    },

    /**
     *
     *
     * @param {number} a
     * @returns {number}
     * @memberof Utils
     */
    frac( a ) {
        return a % 1;
    },

    legacy( msg = "" ) {
        // console.log( `♨ Legacy API ${msg}` );
    },

    notImplements( msg = "" ) {
        // console.log( `♨ Not Implemented. ${msg}` );
    },

    /**
     *
     *
     * @param {string} filename
     * @returns {string}
     * @memberof Utils
     */
    getEmbeddedFile( filename ) {
        console.assert( self._embeddedFiles[filename.toLowerCase()] != null );

        return self._embeddedFiles[filename];
    },

    /**
     *
     *
     * @param {string} filename
     * @returns {Uint8Array}
     * @memberof Utils
     */
    getEmbeddedBinaryFile( filename ) {
        console.assert( self._embeddedFiles[filename.toLowerCase()] != null );
        const base64Data = self._embeddedFiles[filename.toLowerCase()];
        const lookupTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        const arr = [];

        for ( let i = 0; i < base64Data.length; ) {
            const d = lookupTable.indexOf( base64Data.charAt( i++ ) );
            const e = lookupTable.indexOf( base64Data.charAt( i++ ) );
            const f = lookupTable.indexOf( base64Data.charAt( i++ ) );
            const g = lookupTable.indexOf( base64Data.charAt( i++ ) );
            const a = ( d << 2 ) | ( e >> 4 );
            const b = ( ( e & 15 ) << 4 ) | ( f >> 2 );
            const c = ( ( f & 3 ) << 6 ) | g;

            arr.push( a );
            if ( f != 64 ) arr.push( b );
            if ( g != 64 ) arr.push( c );
        }
        return new Uint8Array( arr );
    },

    embeddedFileExist( filename ) {
        return self._embeddedFiles[filename] != null;
    },

    /**
     *
     *
     * @param {string} filename
     * @returns {XMLDocument}
     * @memberof Utils
     */
    getEmbeddedXmlFile( filename ) {
        // @ts-ignore
        const xml = ( new window.DOMParser() ).parseFromString( Utils.getEmbeddedFile( filename ), "text/xml" );

        return xml;
    },

    /**
     * @typedef {object} Size
     * @property {number} width
     * @property {number} height
     *
     * @param {string} filename
     * @returns {Size}
     * @memberof Utils
     */
    getImageSize( filename ) {
        const imageInfo = self._imageSizes[filename.toLowerCase()];

        if ( imageInfo ) {
            return imageInfo;
        } else {
            return { width: 0,height: 0 };
        }
    },

    /**
     * 문자열에서 <tag> </tag> 형태를 추출한다
     *
     * @static
     * @param {string} str
     * @returns {*}
     * @memberof TextField
     */
    splitStringWithTag( str ) {
        const tagRegExp = /<([^>]+)>/g;
        const tagStack = ["default"];
        const resultArr = [];

        let lastIndex = 0;

        while ( true ) {
            const result = tagRegExp.exec( str );
            const lastTag = tagStack[tagStack.length - 1]; 

            if ( result == null ) {
                // 태그 못찾음
                if ( lastIndex < str.length ) {
                    resultArr.push( [lastTag,str.substring( lastIndex )] );
                }
                return resultArr;
            } else {
                const tagName = result[1];
                const tagIndex = result.index;

                if ( tagName[0] != '/' ) {
                    tagStack.push( tagName );
                } else if ( lastTag == tagName.substring( 1 ) ) {
                    tagStack.length--;
                } 
                if ( lastIndex != tagIndex ) {
                    resultArr.push( [lastTag,str.substring( lastIndex,tagIndex )] );
                }
                lastIndex = tagRegExp.lastIndex;
            }
        }
    },



    /**
     * [r,g,b,a] 가 담긴 어레이를 반환한다. r,g,b는 0~1.0의 값이다.
     *
     * @param {number} c
     * @param {number=} a
     * @returns {[number,number,number,number]}
     * @memberof Utils
     */
    hex2rgba( c,a ) {
        const result = [];

        // b,g,r,a 순서
        result[0] = ( ( c & 0xff0000 ) >> 16 ) / 255;
        result[1] = ( ( c & 0xff00 ) >> 8 ) / 255;
        result[2] = ( c & 0xff ) / 255;
        if ( a != null ) {
            result[3] = a;
        } else {
            result[3] = ( ( c & 0xff000000 ) >> 24 ) / 255;
        }
        //@ts-ignore
        return result;
    },

    rgba2hex( arr, i ) {
        const idx = i || 0;

        return ( ( arr[idx] * 255 ) << 16 ) | ( ( arr[idx + 1] * 255 ) << 8 ) | ( arr[idx + 2] * 255 ) | ( ( arr[idx + 3] * 255 ) << 24 );
    },


    /**
     *
     *
     * @param {number} angle
     * @returns {number}
     * @memberof Utils
     */
    angleToDir( angle ) {
        let dir;

        if ( -135 < angle && angle <= -45 ) {
            dir = 1;
        } else if ( -45 < angle && angle <= 45 ) {
            dir = 2;
        } else if ( 45 < angle && angle <= 135 ) {
            dir = 3;
        } else {
            dir = 4;
        }

        return dir;
    },

    /**
     *
     *
     * @param {number} dir
     * @returns {[number,number]}
     * @memberof Utils
     */
    dirToOffset( dir ) {
        let ax, ay;

        if ( dir == 1 ) {
            [ax, ay] = [0, -1];
        } else if ( dir == 2 ) {
            [ax, ay] = [1, 0];
        } else if ( dir == 3 ) {
            [ax, ay] = [0, 1];
        } else if ( dir == 4 ) {
            [ax, ay] = [-1, 0];
        }

        return [ax, ay];
    },



    filterAttrib( attrib, whiteList, blackList ) {
        // 성공하면 true
        const whiteListStr = whiteList != null ? ( Array.isArray( whiteList ) ? "," + whiteList.join( "," ) + "," : "," + whiteList + "," ) : ",*,";
        const blackListStr = blackList != null ? ( Array.isArray( blackList ) ? "," + blackList.join( "," ) + "," : "," + blackList + "," ) : "";
        const attribs = attrib != null ? ( Array.isArray( attrib ) ? attrib : attrib.split( "," ) ) : [];


        let whitePass;

        if ( blackListStr.indexOf( ",*," ) >= 0 ) {
            // black이 * 면 그냥 실패
            return false;
        } else if ( whiteListStr.indexOf( ",*," ) >= 0 ) {
            //white가 * 면 그냥 통과
            whitePass = true;
        } else if ( attribs.length > 0 ) {
            for ( const v of attribs ) {
                if ( whiteListStr.indexOf( "," + v + "," ) >= 0 ) {
                    //화이트에서 하나라도 있으면 통과
                    whitePass = true;
                    break;
                }
            }
        } else {
            //어트리뷰트가 하나도 주어지지 않았을 경우 실패
            return false;
        }

        if ( whitePass ) {
            for ( const v of attribs ) {
                if ( blackListStr.indexOf( "," + v + "," ) >= 0 ) {
                    //블랙에서 하나라도 있으면 최종 실패
                    return false;
                }
            }

            return true;
        }

        return false;
    },


    format( text, ...args ) {
        let s;

        if ( args.length > 0 ) {
            // %s %d
            // %0 %1 %2 %3 %4...
            let count = 0;

            s = text.replace( /%[s|d]/g, function ( s ) {
                return `%${count++}`;
            } );

            for ( let i = 0; i < args.length; i++ ) {
                s = s.replace( `%${i}`, args[i] );
            }
        } else s = text;

        return s;
    },

    isNode() {
        return ( typeof {"env": {}} == "object" && typeof {"env": {}}.versions == "object" && typeof {"env": {}}.versions.node != "undefined" );
    },

    isWebWorker() {
        //@ts-ignore
        return !this.isNode() 
            && ( typeof WorkerGlobalScope !== "undefined" ) 
            && ( typeof importScripts === "function" ) 
            // eslint-disable-next-line no-undef
            && ( navigator instanceof WorkerNavigator );
    },

    clearObject( obj ) {
        const props = Object.keys( obj );

        for ( let i = 0,n = props.length; i < n; i++ ) {
            delete obj[props[i]];
        }
    }

};


/***/ }),

/***/ "./engine/src/easing.js":
/*!******************************!*\
  !*** ./engine/src/easing.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "easing": () => (/* binding */ easing)
/* harmony export */ });
/*
Easing functions adapted from Robert Penner's AS3 tweening equations.
*/

const easing = {};

const backS = 1.70158;

easing.inBack = function ( t ) {
    return t * t * ( ( backS + 1 ) * t - backS );
};

easing.outBack = function ( t ) {
    t = t - 1;

    return t * t * ( ( backS + 1 ) * t + backS ) + 1;
};

easing.inOutBack = function ( t ) {
    t = t * 2;

    if ( t < 1 ) return 0.5 * ( t * t * ( ( backS * 1.525 + 1 ) * t - backS * 1.525 ) );
    else {
        t = t - 2;

        return 0.5 * ( t * t * ( ( backS * 1.525 + 1 ) * t + backS * 1.525 ) + 2 );
    }
};

easing.inBounce = function ( t ) {
    return 1 - easing.outBounce( 1 - t );
};

easing.outBounce = function ( t ) {
    if ( t < 1 / 2.75 ) {
        return 7.5625 * t * t;
    } else if ( t < 2 / 2.75 ) {
        t = t - 1.5 / 2.75;

        return 7.5625 * t * t + 0.75;
    } else if ( t < 2.5 / 2.75 ) {
        t = t - 2.25 / 2.75;

        return 7.5625 * t * t + 0.9375;
    } else {
        t = t - 2.625 / 2.75;

        return 7.5625 * t * t + 0.984375;
    }
};

easing.inOutBounce = function ( t ) {
    t = t * 2;
    if ( t < 1 ) return 0.5 * easing.inBounce( t );
    else return 0.5 * easing.outBounce( t - 1 ) + 0.5;
};

easing.inCircular = function ( t ) {
    return -( Math.sqrt( 1 - t * t ) - 1 );
};

easing.outCircular = function ( t ) {
    return Math.sqrt( 1 - ( t - 1 ) * ( t - 1 ) );
};

easing.inOutCircular = function ( t ) {
    t = t * 2;

    if ( t < 1 ) return -0.5 * ( Math.sqrt( 1 - t * t ) - 1 );
    else {
        t = t - 2;

        return 0.5 * ( Math.sqrt( 1 - t * t ) + 1 );
    }
};

easing.inCubic = function ( t ) {
    return t * t * t;
};

easing.outCubic = function ( t ) {
    t = t - 1;

    return t * t * t + 1;
};

easing.inOutCubic = function ( t ) {
    if ( t < 0.5 ) return 4 * t * t * t;
    else {
        t = t - 1;

        return 4 * t * t * t + 1;
    }
};

var elasticA = 1;
var elasticP = 0.3;
var elasticS = elasticP / 4;

easing.inElastic = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    t = t - 1;

    return -( elasticA * Math.pow( 2, 10 * t ) * Math.sin( ( t - elasticS ) * ( 2 * Math.PI ) / elasticP ) );
};

easing.outElastic = function ( t ) {
    if ( t == 0 || t == 1 ) return t;

    return elasticA * Math.pow( 2, -10 * t ) * Math.sin( ( t - elasticS ) * ( 2 * Math.PI ) / elasticP ) + 1;
};

easing.inOutElastic = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    t = t * 2 - 1;
    if ( t < 0 ) return -0.5 * ( elasticA * Math.pow( 2, 10 * t ) * Math.sin( ( t - elasticS * 1.5 ) * ( 2 * Math.PI ) / ( elasticP * 1.5 ) ) );

    return 0.5 * elasticA * Math.pow( 2, -10 * t ) * Math.sin( ( t - elasticS * 1.5 ) * ( 2 * Math.PI ) / ( elasticP * 1.5 ) ) + 1;
};

easing.inExponential = function ( t ) {
    if ( t == 0 ) return 0;

    return Math.pow( 2, 10 * ( t - 1 ) );
};

easing.outExponential = function ( t ) {
    if ( t == 1 ) return 1;

    return 1 - Math.pow( 2, -10 * t );
};

easing.inOutExponential = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    t = t * 2 - 1;
    if ( t < 0 ) return 0.5 * Math.pow( 2, 10 * t );

    return 1 - 0.5 * Math.pow( 2, -10 * t );
};

easing.linear = function ( t ) {
    return t;
};

easing.inQuadratic = function ( t ) {
    return t * t;
};

easing.outQuadratic = function ( t ) {
    return -t * ( t - 2 );
};

easing.inOutQuadratic = function ( t ) {
    if ( t < 0.5 ) return 2 * t * t;

    return -2 * t * ( t - 2 ) - 1;
};

easing.inQuartic = function ( t ) {
    return t * t * t * t;
};

easing.outQuartic = function ( t ) {
    t = t - 1;

    return 1 - t * t * t * t;
};

easing.inOutQuartic = function ( t ) {
    if ( t < 0.5 ) return 8 * t * t * t * t;
    t = t - 1;

    return -8 * t * t * t * t + 1;
};

easing.inQuintic = function ( t ) {
    return t * t * t * t * t;
};

easing.outQuintic = function ( t ) {
    t = t - 1;

    return 1 + t * t * t * t * t;
};

easing.inOutQuintic = function ( t ) {
    if ( t < 0.5 ) return 16 * t * t * t * t * t;
    t = t - 1;

    return 16 * t * t * t * t * t + 1;
};

easing.inSine = function ( t ) {
    return 1 - Math.cos( t * ( Math.PI / 2 ) );
};

easing.outSine = function ( t ) {
    return Math.sin( t * ( Math.PI / 2 ) );
};

easing.inOutSine = function ( t ) {
    return -0.5 * ( Math.cos( t * Math.PI ) - 1 );
};

easing.outElasticSmooth = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    var elasticA = 1, elasticP = 0.38;
    var elasticS = elasticP / 4;

    return elasticA * Math.pow( 2.5, -10 * t ) * Math.sin( ( t - elasticS ) * ( 2 * Math.PI ) / elasticP ) + 1;
};

easing.inElasticSmooth2 = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    t = t - 1;
    var elasticA = 1, elasticP = 0.57;
    var elasticS = elasticP / 4;

    return -( elasticA * Math.pow( 2.6, 10 * t ) * Math.sin( ( t - elasticS ) * ( 2 * Math.PI ) / elasticP ) );
};

easing.outElasticSmooth2 = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    var elasticA = 1, elasticP = 0.57;
    var elasticS = elasticP / 4;

    return elasticA * Math.pow( 2.6, -10 * t ) * Math.sin( ( t - elasticS ) * ( 2 * Math.PI ) / elasticP ) + 1;
};

easing.outElasticWave = function ( t ) {
    if ( t == 0 || t == 1 ) return t;
    var elasticP = 0.19;
    var elasticS = elasticP / 4;
    var tPow = Math.pow( t, 4 );
    var v = Math.pow( 220, -0.7 * Math.pow( t, 0.4 ) ) * Math.sin( ( Math.pow( t, 0.95 ) - elasticS ) * ( 2 * Math.PI ) / elasticP ) + 1;

    return v * ( 1 - tPow ) + tPow;
};




/***/ }),

/***/ "./engine/src/flatfast.js":
/*!********************************!*\
  !*** ./engine/src/flatfast.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Application": () => (/* reexport safe */ _Application_js__WEBPACK_IMPORTED_MODULE_0__.Application),
/* harmony export */   "application": () => (/* reexport safe */ _Application_js__WEBPACK_IMPORTED_MODULE_0__.application),
/* harmony export */   "stage": () => (/* reexport safe */ _Application_js__WEBPACK_IMPORTED_MODULE_0__.stage),
/* harmony export */   "Bitmap": () => (/* reexport safe */ _Bitmap_js__WEBPACK_IMPORTED_MODULE_1__.Bitmap),
/* harmony export */   "Component": () => (/* reexport safe */ _Component_js__WEBPACK_IMPORTED_MODULE_2__.Component),
/* harmony export */   "ComponentHolder": () => (/* reexport safe */ _ComponentHolder_js__WEBPACK_IMPORTED_MODULE_3__.ComponentHolder),
/* harmony export */   "Event": () => (/* reexport safe */ _Event_js__WEBPACK_IMPORTED_MODULE_4__.Event),
/* harmony export */   "EventDispatcher": () => (/* reexport safe */ _EventDispatcher_js__WEBPACK_IMPORTED_MODULE_5__.EventDispatcher),
/* harmony export */   "TrueTypeFont": () => (/* reexport safe */ _TrueTypeFont_js__WEBPACK_IMPORTED_MODULE_6__.TrueTypeFont),
/* harmony export */   "BitmapFont": () => (/* reexport safe */ _BitmapFont_js__WEBPACK_IMPORTED_MODULE_7__.BitmapFont),
/* harmony export */   "MsdfFont": () => (/* reexport safe */ _MsdfFont_js__WEBPACK_IMPORTED_MODULE_8__.MsdfFont),
/* harmony export */   "KeyCode": () => (/* reexport safe */ _KeyCode_js__WEBPACK_IMPORTED_MODULE_9__.KeyCode),
/* harmony export */   "Layout": () => (/* reexport safe */ _Layout_js__WEBPACK_IMPORTED_MODULE_10__.Layout),
/* harmony export */   "Matrix": () => (/* reexport safe */ _Matrix_js__WEBPACK_IMPORTED_MODULE_11__.Matrix),
/* harmony export */   "Mesh": () => (/* reexport safe */ _Mesh_js__WEBPACK_IMPORTED_MODULE_12__.Mesh),
/* harmony export */   "MovieClip": () => (/* reexport safe */ _MovieClip_js__WEBPACK_IMPORTED_MODULE_13__.MovieClip),
/* harmony export */   "Particles": () => (/* reexport safe */ _Particles_js__WEBPACK_IMPORTED_MODULE_14__.Particles),
/* harmony export */   "Pixel": () => (/* reexport safe */ _Pixel_js__WEBPACK_IMPORTED_MODULE_15__.Pixel),
/* harmony export */   "RenderTarget": () => (/* reexport safe */ _RenderTarget_js__WEBPACK_IMPORTED_MODULE_16__.RenderTarget),
/* harmony export */   "SceneManager": () => (/* reexport safe */ _SceneManager_js__WEBPACK_IMPORTED_MODULE_17__.SceneManager),
/* harmony export */   "Shader": () => (/* reexport safe */ _Shader_js__WEBPACK_IMPORTED_MODULE_18__.Shader),
/* harmony export */   "Shape": () => (/* reexport safe */ _Shape_js__WEBPACK_IMPORTED_MODULE_19__.Shape),
/* harmony export */   "Sound": () => (/* reexport safe */ _Sound_js__WEBPACK_IMPORTED_MODULE_20__.Sound),
/* harmony export */   "Spine": () => (/* reexport safe */ _Spine_js__WEBPACK_IMPORTED_MODULE_21__.Spine),
/* harmony export */   "Sprite": () => (/* reexport safe */ _Sprite_js__WEBPACK_IMPORTED_MODULE_22__.Sprite),
/* harmony export */   "Stage": () => (/* reexport safe */ _Stage_js__WEBPACK_IMPORTED_MODULE_23__.Stage),
/* harmony export */   "Storage": () => (/* reexport safe */ _Storage_js__WEBPACK_IMPORTED_MODULE_24__.Storage),
/* harmony export */   "TextField": () => (/* reexport safe */ _TextField_js__WEBPACK_IMPORTED_MODULE_25__.TextField),
/* harmony export */   "Texture": () => (/* reexport safe */ _Texture_js__WEBPACK_IMPORTED_MODULE_26__.Texture),
/* harmony export */   "TextureBase": () => (/* reexport safe */ _TextureBase_js__WEBPACK_IMPORTED_MODULE_27__.TextureBase),
/* harmony export */   "TexturePack": () => (/* reexport safe */ _TexturePack_js__WEBPACK_IMPORTED_MODULE_28__.TexturePack),
/* harmony export */   "TileMap": () => (/* reexport safe */ _TileMap_js__WEBPACK_IMPORTED_MODULE_29__.TileMap),
/* harmony export */   "Timer": () => (/* reexport safe */ _Timer_js__WEBPACK_IMPORTED_MODULE_30__.Timer),
/* harmony export */   "Tween": () => (/* reexport safe */ _Tween_js__WEBPACK_IMPORTED_MODULE_31__.Tween),
/* harmony export */   "Utils": () => (/* reexport safe */ _Utils_js__WEBPACK_IMPORTED_MODULE_32__.Utils),
/* harmony export */   "easing": () => (/* reexport safe */ _easing_js__WEBPACK_IMPORTED_MODULE_33__.easing),
/* harmony export */   "hangul": () => (/* reexport safe */ _hangul_js__WEBPACK_IMPORTED_MODULE_34__.hangul),
/* harmony export */   "Point": () => (/* reexport safe */ _Types_js__WEBPACK_IMPORTED_MODULE_35__.Point),
/* harmony export */   "Rect": () => (/* reexport safe */ _Types_js__WEBPACK_IMPORTED_MODULE_35__.Rect),
/* harmony export */   "Serializer": () => (/* reexport safe */ _Serializer_js__WEBPACK_IMPORTED_MODULE_36__.Serializer)
/* harmony export */ });
/* harmony import */ var _Application_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Application.js */ "./engine/src/Application.js");
/* harmony import */ var _Bitmap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Bitmap.js */ "./engine/src/Bitmap.js");
/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Component.js */ "./engine/src/Component.js");
/* harmony import */ var _ComponentHolder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ComponentHolder.js */ "./engine/src/ComponentHolder.js");
/* harmony import */ var _Event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Event.js */ "./engine/src/Event.js");
/* harmony import */ var _EventDispatcher_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./EventDispatcher.js */ "./engine/src/EventDispatcher.js");
/* harmony import */ var _TrueTypeFont_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TrueTypeFont.js */ "./engine/src/TrueTypeFont.js");
/* harmony import */ var _BitmapFont_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./BitmapFont.js */ "./engine/src/BitmapFont.js");
/* harmony import */ var _MsdfFont_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MsdfFont.js */ "./engine/src/MsdfFont.js");
/* harmony import */ var _KeyCode_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./KeyCode.js */ "./engine/src/KeyCode.js");
/* harmony import */ var _Layout_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Layout.js */ "./engine/src/Layout.js");
/* harmony import */ var _Matrix_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Matrix.js */ "./engine/src/Matrix.js");
/* harmony import */ var _Mesh_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Mesh.js */ "./engine/src/Mesh.js");
/* harmony import */ var _MovieClip_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./MovieClip.js */ "./engine/src/MovieClip.js");
/* harmony import */ var _Particles_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Particles.js */ "./engine/src/Particles.js");
/* harmony import */ var _Pixel_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Pixel.js */ "./engine/src/Pixel.js");
/* harmony import */ var _RenderTarget_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./RenderTarget.js */ "./engine/src/RenderTarget.js");
/* harmony import */ var _SceneManager_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./SceneManager.js */ "./engine/src/SceneManager.js");
/* harmony import */ var _Shader_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Shader.js */ "./engine/src/Shader.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Shape.js */ "./engine/src/Shape.js");
/* harmony import */ var _Sound_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Sound.js */ "./engine/src/Sound.js");
/* harmony import */ var _Spine_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./Spine.js */ "./engine/src/Spine.js");
/* harmony import */ var _Sprite_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./Sprite.js */ "./engine/src/Sprite.js");
/* harmony import */ var _Stage_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./Stage.js */ "./engine/src/Stage.js");
/* harmony import */ var _Storage_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./Storage.js */ "./engine/src/Storage.js");
/* harmony import */ var _TextField_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./TextField.js */ "./engine/src/TextField.js");
/* harmony import */ var _Texture_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./Texture.js */ "./engine/src/Texture.js");
/* harmony import */ var _TextureBase_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./TextureBase.js */ "./engine/src/TextureBase.js");
/* harmony import */ var _TexturePack_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./TexturePack.js */ "./engine/src/TexturePack.js");
/* harmony import */ var _TileMap_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./TileMap.js */ "./engine/src/TileMap.js");
/* harmony import */ var _Timer_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./Timer.js */ "./engine/src/Timer.js");
/* harmony import */ var _Tween_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./Tween.js */ "./engine/src/Tween.js");
/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./Utils.js */ "./engine/src/Utils.js");
/* harmony import */ var _easing_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./easing.js */ "./engine/src/easing.js");
/* harmony import */ var _hangul_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./hangul.js */ "./engine/src/hangul.js");
/* harmony import */ var _Types_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./Types.js */ "./engine/src/Types.js");
/* harmony import */ var _Serializer_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./Serializer.js */ "./engine/src/Serializer.js");







































/***/ }),

/***/ "./engine/src/hangul.js":
/*!******************************!*\
  !*** ./engine/src/hangul.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hangul": () => (/* binding */ hangul)
/* harmony export */ });

const choSungTable = ["ㄱ", "ㄲ", "ㄴ", "ㄷ", "ㄸ", "ㄹ", "ㅁ", "ㅂ", "ㅃ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅉ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ"];
const jungSungTable = [
    "ㅏ", "ㅐ", "ㅑ", "ㅒ", "ㅓ", // 0~4;
    "ㅔ", "ㅕ", "ㅖ", "ㅗ", "ㅘ", // 5~9;
    "ㅙ", "ㅚ", "ㅛ", "ㅜ", "ㅝ", // 10~14;
    "ㅞ", "ㅟ", "ㅠ", "ㅡ", "ㅢ", // 15~19;
    "ㅣ"];
const jongSungTable = [" ", "ㄱ", "ㄲ", "ㄳ", "ㄴ", "ㄵ", "ㄶ", "ㄷ", "ㄹ", "ㄺ", "ㄻ", "ㄼ", "ㄽ", "ㄾ", "ㄿ", "ㅀ", "ㅁ", "ㅂ", "ㅄ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ"];

const choSungToCode = {};
const jungSungToCode = {
    ["ㅏㅣ"]:  1,
    ["ㅣㅏ"]:  2,
    ["ㅑㅣ"]:  3,
    ["ㅓㅣ"]:  5,
    ["ㅣㅓ"]:  6,
    ["ㅕㅣ"]:  7,
    ["ㅗㅏ"]:  9,
    ["ㅗㅐ"]:  10,
    ["ㅗㅏㅣ"]: 10,
    ["ㅗㅣ"]:  11,
    ["ㅣㅗ"]:  12,
    ["ㅜㅓ"]:  14,
    ["ㅜㅔ"]:  15,
    ["ㅜㅓㅣ"]: 15,
    ["ㅜㅣ"]:  16,
    ["ㅡㅜ"]:  17,
    ["ㅡㅣ"]:  19,
};
const jongSungToCode = {};

for ( let i = 0; i < choSungTable.length; i++ ) {
    const v = choSungTable[i];

    choSungToCode[v] = i;
}

for ( let i = 0; i < jungSungTable.length; i++ ) {
    const v = jungSungTable[i];

    jungSungToCode[v] = i;
}

for ( let i = 0; i < jongSungTable.length; i++ ) {
    const v = jongSungTable[i];

    jongSungToCode[v] = i;
}

const uniCodeHangulBase = 0xac00;
const uniCodeHangulLast = 0xd79f;

const hangul = {};

function ucharToNumber( uchar ) {
    return uchar.charCodeAt( 0 );
}

const rangeHangul = [ucharToNumber( "가" ), ucharToNumber( "힣" )];

hangul.isValidUnicode = function ( uchar ) {
    //[가-힣] 검사, 
    const num = ucharToNumber( uchar );

    return num >= rangeHangul[0] && num <= rangeHangul[1];
};

const rangeHangulJa = [ucharToNumber( "ㄱ" ), ucharToNumber( "ㅎ" )];
const rangeHangulMo = [ucharToNumber( "ㅏ" ), ucharToNumber( "ㅣ" )];

hangul.isJamo = function ( uchar ) {
    //자모 여부 검사 검사
    const num = ucharToNumber( uchar );

    return ( num >= rangeHangulJa[0] && num <= rangeHangulJa[1] ) ||
		( num >= rangeHangulMo[0] && num <= rangeHangulMo[1] );
};

// 마지막이 종성이 검사
hangul.isJongSung = function ( str ) {
    const char = str.substr( str.length - 1 );
    const code = char.charCodeAt( 0 );

    if ( code < uniCodeHangulBase || code > uniCodeHangulLast ) {
        const choSung = choSungToCode[char];

        if ( choSung ) {
            // 자음은 모두 받침이 있게 발음된다
            return true;
        }

        if ( "bcdfghjklmnpqrstvwxz136780".indexOf( char ) >= 0 ) {
            return true;
        }

        return false;
    }

    // 분해해서 받침이 있는지 본다
    let uc = code - uniCodeHangulBase;

    //const choSung = Math.floor(uc / (21 * 28));
    uc = uc % ( 21 * 28 );
    //const jungSung = Math.floor(uc / 28);
    uc = uc % 28;
    const jongSung = uc;

    return jongSung > 0;
};




// 대한민국{를} 가려면 [비행기]{을} 타라

hangul.replaceJoSa = function ( inputText ) {
    if ( inputText == null || inputText == "" ) return inputText;

    //let words = inputText.match(/\s*([\S]+){([^/}]+)}/g);
    const re = /}?([^}]*){([^/}]*)}/g;
    let result = re.exec( inputText );
    //const words = [];
    let lastIndex = 0;
    let s = "";

    while ( result != null ) {
        lastIndex = re.lastIndex;
        const [pre, joSa, lastChar] = [
            //RegExp.lastMatch,
            RegExp.$1,
            RegExp.$2,
            RegExp.$1.match( /.['"`^()[\]]?$/ )[0].substr( 0, 1 ), // 마지막 글자
        ];
        const isJongSung = hangul.isJongSung( lastChar );
        const jongSung = isJongSung ? hangul.divideJaSo( lastChar )[2] : null;
        let newJoSa;

        if ( joSa == "을" || joSa == "를" ) {
            newJoSa = isJongSung ? "을" : "를";
        } else if ( joSa == "이" || joSa == "가" ) {
            newJoSa = isJongSung ? "이" : "가";
        } else if ( joSa == "과" || joSa == "와" ) {
            newJoSa = isJongSung ? "과" : "와";
        } else if ( joSa == "은" || joSa == "는" ) {
            newJoSa = isJongSung ? "은" : "는";
        } else if ( joSa == "이는" ) {
            newJoSa = isJongSung ? "이는" : "는";
        } else if ( joSa == "이와" ) {
            newJoSa = isJongSung ? "이와" : "와";
        } else if ( joSa == "여" || joSa == "이여" ) {
            newJoSa = isJongSung ? "이여" : "여";
        } else if ( joSa == "으로" || joSa == "로" ) {
            newJoSa = ( isJongSung && jongSung != "ㄹ" ) ? "으로" : "로";
        } else if ( joSa == "이네" || joSa == "네" ) {
            newJoSa = isJongSung ? "이네" : "네";
        } else if ( joSa == "이랑" || joSa == "랑" ) {
            newJoSa = isJongSung ? "이랑" : "랑";
        } else if ( joSa == "라" ) {
            newJoSa = isJongSung ? "이라" : "라";
        }

        s = s + pre + newJoSa;

        result = re.exec( inputText );
    }

    return s + inputText.substr( lastIndex );
};

hangul.format = function ( text, ...args ) {
    let s;

    if ( args.length > 0 ) {
        // %s %d
        // %0 %1 %2 %3 %4...
        let count = 0;

        s = text.replace( /%[s|d]/g, function ( s ) {
            return `%${count++}`;
        } );

        for ( let i = 0; i < args.length; i++ ) {
            s = s.replace( `%${i}`, args[i] );
        }
    } else s = text;

    return hangul.replaceJoSa( s );
};

// 자소를 합친다
hangul.mergeJaSo = function ( choSung, jungSung, jongSung ) {
    //log(choSung,jungSung,jongSung);
    const choSungPos = choSungToCode[choSung];
    const jungSungPos = jungSungToCode[jungSung];
    const jongSungPos = jongSung ? jongSungToCode[jongSung] : 0;
    const code = uniCodeHangulBase + ( choSungPos * 21 + jungSungPos ) * 28 + jongSungPos;

    return String.fromCharCode( code );
};

// 글자하나를 자소로 분리한다
hangul.divideJaSo = function ( char ) {
    const code = char.charCodeAt( 0 );

    if ( code < uniCodeHangulBase || code > uniCodeHangulLast ) {
        const choSung = choSungToCode[char];

        if ( choSung ) {
            return [choSungTable[choSung]];
        }

        const jungSung = jungSungToCode[char];

        if ( jungSung ) {
            return [null, jungSungTable[jungSung]];
        }

        return [];
    }

    let uc = code - uniCodeHangulBase;
    const choSung = Math.floor( uc / ( 21 * 28 ) );

    uc = uc % ( 21 * 28 );
    const jungSung = Math.floor( uc / 28 );

    uc = uc % 28;
    const jongSung = uc;

    return [
        choSungTable[choSung],
        jungSungTable[jungSung],
        ( jongSung > 0 && jongSungTable[jongSung] || null )
    ];
};

// 이 캐릭터가 자소중에 하나인지 검사
hangul.getTypeOfJaSo = function ( char ) {
    let [f1, f2, f3] = [false, false, false];
    const choSung = choSungToCode[char];

    if ( choSung ) {
        f1 = true;
    }

    const jungSung = jungSungToCode[char];

    if ( jungSung ) {
        f2 = true;
    }

    const jongSung = jongSungToCode[char];

    if ( jongSung ) {
        f3 = true;
    }

    return [f1, f2, f3];
};

// console.log(hangul.divideJaSo("한"));
// console.log(hangul.mergeJaSo(...hangul.divideJaSo("글")));
// console.log(hangul.isJamo("한"));
// console.log(hangul.isJamo("ㅏ"));
// console.log(hangul.isJongSung("간"));
// console.log(hangul.isJongSung("가"));
// console.log(hangul.isJongSung("bob"));
// console.log(hangul.replaceJoSa("대한민국{를} 가려면 '비행기'{을} 타라 323{로}"));


/***/ }),

/***/ "./games/PALO2/src/dialog.js":
/*!***********************************!*\
  !*** ./games/PALO2/src/dialog.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vsWrapper/vs */ "./games/PALO2/src/vsWrapper/vs.js");




const dialogData = {
    "1p": [
        { face: "A", time: 0, dialog: "에구에구..\n또다시 출격이라니.." },
    ],
    "2p": [
        { face: "B", time: 0, dialog: "산소, 출격합니다~!" },
    ],
    "1p2p": [
        { face: "B", time: 3, dialog: "아이템은 공평하게\n나눠먹기에요!" },
        { face: "A", time: 0, dialog: "그거야 능력껏 먹는거지\n헐헐~" },
    ],
    "exit": [
        { face: "C", time: 2, dialog: "갈려고? 그럼 지구는 내 차지닷!\n크푸하타타타타!" },
        { face: "C", time: 2, dialog: "그래 맨날 공부만 해라!\n치사한 녀석 같으니~" },
        { face: "D", time: 4, dialog: "어! 진짜 갈려고? 가지마잉~\n좀 더 해봐잉~" },
        { face: "E", time: 3, dialog: "EXIT TO DOS?" },
        { face: "E", time: 4, dialog: "DOS는 이제 없어\n못나가" },
        { event: "mode:title" },
    ],
    "9": [
        { face: "E", time: 4, dialog: "나는 제작자A다.\n부디 1등상을 타오기 바란다." },
        { face: "E", time: 4, dialog: "인삼을 먹으면 아래 게이지에\n하나씩 불이 켜진다." },
        { face: "E", time: 4, dialog: "원하는 파워업에 불이 켜질때\n파워업 버튼을 누르면 된다." },
        { face: "E", time: 4, dialog: "할박사는 커서키와\nN, M으로 조종하고" },
        { face: "E", time: 4, dialog: "산소는 WASD키와\nZ, X로 조종하면 된다." },
        { face: "A", time: 0, dialog: "다 아는 거니까 그만해\n시끄럽다.. 쯧." },
    ],
    "16": [
        { face: "B", time: 3, dialog: "앗, 눈이 부셔!" },
        { face: "A", time: 4, dialog: "100k게임에 이 정도의 특수\n효과라니.. 대단하군." },
        { face: "E", time: 0, dialog: "후후후 이 정도를 가지고\n쑥스럽게." },
    ],
    "20": [
        { face: "B", time: 4, dialog: "계속 똑같은 배경만 나오잖아." },
        { face: "F", time: 4, dialog: "뭣이! 자세히 보면\n조금씩 다르단 말이다!" },
        { face: "A", time: 3, dialog: "앗, 자넨 누군가?" },
        { face: "F", time: 4, dialog: "음.. 소개가 늦었군.\n나는 제작자B요." },
        { face: "F", time: 4, dialog: "용량을 아끼느라 그런거니\n배경이 썰렁해도 이해하슈." },
        { face: "B", time: 0, dialog: "지루해.. -_-;" },
    ],
    "27": [
        { face: "C", time: 4, dialog: "훗훗훗.. 드디어 보스군.\n내 이름은 살모사!" },
        { face: "C", time: 4, dialog: "전편에서는 데모에만 나온\n비운의 악역이지!" },
        { face: "A", time: 3, dialog: "살모사 박사라구!\n산소야, 조심해라!" },
        { face: "B", time: 0, dialog: "네, 할아버지!" },
    ],
    "31": [
        { face: "D", time: 4, dialog: "우씨.. 두고보자!" },
        { face: "B", time: 0, dialog: "메에롱~" },
    ],
    "34": [
        { face: "B", time: 4, dialog: "여긴 우리학교잖아!\n근데 왜 이리 이상해?" },
        { face: "E", time: 4, dialog: "용량때문에\n다 삭제해서 그래." },
        { face: "A", time: 3, dialog: "전편에선 좀 나았는데.." },
        { face: "F", time: 0, dialog: "지금 배경은 전편의\n1/10분량의 타일이야!" },
    ],
    "39": [
        { face: "A", time: 3, dialog: "앗.. 도서관이..\n살모사의 짓인가.." },
        { face: "B", time: 3, dialog: "나쁜 녀석..\n아름다운 학교를.." },
        { face: "F", time: 0, dialog: "미안하다.\n용량때문에 내가 그런거야~" },
    ],
    "43": [
        { face: "B", time: 0, dialog: "이게 뭐야 -_-;" },
    ],
    "45": [
        { face: "E", time: 4, dialog: "이봐이봐, 정신차려!\n보스 등장이다!" },
        { face: "E", time: 6, dialog: "이번 보스는..\n전편에 이어 초대형 오리!" },
        { face: "E", time: 4, dialog: "..로 할려고 했는데\n삭제됐다. 험험." },
        { face: "C", time: 4, dialog: "좀 근사한 걸로\n주지 그랬어!" },
        { face: "A", time: 0, dialog: "자, 어쨌든 대결이다!" },
    ],
    "51": [
        { face: "D", time: 4, dialog: "부..분하다!\n보스만 컸어도..!" },
        { face: "A", time: 4, dialog: "자고로 정의는 승리하는 법!" },
        { face: "B", time: 0, dialog: "멋있어요 할아버지~" },
    ],
    "55": [
        { face: "E", time: 4, dialog: "어때,\n1등상은 탈 수 있을것 같나?" },
        { face: "A", time: 4, dialog: "쯧쯔.. 자고로 물욕에\n눈이 어두워선 망하는법." },
        { face: "E", time: 3, dialog: "당신도 라면만 먹으며\n게임 만들어 봐!" },
        { face: "E", time: 3, dialog: "게임제작자가 얼마나\n배고픈지 알아?" },
        { face: "F", time: 3, dialog: "흑흑.. 이 게임 만드느라\n나흘동안 초코파이밖에 못먹었다." },
        { face: "E", time: 3, dialog: "그래 이걸로 한 몫\n잡는거야 제작자B!" },
        { face: "F", time: 0, dialog: "따뜻한 밥이 먹고싶다\n제작자A!" },
    ],
    "63": [
        { face: "A", time: 4, dialog: "왜 계속 우주만 나오는거지." },
        { face: "F", time: 4, dialog: "용량땜에 삭제했어.." },
        { face: "B", time: 4, dialog: "에이 썰렁해!" },
        { face: "E", time: 4, dialog: "너 계속 떠들면\n머리카락 흔들리는 거" },
        { face: "E", time: 4, dialog: "정지시켜버린다!\n6프레임이나 된단말야." },
        { face: "F", time: 3, dialog: "그래 그러자~\n용량이 아깝다." },
        { face: "B", time: 0, dialog: "칫.. 치사해.." },
    ],
    "71": [
        { face: "E", time: 2, dialog: "보스등장!" },
        { face: "C", time: 2, dialog: "제작자 양반,\n이번엔 좀 큰 걸루.." },
        { face: "E", time: 6, dialog: "이번엔 믿어봐!" },
        { face: "A", time: 2, dialog: "아.. 아니 이건..!" },
        { face: "B", time: 4, dialog: "용량 아낀대더니..\n이게 뭐야!" },
        { face: "A", time: 4, dialog: "음.. 자고로.." },
        { face: "A", time: 4, dialog: "좋은게 좋은거지\n^_^;" },
        { face: "C", time: 4, dialog: "맞아 맞아~" },
        { face: "B", time: 0, dialog: "으이구 남자들이란;" },
    ],
    "81": [
        { face: "D", time: 4, dialog: "미인계도 실패야.." },
        { face: "A", time: 4, dialog: "쩝.. 아쉽군." },
        { face: "B", time: 4, dialog: "할아버지!" },
        { face: "C", time: 0, dialog: "두고보자 흑흑.." },
    ],
    "86": [
        { face: "E", time: 4, dialog: "거의 다 왔다.\n이번 판은 좀 어려워." },
        { face: "A", time: 4, dialog: "여기까지 와서\n물러날 순 없지!" },
        { face: "B", time: 4, dialog: "힘내자, 화이팅!" },
        { face: "F", time: 4, dialog: "레이저로는 이 스테이지를\n통과하지 못해." },
        { face: "F", time: 0, dialog: "스테이지 초반에\n'꽝'을 먹어두도록." },
    ],
    "92": [
        { face: "B", time: 4, dialog: "헉헉..\n정말 힘든 스테이지군." },
        { face: "A", time: 4, dialog: "산소야\n여기서 포기하면 안돼." },
        { face: "F", time: 0, dialog: "길을 잘 선택하도록." },
    ],
    "96": [
        { face: "F", time: 3, dialog: "드디어 보스까지 왔군." },
        { face: "E", time: 4, dialog: "이번 보스도 대형이다." },
        { face: "A", time: 3, dialog: "거짓말 마\n이젠 남은 용량이 없을걸." },
        { face: "B", time: 3, dialog: "맞아\n100k 다 썼겠다." },
        { face: "E", time: 6, dialog: "그럼 이건 어때?" },
        { face: "A", time: 3, dialog: "으헉 이게 뭐야 -_-;" },
        { face: "B", time: 3, dialog: "발악을 하는군." },
        { face: "C", time: 0, dialog: "훗훗훗, 이제 너흰 끝장이다!" },
    ],
    "105": [
        { face: "D", time: 2, dialog: "..." },
        { face: "D", time: 2, dialog: "..." },
        { face: "D", time: 2, dialog: "..." },
        { face: "B", time: 4, dialog: "뭐야, 뭐 말할라구." },
        { face: "D", time: 0, dialog: "... T_T" },
    ],
    "111": [
        { face: "F", time: 4, dialog: "드디어 끝판이다.\n훌륭해." },
        { face: "A", time: 4, dialog: "컨티뉴가 몇 개나 남았지." },
        { face: "B", time: 0, dialog: "과연 엔딩을 볼 수 있을까." },
    ],
    "115": [
        { face: "E", time: 4, dialog: "최종보스다, 조심해!" },
        { face: "C", time: 3, dialog: "후후.. 이번에는\n최강의 우주병기," },
        { face: "C", time: 4, dialog: "최신예 아스카\n불기둥이다!" },
        { face: "F", time: 0, dialog: "저 녀석 언제\n저걸 훔쳤지.." },
    ],
    "monitor": [
        { face: "C", time: 6, dialog: "에잇 그렇다면\n비장의 수단이닷!" },
        { face: "E", time: 3, dialog: "앗 안 돼!!!\n1등상인 모니터다!!" },
        { face: "F", time: 3, dialog: "모니터는 건드리지마!\n게임오버시킬거야!" },
        { face: "E", time: 3, dialog: "비싼건데 T_T" },
        { face: "C", time: 3, dialog: "후후.. 싸우기가\n한결 편해졌는걸." },
        { face: "A", time: 3, dialog: "어떻게 싸우란 말이냐!" },
        { face: "B", time: 3, dialog: "할아버지 조심해요!" },
        { face: "E", time: 0, dialog: "살모사 이 나쁜 놈!\n힘내라 할박사,산소!" },
    ],
    "monitorBroken": [
        { face: "F", time: 3, dialog: "1등상을 터트렸어!" },
        { face: "E", time: 0, dialog: "끝났어! 다 끝났다고!" },
    ],
    "ending": [
        { face: "C", time: 4, dialog: "이, 이런..!\n으으으아악!!" },
        { face: "D", time: 4, dialog: "잘 있어라 동무들아..\n나는 황천에 간다.." },
        { face: "B", time: 4, dialog: "와! 이겼어요\n할아버지!" },
        { face: "A", time: 4, dialog: "휴.. 간신히 이겼군." },
        { face: "E", time: 4, dialog: "잘 했다.\n칭찬해주고 싶군." },
        { face: "F", time: 4, dialog: "핫핫.\n수고 많이했다." },
        { face: "B", time: 4, dialog: "흠..이제 엔딩인가?" },
        { face: "F", time: 4, dialog: "으..엔딩?\n좀 썰렁할텐데." },
        { face: "B", time: 4, dialog: "괜찮으니까 보여줘." },
        { face: "E", time: 4, dialog: "좋아. 이제 게임 끝이다." },
        { event: "mode:intro", data: { endingFlag: true } },
    ]
};


const dialogSpr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.VsSprite( "effect" );
const textSpr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.VsHangul();

dialogSpr.attrib.enableHideMesh = true;
dialogSpr.attrib.disableGravity = true;

const textRT = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.RenderTarget( 200,40 );
const textBitmap = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( textRT );

textBitmap.xy = [45,5];
dialogSpr.addChild( textBitmap );

let dialogTimer;

function showDialog( msg, index = 0 ) {
    if ( dialogTimer ) dialogTimer.stop();
    console.assert( msg,`잘못된 메시지 요청` );
    let d = dialogData[msg][index];

    if ( d == null ) {
        return;
    } else if ( d.event ) {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( d.event,d.data ) );
        return;
    }
    dialogSpr.setAction( 3,0 );
    dialogSpr.xy = [15,180];
    dialogSpr.autoRemoveTimer = 120;
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.addChildAt( dialogSpr, _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.getNumChildren() );
    textRT.clear();
    textSpr.setPalette( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.palette );
    textSpr.setColor( 0 );
    textSpr.setText( d.dialog );  
    textSpr.xy = [1,0];
    textRT.draw( textSpr );
    textSpr.xy = [1,2];
    textRT.draw( textSpr );
    textSpr.xy = [0,1];
    textRT.draw( textSpr );
    textSpr.xy = [2,1];
    textRT.draw( textSpr );
    textSpr.setColor( 15 );
    textSpr.xy = [1,1];
    textRT.draw( textSpr );
    dialogSpr.addChild( dialogSpr.getMesh( d.face.charCodeAt( 0 ) - 48 ) );
    // console.log( d.dialog );
    dialogTimer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 1000 / 60 * d.time * 30,()=>{
        showDialog( msg,index + 1 );
    } );
}


_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "dialog",( e )=>{
    showDialog( e.msg,e.index );
} );


/***/ }),

/***/ "./games/PALO2/src/gameEvent.js":
/*!**************************************!*\
  !*** ./games/PALO2/src/gameEvent.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ "./games/PALO2/src/global.js");
/* harmony import */ var _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vsWrapper/vs */ "./games/PALO2/src/vsWrapper/vs.js");





function ending() {
    // console.log( `엔딩` );
    // endFlag=1;
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "mode:intro",{ endingFlag: true } )  );
}


function message1( e ) {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "dialog",{ msg: e.var2 } );
}

function music( e ) {
    // console.log( `음악 ${e.var2}` );
    switch ( e.var2 ) {
    case 0:
        // playXem(0,"space.xem");
        break;
    case 1:
        // playXem(0,"stage.xem");
        break;
    case 2:
        // playXem(0,"demo.xem");
        break;
    case 3:
        // sFadeOut();
        break;
    case 4:
        // sFadeOut();
        break;
    case 5:
        // sSetVolume(127);
        break;
    case 6:
        // sSetVolume(e.var3);
        break;
    }
}

function quake( ) {
    // console.log( `진동` );
    // setQuake(e.var3,e.var2);
}

function voice() {
    // 안씀
}

function scrollStop( ) {
    // console.log( `스크롤 스탑` );
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget.velocity.x = 0;
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventTarget.velocity.x = 0;
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "bgm",{ filename: `boss` } );
}

function loadStage( e ) {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "stage",{ stageNumber: e.var2 } );
    return true;
}

function space( e ) {
    // console.log( `우주 설정 ${e.var2}` );
    switch ( e.var2 ) {
    case 0:
        // playXem(0,"stage.xem");
        // spaceFlag=-128;
        // spaceMove=1;
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "bgm",{ filename: `stage${_global__WEBPACK_IMPORTED_MODULE_1__["default"].currentStage}` } );
        // console.log( `우주에서 스테이지 진입` );
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.fade( {
            start:    -1,
            end:      0,
            duration: 300,
            range:    [128,255 ],
        } );
        break;
    case 1:
        // playXem(0,"space.xem");
        // spaceFlag=0;
        // spaceMove=-1;
        // console.log( `스테이지에서 우주로 진입` );
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.fade( {
            start:    0,
            end:      -1,
            duration: 50,
            range:    [128,255 ],
        } );
        break;
    }
}

function chain( ) {
    //
}

function init( e ) {
    if ( e.var2 < 0 ) {
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventData.eventVars[-e.var2].flag = 1;
    } else {
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventData.eventVars[e.var2].flag = 0;
    }
    if ( e.var3 < 0 ) {
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventData.eventVars[-e.var3].flag = 1;
    } else {
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventData.eventVars[e.var3].flag = 0;
    }
    if ( e.var4 < 0 ) {
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventData.eventVars[-e.var4].flag = 1;
    } else {
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventData.eventVars[e.var4].flag = 0;
    }
}

function palette( ) {
    // console.log( `팔레트 설정` );
    // fadePaletteWhenFlip(e.var2,mainPalette,e.var3,eventVar4[currentEvent]);
}

function paletteFade( e ) {
    // console.log( `팔레트 페이드` );
    let e2 = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventData.eventVars[e.var4];

    // e2.var3 : dir
    // e2.var4 : speed
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.fade( {
        range:    [e2.var5,e.var2],
        start:    e2.var1 / 64,
        end:      e2.var2 / 64,
        duration: e2.var4,
    } );
}

// int setLens(int x,int y,int,int);
function lensFlare( e ) {
    // console.log( `렌즈 플레어` );
    let pos = [0.1,-0.35,-0.9,-1.1,-1.18];

    let espr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite( null,{ x: e.x,y: e.y } );

    // espr.attrib.enableAutoRemoveStageOut = true;
    espr.attrib.disableGravity = true;
    espr.setUpdatePhaseCallback( ()=>{
        if ( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getStageX( espr.x ) < _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.width + 10 ) {
            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.fade( {
                start:    0.7,
                end:      0,
                duration: 300,
                range:    [0,255]
            } );
            for ( let i = 0; i < 5; i++ ) {
                let spr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite( "effect",{
                    x:      0,
                    y:      0,
                    action: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 7,8 ),
                } );

                spr.attrib.disableGravity = true;
                spr._currentMesh.setBlendMode( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite.BlendModes.ADD );
                spr._currentMesh.alpha = 0.5;
                spr.setUpdatePhaseCallback( ()=>{
                    let originPos = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getStageCoordinate( e.x,e.y );
                    let dx = originPos.x - 128;
                    let dy = originPos.y - 100;
        
                    dx = dx * pos[i];
                    dy = dy * pos[i];
                    let flarePos = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldCoordinate( 128 + dx,100 + dy );

                    spr.x = flarePos.x;
                    spr.y = flarePos.y;
                    if ( originPos.x < -10 ) {
                        spr.remove();
                    }
                } );
                _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.addChild( spr );
            }
            espr.remove();                    
        }
    } );
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer4.addChildAt( espr );
}


// int setZako1(int x,int y,int hp,int type,int level);
function zako1_1( e ) {
    let i;

    for ( i = 0; i < 6; i++ ) {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
            type:    "zako1",
            x:       _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.width + i * 20 ),
            y:       e.y,
            hp:      e.var2,
            subType: 0,
            level:   e.var3,
            options: {
                spriteEvent: e,
                status4:     i * 10,
                status3:     e.var3,
            }
        } );
    }
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
        type:    "zako1",
        x:       _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.width + i * 20 ),
        y:       e.y,
        hp:      e.var2,
        subType: 1,
        level:   e.var3,
        options: {
            spriteEvent: e,
            status4:     i * 10,
        }
    } );
    //		newSpr.status3=e.var3;
}

// int setZako2(int x,int y,int hp,int timer);
function zako2_1( e ) {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
        type:    "zako2",
        x:       e.x,
        y:       e.y,
        hp:      e.var2,
        timer:   e.var3,
        options: {
            spriteEvent: e,
        }
    } );
}

// int setZako3(int x,int y,int hp,int type);
function zako3_1( e ) {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
        type:    "zako3",
        x:       e.x,
        y:       e.y,
        hp:      e.var2,
        subType: e.var3,
        options: {
            spriteEvent: e,
        }
    } );
}

// int setZako4(int x,int y,int hp,int level);
function zako4_1( e ) {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
        type:    "zako4",
        x:       e.x,
        y:       e.y,
        hp:      e.var2,
        level:   e.var3,
        options: {
            spriteEvent: e,
        }
    } );
}


// int setZako5(int x,int y,int hp);
function zako5_1( e ) {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
        type:    "zako5",
        x:       e.x,
        y:       e.y,
        hp:      e.var2,
        options: {
            spriteEvent: e,
        }
    } );
}

// int setZako6(int x,int y,int hp);
function zako6_1( e ) {
    for ( let i = 0; i < 5; i++ ) {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
            type:    "zako6",
            x:       _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.width + i * 15 ),
            y:       _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0, 189 ) + 5 ),
            hp:      e.var2,
            options: {
                spriteEvent: e,
            }
        } );
    }
}

// int setZako7(int x,int y,int hp,int level);
function zako7_1( e ) {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
        type:    "zako7",
        x:       e.x,
        y:       e.y,
        hp:      e.var2,
        level:   e.var3,
        options: {
            spriteEvent: e,
        }
    } );
}


// int setZako8(int x,int y,int hp,int level);
function zako8_1( e ) {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
        type:    "zako8",
        x:       e.x,
        y:       e.y,
        hp:      e.var2,
        level:   e.var3,
        options: {
            spriteEvent: e,
        }
    } );
}

// int setZako9(int x,int y,int hp);
function zako9_1( e ) {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
        type:    "zako9",
        x:       e.x,
        y:       e.y,
        hp:      e.var2,
        options: {
            spriteEvent: e,
        }
    } );
}


// int setZako10(int x,int y,int type);
function zako10_1( e ) {
    function setZako10( t ) {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
            type:    "zako10",
            x:       _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,119 ) + 100 ),
            y:       _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( 210 ),
            subType: t,
            options: {
                spriteEvent: e,
            }
        } );    
    }
    for ( let i = 0; i < e.var2; i++ ) {
        setZako10( 1 );
    }
    for ( let i = 0; i < e.var3; i++ ) {
        setZako10( 0 );
    }
    for ( let i = 0; i < e.var4; i++ ) {
        setZako10( 2 );
    }
    for ( let i = 0; i < e.var5; i++ ) {
        setZako10( 3 );
    }
    
    return true;
}

// int setZako11(int x,int y,int hp);
function zako11_1( e ) {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "spawn:zako",{
        type:    "zako11",
        x:       e.x,
        y:       e.y,
        hp:      e.var2,
        options: {
            spriteEvent: e,
        }
    } ) );
}

// int setZako12(int x,int y,int hp);
function zako12_1( e ) {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
        type:    "zako12",
        x:       e.x,
        y:       e.y,
        hp:      e.var2,
        options: {
            spriteEvent: e,
        }
    } );
}

// int setZako13(int x,int y,int hp);
function zako13_1( e ) {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:zako",{
        type:    "zako13",
        x:       e.x,
        y:       e.y,
        hp:      e.var2,
        options: {
            spriteEvent: e,
        }
    } );
}


function moveGhost( e ) {
    // console.log( `스크롤타겟 이동 ${e.x},${e.y}` );
    // 월드 아래의 모든 스프라이트를 같이 옮겨준다.
    // 이것은 구 VS엔진이 좌표계를 다루는 문제와의 호환성 때문에 하는 것이다.
    // 스테이지 초반에 우주에서 진입할 때 한 번 일어난다.
    // let adjustX = vsStage.world.scrollTarget.x - e.x;
    // let adjustY = vsStage.world.scrollTarget.y - e.y;
    // let sprs = vsStage.world.searchChildren();
    // for ( let spr of sprs ) {
    //     if (spr instanceof VsSprite) {
    //         spr.x -= adjustX;
    //         spr.y -= adjustY;
    //     }
    // }
    // vsStage.world.scrollTarget.x = e.x;
    // vsStage.world.scrollTarget.y = e.y;
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventTarget.x = e.x;
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventTarget.y = e.y;
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget.velocity.x = _global__WEBPACK_IMPORTED_MODULE_1__["default"].scrollSpeed;
    // console.log( vsStage.world.scrollTarget.x );
}

const eventTable = [
    null,                   //0
    message1,
    music,
    chain,
    quake,
    voice,
    scrollStop,
    moveGhost,
    loadStage,
    space,
    //10
    init,
    palette,
    paletteFade,
    lensFlare,
    ending,
    null,
    null,
    null,
    null,
    null,
    //20
    zako1_1,
    zako2_1,
    zako3_1,
    zako4_1,
    zako5_1,
    zako6_1,
    zako7_1,
    zako8_1,
    zako9_1,
    zako10_1,
    //30
    zako11_1,
    zako12_1,
    zako13_1,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    //40
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    //50
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    //60
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    //70
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    //80
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    //90
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    //100
    null,
    null,
    null,
    
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    //110
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
];



function processGameEvent( e ) {
    if ( e.eventNumber == 0 ) return;
    // console.log( `게임이벤트:${e.eventNumber},${e.eventTypeNumber}` );

    const world = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world;

    let eventNum = e.eventNumber;

    if ( eventNum != null ) {
        do {
            // var1이 type
            let eventTypeNum = world.eventData.eventVars[eventNum].var1;

            console.assert( eventTypeNum != 0 && eventTable[eventTypeNum], `존재하지 않는 이벤트를 호출 ${eventTypeNum}` );
            let evars = world.eventData.eventVars[eventNum];

            if ( evars.flag == 0 ) {
                // 플래그가 0 이었을 경우 실행
                // console.log( `이벤트실행:${eventNum}->${eventTypeNum},${JSON.stringify( evars )}` );
                let result = eventTable[ eventTypeNum ]( evars );

                if ( evars.flag < 255 ) {
                    evars.flag++;
                }
                //@ts-ignore
                if ( result != true && evars.var5 > 0 ) {
                    eventNum = evars.var5;
                } else {
                    eventNum = -1;
                }
            } else {
                eventNum = -1;
            }
        } while ( eventNum > 0 );
    } else {
        eventTable[ e.eventTypeNum ]( e.eventVars );
    }
}

_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "gameEvent", processGameEvent );


/***/ }),

/***/ "./games/PALO2/src/gameLoop.js":
/*!*************************************!*\
  !*** ./games/PALO2/src/gameLoop.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ "./games/PALO2/src/global.js");
/* harmony import */ var _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vsWrapper/vs */ "./games/PALO2/src/vsWrapper/vs.js");




const START_STAGE = 1;

let starSpeed;
let originalStarSpeed;

let continueScrollVelocity;
let continueEventVelocity;
let continueSpr;

let scrollTargetSpr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite();

let eventTargetSpr =  new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite();

eventTargetSpr.onStage( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME,function() {
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "gameEvent",{ eventNumber: _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getMapEventNumber( this.x,this.y ) } ) );
} );

let statusSpr = [];

const MAX_STAR = 40;

function changeBGM( e ) {
    // console.log( `사운드 플레이 ${e.filename}` );
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSingleSound( `${e.filename}.m4a`,0.5,true,"bgm" );
}

function setStars() {
    // init stars

    const starColorArray = [7,8,15];

    for ( let i = 0; i < MAX_STAR; i++ ) {
        let x = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,259 );
        let y = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,199 );
        let vx = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,3 );
        let c = starColorArray[_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,2 )];
        let px = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsPalette.indexToColor( c ),1 );

        px.setShader( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.createShader() );
        px.xy = [x,y];
        px.onStage( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, function() {
            px.x -= starSpeed / vx;
            if ( px.x < 0 ) {
                px.x = 260 + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,260 );
            }
        } );
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.addChild( px );
    }
}

function setStatus( player ) {
    let playerSpr = _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[player];
    let spr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
    let text;

    if ( playerSpr == null || playerSpr.gameOver ) {
        if  ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[3 - player] == null || _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[3 - player].gameOver ) {
        // 게임 오버
            showContinue();
        } 
        if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].restCoin > 0 ) {
            text = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSystemText( `CONTINUE ${_global__WEBPACK_IMPORTED_MODULE_1__["default"].restCoin}` );
        } else {
            text = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSystemText( `GAME OVER` );
        }
        text.xy = [( player - 1 ) * 128 + 40,192];
        spr.addChild( text );
    } else {
        text = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSystemText( `${playerSpr.name} ${playerSpr.rest} ${playerSpr.score.toString().padStart( 8,"0" )}` );
        text.xy = [( player - 1 ) * 128 + 20,192];
        spr.addChild( text );

        let effectSpr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite( "effect" );

        for ( let i = 0; i < 7; i++ ) {
            if ( playerSpr.power == i ) {
                let barText = effectSpr.getMesh( i );

                barText.xy = [( player - 1 ) * 128 + 20 + i * 12,185];
                let bar = effectSpr.getMesh( playerSpr.isBarEmpty[i] ? 10 : 9 );

                bar.xy = [( player - 1 ) * 128 + 20 + i * 12,185];
                spr.addChild( bar );
                spr.addChild( barText );
            } else {
                let bar = effectSpr.getMesh( playerSpr.isBarEmpty[i] ? 8 : 7 );

                bar.xy = [( player - 1 ) * 128 + 20 + i * 12,185];
                spr.addChild( bar );
            }
        }
    }
    if ( statusSpr[player] ) statusSpr[player].removeFromParent();
    statusSpr[player] = spr;
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.addChild( spr );
}

function doContinue() {
    if ( continueSpr ) {
        continueSpr.removeFromParent();
        continueSpr = null;
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget.velocity.x = continueScrollVelocity;
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventTarget.velocity.x = continueEventVelocity;
    }

    setStatus( 1 );
    setStatus( 2 );
}

function showContinue() {
    if ( continueSpr ) return;
    let spr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSystemText();
    let continueTimer = 600;

    continueSpr = spr;
    spr.xy = [100,93];
    continueScrollVelocity = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget.velocity.x;
    continueEventVelocity = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventTarget.velocity.x;
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget.velocity.x = 0;
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventTarget.velocity.x = 0;

    spr.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME,()=>{
        if ( continueSpr == null ) {
            spr.removeFromParent();
            return;
        }
        if ( ( continueTimer % 60 ) == 0 ) {
            if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].restCoin > 0 ) {
                spr.setText( `CONTINUE? ${continueTimer / 60}` );
            } else {
                spr.setText( `GAME OVER` );
            }
        }
        continueTimer--;
        if ( continueTimer <= -60 ) {
            // 완전히 끝
            spr.removeFromParent();
            continueSpr = null;
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "mode:title" );
        }
    } );
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.addChild( spr );
}

async function gameLoop( gameSetting ) {
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.clearChildren();
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.backgroundColor = 128;
    _global__WEBPACK_IMPORTED_MODULE_1__["default"].players = [];

    setStars();

    // 여기를 수정하면 시작 스테이지가 바뀐다
    changeStage( { stageNumber: START_STAGE } );

    if ( gameSetting.player1 ) {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:player",{ player: 1 } );
    }
    if ( gameSetting.player2 ) {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "spawn:player",{ player: 2 } );
    }

    setStatus( 1 );
    setStatus( 2 );
}

async function changeStage( e ) {
    let scrollSpeed;
    let legacyCoordinateMode = 0;
    let canBreakBlock = false;

    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.setPalette( new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsPalette( `stage${e.stageNumber}` ) );

    switch ( e.stageNumber ) {
    case 1:
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.rotate();
        scrollSpeed = 0.5;
        originalStarSpeed = starSpeed = 0.5;
        break;
    case 2:
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.rotate( {
            range: [256 - 8,254],
            speed: 4
        } );
        scrollSpeed = 0.5;
        originalStarSpeed = starSpeed = 0.5;
        break;
    case 3:
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.rotate( {
            range: [256 - 20,252],
            speed: 4
        } );
        scrollSpeed = 0.25;
        originalStarSpeed = starSpeed = 1;
        legacyCoordinateMode = 1;
        break;
    case 4:
        canBreakBlock = true;
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.rotate();
        scrollSpeed = 10 / 16;
        originalStarSpeed = starSpeed = 10 / 16;
        break;
    case 5:
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.rotate();
        scrollSpeed = 0.25;
        originalStarSpeed = starSpeed = 0.25;
        legacyCoordinateMode = 2;
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.colorArray[128] = 0;    // 스테이지 5 팔레트 배경이 회색으로 되어있어서 수정
        break;
    }

    // 배경만 숨김
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.add( -1,128,255 );
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "bgm",{ filename: `space` } );

    let oldWorldPos;

    if ( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world ) oldWorldPos = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.position;
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.setWorld( new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsWorld( `stage${e.stageNumber}` ),true );

    if ( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget ) {
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget.removeFromParent();
    }
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.gravity.y = 0.1388;
    // console.log( `맵사이즈 ${vsStage.world.mapWidth},${vsStage.world.mapHeight}` );
    if ( legacyCoordinateMode == 1 ) {
        scrollTargetSpr.xy = [-390,180];
    } else if ( legacyCoordinateMode == 2 ) {
        scrollTargetSpr.xy = [-390 + 82,180];
    } else {
        scrollTargetSpr.xy = [-84,180];
    }
    scrollTargetSpr.attrib.enableDebug = true;
    scrollTargetSpr.attrib.disableGravity = true;
    // console.log( `스크롤 시작 지점 ${scrollTargetSpr.x},${scrollTargetSpr.y}` );
    scrollTargetSpr.velocity.x = 0.5;//scrollSpeed;
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.setScrollTarget( scrollTargetSpr );
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventTarget = eventTargetSpr;
    eventTargetSpr.velocity.x = scrollSpeed;
    eventTargetSpr.xy = [_vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventData.eventVars[0].x,_vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventData.eventVars[0].y];
    eventTargetSpr.attrib.enableDebug = true;
    eventTargetSpr.attrib.disableGravity = true;
    // vsStage.world.safeBorder = 5 * 16;
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer0.addChild( scrollTargetSpr );
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer0.addChild( eventTargetSpr );

    _global__WEBPACK_IMPORTED_MODULE_1__["default"].scrollSpeed = scrollSpeed;
    _global__WEBPACK_IMPORTED_MODULE_1__["default"].canBreakBlock = canBreakBlock;
    _global__WEBPACK_IMPORTED_MODULE_1__["default"].currentStage = e.stageNumber;

    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.processScroll();

    if ( oldWorldPos ) {
        let sprs = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.searchChildren();
        let adjustX = oldWorldPos.x - _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.x;
        let adjustY = oldWorldPos.y - _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.y;

        for ( let spr of sprs ) {
            if ( spr instanceof _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite && spr != scrollTargetSpr && spr != eventTargetSpr ) {
                spr.x += adjustX;
                spr.y += adjustY;
            }
        }
    }
}

_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "bgm", changeBGM );
_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "stage", changeStage );
_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "mode:gameLoop", gameLoop );
_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "refreshUI", ( e )=>{
    setStatus( e.player );
} );
_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "continue", doContinue );


/***/ }),

/***/ "./games/PALO2/src/global.js":
/*!***********************************!*\
  !*** ./games/PALO2/src/global.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ "./games/PALO2/src/player.js");



class AppData {
    constructor() {
        this.currentStage = 0;
        this.scrollSpeed = 0;
        /** @type {Player[]} */
        this.players = [];
        this.restCoin = 0;
        this.canBreakBlock = false;
    }
}

const GLOBAL = new AppData();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GLOBAL);


/***/ }),

/***/ "./games/PALO2/src/intro.js":
/*!**********************************!*\
  !*** ./games/PALO2/src/intro.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vsWrapper/vs */ "./games/PALO2/src/vsWrapper/vs.js");



async function intro( e ) {
    const demoPal = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.VsPalette( "demo" );

    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.setPalette( demoPal );
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.backgroundColor = 0;
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.clearChildren();
    const demoSpr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.VsSprite( "demo" );
    let timer;

    const eventSpr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();

    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.addChild( eventSpr );

    function hputs( s,x,y ) {
        // console.log( `데모메시지:${s}` );
        let t = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.VsHangul();

        t.setColor( 128 - 32 + 15,128 - 32 );
        t.setText( s );
        t.xy = [x,y];
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.addChild( t );
    }

    function demoFade( slideNum ) {
        return new Promise( ( resolve )=>{
            demoPal.fade( { start: -1,end: 1, duration: 400, range: [128 - 32,128 - 32 + 15] } );
            if ( slideNum > 0 ) {
                let s = demoSpr.getMesh( slideNum + 7 );

                s.xy = [15,10];
                _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.addChild( s );
            }
            timer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 1000 / 60 * 705, ()=>{
                _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.clearChildren();
                _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.addChild( eventSpr );
                resolve();
            } );
        } );
    }

    // console.log( `인트로 화면` );
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "bgm",{ filename: "intro" } );
    eventSpr.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.REMOVED_FROM_STAGE, () => {
        // console.log( "인트로 이벤트 스프라이트 삭제" );
        timer.stop();
    } );
    eventSpr.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_DOWN, e => {
        e.stopPropagation();
        // console.log( `키입력 ${e.keyCode}` );
        if ( e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE || e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ESC || e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER ) {
            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.clearChildren();
            timer.stop();
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "mode:title" );
        }
    } );
    if ( e.endingFlag == true ) {
        hputs(  "할박사 일행은 우주 대악마 살모사 박사를\n" +
                "무찌르고 지구로 귀환하였다.\n" +
                "다시 우주에는 평화가 찾아왔다...",10,120 );
        await demoFade( 4 );
        hputs(  "지금까지 본 게임을 플레이해주신\n" +
                "여러분께 깊은 감사를 드립니다.\n" +
                "오브젝트 스퀘어의 다음 게임인\n" +
                "학원 호러 어드벤쳐 (8.15해저드)를\n" +
                "기대해 주십시오! 언제 나올진 몰라요.",10,40 );
        await demoFade( 0 );
    } else {
        hputs( "우리는 역사와 민족 앞에 진심으로\n참회하며 이 기록을 남긴다",10,70 );
        hputs( "         1997년 2월\n    표류 850일째, DR.할",80,130 );
        await demoFade( 0 );

        hputs( "단기 1997+2333년",10,10 );
        hputs( "오브젝트 스퀘어 앞으로 의문의\n초대장이 도착하였다.",30,30 );
        hputs(  "(100K 게임 공모전을 개최한다.\n" +
                "    - 길어서 삭제 -\n" +
                " 부디 왕림하여 자리를 빛내주기 바란다)\n" +
                "        from 하이텔 게임제작동호회",30,70 );
        let cardSpr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.VsSprite( "demo",{ x: 128,y: 170 } );

        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.vsStage.addChild( cardSpr );
        await demoFade( 0 );

        hputs( "오브젝트 스퀘어 팀은 3년전 우주 대악마\n" +
            "살모사 박사에게 대항하기 위해 할박사와\n" +
            "산소를 보냈다.",10,120 );
        await demoFade( 1 );

        hputs( "그러나 공짜로 얻은 캡춰보드를 끼우다\n" +
            "하드를 날려먹는 오브젝트 스퀘어 팀...\n" +
            "덕분에 할박사와 산소는 1 스테이지를\n" +
            "클리어 후 우주미아가 되고만다.",10,120 );
        await demoFade( 2 );

        hputs( "지구로 돌아가고 싶은 산소와 할박사,\n" +
            "그러나 그들은 오브젝트 스퀘어를 원망하지\n" +
            "않았다!",10,120 );
        await demoFade( 3 );

        hputs( "고생 끝에 낙이 오는 법. 공짜를 밝히는\n" +
            "오브젝트 스퀘어 팀의 야욕과 함께 할박사\n" +
            "일행은 지구로 돌아온다. 그들에게 내려진\n" +
            "임무는 공모전에서 상을 타오는 것.",10,120 );
        await demoFade( 4 );

        hputs( "100K에 끼워 맞추기 위해 내용을 마구\n" +
            "삭제한 85되었수다 스페셜과 함께 두명은\n" +
            "다시 출격하지만, 역시 이번 대회에도\n" +
            "뭔가 악의 기운이...",10,120 );
        await demoFade( 5 );
    }
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "mode:title" );
}

_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "mode:intro",intro );



/***/ }),

/***/ "./games/PALO2/src/player.js":
/*!***********************************!*\
  !*** ./games/PALO2/src/player.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Player": () => (/* binding */ Player)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ "./games/PALO2/src/global.js");
/* harmony import */ var _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vsWrapper/vs */ "./games/PALO2/src/vsWrapper/vs.js");




const controlKeys = {
    "1": {
        "up":      [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.UP,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.I],
        "down":    [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.DOWN,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.K],
        "left":    [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.LEFT,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.J],
        "right":   [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.RIGHT,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.L],
        "shoot":   [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.N],
        "powerUp": [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.CTRL,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.M],    
    },
    "2": {
        "up":      [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.W],
        "down":    [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.S],
        "left":    [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.A],
        "right":   [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.D],
        "shoot":   [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.Z],
        "powerUp": [_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.X],    
    }
};

const OptionInterval = 16;

/**
 * 플레이어 스프라이트 클래스
 * 
 *
 * @class Player
 * @extends {VsSprite}
 */
class Player extends _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite {
    constructor( e ) {
        super( e.player == 1 ? "p_hal" : "p_crys" );
        let x = 60;
        let y = e.player == 1 ? 50 : 110;
 
        this.position = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldCoordinate( x,y );
        this.attrib.disableGravity = true;
        this.attrib.enableMapCollisionBottom = true;
        this.attrib.enableMapCollisionTop = true;
        this.attrib.enableMapCollisionLeft = true;
        this.attrib.enableMapCollisionRight = true;
        // this.attrib.enableDebug = true;
        this.player = e.player;
        this.name = e.player == 1 ? "HAL" : "O2 ";
        this.rest = 3;
        this.gameOver = false;
        this.score = 0;
        this.maxOption = 3;
        this.readyTimer = 0;

        this.setUpdatePhaseCallback( this.update );
        this.setMapCollisionPhaseCallback( ( flag )=>{
            if ( flag != 0 ) {
                this.onHit();
            }
        } );
        this.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_DOWN,this.keyHandler.bind( this,true ) );
        this.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_UP,this.keyHandler.bind( this,false ) );
        this.inputs = {};
        this.newInputs = {};

        this.optionIndex = 0;
        this.optionBuffer = [];
        this.resetPowerUp();
        this.on( "hit",this.onHit );
    }

    revive() {
        this.x = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( -10 );
        this.setAction( 12 );
        this.readyTimer = 200;
        this.attrib.enableFlicker = true;
        this.attrib.enableMapCollisionLeft = false;
        this.attrib.enableMapCollisionRight = false;
        this.attrib.enableMapCollisionTop = false;
        this.attrib.enableMapCollisionBottom = false;
        this.setMapCollisionPhaseCallback( null );

        this.gameOver = false;
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "continue" );
    }

    onHit( e ) {
        if ( this.gameOver ) return;
        if ( e != null && e.forceHit != true && this.readyTimer > 0 ) return;
        
        this.maxOption = 3;
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `bang.wav` );
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "explosion", { x: this.x,y: this.y,count: 10,power: 1 } );
        this.resetPowerUp();
        if ( this.rest == 0 ) {
            this.inputs.shoot = false;
            this.rest = 3;
            this.gameOver = true;
            this.setAction( 0 );
            this.x = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( -50 );
            // this.y = vsStage.world.getWorldY( -100 );
            this.velocity.x = 0;
            this.velocity.y = 0;
            this.attrib.enableMapCollisionLeft = false;
            this.attrib.enableMapCollisionRight = false;
            this.attrib.enableMapCollisionTop = false;
            this.attrib.enableMapCollisionBottom = false;
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "refreshUI",{ player: this.player } );
        } else {
            this.rest--;
            this.revive();
        }
    }

    resetPowerUp() {
        this.power = -1;
        this.isBarEmpty = [false,false,false,false,false,false,false];
        this.missile = false;
        this.moveSpeed = 0.55;
        this.weapon = "normal";
        if ( Array.isArray( this.options ) ) this.options.forEach( spr => {
            spr.remove( "reset" );
        } );
        this.options = [];
        this.shield = null;
        
        this.autoShootCoolDown = 10;
        this.autoShootReset = 11;
        this.autoShootCount = this.autoShootReset;

        this.missileDelay = 60;
        this.missileCount = 0;
    }

    keyHandler( isDown,e ) {
        // console.log( e );
        if ( isDown == false && e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.O ) _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "stage",{ stageNumber: 2 } );
        let controlMap = controlKeys[this.player];

        for ( let input in controlMap ) {
            if ( controlMap[input].indexOf( e.keyCode ) >= 0 ) {
                if ( isDown && !this.inputs[input] ) {
                    this.newInputs[input] = true;
                }
                this.inputs[input] = isDown;
            }
        }
    }

    update() {
        if ( this.gameOver ) {
            if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].restCoin > 0 && this.inputs.shoot ) {
                // continue 
                _global__WEBPACK_IMPORTED_MODULE_1__["default"].restCoin--;
                this.revive();
                this.inputs.shoot = false;
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `power.wav` );
            }
            return;
        }

        if ( this.readyTimer ) {
            this.readyTimer--;
            if ( this.readyTimer == 0 ) {
                this.setMapCollisionPhaseCallback( ( flag )=>{
                    if ( flag != 0 ) {
                        this.onHit();
                    }
                } );
                this.attrib.enableFlicker = false;
                this.attrib.enableMapCollisionLeft = true;
                this.attrib.enableMapCollisionRight = true;
                this.attrib.enableMapCollisionTop = true;
                this.attrib.enableMapCollisionBottom = true;
            }
        }
        // 스크롤 속도에 맞춘다
        let scrollSpeed = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget.velocity.x;
        let isMoved = false;


        // 방향키 처리
        if ( this.readyTimer < 140 ) {
            if ( this.inputs.up ) {
                this.setAction( 1 );
                this.velocity.y = -this.moveSpeed;
                isMoved = true;
            } else if ( this.inputs.down ) {
                this.setAction( 3 );
                this.velocity.y = this.moveSpeed;
                isMoved = true;
            } else {
            // 상하 움직임이 없을 경우
                if ( this.action == 1 ) this.setAction( 2 );
                if ( this.action == 3 ) this.setAction( 4 );
                this.velocity.y = 0;
            }
            if ( this.inputs.left ) {
                this.velocity.x = -this.moveSpeed;
                isMoved = true;
            } else if ( this.inputs.right ) {
                this.velocity.x = this.moveSpeed;
                isMoved = true;
            } else {
                this.velocity.x = 0;
            }
        } else {
            this.velocity.x = 0;
            this.velocity.y = 0;    
        }
        // 화면 밖으로 넘어가지 못하게 처리
        if ( this.x < _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( 5 ) || this.x > _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( 250 ) ) {
            this.velocity.x = 0;
            this.x = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( this.x,_vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( 5 ),_vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( 250 ) );
        }
        if ( this.y < _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( 5 ) || this.y > _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( 195 ) ) {
            this.velocity.y = 0;
            this.y = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( this.y,_vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( 5 ),_vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( 195 ) );
        }
        // 스크롤 속도에 맞춰서 비행
        this.velocity.x += scrollSpeed;

        if ( this.inputs.shoot ) {
            this.shoot();
        } else {
            this.autoShootCount = this.autoShootReset;
        }
        if ( this.newInputs.powerUp ) {
            this.newInputs.powerUp = false;
            this.powerUp();
        }

        if ( this.missileCount > 0 ) this.missileCount--;

        if ( isMoved && this.options.length > 0 ) {
            this.optionBuffer.push( [_vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getStageX( this.x ),_vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getStageY( this.y )] );
            if ( this.optionBuffer.length > OptionInterval * this.optionBuffer.length ) {
                this.optionBuffer = this.optionBuffer.splice( 0,this.optionBuffer.length - ( OptionInterval * this.optionBuffer.length ) );
            }
        }
    }

    optionUpdate() {
        /** @type {Player} */
        //@ts-ignore
        let owner = this.owner;

        if ( owner.optionBuffer.length > 0 ) {
            let readPos = Math.max( 0,owner.optionBuffer.length - this.optionIndex * OptionInterval );
            let x = owner.optionBuffer[readPos][0];
            let y = owner.optionBuffer[readPos][1];

            this.position = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldCoordinate( x,y );
        } else {
            this.position = owner.position;
        }
    }

    shoot() {
        const createBullet = ( damage )=> {
            let spr = this.createVsSprite( {
                x:      this.x,
                y:      this.y,
                action: 5,
            } );

            spr.attrib.disableGravity = true;
            spr.attrib.enableAutoRemoveStageOut = true;
            spr.attrib.enableMapCollisionRight = true;
            spr.velocity.x = 10;
            spr.setMapCollisionPhaseCallback( ( flag, info )=>{
                if ( flag ) {
                    if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].canBreakBlock ) {
                        info.collideList.forEach( v=>{
                        // collideList는 충돌 정보를 담은 어레이
                        // [x,y,mapNum] 순으로 담겨 있다
                            if ( damage >= 10 && ( v[2] == 1 || v[2] == 2 ) ) {
                            // 레이저는 damage가 5니까 일반 탄만 블록을 부술 수 있도록
                                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "explosion", { x: ( v[0] << 4 ) + 8,y: ( v[1] << 4 ) + 8,count: 1,power: 0 } );
                                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `zako.wav` );
                                _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.setMap( v[0],v[1],v[2] - 1 );
                            } 
                        } );
                    }
                    spr.remove( "block" );
                }
            } );
            spr.setCollisionPhaseCallback( ( sprs )=>{
                for ( let target of sprs ) {
                    if ( target.isEnemy && spr.checkRange( target,0,0 ) ) {
                        target.dispatchEvent( "hit",{ type: "bullet", damage: damage, owner: this } );
                        spr.remove( "enemyHit" );
                    }
                }
            } );
            return spr;
        };

        if ( this.optionIndex == 0 ) this.options.forEach( ( option )=>{
            option.missile = this.missile;
            option.missileCount = this.missileCount;
            option.weapon = this.weapon;
            option.autoShootCount = this.autoShootCount;
            option.autoShootCoolDown = this.autoShootCoolDown;
            option.shoot(); 
        } );

        if ( this.missile && this.missileCount == 0 ) {
            let spr = createBullet( 40 );

            spr.action = 7;
            spr.velocity.x = 1.75;
            spr.attrib.enableMapCollisionTop = true;
            spr.attrib.enableMapCollisionBottom = true;
            spr.attrib.enableMapCollisionLeft = true;
            spr.attrib.disableGravity = false;
            spr.setMapCollisionPhaseCallback( ( flag )=>{
                if ( flag & _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsWorld.TILEATTRIB_RWALL ) {
                    spr.remove( "block" );
                }
            } );
            // spr.setMapCollisionPhaseCallback();
            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer2.addChild( spr );
            this.missileCount = this.missileDelay;
        }

        this.autoShootCount--;
        if ( this.autoShootCount < this.autoShootCoolDown ) {
            if ( this.autoShootCount == 0 ) {
                this.autoShootCount = this.autoShootReset;
            }
            return;
        }

        if ( this.weapon == "normal" || this.weapon == "double" ) {
            if ( this.optionIndex == 0 ) _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `shoot.wav` );
            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer2.addChild( createBullet( 10 ) );
        }
        if ( this.weapon == "double" ) {
            let spr = createBullet( 10 );

            spr.velocity.y = -6;
            spr.attrib.enableMapCollisionTop = true;
            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer2.addChild( spr );
        }
        if ( this.weapon == "laser" ) {
            if ( this.optionIndex == 0 && this.autoShootCount == this.autoShootReset - 1 ) {
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `laser.wav` );
            }
            let spr = createBullet( 5 );

            spr.action = 6;
            spr.velocity.x = 30;
            spr.attrib.enableMapCollisionTop = true;
            spr.attrib.enableMapCollisionBottom = true;
            spr.setUpdatePhaseCallback( ()=>{
                spr.y = this.y;
            } );
            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer2.addChild( spr );
        }
    }

    powerUp() {
        if ( this.power < 0 || this.isBarEmpty[this.power] ) return;
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `power.wav` );
        switch ( this.power ) {
        case 0: // 스피드업
            this.moveSpeed += 0.5;
            if ( this.moveSpeed >= 3 ) this.isBarEmpty[this.power] = true;
            break;
        case 1: // 미사일
            this.missile = true;
            this.isBarEmpty[this.power] = true;
            break;
        case 2: // 더블
            this.weapon = "double";
            this.isBarEmpty[this.power] = true;
            this.isBarEmpty[3] = false;
            this.autoShootCoolDown = 10;
            this.autoShootReset = 11;
            break;
        case 3: // 레이저
            this.weapon = "laser";
            this.isBarEmpty[this.power] = true;
            this.isBarEmpty[2] = false;
            this.autoShootCoolDown = 20;
            this.autoShootReset = 50;
            break;
        case 4: // 옵션
            {
                /** @type {Player} */
                //@ts-ignore
                let optionSpr = this.createVsSprite( { x: this.x,y: this.y,action: 8 } );

                Object.setPrototypeOf( optionSpr,Player.prototype );
                optionSpr.attrib.disableGravity = true;
                //@ts-ignore
                optionSpr.owner = this;
                optionSpr.player = this.player;
                optionSpr.setUpdatePhaseCallback( this.optionUpdate );
                this.options.push( optionSpr );
                optionSpr.optionIndex = this.options.length;
                if ( this.options.length == this.maxOption ) this.isBarEmpty[this.power] = true;
                _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer2.addChild( optionSpr );
            }
            break;
        case 5: // 보호막
            {
                let shield = this.createVsSprite( { action: 13 } );

                //@ts-ignore
                shield.life = 100;
                //@ts-ignore
                shield.playerNumber = this.player;
                shield.attrib.disableGravity = true;
                shield.on( "hit",( e )=>{
                    //@ts-ignore
                    shield.life -= e.damage;
                    //@ts-ignore
                    if ( shield.life <= 0 ) {
                        // 실드 파괴
                        shield.remove();
                        this.isBarEmpty[5] = false;
                        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "refreshUI",{ player: this.player } );
                    }
                } );
                shield.setUpdatePhaseCallback( ()=>{
                    shield.white = 0;
                } );
                this.isBarEmpty[this.power] = true;
                this.addChild( shield );

                this.shield = shield;
            }
            break;
        case 6: // 꽝
            this.resetPowerUp();
            break;
        }
        this.power = -1;
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "refreshUI",{ player: this.player } );
    }
}

function gameOver() {
    _global__WEBPACK_IMPORTED_MODULE_1__["default"].restCoin = 0;
    for ( let i = 1; i <= 2; i++ ) {
        if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[i] ) {
            _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[i].rest = 0;
            _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[i].dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "hit",{ forceHit: true } ) );
        }
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "refreshUI",{ player: i } );
    }
}

function spawnPlayer( e ) {
    let spr = new Player( e );

    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer3.addChild( spr );
    _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[e.player] = spr;
}

_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "gameOver", gameOver );
_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "spawn:player", spawnPlayer );


/***/ }),

/***/ "./games/PALO2/src/title.js":
/*!**********************************!*\
  !*** ./games/PALO2/src/title.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ "./games/PALO2/src/global.js");
/* harmony import */ var _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vsWrapper/vs */ "./games/PALO2/src/vsWrapper/vs.js");




const MAX_STAR = 40; 


async function title() {
    const titlePal = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsPalette( "stage1" );

    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.setPalette( titlePal );
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.setWorld( null ); // world 날리고
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.clearChildren();
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.backgroundColor = 0; // 배경 메시 생김

    {
        // init stars

        const starColorArray = [7,8,15];
    
        for ( let i = 0; i < MAX_STAR; i++ ) {
            let x = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,259 );
            let y = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,199 );
            let vx = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,3 );
            let c = starColorArray[_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,2 )];
            let px = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsPalette.indexToColor( c ),1 );

            px.setShader( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.createShader() );
            px.xy = [x,y];
            px.onStage( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME, function() {
                px.x -= vx;
                if ( px.x < 0 ) {
                    px.x = 260 + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,259 );
                }
            } );
            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.addChild( px );
        }
    }

    const titleSpr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite( "effect",{ x: 128,y: 40,action: 2 } );

    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.addChild( titleSpr );
    const titleSpr2 = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite( "effect",{ x: 128,y: 40,action: 5 } );

    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.addChild( titleSpr2 );

    let coin = _global__WEBPACK_IMPORTED_MODULE_1__["default"].restCoin = 4;
    let textSpr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSystemText();

    // t.setColor( 15 );
    textSpr.setText( `1P START\n\n2P START\n\n1P and 2P START\n\nREPLAY INTRO\n\nEXIT TO DOS\n\n\nCONTINUE ${coin}` );
    textSpr.xy = [ 90,105 ];
    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.addChild( textSpr );

    // 쾅하고 번쩍거리는 효과
    titlePal.fade( { start: 1,end: 0, duration: 60, range: [0,254] } );
    // Sound.playSound( `bang.wav` );
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "bgm",{ filename: "title" } );

    const playerSprFiles = ["p_hal","p_crys"];
    const selectorSpr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite( playerSprFiles[_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,1 )],{ x: 75,y: 108,action: 0 } );

    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.addChild( selectorSpr );
    let selector = 0;
    let demoTimer = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.delayedCall( 15 * 1000,()=>{
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "mode:intro" );
    } );

    selectorSpr.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.REMOVED_FROM_STAGE, () => {
        demoTimer.stop();
    } );

    selectorSpr.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_DOWN, async ( e )=>{
        if ( e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.UP && selector > 0 ) {
            selector--;
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `zako.wav` );
            selectorSpr.y = 108 + 16 * selector;
            demoTimer.stop();
            demoTimer.start();            
        }
        if ( e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.DOWN && selector < 4 ) {
            selector++;
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `zako.wav` );
            selectorSpr.y = 108 + 16 * selector;
            demoTimer.stop();
            demoTimer.start();            
        }
        if ( e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.ENTER || e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE || e.keyCode == _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.N ) {
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `item.wav` );
            demoTimer.stop();
            textSpr.removeFromParent();
            selectorSpr.removeFromParent();
            if ( selector == 3 ) {
                e.stopPropagation();
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "mode:intro",{ endingFlag: false } )  );
            } else if ( selector == 4 ) {
                e.stopPropagation();
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "dialog",{ msg: "exit" } ) );
            } else {
                let gameSetting = { coin: coin };

                if ( selector == 0 ) {
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "dialog",{ msg: "1p" } ) );
                    gameSetting.player1 = true;
                } else if ( selector == 1 ) {
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "dialog",{ msg: "2p" } ) );
                    gameSetting.player2 = true;
                } else if ( selector == 2 ) {
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "dialog",{ msg: "1p2p" } ) );
                    gameSetting.player1 = true;
                    gameSetting.player2 = true;
                }
                await _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Timer.waitFrame( 200 );
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "mode:gameLoop",gameSetting );
            }
        }
    } );
}

_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "mode:title",title );


/***/ }),

/***/ "./games/PALO2/src/vsWrapper/vs.js":
/*!*****************************************!*\
  !*** ./games/PALO2/src/vsWrapper/vs.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VsPad": () => (/* reexport safe */ _vsPad__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "VsPalette": () => (/* reexport safe */ _vsPalette__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "VsWorld": () => (/* reexport safe */ _vsWorld__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "VsSprite": () => (/* reexport safe */ _vsSprite__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "VsSystemText": () => (/* reexport safe */ _vsSystemText__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "VsHangul": () => (/* reexport safe */ _vsHangul__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "VsStage": () => (/* reexport safe */ _vsStage__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "vsStage": () => (/* binding */ vsStage),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _vsPalette__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vsPalette */ "./games/PALO2/src/vsWrapper/vsPalette.js");
/* harmony import */ var _vsWorld__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vsWorld */ "./games/PALO2/src/vsWrapper/vsWorld.js");
/* harmony import */ var _vsSprite__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vsSprite */ "./games/PALO2/src/vsWrapper/vsSprite.js");
/* harmony import */ var _vsSystemText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vsSystemText */ "./games/PALO2/src/vsWrapper/vsSystemText.js");
/* harmony import */ var _vsHangul__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vsHangul */ "./games/PALO2/src/vsWrapper/vsHangul.js");
/* harmony import */ var _vsStage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./vsStage */ "./games/PALO2/src/vsWrapper/vsStage.js");
/* harmony import */ var _vsPad__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vsPad */ "./games/PALO2/src/vsWrapper/vsPad.js");
/* harmony import */ var _vs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./vs */ "./games/PALO2/src/vsWrapper/vs.js");




















const vsStage = _vsStage__WEBPACK_IMPORTED_MODULE_6__["default"].instance;




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_vs__WEBPACK_IMPORTED_MODULE_8__);



/***/ }),

/***/ "./games/PALO2/src/vsWrapper/vsHangul.js":
/*!***********************************************!*\
  !*** ./games/PALO2/src/vsWrapper/vsHangul.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ VsHangul)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _vsStage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vsStage */ "./games/PALO2/src/vsWrapper/vsStage.js");
/* harmony import */ var _vsPalette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vsPalette */ "./games/PALO2/src/vsWrapper/vsPalette.js");





// TODO: 외곽선 처리 해야함

const widthTable = {
    "I": 5,
    "J": 6,
    "i": 5,
    "j": 6,
    "l": 5,
    "|": 4,
    "{": 6,
    "}": 5,
};

// 6 바이트씩 인코딩 x,y,w,h,sx,sy
// 한글은 회전이 없어서 6개면 됨
// 영어 95자
const hangulFontFrames = new Uint8Array( [
    40,43,2,12,2,1,208,65,4,4,2,0,20,15,8,12,0,0,0,30,8,14,0,0,240,0,8,10,0,2,31,0,8,12,0,0,196,72,2,4,3,0,18,30,4,14,2,0,23,58,4,14,2,0,22,73,8,8,0,2,41,13,8,10,0,1,199,72,2,4,3,10,116,51,8,2,0,5,72,70,2,2,2,12,249,0,6,10,1,2,18,45,6,12,1,0,29,15,6,12,1,0,95,13,6,12,1,0,102,13,6,12,1,0,0,60,8,12,0,0,109,13,6,12,1,0,116,13,6,12,1,0,123,13,6,12,1,0,130,13,6,12,1,0,137,13,6,12,1,0,228,13,2,10,2,1,228,24,2,10,2,2,144,13,6,12,1,0,125,51,8,4,0,4,151,13,6,12,1,0,158,13,6,12,1,1,40,0,8,12,0,0,165,13,6,12,1,0,9,45,8,12,0,0,172,13,6,12,1,0,49,0,8,12,0,0,58,0,8,12,0,0,67,0,8,12,0,0,179,13,6,12,1,0,76,0,8,12,0,0,43,37,4,12,0,0,9,58,6,14,0,0,85,0,8,12,0,0,94,0,8,12,0,0,103,0,8,12,0,0,112,0,8,12,0,0,121,0,8,12,0,0,130,0,8,12,0,0,139,0,8,12,0,1,148,0,8,12,0,0,186,13,6,12,1,0,157,0,8,12,0,0,166,0,8,12,0,0,193,13,6,12,1,0,175,0,8,12,0,0,184,0,8,12,0,0,193,0,8,12,0,0,202,0,8,12,0,0,50,24,4,12,2,0,200,13,6,12,1,0,48,37,4,12,2,0,54,50,6,4,1,0,151,58,8,2,0,12,196,77,2,4,3,0,221,26,6,8,1,4,207,13,6,12,0,0,161,35,6,8,1,4,214,13,6,12,1,0,168,35,6,8,1,4,221,13,6,12,1,0,43,24,6,12,1,2,211,0,8,12,0,0,55,24,4,12,0,0,23,28,4,14,0,0,220,0,8,12,0,0,53,37,4,12,0,0,31,73,8,8,0,4,40,73,8,8,0,4,175,35,6,8,1,4,60,24,6,10,0,4,67,24,6,10,1,4,182,35,6,8,0,4,189,35,6,8,1,4,74,24,6,10,0,2,81,24,8,8,0,4,196,35,6,8,1,4,95,26,8,8,0,4,104,26,8,8,0,4,50,13,8,10,0,4,203,35,6,8,1,4,25,43,4,14,0,0,58,37,2,12,0,0,28,58,4,14,0,0,134,51,8,4,0,5,59,13,8,10,0,1,61,35,6,10,0,0,68,35,6,10,0,0,75,35,6,10,0,0,82,33,6,10,0,0,210,35,6,10,0,0,217,35,6,10,0,0,224,35,6,10,0,0,231,11,6,10,0,0,231,22,6,10,0,0,238,11,6,10,0,0,231,33,6,10,0,0,238,22,6,10,0,0,245,11,6,10,0,0,238,33,6,10,0,0,245,22,6,10,0,0,245,33,6,10,0,0,249,44,6,10,0,0,242,51,6,10,0,0,41,62,6,10,0,0,23,43,1,1,0,0,113,26,8,8,0,0,122,26,8,8,0,0,131,26,8,8,0,0,140,26,8,8,0,0,149,26,8,8,0,0,158,26,8,8,0,0,167,26,8,8,0,0,176,26,8,8,0,0,185,26,8,8,0,0,194,26,8,8,0,0,203,26,8,8,0,0,212,26,8,8,0,0,89,35,8,8,0,0,98,35,8,8,0,0,107,35,8,8,0,0,116,35,8,8,0,0,125,35,8,8,0,0,134,35,8,8,0,0,143,35,8,8,0,0,23,43,1,1,0,0,113,26,8,8,0,0,122,26,8,8,0,0,131,26,8,8,0,0,140,26,8,8,0,0,149,26,8,8,0,0,158,26,8,8,0,0,167,26,8,8,0,0,176,26,8,8,0,0,185,26,8,8,0,0,194,26,8,8,0,0,203,26,8,8,0,0,212,26,8,8,0,0,89,35,8,8,0,0,98,35,8,8,0,0,107,35,8,8,0,0,116,35,8,8,0,0,125,35,8,8,0,0,134,35,8,8,0,0,143,35,8,8,0,0,23,43,1,1,0,0,49,73,6,8,0,0,56,73,6,8,0,0,63,73,6,8,0,0,72,61,6,8,0,0,79,61,6,8,0,0,86,61,6,8,0,0,93,61,6,8,0,0,100,61,6,8,0,0,107,61,6,8,0,0,114,61,6,8,0,0,249,55,6,8,0,0,124,63,6,8,0,0,131,63,6,8,0,0,138,63,6,8,0,0,145,63,6,8,0,0,152,61,6,8,0,0,214,58,6,8,0,0,221,58,6,8,0,0,228,58,6,8,0,0,23,43,1,1,0,0,49,73,6,8,0,0,56,73,6,8,0,0,63,73,6,8,0,0,72,61,6,8,0,0,79,61,6,8,0,0,86,61,6,8,0,0,93,61,6,8,0,0,100,61,6,8,0,0,107,61,6,8,0,0,114,61,6,8,0,0,249,55,6,8,0,0,124,63,6,8,0,0,131,63,6,8,0,0,138,63,6,8,0,0,145,63,6,8,0,0,152,61,6,8,0,0,214,58,6,8,0,0,221,58,6,8,0,0,228,58,6,8,0,0,23,43,1,1,0,0,235,58,6,8,0,0,242,62,6,8,0,0,249,64,6,8,0,0,70,73,6,8,0,0,77,73,6,8,0,0,86,61,6,8,0,0,84,73,6,8,0,0,91,73,6,8,0,0,98,73,6,8,0,0,105,73,6,8,0,0,249,55,6,8,0,0,112,73,6,8,0,0,119,73,6,8,0,0,126,73,6,8,0,0,133,73,6,8,0,0,140,73,6,8,0,0,214,58,6,8,0,0,147,73,6,8,0,0,228,58,6,8,0,0,23,43,1,1,0,0,83,44,8,6,0,0,92,44,8,6,0,0,101,44,8,6,0,0,110,44,8,6,0,0,119,44,8,6,0,0,128,44,8,6,0,0,137,44,8,6,0,0,146,44,8,6,0,0,155,44,8,6,0,0,164,44,8,6,0,0,173,44,8,6,0,0,182,44,8,6,0,0,191,44,8,6,0,0,200,44,8,6,0,0,231,44,8,6,0,0,240,44,8,6,0,0,143,51,8,6,0,0,152,51,8,6,0,0,161,51,8,6,0,0,23,43,1,1,0,0,159,65,6,6,0,0,166,65,6,6,0,0,173,65,6,6,0,0,180,65,6,6,0,0,187,65,6,6,0,0,194,65,6,6,0,0,201,65,6,6,0,0,213,67,6,6,0,0,220,67,6,6,0,0,227,67,6,6,0,0,234,67,6,6,0,0,241,71,6,6,0,0,248,73,6,6,0,0,154,72,6,6,0,0,161,72,6,6,0,0,168,72,6,6,0,0,175,72,6,6,0,0,182,72,6,6,0,0,189,72,6,6,0,0,23,43,1,1,0,0,28,28,4,14,6,0,30,43,4,14,5,0,33,58,4,14,6,0,33,28,4,14,5,0,35,43,4,14,4,0,36,13,4,14,5,0,38,28,4,14,4,0,16,58,6,14,3,0,43,50,10,4,0,10,0,0,10,14,0,0,0,15,10,14,0,0,11,15,8,14,0,0,61,46,10,4,0,10,72,46,10,4,0,10,22,0,8,14,0,0,11,0,10,14,0,0,0,45,8,14,0,0,209,46,10,4,0,10,61,51,10,2,0,12,9,30,8,14,0,0,38,58,2,14,6,0,23,43,1,1,0,0,28,28,4,14,6,0,30,43,4,14,5,0,33,58,4,14,6,0,33,28,4,14,5,0,35,43,4,14,4,0,36,13,4,14,5,0,38,28,4,14,4,0,16,58,6,14,3,0,43,50,10,4,0,10,0,0,10,14,0,0,0,15,10,14,0,0,11,15,8,14,0,0,61,46,10,4,0,10,72,46,10,4,0,10,22,0,8,14,0,0,11,0,10,14,0,0,0,45,8,14,0,0,209,46,10,4,0,10,61,51,10,2,0,12,9,30,8,14,0,0,38,58,2,14,6,0,23,43,1,1,0,0,90,24,4,10,6,0,252,11,4,10,5,0,252,22,4,10,6,0,252,33,4,10,5,0,48,62,4,10,4,0,53,62,6,10,3,0,60,62,4,10,4,0,65,61,6,10,3,0,72,51,10,2,0,6,0,73,10,8,0,0,11,73,10,8,0,0,152,35,8,8,0,0,83,51,10,2,0,6,94,51,10,2,0,7,68,13,8,10,0,0,229,0,10,10,0,0,77,13,8,10,0,0,105,51,10,2,0,7,61,51,10,2,0,6,86,13,8,10,0,0,121,61,2,10,6,0,23,43,1,1,0,0,90,24,4,10,6,0,252,11,4,10,5,0,252,22,4,10,6,0,252,33,4,10,5,0,48,62,4,10,4,0,53,62,6,10,3,0,60,62,4,10,4,0,65,61,6,10,3,0,72,51,10,2,0,6,0,73,10,8,0,0,11,73,10,8,0,0,152,35,8,8,0,0,83,51,10,2,0,6,94,51,10,2,0,7,68,13,8,10,0,0,229,0,10,10,0,0,77,13,8,10,0,0,105,51,10,2,0,7,61,51,10,2,0,6,86,13,8,10,0,0,121,61,2,10,6,0,23,43,1,1,0,0,170,51,8,6,0,8,179,51,8,6,0,8,188,51,8,6,0,8,197,51,8,6,0,8,206,51,8,6,0,8,215,51,8,6,0,8,224,51,8,6,0,8,233,51,8,6,0,8,43,55,8,6,0,8,52,55,8,6,0,8,61,54,8,6,0,8,70,54,8,6,0,8,79,54,8,6,0,8,88,54,8,6,0,8,97,54,8,6,0,8,106,54,8,6,0,8,115,54,8,6,0,8,124,56,8,6,0,8,142,58,8,4,0,10,220,46,10,4,0,10,133,56,8,6,0,8,160,58,8,6,0,8,169,58,8,6,0,8,178,58,8,6,0,8,187,58,8,6,0,8,196,58,8,6,0,8,205,58,8,6,0,8,23,43,1,1,0,0,170,51,8,6,0,8,179,51,8,6,0,8,188,51,8,6,0,8,197,51,8,6,0,8,206,51,8,6,0,8,215,51,8,6,0,8,224,51,8,6,0,8,233,51,8,6,0,8,43,55,8,6,0,8,52,55,8,6,0,8,61,54,8,6,0,8,70,54,8,6,0,8,79,54,8,6,0,8,88,54,8,6,0,8,97,54,8,6,0,8,106,54,8,6,0,8,115,54,8,6,0,8,124,56,8,6,0,8,142,58,8,4,0,10,220,46,10,4,0,10,133,56,8,6,0,8,160,58,8,6,0,8,169,58,8,6,0,8,178,58,8,6,0,8,187,58,8,6,0,8,196,58,8,6,0,8,205,58,8,6,0,8,23,43,1,1,0,0,170,51,8,6,1,8,179,51,8,6,1,8,188,51,8,6,1,8,197,51,8,6,1,8,206,51,8,6,1,8,215,51,8,6,1,8,224,51,8,6,1,8,233,51,8,6,1,8,43,55,8,6,1,8,52,55,8,6,1,8,61,54,8,6,1,8,70,54,8,6,1,8,79,54,8,6,1,8,88,54,8,6,1,8,97,54,8,6,1,8,106,54,8,6,1,8,115,54,8,6,1,8,124,56,8,6,1,8,142,58,8,4,1,10,220,46,10,4,0,10,133,56,8,6,1,8,160,58,8,6,1,8,169,58,8,6,1,8,178,58,8,6,1,8,187,58,8,6,1,8,196,58,8,6,1,8,205,58,8,6,1,8,23,43,1,1,0,0,170,51,8,6,0,8,179,51,8,6,0,8,188,51,8,6,0,8,197,51,8,6,0,8,206,51,8,6,0,8,215,51,8,6,0,8,224,51,8,6,0,8,233,51,8,6,0,8,43,55,8,6,0,8,52,55,8,6,0,8,61,54,8,6,0,8,70,54,8,6,0,8,79,54,8,6,0,8,88,54,8,6,0,8,97,54,8,6,0,8,106,54,8,6,0,8,115,54,8,6,0,8,124,56,8,6,0,8,142,58,8,4,0,10,220,46,10,4,0,10,133,56,8,6,0,8,160,58,8,6,0,8,169,58,8,6,0,8,178,58,8,6,0,8,187,58,8,6,0,8,196,58,8,6,0,8,205,58,8,6,0,8
] );

const hangulFontImage = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( `hangulfont.png` );


// 한글 데이터 만들기
const chosungTable = new Uint8Array( [
    // 종성이 없을 때 중성 변환 테이블
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
    // 종성이 있을 때 중성 변환 테이블
    2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3
] );

const joongsungTable = new Uint8Array( [
    // 종성 변환 테이블
    0, 2, 0, 2, 1, 2, 1, 2, 3, 0, 2, 1, 3, 3, 1, 2, 1, 3, 3, 1, 1,
    // 종성이 없을 때 초성 변환 테이블
    0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 3, 1, 2, 4, 4, 4, 2, 1, 3, 0,
    // 종성이 있을 때 초성 변환 테이블
    5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 6, 6, 7, 7, 7, 6, 6, 7, 5
] );

const convChosung = new Uint8Array( [
    //ㄱ,ㄲ,ㄳ,ㄴ,ㄵ,ㄶ,ㄷ,ㄸ,ㄹ,ㄺ,ㄻ,ㄼ,ㄽ,ㄾ,ㄿ,ㅀ,ㅁ,ㅂ,ㅃ,ㅄ,ㅅ,ㅆ,ㅇ,ㅈ,ㅉ,ㅊ,ㅋ,ㅌ,ㅍ,ㅎ
    0, 1, 0, 2, 2, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
] );

const INDEX_CHOSUNG = 95;
const INDEX_JOONGSUNG = ( INDEX_CHOSUNG + 160 );
const INDEX_JONGSUNG = ( INDEX_JOONGSUNG + 87 );


class VsHangul extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh {
    /**
     *Creates an instance of VsHangulFont.
     * @param {string=} s
     * @memberof VsHangulFont
     */
    constructor( s ) {
        super();
        this._color1 = 0x00f000;
        this._color2 = 0x00f000;
        this.setTexture( hangulFontImage );
        if ( s ) this.setText( s );
        this.once( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ADDED_TO_STAGE,()=>{
            this.setPalette( _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.palette );
        } );
    }

    setPalette( pal ) {
        let sh = pal.createShader( hangulFontImage );

        this.setShader( sh );
    }

    /**
     *
     *
     * @param {number} index1
     * @param {number=} index2
     * @memberof VsHangul
     */
    setColor( index1, index2 ) {
        this._color1 = _vsPalette__WEBPACK_IMPORTED_MODULE_2__["default"].indexToColor( index1 );
        if ( index2 ) {
            this._color2 = _vsPalette__WEBPACK_IMPORTED_MODULE_2__["default"].indexToColor( index2 );
        } else {
            this._color2 = this._color1;
        }

        if ( this.text != null ) {
            let count = this.getColorArraySize();
            let colors = [];

            for ( let i = 0; i < count / 4; i++ ) {
                colors.push( this._color1,1,this._color1,1,this._color2,1,this._color2,1 );
            }
            this.setColorArray( colors );
        }
    }

   
    /**
     *
     *
     * @param {string} s
     * @memberof VsSmallFont
     */
    setText( s ) {
        let idx = [];
        let vtx = [];
        let uv = [];
        let colors = [];
        let x = 0;
        let y = 0;

        this.text = s;

        let addChar = ( code ) => {
            let dataPos = code * 6;
            let data = hangulFontFrames.slice( dataPos,dataPos + 6 );
            let ipos = vtx.length / 2;
            let [u,v,w,h,sx,sy] = data;
            
            idx.push( ipos,ipos + 1,ipos + 2,ipos + 1,ipos + 3,ipos + 2 );
            vtx.push( x + sx,y + sy,x + sx + w,y + sy,x + sx,y + sy + h,x + sx + w,y + sy + h );
            uv.push( u,v,u + w,v,u,v + h,u + w,v + h );
            colors.push( this._color1,1,this._color1,1,this._color2,1,this._color2,1 );
        };

        for ( let i = 0; i < s.length; i++ ) {
            let ch = s.charCodeAt( i );

            if ( ch == 0x20 ) {
                // 공백
                x += 7;
            } else if ( ch == 10 ) {
                // 엔터
                x = 0;
                y += 16;
            } else if ( ch > 0x20 && ch <= 0x20 + 95 ) {
                // 영어
                addChar( ch - 33 );
                if ( widthTable[s[i]] ) {
                    x += widthTable[s[i]];
                } else {
                    x += 8;
                }
            } else {
                let chosung;
                let joongsung;
                let jongsung;
                let b1,b2,b3;

                if ( ch >= 0x3131 && ch <= 0x314e ) {
                    // 자소만 출력
                    addChar( INDEX_CHOSUNG + convChosung[( ch - 0x3131 )] );
                } else {
                    ch -= 0xac00;
                    chosung = Math.floor( ch / ( 28 * 21 ) );
                    joongsung = Math.floor( ( ch % ( 28 * 21 ) ) / 28 );
                    jongsung = ch % 28;

                    b3 = joongsungTable[ joongsung ];
                    if ( jongsung == 0 ) {
                        b2 = chosungTable[ chosung ];
                        b1 = joongsungTable[ 21 + joongsung ];
                    } else {
                        b2 = chosungTable[ 19 + chosung ];
                        b1 = joongsungTable[ 2 * 21 + joongsung ];
                    }
                    addChar( INDEX_CHOSUNG + chosung + b1 * 20 );
                    addChar( INDEX_JOONGSUNG + joongsung + b2 * 22 );
                    if ( jongsung != 0 ) {
                        addChar( INDEX_JONGSUNG + jongsung + b3 * 28 );
                    }
                }
                x += 11;
            }
        }
        this.setVertexArray( vtx );
        this.setIndexArray( idx );
        this.setColorArray( colors );
        this.setTextureCoordinateArray( uv );
    }
}

//module.exports = VsHangul;


/***/ }),

/***/ "./games/PALO2/src/vsWrapper/vsPad.js":
/*!********************************************!*\
  !*** ./games/PALO2/src/vsWrapper/vsPad.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ VsPad)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _vsStage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vsStage */ "./games/PALO2/src/vsWrapper/vsStage.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../global */ "./games/PALO2/src/global.js");






function addButton( x,y,key,color ) {
    let t = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( `vpad30.png` );
    let s = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( t );

    s.setColorMultiplier( ..._engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.hex2rgba( color ) );
    s.alpha = 0.3;
    s.setAnchorPoint( 0.5,0.5 );
    s.xy = [x,y];
    s.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN,( e )=>{
        if ( s.hitTestPoint( e.x,e.y ) ) {
            e.stopPropagation();
            let e2 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_DOWN );

            s.alpha = 0.5;
            e2.keyCode = key;
            s.downId = e.id;
            _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.dispatchEventWithChildren( e2 );
            // console.log( `DOWN ${key}` );
        }
    } );
    s.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP,( e )=>{
        if ( e.id == s.downId ) {
            e.stopPropagation();
            let e2 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_UP );

            s.alpha = 0.3;
            e2.keyCode = key;
            s.downId = null;
            _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.dispatchEventWithChildren( e2 );
            // console.log( `UP ${key}` );
        }
    } );
    return s;
}


class VsPad extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( alwaysShow ) {
        super();
        
        if ( alwaysShow || _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.touchEnabled ) {
            this.init();
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.RESIZE,this.init,this );
        }        
        // this.init();
    }

    init() {
        this.clearChildren();
        this.setDPad( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.left + 50,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.bottom - 50,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.UP,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.DOWN,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.LEFT,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.RIGHT );
        this.setButton( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.right - 70,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.bottom - 40,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.SPACE,0xff4040 );
        this.setButton( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.right - 40,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalRenderBounds.bottom - 60,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.KeyCode.M,0x4000ff );
    }

    setDPad( x,y,keyUp,keyDown,keyLeft,keyRight ) {
        let originX = x;
        let originY = y;
        let hx = x;
        let hy = y;
        let border = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( `vpad50.png` ) );

        border.xy = [x,y];
        border.setAnchorPoint( 0.5,0.5 );
        border.alpha = 0.2;
        this.addChild( border );

        let dot = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( `vpad5.png` ) );

        dot.alpha = 0.5;
        dot.setAnchorPoint( 0.5,0.5 );
        dot.setVisible( false );
        dot.onStage( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME,()=>{
            if ( _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.world && _global__WEBPACK_IMPORTED_MODULE_2__["default"].players && _global__WEBPACK_IMPORTED_MODULE_2__["default"].players[1] ) {
                let px = _global__WEBPACK_IMPORTED_MODULE_2__["default"].players[1].x;
                let py = _global__WEBPACK_IMPORTED_MODULE_2__["default"].players[1].y;

                dot.position = _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.world.getStageCoordinate( px,py );
                dot.x += ( hx - x ) * 0.6;
                dot.y += ( hy - y ) * 0.6;
            }
        } );
        this.addChild( dot );

        let head = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Bitmap( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( `vpad30.png` ) );

        head.xy = [x,y];
        head.setAnchorPoint( 0.5,0.5 );
        head.alpha = 0.3;
        this.addChild( head );

        const keyStates = {};
        const dirToKey = [
            [keyUp],
            [keyUp,keyRight],
            [keyRight],
            [keyDown,keyRight],
            [keyDown],
            [keyDown,keyLeft],
            [keyLeft],
            [keyUp,keyLeft],
            [],
        ];
        const getDir = ( ex,ey )=>{
            if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.distance( x,y, ex,ey ) < 10 ) return 8;
            let angle = Math.atan2( ex - x,-( ey - y ) )  * 180 / Math.PI + 22.5;
            let dir = Math.floor( ( angle < 0 ? angle + 360 : angle ) / 45 );
            
            // console.log( dir );
            return dir;
        };

        head.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_DOWN,( e )=>{
            if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.distance( originX,originY, e.x,e.y ) <= 100 ) {
                x = e.x;
                y = e.y;
                border.xy = [x,y];
                e.stopPropagation();
                head.downId = e.id;
                head.alpha = 0.5;
                head.xy = [e.x,e.y];
                head.lastDir = getDir( e.x,e.y );
                hx = e.x;
                hy = e.y;
                dot.setVisible( true );
                
                if ( dirToKey[head.lastDir].length > 0 ) {
                    let e1 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_DOWN );

                    e1.keyCode = dirToKey[head.lastDir][0];
                    keyStates[e1.keyCode] = true;
                    _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.dispatchEventWithChildren( e1 );
                    // console.log( `DOWN ${e1.keyCode}` );
                }
                if ( dirToKey[head.lastDir].length > 1 ) {
                    let e2 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_DOWN );

                    e2.keyCode = dirToKey[head.lastDir][1];
                    keyStates[e2.keyCode] = true;
                    _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.dispatchEventWithChildren( e2 );
                    // console.log( `DOWN ${e2.keyCode}` );
                }
            }
        } );
        head.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_MOVE, ( e )=>{
            if ( head.downId != null ) {
                if ( e.id == head.downId ) {
                    e.stopPropagation();
                    head.xy = [e.x,e.y];
                    hx = e.x;
                    hy = e.y;
                    let dir = getDir( e.x,e.y );

                    // console.log( dir,head.lastDir,keyStates );
                    if ( head.lastDir != dir ) {
                        head.lastDir = dir;
                        for ( let key in keyStates ) {
                            let e1 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_UP );

                            if ( dirToKey[head.lastDir].indexOf( key ) < 0 ) {
                                e1.keyCode = key;
                                _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.dispatchEventWithChildren( e1 );
                                // console.log( `UP ${key}` );
                                delete keyStates[key];
                            }
                        }
                        if ( dirToKey[head.lastDir].length > 0 && !keyStates[dirToKey[head.lastDir][0]] ) {
                            let e1 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_DOWN );

                            e1.keyCode = dirToKey[head.lastDir][0];
                            keyStates[e1.keyCode] = true;
                            _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.dispatchEventWithChildren( e1 );
                            // console.log( `DOWN ${e1.keyCode}` );
                        }
                        if ( dirToKey[head.lastDir].length > 1 && !keyStates[dirToKey[head.lastDir][1]] ) {
                            let e2 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_DOWN );

                            e2.keyCode = dirToKey[head.lastDir][1];
                            keyStates[e2.keyCode] = true;
                            _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.dispatchEventWithChildren( e2 );
                            // console.log( `DOWN ${e2.keyCode}` );
                        }
                    }
                }
            }
        } );
        head.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.POINTER_UP,( e )=>{
            if ( e.id == head.downId ) {
                e.stopPropagation();
                x = originX;
                y = originY;
                border.xy = [x,y];

                head.alpha = 0.3;
                head.xy = [x,y];
                dot.setVisible( false );
                for ( let key in keyStates ) {
                    let e1 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.KEY_UP );

                    e1.keyCode = key;
                    _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.dispatchEventWithChildren( e1 );
                    delete keyStates[key];
                    // console.log( `UP ${key}` );
                }
                head.downId = null;
            }
        } );
    }

    setButton( x,y,key,color ) {
        this.addChild( addButton( x,y,key,color ) );
    }
}



// module.exports = VsPad;

/***/ }),

/***/ "./games/PALO2/src/vsWrapper/vsPalette.js":
/*!************************************************!*\
  !*** ./games/PALO2/src/vsWrapper/vsPalette.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ VsPalette)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _vsStage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vsStage */ "./games/PALO2/src/vsWrapper/vsStage.js");



const vertexSrc = `
precision mediump float;

#define PI 3.1415926535897932384626433832795
#define MOTION_BLUR_THRESHOLD 2.0

const bool useDiscard = true;

#ifndef NO_TEXTURE
    attribute vec2 a_texCoord;
    varying vec2 v_texCoord;
#endif


    uniform mat4 u_viewMatrix;
    uniform mat4 u_worldMatrixPrev;
    uniform mat4 u_worldMatrix;
    uniform vec2 u_anchorPrev;
    uniform vec2 u_anchor;
    uniform vec4 u_colorOverridePrev;
    uniform vec4 u_colorOverride;
    uniform float u_alphaMod;
    uniform float u_alphaMod2;
    uniform float u_logicPerRenderFrame;
    uniform float u_subRenderFrame;

    attribute vec2 a_position;
    attribute vec4 a_color;
    attribute float a_blendFactor;

    varying float v_discardAll;
    varying vec4 v_colorOverride;

    varying float v_alphaCorrection;



//decomposing code from
//https://github.com/deoxxa/transformation-matrix-js/blob/master/src/matrix.js

struct Transform {
    vec2 position;
    vec2 scale;
    vec2 skew;
    float rotation;
};

Transform decompose(mat4 mat) {
    Transform result;
	float a = mat[0].x;
    float b = mat[0].y;
    float c = mat[1].x;
    float d = mat[1].y;

    float rotation = 0.0;
    vec2 scale = vec2(1.0, 1.0);
    vec2 skew = vec2(0.0, 0.0);

    float determ = a * d - b * c;	// determinant(), skip DRY here...

    if(a != 0.0 || b != 0.0) {
        float r = sqrt(a * a + b * b);
        rotation = b > 0.0 ? acos(a / r) : -acos(a / r);
        scale = vec2(r, determ / r);
        skew.x = atan((a * c + b * d), (r * r));
    } else if(c != 0.0 || d != 0.0) {
        float s = sqrt(c * c + d * d);
        rotation = PI * 0.5 - (d > 0.0 ? acos(-c / s) : -acos(c / s));
        scale = vec2(determ / s, s);
        skew.y = atan((a * c + b * d), (s * s));
    } else { // a = b = c = d = 0
        scale = vec2(0.0, 0.0);		// = invalid matrix
    } 
    result.scale = scale;
    result.rotation = rotation;
    result.skew = skew;
    result.position = mat[3].xy;
    return result;
}


void main() {

    vec4 pos = vec4(a_position.xy,1,1);
    float abf = a_blendFactor;
    float bf = (a_blendFactor+u_subRenderFrame) / max(1.0,u_logicPerRenderFrame);
    mat4 matrix1 = u_worldMatrixPrev;
    mat4 matrix2 = u_worldMatrix;

#ifndef NO_TEXTURE
    v_texCoord = a_texCoord;
#endif

    Transform t1 = decompose(matrix1);
    Transform t2 = decompose(matrix2);
    Transform t;

    float dist = length(matrix1[3].xy - matrix2[3].xy);
    bool isNotMoved = bf>=1.0 || (dist<=MOTION_BLUR_THRESHOLD && t1.scale == t2.scale && t1.rotation == t2.rotation);


    if(isNotMoved) {
        if (useDiscard && abf!=0.5) {
            v_discardAll = 1.0;
            gl_Position = vec4(0);
            return;
        } else {
            v_colorOverride = u_colorOverride;
            t.position = t2.position;
            t.rotation = t2.rotation;
            t.scale = t2.scale;
            t.skew = t2.skew;
            v_colorOverride *= a_color;
            v_alphaCorrection = 0.0;
        }
    } else {
        v_alphaCorrection = 1.0;
        float alpha = 1.0 - abs(abf - 0.5) * 2.0;
        v_colorOverride = mix(u_colorOverridePrev, u_colorOverride, bf);
        v_colorOverride *= a_color;
        v_colorOverride.a *= a_color.a;// * alpha;
        t.position = mix(t1.position, t2.position, bf);
        t.rotation = mix(t1.rotation, t2.rotation, bf);
        t.scale = mix(t1.scale, t2.scale, bf);
        t.skew = mix(t1.skew, t2.skew, bf);
    }
    v_discardAll = 0.0;

    mat4 posMat = mat4(1);
    mat4 scaleMat = mat4(1);
    mat4 rotMat = mat4(1);
    mat4 shearMat = mat4(1);
    mat4 anchorMat = mat4(1);

    anchorMat[3].xy = -mix(u_anchorPrev,u_anchor,bf);

    posMat[3].xy = t.position;
    shearMat[0].y = -t.skew.x;
    shearMat[1].x = t.skew.y;
    scaleMat[0].x = t.scale.x;
    scaleMat[1].y = t.scale.y;    
    rotMat[0].x = cos(t.rotation);
    rotMat[0].y = sin(t.rotation);
    rotMat[1].x = -sin(t.rotation);
    rotMat[1].y = cos(t.rotation);

    gl_Position = u_viewMatrix * posMat * shearMat * scaleMat * rotMat * anchorMat * pos;

}
            `;
const fragmentSrc = `
precision mediump float;

#define PI 3.1415926535897932384626433832795

#ifndef NO_TEXTURE

    uniform sampler2D u_texture;
    uniform vec2 u_textureSize;
    varying vec2 v_texCoord;

#endif

    uniform vec4 u_colorAdd;

    varying float v_discardAll;
    varying vec4 v_colorOverride;
    varying float v_alphaCorrection;

    uniform float u_alphaMod;
    uniform float u_alphaMod2;

    uniform sampler2D palette;
    uniform float white;

void main() {
    if(v_discardAll != 0.0) discard;

#ifndef NO_TEXTURE
    vec4 c = texture2D(u_texture,v_texCoord / u_textureSize);
#else
    vec4 c = vec4(1.0,1.0,1.0,1.0);
#endif
    c += u_colorAdd;
    c *= v_colorOverride;
    vec4 ic = c;
    float index = (ic.g * 16.0 + ic.r*16.0 * 16.0)/256.0;
    c = vec4( 
           mix ( texture2D(palette,vec2(index,0)).xyz, vec3(1,1,1),white) 
        , ic.a );
    
    // 모션블러된 값을 보정하는 식
    // 정확한 값을 구하는 것은 어렵고 근사치를 사용한다.
    // 모션블러 9개 그리는 것을 기준으로 구한 값
    // c.a *= 1.0 + (0.23/(1.18 - c.a) - 1.0)*v_alphaCorrection;
    // 모션블러 15개 기준
    c.a *= 1.0 + (0.09 / (1.5 - c.a) - 1.0) * v_alphaCorrection;
    c.rgb *= c.a;
    gl_FragColor = c;
}
            `;


const noTexShader = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Shader( "#define NO_TEXTURE\n" + vertexSrc,"#define NO_TEXTURE\n" + fragmentSrc,null );

// 팔레트를 한번에 변경할 수 있도록 메시를 미리 만들어둔다.
// 컬러어레이만 준비해서 그리면 된다.
const drawMesh = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh();

{
    let vtx = [];
    let idx = [];

    for ( let i = 0; i <= 255; i++ ) {
        let v = vtx.length / 2;

        vtx.push( i,0, i + 1,0, i,1, i + 1,1 );
        idx.push( v,v + 1,v + 2, v + 1,v + 3,v + 2 );
    }
    drawMesh.setVertexArray( vtx );
    drawMesh.setIndexArray( idx );
}

class VsPalette {
    constructor( palName ) {
        let arr = JSON.parse( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.getEmbeddedFile( `pal_${palName}.json` ) );

        this._rt = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.RenderTarget( 256,1,false );
        this.colorArray = arr;
        this._currentColorArray = arr.slice();
        this._setArray();
        this.fadeInfo = null;
        this.rotateInfo = null;
        this.baseShader = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Shader( vertexSrc, fragmentSrc, null );
        // setTimeout( ()=>{
        //     let b = new Bitmap( this._rt );

        //     b.scale = 1;
        //     stage.addChild( b );
        // },1 );
    }

    get texture() {
        console.log( `aaaaaaaaaaaaaaaaa palette ${this._rt.asset.id}` );
        return this._rt;
    }

    /**
     *
     *
     * @param {TextureBase=} baseTexture
     * @returns {Shader}
     * @memberof VsPalette
     */
    createShader( baseTexture ) {
        let sh;

        if ( baseTexture ) {
            sh =  this.baseShader.clone();
            sh.setTexture( "palette",this._rt );
            sh.setTexture( "base",baseTexture );
            sh.setConstant( "texSize", baseTexture.size );
            sh.setConstant( "white", 0 );
        } else {
            sh = noTexShader;
            sh.setTexture( "palette",this._rt );
            sh.setConstant( "white", 0 );
        }
        return sh;
    }

    add( value, startRange = 0, endRange = 255 ) {
        for ( let i = startRange; i <= endRange; i++ ) {
            let arr = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.hex2rgba( this.colorArray[i] );
            let rarr = [];

            rarr[0] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( arr[0] + value, 0,1 );
            rarr[1] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( arr[1] + value, 0,1 );
            rarr[2] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( arr[2] + value, 0,1 );
            this._currentColorArray[i] = ( ( rarr[0] * 255 << 16 ) | ( rarr[1] * 255 << 8 ) | ( rarr[2] * 255 ) );
        }
        this._setArray();
    }

    fade( options ) {
        this.fadeInfo = options;
    }

    rotate( options ) {
        this.rotateInfo = options;
    }

    _setArray() {
        let arr = this._currentColorArray;
        let colors = [];

        for ( let i = 0; i <= 255; i++  ) {
            colors.push( arr[i],1, arr[i],1, arr[i],1, arr[i],1 );
        }
        drawMesh.setColorArray( colors );
        this._rt.draw( drawMesh );
    }

    process() {
        if ( this.fadeInfo ) {
            let startRange = this.fadeInfo.range ? this.fadeInfo.range[0] : 0;
            let endRange = this.fadeInfo.range ? this.fadeInfo.range[1] : 255;
            let startValue = this.fadeInfo.start || 0;
            let endValue = this.fadeInfo.end || 0;
            let duration = this.fadeInfo.duration || 0;

            this.fadeInfo.count = this.fadeInfo.count++ || 0;
            let ratio = Math.min( 1, duration != 0 ? this.fadeInfo.count / duration : 0 );
            let value = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.lerp( startValue,endValue,ratio );

            for ( let i = startRange; i <= endRange; i++ ) {
                let arr = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.hex2rgba( this.colorArray[i] );
                let rarr = [];

                rarr[0] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( arr[0] + value, 0,1 );
                rarr[1] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( arr[1] + value, 0,1 );
                rarr[2] = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( arr[2] + value, 0,1 );
                this._currentColorArray[i] = ( ( rarr[0] * 255 << 16 ) | ( rarr[1] * 255 << 8 ) | ( rarr[2] * 255 ) );
            }
            this._setArray();
            this.fadeInfo.count++;
            if ( this.fadeInfo.count > this.fadeInfo.duration ) {
                this.fadeInfo = null;
            }
        }
        if ( this.rotateInfo ) {

        }
    }

    static indexToColor( index ) {
        return ( ( Math.floor( index / 16 ) * 16 ) << 16 ) | ( ( index % 16 ) * 16 << 8 );
    }
}



/***/ }),

/***/ "./games/PALO2/src/vsWrapper/vsSprite.js":
/*!***********************************************!*\
  !*** ./games/PALO2/src/vsWrapper/vsSprite.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ VsSprite)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _vsStage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vsStage */ "./games/PALO2/src/vsWrapper/vsStage.js");
/* harmony import */ var _vsPalette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vsPalette */ "./games/PALO2/src/vsWrapper/vsPalette.js");
/* harmony import */ var _vsWorld__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vsWorld */ "./games/PALO2/src/vsWrapper/vsWorld.js");







class VsSprite extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( sprName, options ) {
        super();

        if ( sprName != null ) {
            const imageName = `spr_${sprName}.png`;
            const sprData = JSON.parse( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.getEmbeddedFile( `spr_${sprName}.json` ) );

            this._meshes = [];
                                    
            

            this.texture = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( imageName );
            for ( let i = 0; i < sprData.images.length; i++ ) {
                let img = sprData.images[i];
                let src = img.source;
                let x = img.x;
                let y = img.y;

                this._meshes[i] = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh();
                this._meshes[i].setVertexArray( [x,y, x + src.width,y, x,y + src.height, x + src.width,y + src.height] );
                if ( img.inflip ) {
                // inflip을 쓰는 케이스가 거의 없는데
                // x에 img.flipX를 미리 더해줘야할 수도 있다.
                    this._meshes[i].setTextureCoordinateArray( [src.x + src.width,src.y, src.x,src.y, src.x + src.width,src.y + src.height, src.x,src.y + src.height] );
                    this._meshes[i].visibleRect = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Rect( x,y,src.width,src.height );
                } else {
                    this._meshes[i].setTextureCoordinateArray( [src.x,src.y, src.x + src.width,src.y, src.x,src.y + src.height, src.x + src.width,src.y + src.height] );
                    this._meshes[i].visibleRect = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Rect( x,y,src.width,src.height );
                }
                this._meshes[i].setColorArray( [0xffffff,1,0xffffff,1,0xffffff,1,0xffffff,1] );
                this._meshes[i].setIndexArray( [0,1,2,1,3,2] );
                this._meshes[i].setTexture( this.texture );
                this._meshes[i].flipX = img.flipX;
                this._meshes[i].flipY = img.flipY;
                this._meshes[i].ranges = img.ranges;
            // 3개
            // x1,y1,x2,y2,fx,fy
            }
            const actions = {};

            for ( let actionNum = 0; actionNum < sprData.actions.length; actionNum++ ) {
                let timeline = [];
                let frames = sprData.actions[actionNum];

                for ( let frameNum = 0; frameNum < frames.length; frameNum++ ) {
                    let imageNum = frames[frameNum].image;

                    if ( imageNum == -1 ) {
                    // chain
                        timeline.push( [-1 ,frames[frameNum].x == -1 ? actionNum : frames[frameNum].x,frames[frameNum].y] );
                        break;
                    } else {
                        timeline.push( [imageNum, frames[frameNum].x, frames[frameNum].y ] );
                    }
                }
                actions[actionNum] = timeline;
            }
            this._actions = actions;
        } else {
            this._meshes = null;
            this._action = null;
            this.texture = null;
        }
        this._init( options );

        // 첫 프레임 표시할 메시를 셋업
        this.updateVisual();

        if ( _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.palette ) {
            this.setPalette( _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.palette );
        } else {
            this.once( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ADDED_TO_STAGE,()=>{
                this.setPalette( _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.palette );
            } );
        }
    }

    _init( options ) {
        this._white = 0;
        this._flicker = 0;
        this._currentAction = 0;
        this._currentFrame = 0;
        this.autoRemoveTimer = 0;
        this.animationStopCounter = 0;
        this.animationSpeed = 1;

        this.attrib = Object.assign( {},VsSprite.defaultAttrib );
        this.updateCallback = null;
        this.mapCollisionCallback = null;
        this.collisionCallback = null;
        this.removeCallback = null;

        this.flipX = false;
        this.flipY = false;

        this.velocity = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( 0,0 );
        this.acceleration = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( 0,0 );

        Object.assign( this,options );
    }

    /**
     * 같은 데이터를 사용하는 스프라이트를 생성한다
     *
     * @param {*} options
     * @returns {VsSprite}
     * @memberof VsSprite
     */
    createVsSprite( options ) {
        const spr = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();

        Object.setPrototypeOf( spr,VsSprite.prototype );
        Object.assign( spr, {
            _meshes: this._meshes.map( e=>{
                let m = e.clone();

                m.visibleRect = e.visibleRect;
                m.flipX = e.flipX;
                m.flipY = e.flipY;
                m.ranges = e.ranges;
                return m;
            } ),
            _actions: this._actions,
            texture:  this.texture
        } );
        
        //@ts-ignore
        spr.setPalette( _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.palette );
        //@ts-ignore
        spr._init( options );
        //@ts-ignore
        spr.updateVisual();
        //@ts-ignore
        return spr;
    }

    /**
     *
     *
     * @param {number} num
     * @returns {flatfast.instanceOf.Mesh}
     * @memberof VsSprite
     */
    getMesh( num ) {
        let sh = this._meshes[num].getShader();
        let m = this._meshes[num].clone();

        m.setShader( sh );
        return m;
    }

    get action() {
        return this._currentAction;
    }

    set action( a ) {
        this._currentAction = a;
        this._currentFrame = 0;
        this.updateVisual();
    }

    get frame() {
        return this._currentFrame;
    }

    set frame( f ) {
        this._currentFrame = f;
        this.updateVisual();
    }

    setPalette( pal ) {
        console.assert( pal instanceof _vsPalette__WEBPACK_IMPORTED_MODULE_2__["default"], `팔레트가 제대로 세팅되어있지 않습니다` );
        let sh = pal.createShader( this.texture );

        if ( this._meshes == null ) return;
        for ( let b of Object.values( this._meshes ) ) {
            b.setShader( sh );
        }
    }

    get white() {
        return this._white;
    }

    set white( v ) {
        this._white = v;
        this._currentMesh.getShader().setConstant( "white",v );
    }

    /**
     *
     *
     * @param {number=} action
     * @param {number=} frame
     * @memberof VsSprite
     */
    setAction( action, frame ) {
        if ( action == null ) {
            this._currentFrame = frame == null ? this._currentFrame : frame;
        } else {
            if ( this._currentAction == action ) {
                this._currentFrame = frame == null ? this._currentFrame : frame;    
            } else {
                this._currentAction = action;
                this._currentFrame = frame == null ? 0 : frame;    
            }
        }
        this.updateVisual();
    }

    updateVisual() {
        if ( this._actions == null ) return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( 0,0 );
        let frameData = this._actions[this._currentAction][this._currentFrame];

        const oldImageFrame = this._oldImageFrame;

        if ( frameData[0] == -1 ) {
            if ( frameData[1] == -2 ) {
                // 끝나는 프레임
                this.remove( "endOfAnimation" );
                return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( 0,0 );
            } else {
                if ( frameData[1] != -1 ) this._currentAction = frameData[1];
                this._currentFrame = frameData[2];
                frameData = this._actions[this._currentAction][this._currentFrame];
            }
        } 
        if ( oldImageFrame != frameData[0] ) {
            this._oldImageFrame = frameData[0];
            let oldWorldMatrix = null;

            if ( this._currentMesh ) {
                oldWorldMatrix = this._currentMesh.worldMatrix;
                this._currentMesh.removeFromParent();
            }

            this._currentMesh = this._meshes[frameData[0]];
            this._currentMesh.scaleX = this.flipX ? -1 : 1;
            this._currentMesh.x = this.flipX ? this._currentMesh.flipX : 0;
            this._currentMesh.scaleY = this.flipY ? -1 : 1;
            this._currentMesh.y = this.flipY ? this._currentMesh.flipY : 0;
            if ( oldWorldMatrix ) {
                this._currentMesh.setCustomPrev( oldWorldMatrix,this._currentMesh.colorOverride,this._currentMesh.anchorX,this._currentMesh.anchorY );
            }
            if ( this.attrib.enableHideMesh == false ) {
                this.addChildAt( this._currentMesh,0 );
            }
        }
        // this._currentMesh.updateCode != Sprite.UpdateCodes.UPDATE_CLEAR_PREV;
        return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( frameData[1],frameData[2] );
    }

    /**
     * VsSprite끼리 충돌검사. range끼리 검사한다 range는 0~2사이
     * this와 target이 일치하면 항상 false이다.
     *
     * @param {VsSprite} target
     * @param {number} srcRange
     * @param {number} dstRange
     * @returns {boolean}
     * @memberof VsSprite
     */
    checkRange( target,srcRange,dstRange ) {
        if ( this == target ) return false;
        let r1 = this._currentMesh.ranges[srcRange];
        let r2 = target._currentMesh.ranges[dstRange];
        let sx1 = r1.x1 + ( this.flipX ? r1.fx : 0 );
        let sy1 = r1.y1 + ( this.flipY ? r1.fy : 0 );
        let sx2 = r1.x2 + ( this.flipX ? r1.fx : 0 );
        let sy2 = r1.y2 + ( this.flipY ? r1.fy : 0 );
        let dx1 = r2.x1 + ( target.flipX ? r2.fx : 0 );
        let dy1 = r2.y1 + ( target.flipY ? r2.fy : 0 );
        let dx2 = r2.x2 + ( target.flipX ? r2.fx : 0 );
        let dy2 = r2.y2 + ( target.flipY ? r2.fy : 0 );
        
        let ps1 = this.localToGlobal( sx1,sy1 );
        let ps2 = this.localToGlobal( sx2,sy2 );
        let pd1 = target.localToGlobal( dx1,dy1 );
        let pd2 = target.localToGlobal( dx2,dy2 );

        if ( ps2.x < pd1.x || ps1.x > pd2.x || ps2.y < pd1.y || ps1.y > pd2.y ) return false;
        return true;
    }

    updateVelocityAndAcceleration() {
        this.velocity = this.velocity.add( this.acceleration );

        if ( this.attrib.disableGravity == false && _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.world ) {
            this.velocity = this.velocity.add( _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.world.gravity );
        }
    }

    setMapCollisionPhaseCallback( func ) {
        this.mapCollisionCallback = func;
    }

    setUpdatePhaseCallback( func ) {
        this.updateCallback = func;
    }

    setCollisionPhaseCallback( func ) {
        this.collisionCallback = func;
    }

    setRemoveCallback( func ) {
        this.removeCallback = func;
    }

    /**
     *
     *
     * @param {string=} reason
     * @memberof VsSprite
     */
    remove( reason ) {
        // console.log( reason );
        // 처리 도중 다른 이벤트로 튀는 경우를 막기 위해서 끊어준다
        this.removeAllEventListeners();
        this.removeFromParent();
    }

    /**
     *
     *
     * @param {VsSprite[]} otherSprites
     * @memberof VsSprite
     */
    process( otherSprites ) {
        // autoRemoveTimer 처리. 최초에 0이면 작동안함
        if ( this.autoRemoveTimer > 0 ) {
            this.autoRemoveTimer--;
            if ( this.autoRemoveTimer == 0 ) {
                this.remove( "autoRemoveTimer" );
                return;
            }
        }

        this.updateVelocityAndAcceleration(); // 속도, 가속도, 중력
        let delta = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( 0,0 );

        if ( this.attrib.disableVelocity == false ) {
            delta = delta.add( this.velocity );
        }

        if ( this.attrib.disableGlobalVelocity == false && _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.world ) {
            delta = delta.add( _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.world.constantVelocity );
        }

        if ( this.animationStopCounter == 0 ) {
            this._currentFrame++;
            delta = delta.add( this.updateVisual() );
        }

        let r0 = this._currentMesh && this._currentMesh.ranges[0];

        if ( this.attrib.enableDebug && r0 ) {
            if ( this.debugShape ) {
                this.debugShape.removeFromParent();
            }
            let s = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Shape();

            s.makeBox( r0.x1,r0.y1,r0.x2 - r0.x1 + 1,r0.y2 - r0.y1 + 1,0xff0000,0.7 );
            this.debugShape = s;
            this.addChild( s );
        }

        // TODO: push 처리
        // 다른 스프라이트를 미는 처리

        if ( this.attrib.enablePush == false ) {
            // push 속성이 없을 경우에 내 스프라이트를 밀려나게 하기 위한 처리
            for ( let spr of otherSprites ) {
                if ( spr.attrib.enableBlock ) {
                    // block 속성이 켜진 경우
                }
            }
        }

        if ( ( this.attrib.enableMapCollisionLeft || this.attrib.enableMapCollisionRight || this.attrib.enableMapCollisionTop || this.attrib.enableMapCollisionBottom ) && this.animationStopCounter == 0 ) {
            // 맵충돌 순서는 바닥, 천장, 우측, 좌측
            /** @type {VsWorld} */
            const world = _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.world;

            let adjust = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( 0,0 );
            let adjustVelocity = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( 0,0 );
            let touchedMapAttrib = 0;
            let opos = this.position;

            // TODO: 스프라이트가 계증 구조가 되는 경우를 커버해야함
            // 좌표계 바꾸는 처리가 필요하다

            let lpos = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( this.x + delta.x,this.y + delta.y );
            let collideList = [];

            if ( this.attrib.enableMapCollisionBottom && delta.y > 0 ) {
                for ( let x = ( ( lpos.x + r0.x1 ) >> 4 ); x <= ( ( lpos.x + r0.x2 ) >> 4 ); x++ ) {
                    const y = ( lpos.y + r0.y2 + 1 ) >> 4;
                    const mapAttrib = world.getMapAttrib( x,y );

                    if ( mapAttrib & _vsWorld__WEBPACK_IMPORTED_MODULE_3__["default"].TILEATTRIB_FLOOR ) {
                        collideList.push( [x,y,world.getMap( x,y )] );
                        if ( ( touchedMapAttrib & _vsWorld__WEBPACK_IMPORTED_MODULE_3__["default"].TILEATTRIB_FLOOR ) == 0 ) {
                            adjust.y = -( ( lpos.y + r0.y2 + 1 ) % 16 );
                            adjustVelocity.y = -this.velocity.y;
                            touchedMapAttrib |= _vsWorld__WEBPACK_IMPORTED_MODULE_3__["default"].TILEATTRIB_FLOOR;
                            break;
                        }
                    }
                }
            } else if ( this.attrib.enableMapCollisionTop && delta.y < 0 ) {
                for ( let x = ( ( lpos.x + r0.x1 ) >> 4 ); x <= ( ( lpos.x + r0.x2 ) >> 4 ); x++ ) {
                    const y = ( lpos.y + r0.y1 ) >> 4;
                    const mapAttrib = world.getMapAttrib( x,y );

                    if ( mapAttrib & _vsWorld__WEBPACK_IMPORTED_MODULE_3__["default"].TILEATTRIB_CEIL ) {
                        collideList.push( [x,y,world.getMap( x,y )] );
                        if ( ( touchedMapAttrib & _vsWorld__WEBPACK_IMPORTED_MODULE_3__["default"].TILEATTRIB_CEIL ) == 0 ) {
                            adjust.y = -( 16 - ( lpos.y + r0.y1 ) % 16 );
                            adjustVelocity.y = -this.velocity.y;
                            touchedMapAttrib |= _vsWorld__WEBPACK_IMPORTED_MODULE_3__["default"].TILEATTRIB_CEIL;
                            break;
                        }
                    }
                }
            }

            // 중력에 의해서 바닥에 충돌했을 때 바닥면과 좌우 충돌하지 않도록 하기 위해서 여기서 보정 처리 한다            
            lpos.y += adjust.y;
            if ( this.attrib.enableMapCollisionRight && delta.x > 0 ) {
                for ( let y = ( ( lpos.y + r0.y1 ) >> 4 ); y <= ( ( lpos.y + r0.y2 ) >> 4 ); y++ ) {
                    const x = ( lpos.x + r0.x2 + 1 ) >> 4;
                    const mapAttrib = world.getMapAttrib( x, y );

                    if ( mapAttrib & _vsWorld__WEBPACK_IMPORTED_MODULE_3__["default"].TILEATTRIB_RWALL ) {
                        collideList.push( [x,y,world.getMap( x,y )] );
                        if ( ( touchedMapAttrib & _vsWorld__WEBPACK_IMPORTED_MODULE_3__["default"].TILEATTRIB_RWALL ) == 0 ) {
                            adjust.x = -( ( lpos.x + r0.x2 + 1 ) % 16 );
                            adjustVelocity.x = -this.velocity.x;
                            touchedMapAttrib |= _vsWorld__WEBPACK_IMPORTED_MODULE_3__["default"].TILEATTRIB_RWALL;
                            break;
                        }
                    }
                }
            } else if ( this.attrib.enableMapCollisionLeft && delta.x < 0 ) {
                for ( let y = ( ( lpos.y + r0.y1 ) >> 4 ); y <= ( ( lpos.y + r0.y2 ) >> 4 ); y++ ) {
                    const x = ( lpos.x + r0.x1 ) >> 4;
                    const mapAttrib = world.getMapAttrib( x, y );

                    if ( mapAttrib & _vsWorld__WEBPACK_IMPORTED_MODULE_3__["default"].TILEATTRIB_LWALL ) {
                        collideList.push( [x,y,world.getMap( x,y )] );
                        if ( ( touchedMapAttrib & _vsWorld__WEBPACK_IMPORTED_MODULE_3__["default"].TILEATTRIB_LWALL ) == 0 ) {
                            adjust.x = -( 16 - ( lpos.x + r0.x1 ) % 16 );
                            adjustVelocity.x = -this.velocity.x;
                            touchedMapAttrib |= _vsWorld__WEBPACK_IMPORTED_MODULE_3__["default"].TILEATTRIB_LWALL;
                            break;
                        }
                    }
                }
            }
            
            // TODO: 빗면 블록처리가 들어갈 자리. palo2에는 용량 때문에 빗면 블록처리를 뺐다.

            if ( this.mapCollisionCallback ) {
                this.mapCollisionCallback.call( this, touchedMapAttrib, {
                    adjust, adjustVelocity,collideList
                } );
            }

            delta = delta.add( adjust );

            if ( this.attrib.disableVelocity == false ) {
                this.velocity = this.velocity.add( adjustVelocity );
            }
        } else {
            if ( this.animationStopCounter > 0 ) this.animationStopCounter--;
        }
        
        this.position = this.position.add( delta );
        // console.log( this.y,this._currentFrame,delta.y );
    }

    prepareDraw() {
        if ( this.attrib.enableFlicker ) {
            this._flicker = 1 - this._flicker;
            if ( this._flicker ) {
                this._currentMesh.setVisible( false );
            } else {
                this._currentMesh.setVisible( true );
            }
        } else {
            if ( this._currentMesh ) this._currentMesh.setVisible( true );
        }
        // 화면 밖으로 나가면 자동으로 사라지도록 한다
        if ( this.attrib.enableAutoRemoveStageOut ) {
            /** @type {VsWorld} */
            const world = _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.world;
            const screenRect = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Rect( -world.x,-world.y,_vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.width,_vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.height );

            if ( this._meshes ) {
                const meshRect = this._currentMesh.visibleRect;
            
                if ( this.x + meshRect.right < screenRect.left || this.x + meshRect.left > screenRect.right || 
                this.y + meshRect.top > screenRect.bottom || this.y + meshRect.bottom < screenRect.top ) {
                    this.remove( "autoRemoveStageOut" );
                }
            } else {
                if ( this.x < screenRect.left || this.x > screenRect.right || 
                this.y > screenRect.bottom || this.y < screenRect.top ) {
                    this.remove( "autoRemoveStageOut" );
                }            
            }
        }
    }

    static processAllSprites() {
        /** @type {Sprite[]} */
        let sprs = _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.searchChildren( true );

        let vsSprs = [];

        for ( let spr of sprs ) {
            if ( !spr.parent ) {
                console.log( _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.children );
                console.assert( spr.parent );
            }
            if ( spr instanceof VsSprite ) {
                if ( spr.updateCallback ) spr.updateCallback.call( spr );
                vsSprs.push( spr );
            }
        }

        for ( let spr of vsSprs ) {
            spr.process( vsSprs );
        }

        for ( let spr of vsSprs ) {
            if ( spr.collisionCallback ) spr.collisionCallback.call( spr,vsSprs );
        }

        for ( let spr of vsSprs ) {
            spr.prepareDraw();
        }
        // console.log( vsSprs.length );
    }

    static removeAllSprites() {
        let sprs = stage.searchChildren( true );

        for ( let spr of sprs ) {
            if ( spr.isVsSprite ) {
                spr.remove( "removeAll" );
            }
        }
    }
}
VsSprite.DIR_LEFT = 0x10;
VsSprite.DIR_RIGHT = 0x20;
VsSprite.DIR_TOP = 0x40;
VsSprite.DIR_BOTOOM = 0x80;

VsSprite.defaultAttrib = {
    disableGravity:           false,
    disableGlobalVelocity:    false,
    disableVelocity:          false,
    disableChainAnimation:    false,
    enableAutoRemoveStageOut: false,
    enablePush:               false,        // push 속성을 켜면 block속성을 가진 스프라이트를 밀 수 있다
    enableBlock:              false,
    enableMapCollisionTop:    false,
    enableMapCollisionBottom: false,
    enableMapCollisionLeft:   false,
    enableMapCollisionRight:  false,
    enableHideMesh:           false,
    enableFlicker:            false,
    isScreenCoordinate:       false,
    dskip:                    false,        // ??
    enableDebug:              false,
};

// requestAnimationFrame(
//     ()=>{
//         console.assert( vsStage,`vsStage가 초기화되지 않았습니다.` );
//         VsStage.instance.addEventListener( Event.ENTER_FRAME,VsSprite.processAllSprites );
//         // console.log( `vsSprite: processAll을 등록했습니다.` );
//     }
// );



// GLOBAL.VsSprite = VsSprite;
// module.exports = VsSprite;


/***/ }),

/***/ "./games/PALO2/src/vsWrapper/vsStage.js":
/*!**********************************************!*\
  !*** ./games/PALO2/src/vsWrapper/vsStage.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ VsStage)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _vsPalette__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vsPalette */ "./games/PALO2/src/vsWrapper/vsPalette.js");
/* harmony import */ var _vsSprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vsSprite */ "./games/PALO2/src/vsWrapper/vsSprite.js");
/* harmony import */ var _vsWorld__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vsWorld */ "./games/PALO2/src/vsWrapper/vsWorld.js");








class VsStage extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    static get instance() {
        //@ts-ignore
        this.instances["PALO2"] = this.instances["PALO2"] || new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        return Object.setPrototypeOf( this.instances["PALO2"], this.prototype );
    }

    static init( width, height ) {
        return new VsStage( width,height );
    }

    constructor( width,height ) {
        super();
        const _this = VsStage.instance;

        this._width = width | _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.width;
        this._height = height || _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.height;
        
        this._backgroundColor = 255;
        this._background = null;

        //TODO: 디버그 팔레트를 기본으로 넣어줘야함
        /** @type {VsPalette|null} */
        this.palette = null;
        /** @type {VsWorld|null} */
        this.world = null;

        this.setClip( 0,0,this._width,this._height );
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.stage.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.RESIZE,function( e ) {
            _this.setClip( 0,0,_this._width,_this._height );
        } );


        _this.onStage( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME,function() {
            if ( VsStage.instance.palette ) VsStage.instance.palette.process();
            _vsSprite__WEBPACK_IMPORTED_MODULE_2__["default"].processAllSprites();
        } );

        // 앱이 기동하기 전에 application에 걸린 이벤트를 보존한다
        //@ts-ignore
        Object.assign( this.eventEmitter._events,_this.eventEmitter._events );
        Object.assign( _this,this );
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.stage.addChild( _this );
        return _this;
    }

    get width() {
        return this._width;
    }

    get height() {
        return this._height;
    }

    get size() {
        return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( this.width,this.height );
    }

    get rect() {
        return new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Rect( 0,0,this.width,this.height );
    }

    setPalette( pal ) {
        this.palette = pal;
        if ( this._background ) this._background.setShader( pal.createShader() );
    }

    get backgroundColor() {
        return this._backgroundColor;
    }
    
    set backgroundColor( index ) {
        this._backgroundColor = index;
        if ( this._background ) {
            this._background.removeFromParent();
            this._background = null;
        }
        if ( index < 255 ) {
            this._background = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Pixel( _vsPalette__WEBPACK_IMPORTED_MODULE_1__["default"].indexToColor( index ),1, this.width,this.height );
            this._background.setShader( this.palette.createShader() );
            this.addChildAt( this._background,0 );
        }
    }

    setWorld( world, keepSprites ) {
        let oldWorld = this.world;
        let worldIndex;

        if ( oldWorld ) {
            if ( oldWorld.getParent() == this ) {
                worldIndex = this.getChildIndex( oldWorld );
            } else {
                worldIndex = 0;                
            }
            oldWorld.removeFromParent();
        }
        this.world = world;
        if ( this.world ) {
            if ( oldWorld && keepSprites ) {
                let tileMap = this.world.tileMap;

                this.world.clearChildren();
                oldWorld.layer0.removeFromParent();
                this.world.addChild( oldWorld.layer0 );
                this.world.addChild( tileMap );
                this.world.addChild( oldWorld.layer1 );
                this.world.addChild( oldWorld.layer2 );
                this.world.addChild( oldWorld.layer3 );
                this.world.addChild( oldWorld.layer4 );
                this.world.addChild( oldWorld.layer5 );
                this.world.layer0 = oldWorld.layer0;
                this.world.layer1 = oldWorld.layer1;
                this.world.layer2 = oldWorld.layer2;
                this.world.layer3 = oldWorld.layer3;
                this.world.layer4 = oldWorld.layer4;
                this.world.layer5 = oldWorld.layer5;
                this.world.scrollTarget = oldWorld.scrollTarget;
                this.world.eventTarget = oldWorld.eventTarget;
            }
            this.addChildAt( this.world,worldIndex );
            // this.addChild( this.world );
        }
    }
}

/** @type {Object.<string,VsStage>}} */
VsStage.instances = {};


/***/ }),

/***/ "./games/PALO2/src/vsWrapper/vsSystemText.js":
/*!***************************************************!*\
  !*** ./games/PALO2/src/vsWrapper/vsSystemText.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ VsSystemText)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _vsStage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vsStage */ "./games/PALO2/src/vsWrapper/vsStage.js");
/* harmony import */ var _vsPalette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vsPalette */ "./games/PALO2/src/vsWrapper/vsPalette.js");






const systemFontWidths = [

    // 5 * 5 font length table
    6,2,4,6,6,6,6,3,3,3,5,6,3,6,2,6,6,6,6,6,6,6,6,6,6,6,2,3,4,5,4,4,
    6,6,6,6,6,6,6,6,6,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,6,3,4,4,
    4,5,5,5,5,5,5,5,5,2,3,5,2,6,5,5,5,5,5,5,5,5,5,5,5,5,5,3,2,3,5,5,

    // 3 * 5 font length table
    4,2,4,4,4,4,4,3,3,3,4,4,3,4,2,4,4,4,4,4,4,4,4,4,4,4,2,3,4,4,4,4,
    6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,3,4,4,
    3,4,4,4,4,4,4,4,4,2,3,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,2,3,4,4,

    // symbol font length table
    6,2,4,6,6,6,6,3,3,3,5,6,3,6,2,6,6,6,6,6,6,6,6,6,6,6,2,3,4,5,4,4,
    6,6,6,6,6,5,5,5,4,4,6,6,6,6,6,6,6,6,6,4,4,3,6,6,6,6,6,3,6,3,4,4,
    4,5,5,5,5,5,5,5,5,2,3,5,2,6,5,5,5,5,5,5,5,5,5,5,5,5,5,3,2,3,5,5

        
];


// 7 바이트씩 인코딩 x,y,w,h,sx,sy,rot
// 폰트마다 96개
const systemFontFrames = new Uint8Array( [
    99,54,6,8,0,0,0,46,11,1,5,0,0,0,21,1,3,2,0,0,0,61,12,5,5,0,0,0,68,12,5,5,0,0,0,75,12,5,5,0,0,0,82,12,5,5,0,0,0,26,1,2,2,0,0,0,89,12,2,5,0,0,0,93,12,2,5,0,0,0,97,12,4,5,0,0,0,103,12,5,5,0,0,0,30,1,2,2,0,3,0,1,1,5,1,0,2,0,8,1,1,1,0,4,0,110,12,5,5,0,0,0,117,12,5,5,0,0,0,124,12,3,5,1,0,0,6,16,5,5,0,0,0,13,16,5,5,0,0,0,20,17,5,5,0,0,0,27,17,5,5,0,0,0,34,17,5,5,0,0,0,46,18,5,5,0,0,0,53,18,5,5,0,0,0,60,19,5,5,0,0,0,50,1,1,3,0,1,0,6,4,2,4,0,1,0,1,15,3,5,0,0,0,53,1,4,3,0,1,0,41,17,3,5,0,0,0,67,19,3,5,0,0,0,72,19,5,5,0,0,0,79,19,5,5,0,0,0,86,19,5,5,0,0,0,93,19,5,5,0,0,0,100,19,5,5,0,0,0,107,19,5,5,0,0,0,114,19,5,5,0,0,0,121,19,5,5,0,0,0,6,23,5,5,0,0,0,1,22,3,5,0,0,0,13,23,4,5,0,0,0,19,24,5,5,0,0,0,26,24,5,5,0,0,0,33,24,5,5,0,0,0,44,25,5,5,0,0,0,117,12,5,5,0,0,0,51,25,5,5,0,0,0,58,26,5,5,0,0,0,65,26,5,5,0,0,0,72,26,5,5,0,0,0,79,26,5,5,0,0,0,86,26,5,5,0,0,0,93,26,5,5,0,0,0,100,26,5,5,0,0,0,107,26,5,5,0,0,0,114,26,5,5,0,0,0,121,26,5,5,0,0,0,40,24,2,5,0,0,0,5,30,5,5,0,0,0,1,29,2,5,0,0,0,34,1,3,2,0,0,0,11,1,3,1,0,4,0,10,4,3,4,0,1,0,15,4,4,4,0,1,0,12,30,4,5,0,0,0,21,5,4,4,0,1,0,18,31,4,5,0,0,0,27,5,4,4,0,1,0,24,31,4,5,0,0,0,30,31,4,5,0,1,0,36,31,4,5,0,0,0,42,32,1,5,0,0,0,1,36,2,6,0,0,0,45,32,4,5,0,0,0,51,32,1,5,0,0,0,33,5,5,4,0,1,0,40,5,4,4,0,1,0,50,6,4,4,0,1,0,58,33,4,5,0,1,0,64,33,4,5,0,1,0,56,6,4,4,0,1,0,62,6,4,4,0,1,0,70,33,4,5,0,0,0,68,6,4,4,0,1,0,74,6,4,4,0,1,0,80,6,4,4,0,1,0,86,6,4,4,0,1,0,76,33,4,5,0,1,0,92,6,4,4,0,1,0,54,32,2,5,0,0,0,82,33,1,5,0,0,0,85,33,2,5,0,0,0,39,1,4,2,0,0,0,98,6,4,4,0,1,0,123,47,4,8,0,0,0,46,11,1,5,0,0,0,21,1,3,2,0,0,0,89,33,3,5,0,0,0,94,33,3,5,0,0,0,99,33,3,5,0,0,0,104,6,3,4,0,1,0,26,1,2,2,0,0,0,89,12,2,5,0,0,0,93,12,2,5,0,0,0,59,1,3,3,0,1,0,64,1,3,3,0,1,0,30,1,2,2,0,3,0,16,1,3,1,0,2,0,8,1,1,1,0,4,0,69,1,3,3,0,1,0,104,33,3,5,0,0,0,109,33,1,5,1,0,0,112,33,3,5,0,0,0,117,33,3,5,0,0,0,122,33,3,5,0,0,0,5,37,3,5,0,0,0,10,37,3,5,0,0,0,15,38,3,5,0,0,0,20,38,3,5,0,0,0,25,38,3,5,0,0,0,50,1,1,3,0,1,0,6,4,2,4,0,1,0,1,15,3,5,0,0,0,74,1,3,3,0,1,0,41,17,3,5,0,0,0,67,19,3,5,0,0,0,72,19,5,5,0,0,0,30,38,3,5,0,0,0,35,38,3,5,0,0,0,40,39,3,5,0,0,0,45,39,3,5,0,0,0,50,39,3,5,0,0,0,55,40,3,5,0,0,0,60,40,3,5,0,0,0,65,40,3,5,0,0,0,1,22,3,5,0,0,0,70,40,3,5,0,0,0,75,40,3,5,0,0,0,80,40,3,5,0,0,0,85,40,3,5,0,0,0,90,40,3,5,0,0,0,95,40,3,5,0,0,0,100,40,3,5,0,0,0,105,40,3,5,0,0,0,110,40,3,5,0,0,0,115,40,3,5,0,0,0,120,40,3,5,0,0,0,1,44,3,5,0,0,0,6,44,3,5,0,0,0,11,45,3,5,0,0,0,16,45,3,5,0,0,0,21,45,3,5,0,0,0,26,45,3,5,0,0,0,40,24,2,5,0,0,0,79,1,3,3,0,1,0,1,29,2,5,0,0,0,34,1,3,2,0,0,0,11,1,3,1,0,4,0,46,5,2,4,0,1,0,109,6,3,4,0,1,0,31,45,3,5,0,0,0,114,6,3,4,0,1,0,36,46,3,5,0,0,0,119,6,3,4,0,1,0,41,46,3,5,0,0,0,46,46,3,5,0,1,0,51,47,3,5,0,0,0,42,32,1,5,0,0,0,1,36,2,6,0,0,0,56,47,3,5,0,0,0,51,32,1,5,0,0,0,124,6,3,4,0,1,0,1,9,3,4,0,1,0,6,10,3,4,0,1,0,61,47,3,5,0,1,0,66,47,3,5,0,1,0,11,10,3,4,0,1,0,16,10,3,4,0,1,0,71,47,3,5,0,0,0,21,11,3,4,0,1,0,26,11,3,4,0,1,0,31,11,3,4,0,1,0,36,11,3,4,0,1,0,76,47,3,5,0,1,0,41,11,3,4,0,1,0,54,32,2,5,0,0,0,82,33,1,5,0,0,0,85,33,2,5,0,0,0,45,1,3,2,0,0,0,84,1,3,3,0,2,0,99,54,6,8,0,0,0,46,11,1,5,0,0,0,21,1,3,2,0,0,0,61,12,5,5,0,0,0,68,12,5,5,0,0,0,75,12,5,5,0,0,0,82,12,5,5,0,0,0,26,1,2,2,0,0,0,89,12,2,5,0,0,0,93,12,2,5,0,0,0,97,12,4,5,0,0,0,103,12,5,5,0,0,0,30,1,2,2,0,3,0,1,1,5,1,0,2,0,8,1,1,1,0,4,0,110,12,5,5,0,0,0,81,47,5,5,0,0,0,88,47,5,5,0,0,0,95,47,5,5,0,0,0,102,47,5,5,0,0,0,109,47,5,5,0,0,0,89,1,5,3,0,2,0,116,47,5,5,0,0,0,1,51,5,5,0,0,0,8,52,5,5,0,0,0,15,52,5,5,0,0,0,50,1,1,3,0,1,0,6,4,2,4,0,1,0,1,15,3,5,0,0,0,53,1,4,3,0,1,0,41,17,3,5,0,0,0,67,19,3,5,0,0,0,72,19,5,5,0,0,0,22,52,5,5,0,0,0,29,52,5,5,0,0,0,117,12,5,5,0,0,0,36,53,5,5,0,0,0,96,1,3,3,1,1,0,49,12,4,4,0,0,0,55,12,4,4,0,1,0,101,1,3,3,0,0,0,106,1,3,3,0,2,0,43,53,5,5,0,0,0,50,54,5,5,0,0,0,57,54,5,5,0,0,0,64,54,5,5,0,0,0,71,54,5,5,0,0,0,78,54,5,5,0,0,0,85,54,5,5,0,0,0,111,1,5,3,0,1,0,118,1,5,3,0,1,0,1,4,3,3,0,1,0,64,1,3,3,0,1,0,125,1,2,3,0,1,0,92,54,5,5,0,0,0,100,26,5,5,0,0,0,107,26,5,5,0,0,0,114,26,5,5,0,0,0,121,26,5,5,0,0,0,40,24,2,5,0,0,0,5,30,5,5,0,0,0,1,29,2,5,0,0,0,34,1,3,2,0,0,0,11,1,3,1,0,4,0,10,4,3,4,0,1,0,15,4,4,4,0,1,0,12,30,4,5,0,0,0,21,5,4,4,0,1,0,18,31,4,5,0,0,0,27,5,4,4,0,1,0,24,31,4,5,0,0,0,30,31,4,5,0,1,0,36,31,4,5,0,0,0,42,32,1,5,0,0,0,1,36,2,6,0,0,0,45,32,4,5,0,0,0,51,32,1,5,0,0,0,33,5,5,4,0,1,0,40,5,4,4,0,1,0,50,6,4,4,0,1,0,58,33,4,5,0,1,0,64,33,4,5,0,1,0,56,6,4,4,0,1,0,62,6,4,4,0,1,0,70,33,4,5,0,0,0,68,6,4,4,0,1,0,74,6,4,4,0,1,0,80,6,4,4,0,1,0,86,6,4,4,0,1,0,76,33,4,5,0,1,0,92,6,4,4,0,1,0,54,32,2,5,0,0,0,82,33,1,5,0,0,0,85,33,2,5,0,0,0,39,1,4,2,0,0,0,98,6,4,4,0,1,0
] );

const systemFontImage = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( `systemfont.png` );


class VsSystemText extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Mesh {
    /**
     *Creates an instance of VsSystemFont.
     * @param {string=} s
     * @param {number=} fontSet
     * @memberof VsSystemText
     */
    constructor( s,fontSet = VsSystemText.FONT_5X5 ) {
        super();
        this._color1 = 0x00f000;
        this._color2 = 0x00f000;
        this.setPalette( _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.palette );
        // console.log( VsStage.instance.palette );
        this.fontSet = fontSet;
        this.setTexture( systemFontImage );
        if ( s ) this.setText( s );
    }

    setPalette( pal ) {
        let sh = pal.createShader( systemFontImage );

        this.setShader( sh );
    }

    /**
     *
     *
     * @param {number} index1
     * @param {number=} index2
     * @memberof VsSystemText
     */
    setColor( index1, index2 ) {
        this._color1 = _vsPalette__WEBPACK_IMPORTED_MODULE_2__["default"].indexToColor( index1 );
        if ( index2 ) {
            this._color2 = _vsPalette__WEBPACK_IMPORTED_MODULE_2__["default"].indexToColor( index2 );
        } else {
            this._color2 = this._color1;
        }
    }

    /**
     *
     *
     * @param {string} s
     * @memberof VsSystemText
     */
    setText( s ) {
        let idx = [];
        let vtx = [];
        let uv = [];
        let colors = [];
        let x = 0;
        let y = 0;

        for ( let i = 0; i < s.length; i++ ) {
            let ch = s.charCodeAt( i );

            if ( ch == 0x20 ) {
                // 공백
                x += systemFontWidths[this.fontSet * 96];
            } else if ( ch == 10 ) {
                // 엔터
                x = 0;
                y += 8;
            } else if ( ch == 1 ) {
                this.fontSet = VsSystemText.FONT_5X5;
            } else if ( ch == 2 ) {
                this.fontSet = VsSystemText.FONT_3X5;
            } else if ( ch == 3 ) {
                this.fontSet = VsSystemText.FONT_SYMBOL;
            } else if ( ch == 4 ) {
                // TODO: 폰트컬러
            } else if ( ch > 0x20 && ch <= 0x7f ) {
                let dataPos = this.fontSet * ( 96 * 7 ) + ( ch - 0x20 ) * 7;
                let data = systemFontFrames.slice( dataPos,dataPos + 7 );
                let ipos = vtx.length / 2;
                let [u,v,w,h,sx,sy,rot] = data;
                
                idx.push( ipos,ipos + 1,ipos + 2,ipos + 1,ipos + 3,ipos + 2 );
                vtx.push( x + sx,y + sy,x + sx + w,y + sy,x + sx,y + sy + h,x + sx + w,y + sy + h );
                if ( rot == 0 ) {
                    uv.push( u,v,u + w,v,u,v + h,u + w,v + h );
                } else {
                    uv.push( u + h,v,u + h,v + w,u,v,u,v + w );
                }
                colors.push( this._color1,1,this._color1,1,this._color2,1,this._color2,1 );
                x += systemFontWidths[this.fontSet * 96 + ch - 0x20];
            }
        }
        this.setVertexArray( vtx );
        this.setIndexArray( idx );
        this.setColorArray( colors );
        this.setTextureCoordinateArray( uv );
    }
}

VsSystemText.FONT_5X5 = 0;
VsSystemText.FONT_3X5 = 1;
VsSystemText.FONT_SYMBOL = 2;

//module.exports = VsSystemText;


/***/ }),

/***/ "./games/PALO2/src/vsWrapper/vsWorld.js":
/*!**********************************************!*\
  !*** ./games/PALO2/src/vsWrapper/vsWorld.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ VsWorld)
/* harmony export */ });
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _vsStage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vsStage */ "./games/PALO2/src/vsWrapper/vsStage.js");
/* harmony import */ var _vsPalette__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vsPalette */ "./games/PALO2/src/vsWrapper/vsPalette.js");
/* harmony import */ var _vsSprite__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vsSprite */ "./games/PALO2/src/vsWrapper/vsSprite.js");





        

class VsWorld extends _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite {
    constructor( mapName ) {
        super();
        const mapData = JSON.parse( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.getEmbeddedFile( `map_${mapName}.json` ) );
        const tileImageName = `pat_${mapName}.png`;

        this.mapWidth = mapData[0].length;
        this.mapHeight = mapData.length;

        this.tileMap = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.TileMap( this.mapWidth,this.mapHeight,new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Texture( tileImageName ),16,16,2,2,1,1 );
        this.setPalette( _vsStage__WEBPACK_IMPORTED_MODULE_1__["default"].instance.palette );

        let evnData = JSON.parse( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.getEmbeddedFile( `evn_${mapName}.json` ) );

        this.mapBase = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( evnData.mapBaseX,evnData.mapBaseY );
        this.eventData = evnData;
        for ( let i = 0; i < 256; i++ ) {
            this.eventData.eventVars[i].flag = 0;
        }
        
        let tileAttribs = JSON.parse( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.getEmbeddedFile( `pat_${mapName}.json` ) );

        this.tileAttribs = new Uint8Array( tileAttribs );
        
        this.mapData = [];
        // console.log( `맵설정` );
        for ( let y = 0; y < this.mapHeight; y++ ) {
            this.mapData[y] = new Uint16Array( this.mapWidth );
            for ( let x = 0; x < this.mapWidth; x++ ) {
                let t = mapData[y][x];

                this.tileMap.setTile( x,y,t % 14,Math.floor( t / 14 ) );
                this.mapData[y][x] = t;
            }
        }

        // console.log( `맵설정끝` );
        
        this.layer0 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.layer1 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.layer2 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.layer3 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.layer4 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.layer5 = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sprite();
        this.addChild( this.layer0 );
        this.addChild( this.tileMap );
        this.addChild( this.layer1 );
        this.addChild( this.layer2 );
        this.addChild( this.layer3 );
        this.addChild( this.layer4 );
        this.addChild( this.layer5 );

        this.scrollTargetPosition = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( 0,0 );
        this.currentScrollPosition = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( 0, 0 );
        this.scrollRect = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Rect( -1,-1,2,2 );
        this.scrollTarget = null;
        this.eventTarget = null;
        this.safeBorder = 0;
        this.gravity = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( 0,0 );
        this.constantVelocity = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( 0,0 );
        
        this.onStage( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.ENTER_FRAME,this.processScroll );
        
        // this.processScroll();
    }

    setPalette( pal ) {
        let sh = pal.createShader( this.tileMap.__texture );

        this.tileMap.setShader( sh );
    }

    setSafeBorder( pxWidth ) {
        //setExtraMap
        this.safeBorder = pxWidth;
    }

    setScrollTarget( spr ) {
        this.scrollTarget = spr;
    }

    processScroll() {
        // TODO: 스크롤 안하는 영역 처리 필요 
        // (127,99)-(255-127,199-99)

        if ( this.scrollTarget ) {
            this.scrollTargetPosition = this.scrollTarget.position;
        }
        // let x = Utils.clamp( this.scrollTargetPosition.x, this.safeBorder, this.mapWidth * 16 - VsStage.instance.width - this.safeBorder * 2 );
        // let y = Utils.clamp( this.scrollTargetPosition.y, this.safeBorder, this.mapHeight * 16 - VsStage.instance.height - this.safeBorder * 2 );
        let x = this.currentScrollPosition.x;
        let y = this.currentScrollPosition.y;
        let nx = this.scrollTargetPosition.x;
        let ny = this.scrollTargetPosition.y;
        let pos1 = this.getWorldCoordinate( this.scrollRect.left,this.scrollRect.top );
        let pos2 = this.getWorldCoordinate( this.scrollRect.right,this.scrollRect.bottom );

        if ( nx < pos1.x || nx >= pos2.x ) {
            x = nx;   
        }
        if ( ny < pos1.y || ny >= pos2.y ) {
            y = ny;
        }
        // y=160;
        // 원작과 같게 하려면 정수화가 필요함
        this.setScroll( x,y );
        this.currentScrollPosition.x = x;
        this.currentScrollPosition.y = y;
    }

    getMap( tileX,tileY ) {
        if ( tileX < 0 || tileX >= this.mapWidth || tileY < 0 || tileY >= this.mapHeight ) return 0;
        return this.mapData[tileY][tileX];
    }

    setMap( tileX,tileY,tileNum ) {
        if ( tileX < 0 || tileX >= this.mapWidth || tileY < 0 || tileY >= this.mapHeight ) return;
        this.tileMap.setTile( tileX,tileY,tileNum % 14,Math.floor( tileNum / 14 ) );
        this.mapData[tileY][tileX] = tileNum;
    }

    getMapAttrib( tileX,tileY ) {
        if ( tileX < 0 || tileX >= this.mapWidth || tileY < 0 || tileY >= this.mapHeight ) return 0;
        const tileNum = this.mapData[tileY][tileX];

        return this.tileAttribs[tileNum];
    }

    setScroll( x,y ) {
        // this.x = 128-Utils.clamp(x,this.safeBorder + 128, this.mapWidth * 16 - VsStage.instance.width - this.safeBorder * 2 +128);
        // this.y = 100-Utils.clamp(y, this.safeBorder + 100, this.mapHeight * 16 - VsStage.instance.height - this.safeBorder * 2 +100);
        this.x = 128 - x;
        this.y = 100 - y;
    }

    getMapEventNumber( x, y ) {
        let tx = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( Math.floor( x / 16 ),0,this.mapWidth - 1 );
        let ty = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.clamp( Math.floor( y / 16 ),0,this.mapHeight - 1 );

        return this.eventData.eventMap[ty][tx];
    }

    getWorldCoordinate( x,y ) {
        let p = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( x - this.x,y - this.y );

        return p;
    }

    getStageCoordinate( x,y ) {
        let p = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point(  x + this.x,y + this.y );

        return p;
    }

    getWorldX( x ) {
        return x - this.x;
    }

    getWorldY( y ) {
        return y - this.y;
    }

    getStageX( x ) {
        return x + this.x;
    }

    getStageY( y ) {
        return y + this.y;
    }
}

VsWorld.TILEATTRIB_FLOOR = 0x80;
VsWorld.TILEATTRIB_CEIL = 0x40;
VsWorld.TILEATTRIB_LWALL = 0x20;
VsWorld.TILEATTRIB_RWALL = 0x10;
VsWorld.TILEATTRIB_LSLOPE = 0x08;
VsWorld.TILEATTRIB_RSLOPE = 0x04;

// GLOBAL.VsWorld = VsWorld;
// module.exports = VsWorld;


/***/ }),

/***/ "./games/PALO2/src/zako.js":
/*!*********************************!*\
  !*** ./games/PALO2/src/zako.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ "./games/PALO2/src/global.js");
/* harmony import */ var _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vsWrapper/vs */ "./games/PALO2/src/vsWrapper/vs.js");





// TODO: life,level 등으로 정의된 부분을 명시적으로 바꿔주어야 한다. 




function angleToXY( angle,speed ) {
    let rad = angle * Math.PI / 180;

    return [Math.cos( rad ) * speed,-Math.sin( rad ) * speed];
}
/**
 *
 *
 * @class Zako
 * @extends {VsSprite}
 */
class Zako extends _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite {
    constructor( e ) {
        const { type, x,y,hp,level,subType,timer } = e;

        switch ( type ) {
        case "zako1": //디스켓과 CD
            super( "zako",{ x:                      x, y:                      y,
                            action:                 subType,
                            life:                   hp * 10,
                            level:                  level,
                            exprosionPower:         0,
                            exprosionParticleCount: 1,
                            isDropPowerUp:          subType,
                            scoreBonus:             200 + subType * 300
            } );
            this.velocity.x = -1;
            this.attrib.disableGravity = true;
            this.attrib.enableMapCollisionLeft = true;
            this.attrib.enableMapCollisionRight = true;
            this.AI = this.AI_zako1;
            break;
        case "zako2": // 주먹
            super( "zako",{ x:                      x, y:                      y,
                            action:                 2,
                            life:                   hp * 5,
                            targetPlayerNumber:     _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,1 ),
                            timer:                  timer * 10,
                            exprosionPower:         1,
                            exprosionParticleCount: 5,
                            isDropPowerUp:          ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,6 ) == 0 ) ? 20 : 0,
                            scoreBonus:             1000,
            } );
            this.velocity.x = 0.25;
            this.attrib.disableGravity = true;
            // this.attrib.enableMapCollisionTop = true;
            // this.attrib.enableMapCollisionBottom = true;
            // this.attrib.enableMapCollisionLeft = true;
            // this.attrib.enableMapCollisionRight = true;
            if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1] == null || _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].gameOver ) this.targetPlayerNumber = 1 - this.targetPlayerNumber;
            this.AI = this.AI_zako2;
            break;
        case "zako3": // 총알막는 신발
            super( "zako",{ x:                      x, y:                      y,
                            action:                 3 + subType,
                            life:                   hp * 5,
                            targetPlayerNumber:     _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,1 ),
                            speed:                  subType + 1,
                            exprosionPower:         1,
                            exprosionParticleCount: 5,
                            isDropPowerUp:          20,
                            scoreBonus:             1500,
            } );
            if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1] == null || _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].gameOver ) this.targetPlayerNumber = 1 - this.targetPlayerNumber;
            this.attrib.disableGravity = true;
            this.AI = this.AI_zako3;
            break;
        case "zako4": // 탄쏘는 반구
            super( "zako",{ x:                      x, y:                      y,
                            action:                 5,
                            life:                   hp * 10,
                            level:                  level,
                            targetPlayerNumber:     _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,1 ),
                            timer:                  timer * 10,
                            exprosionPower:         0,
                            exprosionParticleCount: 1,
                            isDropPowerUp:          ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,9 ) == 0 ) ? 20 : 0,
                            scoreBonus:             600,
            } );
            this.status1 = 1;
            this.attrib.disableGravity = false;
            this.attrib.enableMapCollisionLeft = true;
            this.attrib.enableMapCollisionRight = true;
            this.attrib.enableMapCollisionBottom = true;
            this.AI = this.AI_zako4;
            break;
        case "zako5": // 원자탄
            super( "zako",{ x:                      x, y:                      y,
                            action:                 6,
                            life:                   hp * 10,
                            isShootWhenDie:         1,
                            exprosionPower:         0,
                            exprosionParticleCount: 1,
                            isDropPowerUp:          5,
                            scoreBonus:             500,
            } );
            this.velocity.x = 0.4;
            this.attrib.disableGravity = true;
            this.attrib.enableMapCollisionTop = true;
            this.attrib.enableMapCollisionBottom = true;
            this.attrib.enableMapCollisionLeft = true;
            this.attrib.enableMapCollisionRight = true;
            break;
        case "zako6": // 가위
            super( "zako",{ x:                      x, y:                      y,
                            action:                 7,
                            life:                   hp * 10,
                            exprosionPower:         2,
                            exprosionParticleCount: 2,
                            isDropPowerUp:          ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,9 ) == 0 ) ? 20 : 0,
                            scoreBonus:             500,
            } );
            this.velocity.x = -3;
            this.attrib.disableGravity = true;
            break;
        case "zako7": // 하루방
            super( "zako",{ x:                      x, y:                      y,
                            action:                 8,
                            life:                   hp * 10,
                            level:                  level,
                            timer:                  0,
                            targetPlayerNumber:     0,
                            exprosionPower:         1,
                            exprosionParticleCount: 5,
                            isDropPowerUp:          _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,1 ) * 10,
                            scoreBonus:             5000,
            } );
            if ( level < 4 ) e.status1 = 1;
            this.flipX = true;
            this.attrib.enableMapCollisionBottom = true;
            this.status2 = 0;
            this.setMapCollisionPhaseCallback( ( flag )=>{
                if ( flag ) { 
                    if ( this.status2 == 0 ) {
                        if ( this.action == 8 ) {
                        // setQuake( 5,3 );
                        // sayVoice( 3 );
                        }
                        this.status2 = 1; // 바닥에 닿음
                    }
                }
            } );
            this.AI = this.AI_zako7;
            this.breakFlag = true;
            break;
        case "zako8": // 화투장
            super( "zako",{ x:                      x, y:                      y,
                            action:                 9,
                            life:                   hp * 5,
                            level:                  level,
                            targetPlayerNumber:     _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,1 ),
                            exprosionPower:         0,
                            exprosionParticleCount: 1,
                            isDropPowerUp:          _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,1 ) * 10,
                            scoreBonus:             700,
            } );
            if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1] == null || _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].gameOver ) this.targetPlayerNumber = 1 - this.targetPlayerNumber;
            this.attrib.disableGravity = true;
            this.attrib.enableFlicker = true;
            this.AI = this.AI_zako8;
            break;
        case "miniDuck": // 작은 오리
            super( "zako",{ x:                      x, y:                      y,
                            action:                 21,
                            life:                   50,
                            level:                  1,
                            targetPlayerNumber:     _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,1 ),
                            exprosionPower:         0,
                            exprosionParticleCount: 1,
                            isDropPowerUp:          _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,1 ) * 5,
                            scoreBonus:             200,
            } );
            if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1] == null || _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].gameOver ) this.targetPlayerNumber = 1 - this.targetPlayerNumber;
            this.attrib.disableGravity = true;
            this.attrib.enableFlicker = true;
            this.AI = this.AI_zako8;
            break;
        case "zako9": // 오리 보스
            super( "zako",{ x:                      x, y:                      y,
                            action:                 10,
                            life:                   hp * 10,
                            exprosionPower:         4,
                            exprosionParticleCount: 15,
                            scoreBonus:             5000,
            } );
            this.velocity.y = 1;
            this.attrib.disableGravity = true;
            this.AI = this.AI_zako9;
            break;
        case "zako10": //풍선
            super( "zako",{ x:                      x, y:                      y,
                            action:                 11 + subType,
                            life:                   0,
                            isShootWhenDie:         subType == 2 ? 1 : 0,
                            exprosionPower:         4,
                            exprosionParticleCount: 1,
                            isDropPowerUp:          subType == 0 ? 10 : 0,
                            scoreBonus:             100 + subType * 100,
            } );

            this.velocity.x = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -2,5 ) * 0.05;
            this.velocity.y = -_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 1,12 ) * 0.05;
            // if (gameOver[sprite[newSpr].var[2]]) sprite[newSpr].var[2]=1-sprite[newSpr].var[2];
            this.setCollisionPhaseCallback( this.collision.bind( this,0 ) );
            this.attrib.disableGravity = true;
            break;
        case "zako11": //불기둥
            super( "zako",{ x:                  _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( 270 + 100 ), y:                  _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( 30 ),
                            action:             15,
                            life:               hp * 10,
                            targetPlayerNumber: _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,1 ),
                            scoreBonus:         5000,
            } );
            this.animationStopCounter = 300;
            // s.velocity.y=1;
            if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1] == null || _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].gameOver ) this.targetPlayerNumber = 1 - this.targetPlayerNumber;
            this.attrib.disableGravity = true;
            this.AI = this.AI_zako11;
            break;
        case "monitor":
            super( "zako",{ x:          _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( 270 ), y:          _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( -30 ),
                            action:     17,
                            life:       120,
                            scoreBonus: 5000,
            } );
            this.attrib.disableGravity = true;
            this.velocity.x = -1;
            this.velocity.y = 1;
            this.AI = this.AI_monitor;
            // TODO: 대사 처리 해야함
            // showMessage(119);
            // currentMessage=119;
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "dialog",{ msg: "monitor" } ) );                    
            break;
        case "zako12": //제목보스
            super( "effect",{ x:                      x, y:                      y,
                              action:                 2,
                              life:                   hp * 10,
                              exprosionPower:         4,
                              exprosionParticleCount: 15,
                              scoreBonus:             10000,
            } );
            this.attrib.disableGravity = true;
            this.AI = this.AI_zako12;
            break;
        case "zako12-1": //제목보스
            super( "effect",{ x:      x, y:      y,
                              action: 5,
                              life:   hp * 10,
            } );
            this.attrib.disableGravity = true;
            break;
        case "zako13": // 해골브라
            super( "zako",{ x:                      x + 21, y:                      y - 57,
                            action:                 18,
                            life:                   hp * 10,
                            exprosionPower:         4,
                            exprosionParticleCount: 15,
                            scoreBonus:             10000,
            } );
            this.status3 = 1;
            this.attrib.disableGravity = true;
            // 얼굴을 깔아놓는다
            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer1.addChild( new Zako( { type: "face",x: x, y: y } ) );
            this.AI = this.AI_zako13;
            break;
        case "face": // 얼굴
            super( "zako",{ x:                      x + 21, y:                      y - 59,
                            action:                 19,
                            life:                   10000,
                            exprosionPower:         4,
                            exprosionParticleCount: 15,
                            scoreBonus:             10000,
            } );
            this.status3 = 1;
            this.attrib.disableGravity = true;
            break;
        case "swordtrail": // 불기둥 검광
            super( "zako",{ x:          x, y:          y,
                            action:     16,
                            life:       10000,
                            scoreBonus: 20000,
            } );
            this.attrib.disableGravity = true;
            break;
        default:
            super( "zako" );
        }

        this.life = this.life;
        this.level = this.level;
        this.targetPlayerNumber = this.targetPlayerNumber;
        this.scoreBonus = this.scoreBonus;
        this.explosionParticleCount = this.explosionParticleCount;
        this.explosionPower = this.explosionPower;
        this.isDropPowerUp = this.isDropPowerUp;
        this.isShootWhenDie = this.isShootWhenDie;
        this.speed = this.speed;
        // let t = new VsSystemText( e.type );
        // s.addChild( t );
        this.isEnemy = true;
        // this.shoot( this.x,this.y,-1,0 );
        this.setUpdatePhaseCallback( this.update );
        if ( this.collisionCallback == null ) {
            this.setCollisionPhaseCallback( this.collision.bind( this,100 ) );
        }
        // this.attrib.enableDebug = true;
        this.on( "hit",this.onHit );
        this.status4 = 0;
        this.on( "cleanUp",this.onHit );
    }

    update() {
        this.white = 0;
        // if ( this.breakFlag ) {
        //     console.log( vsStage.world.getStageX( this.x ),vsStage.world.getStageY( this.y ) );
        //     console.assert();   
        // }
        if ( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getStageX( this.x ) < -this.getWidth() * 0.5
            || _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getStageX( this.x ) > _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.logicalViewport.width * 1.5 
            || _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getStageY( this.y ) < -this.getHeight() ) {
            this.remove( "autoRemoveComponent" );
            // 
        }
        if ( this.AI ) this.AI();
    }

    collision( damage ) {
        const checkPlayer = ( p ) => {
            const player = _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[p];

            if ( player && player.readyTimer == 0 ) {
                if ( player.shield ) {
                    // 쉴드에 충돌했는가
                    if ( this.checkRange( player.shield,0,0 ) ) {
                        if ( damage > 0 ) {
                            player.shield.dispatchEvent( "hit",{ type: "collision", damage: damage } );
                        }
                        this.dispatchEvent( "hit",{ type: "collision",damage: 100,owner: player } );
                    }
                }
                if ( this.life >= 0 && this.checkRange( player,0,0 ) ) {
                    if ( damage > 0 ) {
                        player.dispatchEvent( "hit",{ type: "collision", damage: damage } );
                    }
                    this.dispatchEvent( "hit",{ type: "collision",damage: 100,owner: player } );
                }
            }
        };

        checkPlayer( 1 );
        checkPlayer( 2 );
    }

    onHit( e ) {
        let { damage,owner } = e;

        if ( this.action == 19 ) {
            damage += 100;
        }
        this.life -= damage;
        this.white = 1;
        owner.score += this.scoreBonus;
        if ( this.life <= 0 ) {
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "explosion", { x: this.x,y: this.y,count: this.explosionParticleCount || 0 ,power: this.explosionPower || 0 } );

            if ( this.isDropPowerUp > 0 ) {
                this.dropPowerUp( this.x + _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0, 0 ),this.y,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,7 ) );
            }
            this.remove( "die" );

            if ( this.scoreBonus >= 5000 ) {
                // 보스?
                if ( this.action == 15 ) {
                    // 불기둥
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "dialog",{ msg: "ending" } ) );                    
                } else if ( this.action == 17 ) {
                    // 모니터
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "dialog",{ msg: "monitorBroken" } ) );                    
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "gameOver" );                    
                } else if ( this.action != 15 ) {
                    // 불기둥 터질 때 클린업 처리하면 모니터가 터져서 안됨
                    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "cleanUp", { type: "cleanUp",damage: 2000 } );
                    if ( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget.velocity.x == 0 ) {
                        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "bgm",{ filename: `space` } );
                        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget.velocity.x = 0.5;
                        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.eventTarget.velocity.x = 0.5;        
                    }
                }
                _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.palette.fade( { start: 1,end: 0, duration: 40, range: [0,254] } );
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `bang.wav` );
            } else {
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `zako.wav` );
            }

            // if ( this.action == 18 ) {
            //     // 해골브라
            //     let spr = new VsSprite( "zako",{ x: this.x,y: this.y,action: 19 } );
            //     spr.attrib.enableAutoRemoveStageOut = true;
            //     spr.life = 3000;
            //     spr.scoreBonus = 5000;
            //     spr.status = 1;
            //     vsStage.world.layer1.addChild( spr );
            // }
            // if ( this.action == 19 ) {
            //     // 미안브라
            //     let spr = new VsSprite( "zako",{ x: this.x,y: this.y,action: 20 } );
            //     spr.attrib.enableAutoRemoveStageOut = true;
            //     spr.life = 5000;
            //     spr.status = 1;
            //     vsStage.world.layer1.addChild( spr );
            // }
            if ( this.action == 17 ) {
                // 모니터
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `bang.wav` );
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "explosion",{ x: this.x,y: this.y,count: 20,power: 4 } );
                _global__WEBPACK_IMPORTED_MODULE_1__["default"].restCoin = 0;
                // rest[0]=0;
                // rest[1]=0;
                // readyTimer[0]=0;
                // readyTimer[1]=0;
                // playerDie(0);
                // playerDie(1);
            }
            if ( this.action == 15 ) {
                owner.score += 30000;
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `bang.wav` );
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "explosion",{ x: this.x,y: this.y,count: 20,power: 4 } );
            }
            if ( this.isShootWhenDie > 0 ) {
                for ( let i = 0; i < 360; i += 22.5 ) {
                    this.shoot( this.x,this.y, ...angleToXY( i,1.5 ) );
                }
                _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `bang.wav` );
            }
    
            // 스코어 리프래시
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "refreshUI",{ player: owner.player } );
        } else {
            // 탄 맞고 안죽었을 때
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `zako.wav` );
        }
    }

    shoot( x,y,vx,vy ) {
        let spr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite( "effect",{
            x:      x,
            y:      y,
            action: 6
        } );

        spr.velocity.x = vx;
        spr.velocity.y = vy;
        spr.autoRemoveTimer = 60 * 100;
        spr.attrib.enableAutoRemoveStageOut = true;
        spr.attrib.disableGravity = true;
        spr.attrib.enableMapCollisionTop = true;
        spr.attrib.enableMapCollisionBottom = true;
        spr.attrib.enableMapCollisionLeft = true;
        spr.attrib.enableMapCollisionRight = true;
        //@ts-ignore
        spr.life = 1;
        spr.setCollisionPhaseCallback( this.collision.bind( spr,10 ) );
        spr.setMapCollisionPhaseCallback( ( touchedMapAttrib )=>{
            if ( touchedMapAttrib ) spr.remove( "block" );
        } );
        spr.on( "hit",( )=>{
            spr.remove( "damage" );
        } );
        spr.on( "cleanUp",( )=>{
            spr.remove( "cleanUp" );
        } );
        //@ts-ignore
        spr.status1 = 44; // ?
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer4.addChild( spr );
    }

    dropPowerUp( x,y,type ) {
        let spr = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite( "p_hal",{ x,y,action: type > 0 ? 9 : 10 } );

        spr.attrib.disableGravity = true;
        let players = _global__WEBPACK_IMPORTED_MODULE_1__["default"].players;

        spr.setCollisionPhaseCallback( ()=>{
            function checkPlayer( p ) {
                if ( players[p] && spr.checkRange( players[p],0,0 ) ) {
                    if ( spr.action == 10 ) {
                        // 전소폭탄
                        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `clear.wav` );
                        spr.remove( "cleanUp" );
                        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.dispatchEventWithChildren( "cleanUp", { type: "cleanUp",damage: 100, owner: players[p] } );                        
                    } else {
                        // 일반 파워업
                        players[p].power = ( players[p].power + 1 ) % 7;
                        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.playSound( `item.wav` );
                        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "refreshUI",{ player: p } );
                        spr.remove( "powerUp" );
                    }
                }
            }
            checkPlayer( 1 );
            checkPlayer( 2 );
        } );
        spr.setUpdatePhaseCallback( ()=>{
            if ( _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getStageX( spr.x ) < -this.getWidth() ) {
                spr.remove( "autoRemoveComponent" );
            }
        } );
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer4.addChild( spr );
    }


    AI_zako1() {
        this.status4 += 2;
        if ( this.status4 > 180 ) {
            this.status4 -= 360;
        }

        if ( this.level > 1 ) {
            this.velocity.y = Math.sin( this.status4 * Math.PI / 180 ) * 0.5;
        }
        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,( 5 - this.level ) * 100 + 50 ) == 0 ) {
            let a = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,359 );

            this.shoot( this.x,this.y,...angleToXY( a,0.4 ) );
        }

        if ( this.x < _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( 25 ) ) {
            this.velocity.x = _global__WEBPACK_IMPORTED_MODULE_1__["default"].scrollSpeed + 1;
        }
    }

    AI_zako2() {
        if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1] == null ) return;
        let targetY = _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].y;

        this.timer--;
        if ( this.timer == 0 || this.timer < -255 ) {
            this.velocity.x = -5;
            this.velocity.y = 0;
            this.AI = null;
            return;
        }
        if ( this.y < targetY - 5 ) this.velocity.y = 1;
        else if ( this.y > targetY + 5 ) this.velocity.y = -1;
        if ( this.x < _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( 235 ) ) {
            this.velocity.x = 0;
            //		cspr.x=WORLD_X(235);
        }
    }

    AI_zako3() {
        if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1] == null ) return;
        let targetX = _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].x;
        let targetY = _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].y;
    
        if ( this.y < targetY - 5 ) this.velocity.y = this.speed;
        else if ( this.y > targetY + 5 ) this.velocity.y = - this.speed;
        if ( this.x < targetX + 45 ) this.velocity.x = 2;
        else if ( this.x > targetX + 50 ) this.velocity.x = -2;
    }

    AI_zako4() {
        if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1] == null ) return;
        let targetX = _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].x;
        let targetY = _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].y;

        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,50 ) == 0 ) {
            this.targetPlayerNumber = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,1 );
            if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1] == null || _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].gameOver ) this.targetPlayerNumber = 1 - this.targetPlayerNumber;
        }
        if ( targetY < this.y ) {
            if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,150 - this.level * 10 ) == 0 ) {
                let a = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,90 ) * Math.PI / 180;

                if ( targetX < this.x ) {
                    this.shoot( this.x,this.y - 4,Math.cos( a + 90 * Math.PI / 180 ) * 0.5,-Math.sin( a + 90 * Math.PI / 180 ) * 0.5 );
                } else {
                    this.shoot( this.x,this.y - 4,Math.cos( a ) * 0.5,-Math.sin( a ) * 0.5 );
                }
            }
        }
    }

    AI_zako7() {
        this.timer++;
        if ( this.timer > 240 + this.level * 20 ) {
            this.timer = 0;
            this.flipX = true;
        } else if ( this.timer > 200 && ( this.timer & 7 ) == 0 ) {
            this.shoot( this.x,this.y,-4,0 );
        } else if ( this.timer > 150 ) {
            this.flipX = false;
        }
    
        if ( this.level != 0 ) {
            if ( this.status2 == 1 && _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,100 - this.level * 10 ) == 0 ) {
                this.velocity.y = -this.level;
                this.status2 = 0;
            }
        }
    }

    AI_zako8() {
        if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1] == null ) return;
        let targetX = _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].x;
        let targetY = _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].y;
    
        this.status4++;
        if ( this.status4 > 120 ) {
            this.attrib.enableFlicker = false;
            this.setCollisionPhaseCallback( this.collision.bind( this,100 ) );
    
            if ( this.y < targetY - 5 ) {
                this.velocity.y = ( this.level + 1 ) * 0.25 * 0.5;
            } else if ( this.y > targetY + 5 ) {
                this.velocity.y = -( this.level + 1 ) * 0.25 * 0.5;
            } else {
                this.velocity.y = 0;
            }
    
            if ( this.x < targetX - 5 ) {
                this.velocity.x = ( this.level + 1 ) * 0.25 * 0.5 + _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget.velocity.x;
            } else if ( this.x > targetX + 5 ) {
                this.velocity.x = -( this.level + 1 ) * 0.25 * 0.5 + _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget.velocity.x;
            } else {
                this.velocity.x = _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.scrollTarget.velocity.x;
            }
        } else { 
            this.velocity.y = 0; 
            this.velocity.x = 0; 
            this.setCollisionPhaseCallback( null );
        }
    }

    AI_zako9() {
        if ( this.status4++ > 120 ) {
            this.attrib.enableFlicker = false;
            this.setCollisionPhaseCallback( this.collision.bind( this,100 ) );
        } else {
            this.setCollisionPhaseCallback( null );
        }
    
        if ( this.y < _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( 10 ) ) this.velocity.y = 1;
        if ( this.y > _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( 195 ) ) this.velocity.y = -1;
        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,99 ) == 0 ) {
            this.shoot( this.x,this.y,...angleToXY( 170,2 ) );
            this.shoot( this.x,this.y,...angleToXY( 180,2 ) );
            this.shoot( this.x,this.y,...angleToXY( 190,2 ) );
        }
        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,99 ) == 0 ) {
            let spr = new Zako( { type: "miniDuck",x: this.x,y: this.y } );

            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer3.addChild( spr );
        }
    }


    AI_monitor() {
        if ( this.x < _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( 10 ) ) this.velocity.x = 1;
        if ( this.x > _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( 245 ) ) this.velocity.x = -1;
        if ( this.y < _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( 10 ) ) this.velocity.y = 1;
        if ( this.y > _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( 195 ) ) this.velocity.y = -1;
    }

    AI_zako11() {
        let targetY;
        let targetX;

        //TODO: 불기둥 AI인데 플레이어가 다 죽으면 화면 밖으로 나가는 문제가 있다
        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,49 ) == 0 ) {
            this.targetPlayerNumber = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,1 );
            if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1] == null ) return;
        }
        if ( this.life < 300 && this.refSpr == null ) {
            let spr = new Zako( {
                type: "monitor",
                x:    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( 270 ),
                y:    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( -30 ),
            } );

            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer3.addChildAt( spr );
            this.refSpr = spr;
            _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event( "dialog",{ msg: "monitor" } ) );
        }
        if ( this.status4 != 0 || this.refSpr == null ) {
            if ( _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1] != null ) {
                targetX = _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].x;
                targetY = _global__WEBPACK_IMPORTED_MODULE_1__["default"].players[this.targetPlayerNumber + 1].y;
            }
            if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,99 ) == 0 ) this.status4 = 1;
        } else {
            // 모니터 뒤에 숨기
            targetY = this.refSpr.y;
            targetX = this.refSpr.x -  40;
            if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,199 ) == 0 ) this.status4 = 0;
        }
    
        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,50 ) == 0 ) {
            // 정지했다가 이동했다가
            this.status4 = 1 - this.status4;
        }
    
        if ( this.y < targetY -  5 ) this.velocity.y = 1 + this.status4;
        else if ( this.y > targetY +  5 )  this.velocity.y = -( 1 + this.status4 );
        else this.velocity.y = 0;
    
        if ( this.x < targetX + 100 && this.x < _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldX( 235 ) ) {
            this.velocity.x =  1 + this.status4;
        } else if ( this.x > targetX +  210 ) {
            this.velocity.x = - ( 1 + this.status4 );
        } else {
            this.velocity.x = 0;
        }

        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,100 ) == 0 ) {
            // 검광 발사
            let spr = new Zako( { type: "swordtrail",x: this.x,y: this.y ,hp: 100000 } );

            spr.velocity.x = -1;
            spr.acceleration.x = -0.05;
            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer3.addChild( spr );
        }
        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,119 ) == 0 ) {
            let a = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,359 );

            this.shoot( this.x,this.y -  4 ,...angleToXY( a,0.5 ) );
        }
    }

    AI_zako12() {
        if ( this.status4++ > 120 ) {
            this.attrib.enableFlicker = false;
        }

        if ( this.y < _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( 10 ) ) this.velocity.y = 1;
        if ( this.y >  _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getWorldY( 195 ) ) this.velocity.y = -1;
        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,70 ) == 0 ) {
            let spr = new Zako( { type: "zako2",x: this.x,y: this.y ,hp: 2,timer: 10 } );

            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer3.addChild( spr );
        }
        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,120 ) == 0 ) {
            let spr = new Zako( { type: "zako12-1",x: this.x,y: this.y ,hp: 20 } );

            spr.velocity = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( ...angleToXY( 170,2 ) );
            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer3.addChild( spr );
            spr = new Zako( { type: "zako12-1",x: this.x,y: this.y ,hp: 20 } );
            spr.velocity = new _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Point( ...angleToXY( 190,2 ) );
            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer3.addChild( spr );
        }
    }

    AI_zako13() {
        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,200 ) == 0 ) {
            let spr = new Zako( { type: "zako4",x: this.x,y: this.y,hp: 5,subType: 1 } );

            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer3.addChild( spr );
            spr.level = 13;
            spr.velocity.y = -1;
            spr.velocity.x = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( -4,1 ) * 0.1;
        }
        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,300 ) == 0 ) {
            let spr = new Zako( { type: "zako3",x: _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.getStageX( 260 ),y: this.y,hp: 20,subType: 1 } );

            _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer3.addChild( spr );
        }
        if ( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,90 ) == 0 ) {
            let a = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 140,220 );

            this.shoot( this.x,this.y,...angleToXY( a - 30,1 ) );
            this.shoot( this.x,this.y,...angleToXY( a - 20,1 ) );
            this.shoot( this.x,this.y,...angleToXY( a - 10,1 ) );
            this.shoot( this.x,this.y,...angleToXY( a,1 ) );
            this.shoot( this.x,this.y,...angleToXY( a + 10,1 ) );
            this.shoot( this.x,this.y,...angleToXY( a + 20,1 ) );
            this.shoot( this.x,this.y,...angleToXY( a + 30,1 ) );
        }
    }
}

function spawnZako( e ) {
    let spr = new Zako( e );

    _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer3.addChild( spr );
}

function explosion( e ) {
    for ( let i = 0; i < ( e.count || 1 ); i++ ) {
        let s = new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.VsSprite( "effect",{ x: e.x,y: e.y } );

        s.animationStopCounter = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,e.count );
        s.attrib.disableGravity = true;
        s.attrib.enableAutoRemoveStageOut = true;
        let rad = _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,359 ) * Math.PI / 180;

        s.velocity.x = Math.cos( rad ) * _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,e.power * 100 ) / 100;
        s.velocity.y = Math.sin( rad ) * _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Utils.random( 0,e.power * 100 ) / 100;
        _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_2__.vsStage.world.layer4.addChild( s );
    }
}

_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "spawn:zako", spawnZako );
_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.on( "explosion", explosion );


/***/ }),

/***/ "./node_modules/eventemitter3/index.js":
/*!*********************************************!*\
  !*** ./node_modules/eventemitter3/index.js ***!
  \*********************************************/
/***/ ((module) => {



var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ "./node_modules/twgl.js/dist/4.x/twgl-full.module.js":
/*!***********************************************************!*\
  !*** ./node_modules/twgl.js/dist/4.x/twgl-full.module.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addExtensionsToContext": () => (/* binding */ addExtensionsToContext),
/* harmony export */   "attributes": () => (/* binding */ attributes),
/* harmony export */   "bindFramebufferInfo": () => (/* binding */ bindFramebufferInfo),
/* harmony export */   "bindTransformFeedbackInfo": () => (/* binding */ bindTransformFeedbackInfo),
/* harmony export */   "bindUniformBlock": () => (/* binding */ bindUniformBlock),
/* harmony export */   "canFilter": () => (/* binding */ canFilter),
/* harmony export */   "canGenerateMipmap": () => (/* binding */ canGenerateMipmap),
/* harmony export */   "createAttribsFromArrays": () => (/* binding */ createAttribsFromArrays),
/* harmony export */   "createAttributeSetters": () => (/* binding */ createAttributeSetters),
/* harmony export */   "createBufferFromArray": () => (/* binding */ createBufferFromArray),
/* harmony export */   "createBufferFromTypedArray": () => (/* binding */ createBufferFromTypedArray),
/* harmony export */   "createBufferInfoFromArrays": () => (/* binding */ createBufferInfoFromArrays),
/* harmony export */   "createBuffersFromArrays": () => (/* binding */ createBuffersFromArrays),
/* harmony export */   "createFramebufferInfo": () => (/* binding */ createFramebufferInfo),
/* harmony export */   "createProgram": () => (/* binding */ createProgram),
/* harmony export */   "createProgramFromScripts": () => (/* binding */ createProgramFromScripts),
/* harmony export */   "createProgramFromSources": () => (/* binding */ createProgramFromSources),
/* harmony export */   "createProgramInfo": () => (/* binding */ createProgramInfo),
/* harmony export */   "createProgramInfoFromProgram": () => (/* binding */ createProgramInfoFromProgram),
/* harmony export */   "createSampler": () => (/* binding */ createSampler),
/* harmony export */   "createSamplers": () => (/* binding */ createSamplers),
/* harmony export */   "createTexture": () => (/* binding */ createTexture),
/* harmony export */   "createTextures": () => (/* binding */ createTextures),
/* harmony export */   "createTransformFeedback": () => (/* binding */ createTransformFeedback),
/* harmony export */   "createTransformFeedbackInfo": () => (/* binding */ createTransformFeedbackInfo),
/* harmony export */   "createUniformBlockInfo": () => (/* binding */ createUniformBlockInfo),
/* harmony export */   "createUniformBlockInfoFromProgram": () => (/* binding */ createUniformBlockInfoFromProgram),
/* harmony export */   "createUniformBlockSpecFromProgram": () => (/* binding */ createUniformBlockSpecFromProgram),
/* harmony export */   "createUniformSetters": () => (/* binding */ createUniformSetters),
/* harmony export */   "createVAOAndSetAttributes": () => (/* binding */ createVAOAndSetAttributes),
/* harmony export */   "createVAOFromBufferInfo": () => (/* binding */ createVAOFromBufferInfo),
/* harmony export */   "createVertexArrayInfo": () => (/* binding */ createVertexArrayInfo),
/* harmony export */   "draw": () => (/* binding */ draw),
/* harmony export */   "drawBufferInfo": () => (/* binding */ drawBufferInfo),
/* harmony export */   "drawObjectList": () => (/* binding */ drawObjectList),
/* harmony export */   "framebuffers": () => (/* binding */ framebuffers),
/* harmony export */   "getArray_": () => (/* binding */ getArray),
/* harmony export */   "getBytesPerElementForInternalFormat": () => (/* binding */ getBytesPerElementForInternalFormat),
/* harmony export */   "getContext": () => (/* binding */ getContext),
/* harmony export */   "getFormatAndTypeForInternalFormat": () => (/* binding */ getFormatAndTypeForInternalFormat),
/* harmony export */   "getGLTypeForTypedArray": () => (/* binding */ getGLTypeForTypedArray),
/* harmony export */   "getGLTypeForTypedArrayType": () => (/* binding */ getGLTypeForTypedArrayType),
/* harmony export */   "getNumComponentsForFormat": () => (/* binding */ getNumComponentsForFormat),
/* harmony export */   "getNumComponents_": () => (/* binding */ getNumComponents),
/* harmony export */   "getTypedArrayTypeForGLType": () => (/* binding */ getTypedArrayTypeForGLType),
/* harmony export */   "getWebGLContext": () => (/* binding */ getWebGLContext),
/* harmony export */   "glEnumToString": () => (/* binding */ glEnumToString),
/* harmony export */   "isArrayBuffer": () => (/* binding */ isArrayBuffer),
/* harmony export */   "isWebGL1": () => (/* binding */ isWebGL1),
/* harmony export */   "isWebGL2": () => (/* binding */ isWebGL2),
/* harmony export */   "loadTextureFromUrl": () => (/* binding */ loadTextureFromUrl),
/* harmony export */   "m4": () => (/* binding */ m4),
/* harmony export */   "primitives": () => (/* binding */ primitives),
/* harmony export */   "programs": () => (/* binding */ programs),
/* harmony export */   "resizeCanvasToDisplaySize": () => (/* binding */ resizeCanvasToDisplaySize),
/* harmony export */   "resizeFramebufferInfo": () => (/* binding */ resizeFramebufferInfo),
/* harmony export */   "resizeTexture": () => (/* binding */ resizeTexture),
/* harmony export */   "setAttribInfoBufferFromArray": () => (/* binding */ setAttribInfoBufferFromArray),
/* harmony export */   "setAttributeDefaults_": () => (/* binding */ setDefaults),
/* harmony export */   "setAttributePrefix": () => (/* binding */ setAttributePrefix),
/* harmony export */   "setAttributes": () => (/* binding */ setAttributes),
/* harmony export */   "setBlockUniforms": () => (/* binding */ setBlockUniforms),
/* harmony export */   "setBuffersAndAttributes": () => (/* binding */ setBuffersAndAttributes),
/* harmony export */   "setDefaultTextureColor": () => (/* binding */ setDefaultTextureColor),
/* harmony export */   "setDefaults": () => (/* binding */ setDefaults$2),
/* harmony export */   "setEmptyTexture": () => (/* binding */ setEmptyTexture),
/* harmony export */   "setSamplerParameters": () => (/* binding */ setSamplerParameters),
/* harmony export */   "setTextureDefaults_": () => (/* binding */ setDefaults$1),
/* harmony export */   "setTextureFilteringForSize": () => (/* binding */ setTextureFilteringForSize),
/* harmony export */   "setTextureFromArray": () => (/* binding */ setTextureFromArray),
/* harmony export */   "setTextureFromElement": () => (/* binding */ setTextureFromElement),
/* harmony export */   "setTextureParameters": () => (/* binding */ setTextureParameters),
/* harmony export */   "setUniformBlock": () => (/* binding */ setUniformBlock),
/* harmony export */   "setUniforms": () => (/* binding */ setUniforms),
/* harmony export */   "setUniformsAndBindTextures": () => (/* binding */ setUniformsAndBindTextures),
/* harmony export */   "textures": () => (/* binding */ textures),
/* harmony export */   "typedarrays": () => (/* binding */ typedarrays),
/* harmony export */   "utils": () => (/* binding */ utils),
/* harmony export */   "v3": () => (/* binding */ v3),
/* harmony export */   "vertexArrays": () => (/* binding */ vertexArrays)
/* harmony export */ });
/* @license twgl.js 4.21.2 Copyright (c) 2015, Gregg Tavares All Rights Reserved.
Available via the MIT license.
see: http://github.com/greggman/twgl.js for details */
/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 *
 * Vec3 math math functions.
 *
 * Almost all functions take an optional `dst` argument. If it is not passed in the
 * functions will create a new Vec3. In other words you can do this
 *
 *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.
 *
 * or
 *
 *     var v = v3.create();
 *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v
 *
 * The first style is often easier but depending on where it's used it generates garbage where
 * as there is almost never allocation with the second style.
 *
 * It is always save to pass any vector as the destination. So for example
 *
 *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1
 *
 * @module twgl/v3
 */

let VecType = Float32Array;

/**
 * A JavaScript array with 3 values or a Float32Array with 3 values.
 * When created by the library will create the default type which is `Float32Array`
 * but can be set by calling {@link module:twgl/v3.setDefaultType}.
 * @typedef {(number[]|Float32Array)} Vec3
 * @memberOf module:twgl/v3
 */

/**
 * Sets the type this library creates for a Vec3
 * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`
 * @return {constructor} previous constructor for Vec3
 * @memberOf module:twgl/v3
 */
function setDefaultType(ctor) {
  const oldType = VecType;
  VecType = ctor;
  return oldType;
}

/**
 * Creates a vec3; may be called with x, y, z to set initial values.
 * @param {number} [x] Initial x value.
 * @param {number} [y] Initial y value.
 * @param {number} [z] Initial z value.
 * @return {module:twgl/v3.Vec3} the created vector
 * @memberOf module:twgl/v3
 */
function create(x, y, z) {
  const dst = new VecType(3);
  if (x) {
    dst[0] = x;
  }
  if (y) {
    dst[1] = y;
  }
  if (z) {
    dst[2] = z;
  }
  return dst;
}

/**
 * Adds two vectors; assumes a and b have the same dimension.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} A vector tha tis the sum of a and b.
 * @memberOf module:twgl/v3
 */
function add(a, b, dst) {
  dst = dst || new VecType(3);

  dst[0] = a[0] + b[0];
  dst[1] = a[1] + b[1];
  dst[2] = a[2] + b[2];

  return dst;
}

/**
 * Subtracts two vectors.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} A vector that is the difference of a and b.
 * @memberOf module:twgl/v3
 */
function subtract(a, b, dst) {
  dst = dst || new VecType(3);

  dst[0] = a[0] - b[0];
  dst[1] = a[1] - b[1];
  dst[2] = a[2] - b[2];

  return dst;
}

/**
 * Performs linear interpolation on two vectors.
 * Given vectors a and b and interpolation coefficient t, returns
 * a + t * (b - a).
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {number} t Interpolation coefficient.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The linear interpolated result.
 * @memberOf module:twgl/v3
 */
function lerp(a, b, t, dst) {
  dst = dst || new VecType(3);

  dst[0] = a[0] + t * (b[0] - a[0]);
  dst[1] = a[1] + t * (b[1] - a[1]);
  dst[2] = a[2] + t * (b[2] - a[2]);

  return dst;
}

/**
 * Performs linear interpolation on two vectors.
 * Given vectors a and b and interpolation coefficient vector t, returns
 * a + t * (b - a).
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} the linear interpolated result.
 * @memberOf module:twgl/v3
 */
function lerpV(a, b, t, dst) {
  dst = dst || new VecType(3);

  dst[0] = a[0] + t[0] * (b[0] - a[0]);
  dst[1] = a[1] + t[1] * (b[1] - a[1]);
  dst[2] = a[2] + t[2] * (b[2] - a[2]);

  return dst;
}

/**
 * Return max values of two vectors.
 * Given vectors a and b returns
 * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The max components vector.
 * @memberOf module:twgl/v3
 */
function max(a, b, dst) {
  dst = dst || new VecType(3);

  dst[0] = Math.max(a[0], b[0]);
  dst[1] = Math.max(a[1], b[1]);
  dst[2] = Math.max(a[2], b[2]);

  return dst;
}

/**
 * Return min values of two vectors.
 * Given vectors a and b returns
 * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The min components vector.
 * @memberOf module:twgl/v3
 */
function min(a, b, dst) {
  dst = dst || new VecType(3);

  dst[0] = Math.min(a[0], b[0]);
  dst[1] = Math.min(a[1], b[1]);
  dst[2] = Math.min(a[2], b[2]);

  return dst;
}

/**
 * Multiplies a vector by a scalar.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {number} k The scalar.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The scaled vector.
 * @memberOf module:twgl/v3
 */
function mulScalar(v, k, dst) {
  dst = dst || new VecType(3);

  dst[0] = v[0] * k;
  dst[1] = v[1] * k;
  dst[2] = v[2] * k;

  return dst;
}

/**
 * Divides a vector by a scalar.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {number} k The scalar.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The scaled vector.
 * @memberOf module:twgl/v3
 */
function divScalar(v, k, dst) {
  dst = dst || new VecType(3);

  dst[0] = v[0] / k;
  dst[1] = v[1] / k;
  dst[2] = v[2] / k;

  return dst;
}

/**
 * Computes the cross product of two vectors; assumes both vectors have
 * three entries.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The vector of a cross b.
 * @memberOf module:twgl/v3
 */
function cross(a, b, dst) {
  dst = dst || new VecType(3);

  const t1 = a[2] * b[0] - a[0] * b[2];
  const t2 = a[0] * b[1] - a[1] * b[0];
  dst[0] = a[1] * b[2] - a[2] * b[1];
  dst[1] = t1;
  dst[2] = t2;

  return dst;
}

/**
 * Computes the dot product of two vectors; assumes both vectors have
 * three entries.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @return {number} dot product
 * @memberOf module:twgl/v3
 */
function dot(a, b) {
  return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);
}

/**
 * Computes the length of vector
 * @param {module:twgl/v3.Vec3} v vector.
 * @return {number} length of vector.
 * @memberOf module:twgl/v3
 */
function length$1(v) {
  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
}

/**
 * Computes the square of the length of vector
 * @param {module:twgl/v3.Vec3} v vector.
 * @return {number} square of the length of vector.
 * @memberOf module:twgl/v3
 */
function lengthSq(v) {
  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
}

/**
 * Computes the distance between 2 points
 * @param {module:twgl/v3.Vec3} a vector.
 * @param {module:twgl/v3.Vec3} b vector.
 * @return {number} distance between a and b
 * @memberOf module:twgl/v3
 */
function distance(a, b) {
  const dx = a[0] - b[0];
  const dy = a[1] - b[1];
  const dz = a[2] - b[2];
  return Math.sqrt(dx * dx + dy * dy + dz * dz);
}

/**
 * Computes the square of the distance between 2 points
 * @param {module:twgl/v3.Vec3} a vector.
 * @param {module:twgl/v3.Vec3} b vector.
 * @return {number} square of the distance between a and b
 * @memberOf module:twgl/v3
 */
function distanceSq(a, b) {
  const dx = a[0] - b[0];
  const dy = a[1] - b[1];
  const dz = a[2] - b[2];
  return dx * dx + dy * dy + dz * dz;
}

/**
 * Divides a vector by its Euclidean length and returns the quotient.
 * @param {module:twgl/v3.Vec3} a The vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The normalized vector.
 * @memberOf module:twgl/v3
 */
function normalize(a, dst) {
  dst = dst || new VecType(3);

  const lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
  const len = Math.sqrt(lenSq);
  if (len > 0.00001) {
    dst[0] = a[0] / len;
    dst[1] = a[1] / len;
    dst[2] = a[2] / len;
  } else {
    dst[0] = 0;
    dst[1] = 0;
    dst[2] = 0;
  }

  return dst;
}

/**
 * Negates a vector.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} -v.
 * @memberOf module:twgl/v3
 */
function negate(v, dst) {
  dst = dst || new VecType(3);

  dst[0] = -v[0];
  dst[1] = -v[1];
  dst[2] = -v[2];

  return dst;
}

/**
 * Copies a vector.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} A copy of v.
 * @memberOf module:twgl/v3
 */
function copy(v, dst) {
  dst = dst || new VecType(3);

  dst[0] = v[0];
  dst[1] = v[1];
  dst[2] = v[2];

  return dst;
}

/**
 * Multiplies a vector by another vector (component-wise); assumes a and
 * b have the same length.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The vector of products of entries of a and
 *     b.
 * @memberOf module:twgl/v3
 */
function multiply(a, b, dst) {
  dst = dst || new VecType(3);

  dst[0] = a[0] * b[0];
  dst[1] = a[1] * b[1];
  dst[2] = a[2] * b[2];

  return dst;
}

/**
 * Divides a vector by another vector (component-wise); assumes a and
 * b have the same length.
 * @param {module:twgl/v3.Vec3} a Operand vector.
 * @param {module:twgl/v3.Vec3} b Operand vector.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created.
 * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and
 *     b.
 * @memberOf module:twgl/v3
 */
function divide(a, b, dst) {
  dst = dst || new VecType(3);

  dst[0] = a[0] / b[0];
  dst[1] = a[1] / b[1];
  dst[2] = a[2] / b[2];

  return dst;
}

var v3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  add: add,
  copy: copy,
  create: create,
  cross: cross,
  distance: distance,
  distanceSq: distanceSq,
  divide: divide,
  divScalar: divScalar,
  dot: dot,
  lerp: lerp,
  lerpV: lerpV,
  length: length$1,
  lengthSq: lengthSq,
  max: max,
  min: min,
  mulScalar: mulScalar,
  multiply: multiply,
  negate: negate,
  normalize: normalize,
  setDefaultType: setDefaultType,
  subtract: subtract
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * 4x4 Matrix math math functions.
 *
 * Almost all functions take an optional `dst` argument. If it is not passed in the
 * functions will create a new matrix. In other words you can do this
 *
 *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix
 *
 * or
 *
 *     const mat = m4.create();
 *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.
 *
 * The first style is often easier but depending on where it's used it generates garbage where
 * as there is almost never allocation with the second style.
 *
 * It is always save to pass any matrix as the destination. So for example
 *
 *     const mat = m4.identity();
 *     const trans = m4.translation([1, 2, 3]);
 *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.
 *
 * @module twgl/m4
 */
let MatType = Float32Array;

/**
 * A JavaScript array with 16 values or a Float32Array with 16 values.
 * When created by the library will create the default type which is `Float32Array`
 * but can be set by calling {@link module:twgl/m4.setDefaultType}.
 * @typedef {(number[]|Float32Array)} Mat4
 * @memberOf module:twgl/m4
 */

/**
 * Sets the type this library creates for a Mat4
 * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`
 * @return {constructor} previous constructor for Mat4
 * @memberOf module:twgl/m4
 */
function setDefaultType$1(ctor) {
  const oldType = MatType;
  MatType = ctor;
  return oldType;
}

/**
 * Negates a matrix.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} -m.
 * @memberOf module:twgl/m4
 */
function negate$1(m, dst) {
  dst = dst || new MatType(16);

  dst[ 0] = -m[ 0];
  dst[ 1] = -m[ 1];
  dst[ 2] = -m[ 2];
  dst[ 3] = -m[ 3];
  dst[ 4] = -m[ 4];
  dst[ 5] = -m[ 5];
  dst[ 6] = -m[ 6];
  dst[ 7] = -m[ 7];
  dst[ 8] = -m[ 8];
  dst[ 9] = -m[ 9];
  dst[10] = -m[10];
  dst[11] = -m[11];
  dst[12] = -m[12];
  dst[13] = -m[13];
  dst[14] = -m[14];
  dst[15] = -m[15];

  return dst;
}

/**
 * Copies a matrix.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/m4.Mat4} [dst] The matrix. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} A copy of m.
 * @memberOf module:twgl/m4
 */
function copy$1(m, dst) {
  dst = dst || new MatType(16);

  dst[ 0] = m[ 0];
  dst[ 1] = m[ 1];
  dst[ 2] = m[ 2];
  dst[ 3] = m[ 3];
  dst[ 4] = m[ 4];
  dst[ 5] = m[ 5];
  dst[ 6] = m[ 6];
  dst[ 7] = m[ 7];
  dst[ 8] = m[ 8];
  dst[ 9] = m[ 9];
  dst[10] = m[10];
  dst[11] = m[11];
  dst[12] = m[12];
  dst[13] = m[13];
  dst[14] = m[14];
  dst[15] = m[15];

  return dst;
}

/**
 * Creates an n-by-n identity matrix.
 *
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.
 * @memberOf module:twgl/m4
 */
function identity(dst) {
  dst = dst || new MatType(16);

  dst[ 0] = 1;
  dst[ 1] = 0;
  dst[ 2] = 0;
  dst[ 3] = 0;
  dst[ 4] = 0;
  dst[ 5] = 1;
  dst[ 6] = 0;
  dst[ 7] = 0;
  dst[ 8] = 0;
  dst[ 9] = 0;
  dst[10] = 1;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;

  return dst;
}

/**
 * Takes the transpose of a matrix.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The transpose of m.
 * @memberOf module:twgl/m4
 */
 function transpose(m, dst) {
  dst = dst || new MatType(16);
  if (dst === m) {
    let t;

    t = m[1];
    m[1] = m[4];
    m[4] = t;

    t = m[2];
    m[2] = m[8];
    m[8] = t;

    t = m[3];
    m[3] = m[12];
    m[12] = t;

    t = m[6];
    m[6] = m[9];
    m[9] = t;

    t = m[7];
    m[7] = m[13];
    m[13] = t;

    t = m[11];
    m[11] = m[14];
    m[14] = t;
    return dst;
  }

  const m00 = m[0 * 4 + 0];
  const m01 = m[0 * 4 + 1];
  const m02 = m[0 * 4 + 2];
  const m03 = m[0 * 4 + 3];
  const m10 = m[1 * 4 + 0];
  const m11 = m[1 * 4 + 1];
  const m12 = m[1 * 4 + 2];
  const m13 = m[1 * 4 + 3];
  const m20 = m[2 * 4 + 0];
  const m21 = m[2 * 4 + 1];
  const m22 = m[2 * 4 + 2];
  const m23 = m[2 * 4 + 3];
  const m30 = m[3 * 4 + 0];
  const m31 = m[3 * 4 + 1];
  const m32 = m[3 * 4 + 2];
  const m33 = m[3 * 4 + 3];

  dst[ 0] = m00;
  dst[ 1] = m10;
  dst[ 2] = m20;
  dst[ 3] = m30;
  dst[ 4] = m01;
  dst[ 5] = m11;
  dst[ 6] = m21;
  dst[ 7] = m31;
  dst[ 8] = m02;
  dst[ 9] = m12;
  dst[10] = m22;
  dst[11] = m32;
  dst[12] = m03;
  dst[13] = m13;
  dst[14] = m23;
  dst[15] = m33;

  return dst;
}

/**
 * Computes the inverse of a 4-by-4 matrix.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The inverse of m.
 * @memberOf module:twgl/m4
 */
function inverse(m, dst) {
  dst = dst || new MatType(16);

  const m00 = m[0 * 4 + 0];
  const m01 = m[0 * 4 + 1];
  const m02 = m[0 * 4 + 2];
  const m03 = m[0 * 4 + 3];
  const m10 = m[1 * 4 + 0];
  const m11 = m[1 * 4 + 1];
  const m12 = m[1 * 4 + 2];
  const m13 = m[1 * 4 + 3];
  const m20 = m[2 * 4 + 0];
  const m21 = m[2 * 4 + 1];
  const m22 = m[2 * 4 + 2];
  const m23 = m[2 * 4 + 3];
  const m30 = m[3 * 4 + 0];
  const m31 = m[3 * 4 + 1];
  const m32 = m[3 * 4 + 2];
  const m33 = m[3 * 4 + 3];
  const tmp_0  = m22 * m33;
  const tmp_1  = m32 * m23;
  const tmp_2  = m12 * m33;
  const tmp_3  = m32 * m13;
  const tmp_4  = m12 * m23;
  const tmp_5  = m22 * m13;
  const tmp_6  = m02 * m33;
  const tmp_7  = m32 * m03;
  const tmp_8  = m02 * m23;
  const tmp_9  = m22 * m03;
  const tmp_10 = m02 * m13;
  const tmp_11 = m12 * m03;
  const tmp_12 = m20 * m31;
  const tmp_13 = m30 * m21;
  const tmp_14 = m10 * m31;
  const tmp_15 = m30 * m11;
  const tmp_16 = m10 * m21;
  const tmp_17 = m20 * m11;
  const tmp_18 = m00 * m31;
  const tmp_19 = m30 * m01;
  const tmp_20 = m00 * m21;
  const tmp_21 = m20 * m01;
  const tmp_22 = m00 * m11;
  const tmp_23 = m10 * m01;

  const t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -
      (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);
  const t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -
      (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);
  const t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -
      (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);
  const t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -
      (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);

  const d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);

  dst[ 0] = d * t0;
  dst[ 1] = d * t1;
  dst[ 2] = d * t2;
  dst[ 3] = d * t3;
  dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -
          (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));
  dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -
          (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));
  dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -
          (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));
  dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -
          (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));
  dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -
          (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));
  dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -
          (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));
  dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -
          (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));
  dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -
          (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));
  dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -
          (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));
  dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -
          (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));
  dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -
          (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));
  dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -
          (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));

  return dst;
}

/**
 * Multiplies two 4-by-4 matrices with a on the left and b on the right
 * @param {module:twgl/m4.Mat4} a The matrix on the left.
 * @param {module:twgl/m4.Mat4} b The matrix on the right.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The matrix product of a and b.
 * @memberOf module:twgl/m4
 */
function multiply$1(a, b, dst) {
  dst = dst || new MatType(16);

  const a00 = a[0];
  const a01 = a[1];
  const a02 = a[2];
  const a03 = a[3];
  const a10 = a[ 4 + 0];
  const a11 = a[ 4 + 1];
  const a12 = a[ 4 + 2];
  const a13 = a[ 4 + 3];
  const a20 = a[ 8 + 0];
  const a21 = a[ 8 + 1];
  const a22 = a[ 8 + 2];
  const a23 = a[ 8 + 3];
  const a30 = a[12 + 0];
  const a31 = a[12 + 1];
  const a32 = a[12 + 2];
  const a33 = a[12 + 3];
  const b00 = b[0];
  const b01 = b[1];
  const b02 = b[2];
  const b03 = b[3];
  const b10 = b[ 4 + 0];
  const b11 = b[ 4 + 1];
  const b12 = b[ 4 + 2];
  const b13 = b[ 4 + 3];
  const b20 = b[ 8 + 0];
  const b21 = b[ 8 + 1];
  const b22 = b[ 8 + 2];
  const b23 = b[ 8 + 3];
  const b30 = b[12 + 0];
  const b31 = b[12 + 1];
  const b32 = b[12 + 2];
  const b33 = b[12 + 3];

  dst[ 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;
  dst[ 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;
  dst[ 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;
  dst[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;
  dst[ 4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;
  dst[ 5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;
  dst[ 6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;
  dst[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;
  dst[ 8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;
  dst[ 9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;
  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;
  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;
  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;
  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;
  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;
  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;

  return dst;
}

/**
 * Sets the translation component of a 4-by-4 matrix to the given
 * vector.
 * @param {module:twgl/m4.Mat4} a The matrix.
 * @param {module:twgl/v3.Vec3} v The vector.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The matrix with translation set.
 * @memberOf module:twgl/m4
 */
function setTranslation(a, v, dst) {
  dst = dst || identity();
  if (a !== dst) {
    dst[ 0] = a[ 0];
    dst[ 1] = a[ 1];
    dst[ 2] = a[ 2];
    dst[ 3] = a[ 3];
    dst[ 4] = a[ 4];
    dst[ 5] = a[ 5];
    dst[ 6] = a[ 6];
    dst[ 7] = a[ 7];
    dst[ 8] = a[ 8];
    dst[ 9] = a[ 9];
    dst[10] = a[10];
    dst[11] = a[11];
  }
  dst[12] = v[0];
  dst[13] = v[1];
  dst[14] = v[2];
  dst[15] = 1;
  return dst;
}

/**
 * Returns the translation component of a 4-by-4 matrix as a vector with 3
 * entries.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not passed a new one is created.
 * @return {module:twgl/v3.Vec3} The translation component of m.
 * @memberOf module:twgl/m4
 */
function getTranslation(m, dst) {
  dst = dst || create();
  dst[0] = m[12];
  dst[1] = m[13];
  dst[2] = m[14];
  return dst;
}

/**
 * Returns an axis of a 4x4 matrix as a vector with 3 entries
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {number} axis The axis 0 = x, 1 = y, 2 = z;
 * @return {module:twgl/v3.Vec3} [dst] vector.
 * @return {module:twgl/v3.Vec3} The axis component of m.
 * @memberOf module:twgl/m4
 */
function getAxis(m, axis, dst) {
  dst = dst || create();
  const off = axis * 4;
  dst[0] = m[off + 0];
  dst[1] = m[off + 1];
  dst[2] = m[off + 2];
  return dst;
}

/**
 * Sets an axis of a 4x4 matrix as a vector with 3 entries
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} v the axis vector
 * @param {number} axis The axis  0 = x, 1 = y, 2 = z;
 * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The matrix with axis set.
 * @memberOf module:twgl/m4
 */
function setAxis(a, v, axis, dst) {
  if (dst !== a) {
    dst = copy$1(a, dst);
  }
  const off = axis * 4;
  dst[off + 0] = v[0];
  dst[off + 1] = v[1];
  dst[off + 2] = v[2];
  return dst;
}

/**
 * Computes a 4-by-4 perspective transformation matrix given the angular height
 * of the frustum, the aspect ratio, and the near and far clipping planes.  The
 * arguments define a frustum extending in the negative z direction.  The given
 * angle is the vertical angle of the frustum, and the horizontal angle is
 * determined to produce the given aspect ratio.  The arguments near and far are
 * the distances to the near and far clipping planes.  Note that near and far
 * are not z coordinates, but rather they are distances along the negative
 * z-axis.  The matrix generated sends the viewing frustum to the unit box.
 * We assume a unit box extending from -1 to 1 in the x and y dimensions and
 * from 0 to 1 in the z dimension.
 * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).
 * @param {number} aspect The aspect ratio width / height.
 * @param {number} zNear The depth (negative z coordinate)
 *     of the near clipping plane.
 * @param {number} zFar The depth (negative z coordinate)
 *     of the far clipping plane.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The perspective matrix.
 * @memberOf module:twgl/m4
 */
function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {
  dst = dst || new MatType(16);

  const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);
  const rangeInv = 1.0 / (zNear - zFar);

  dst[0]  = f / aspect;
  dst[1]  = 0;
  dst[2]  = 0;
  dst[3]  = 0;

  dst[4]  = 0;
  dst[5]  = f;
  dst[6]  = 0;
  dst[7]  = 0;

  dst[8]  = 0;
  dst[9]  = 0;
  dst[10] = (zNear + zFar) * rangeInv;
  dst[11] = -1;

  dst[12] = 0;
  dst[13] = 0;
  dst[14] = zNear * zFar * rangeInv * 2;
  dst[15] = 0;

  return dst;
}

/**
 * Computes a 4-by-4 orthogonal transformation matrix given the left, right,
 * bottom, and top dimensions of the near clipping plane as well as the
 * near and far clipping plane distances.
 * @param {number} left Left side of the near clipping plane viewport.
 * @param {number} right Right side of the near clipping plane viewport.
 * @param {number} bottom Bottom of the near clipping plane viewport.
 * @param {number} top Top of the near clipping plane viewport.
 * @param {number} near The depth (negative z coordinate)
 *     of the near clipping plane.
 * @param {number} far The depth (negative z coordinate)
 *     of the far clipping plane.
 * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The perspective matrix.
 * @memberOf module:twgl/m4
 */
function ortho(left, right, bottom, top, near, far, dst) {
  dst = dst || new MatType(16);

  dst[0]  = 2 / (right - left);
  dst[1]  = 0;
  dst[2]  = 0;
  dst[3]  = 0;

  dst[4]  = 0;
  dst[5]  = 2 / (top - bottom);
  dst[6]  = 0;
  dst[7]  = 0;

  dst[8]  = 0;
  dst[9]  = 0;
  dst[10] = 2 / (near - far);
  dst[11] = 0;

  dst[12] = (right + left) / (left - right);
  dst[13] = (top + bottom) / (bottom - top);
  dst[14] = (far + near) / (near - far);
  dst[15] = 1;

  return dst;
}

/**
 * Computes a 4-by-4 perspective transformation matrix given the left, right,
 * top, bottom, near and far clipping planes. The arguments define a frustum
 * extending in the negative z direction. The arguments near and far are the
 * distances to the near and far clipping planes. Note that near and far are not
 * z coordinates, but rather they are distances along the negative z-axis. The
 * matrix generated sends the viewing frustum to the unit box. We assume a unit
 * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z
 * dimension.
 * @param {number} left The x coordinate of the left plane of the box.
 * @param {number} right The x coordinate of the right plane of the box.
 * @param {number} bottom The y coordinate of the bottom plane of the box.
 * @param {number} top The y coordinate of the right plane of the box.
 * @param {number} near The negative z coordinate of the near plane of the box.
 * @param {number} far The negative z coordinate of the far plane of the box.
 * @param {module:twgl/m4.Mat4} [dst] Output matrix. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The perspective projection matrix.
 * @memberOf module:twgl/m4
 */
function frustum(left, right, bottom, top, near, far, dst) {
  dst = dst || new MatType(16);

  const dx = (right - left);
  const dy = (top - bottom);
  const dz = (near - far);

  dst[ 0] = 2 * near / dx;
  dst[ 1] = 0;
  dst[ 2] = 0;
  dst[ 3] = 0;
  dst[ 4] = 0;
  dst[ 5] = 2 * near / dy;
  dst[ 6] = 0;
  dst[ 7] = 0;
  dst[ 8] = (left + right) / dx;
  dst[ 9] = (top + bottom) / dy;
  dst[10] = far / dz;
  dst[11] = -1;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = near * far / dz;
  dst[15] = 0;

  return dst;
}

let xAxis;
let yAxis;
let zAxis;

/**
 * Computes a 4-by-4 look-at transformation.
 *
 * This is a matrix which positions the camera itself. If you want
 * a view matrix (a matrix which moves things in front of the camera)
 * take the inverse of this.
 *
 * @param {module:twgl/v3.Vec3} eye The position of the eye.
 * @param {module:twgl/v3.Vec3} target The position meant to be viewed.
 * @param {module:twgl/v3.Vec3} up A vector pointing up.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The look-at matrix.
 * @memberOf module:twgl/m4
 */
function lookAt(eye, target, up, dst) {
  dst = dst || new MatType(16);

  xAxis = xAxis || create();
  yAxis = yAxis || create();
  zAxis = zAxis || create();

  normalize(
      subtract(eye, target, zAxis), zAxis);
  normalize(cross(up, zAxis, xAxis), xAxis);
  normalize(cross(zAxis, xAxis, yAxis), yAxis);

  dst[ 0] = xAxis[0];
  dst[ 1] = xAxis[1];
  dst[ 2] = xAxis[2];
  dst[ 3] = 0;
  dst[ 4] = yAxis[0];
  dst[ 5] = yAxis[1];
  dst[ 6] = yAxis[2];
  dst[ 7] = 0;
  dst[ 8] = zAxis[0];
  dst[ 9] = zAxis[1];
  dst[10] = zAxis[2];
  dst[11] = 0;
  dst[12] = eye[0];
  dst[13] = eye[1];
  dst[14] = eye[2];
  dst[15] = 1;

  return dst;
}

/**
 * Creates a 4-by-4 matrix which translates by the given vector v.
 * @param {module:twgl/v3.Vec3} v The vector by
 *     which to translate.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The translation matrix.
 * @memberOf module:twgl/m4
 */
function translation(v, dst) {
  dst = dst || new MatType(16);

  dst[ 0] = 1;
  dst[ 1] = 0;
  dst[ 2] = 0;
  dst[ 3] = 0;
  dst[ 4] = 0;
  dst[ 5] = 1;
  dst[ 6] = 0;
  dst[ 7] = 0;
  dst[ 8] = 0;
  dst[ 9] = 0;
  dst[10] = 1;
  dst[11] = 0;
  dst[12] = v[0];
  dst[13] = v[1];
  dst[14] = v[2];
  dst[15] = 1;
  return dst;
}

/**
 * Translates the given 4-by-4 matrix by the given vector v.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} v The vector by
 *     which to translate.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The translated matrix.
 * @memberOf module:twgl/m4
 */
function translate(m, v, dst) {
  dst = dst || new MatType(16);

  const v0 = v[0];
  const v1 = v[1];
  const v2 = v[2];
  const m00 = m[0];
  const m01 = m[1];
  const m02 = m[2];
  const m03 = m[3];
  const m10 = m[1 * 4 + 0];
  const m11 = m[1 * 4 + 1];
  const m12 = m[1 * 4 + 2];
  const m13 = m[1 * 4 + 3];
  const m20 = m[2 * 4 + 0];
  const m21 = m[2 * 4 + 1];
  const m22 = m[2 * 4 + 2];
  const m23 = m[2 * 4 + 3];
  const m30 = m[3 * 4 + 0];
  const m31 = m[3 * 4 + 1];
  const m32 = m[3 * 4 + 2];
  const m33 = m[3 * 4 + 3];

  if (m !== dst) {
    dst[ 0] = m00;
    dst[ 1] = m01;
    dst[ 2] = m02;
    dst[ 3] = m03;
    dst[ 4] = m10;
    dst[ 5] = m11;
    dst[ 6] = m12;
    dst[ 7] = m13;
    dst[ 8] = m20;
    dst[ 9] = m21;
    dst[10] = m22;
    dst[11] = m23;
  }

  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;
  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;
  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;
  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;

  return dst;
}

/**
 * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotation matrix.
 * @memberOf module:twgl/m4
 */
function rotationX(angleInRadians, dst) {
  dst = dst || new MatType(16);

  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);

  dst[ 0] = 1;
  dst[ 1] = 0;
  dst[ 2] = 0;
  dst[ 3] = 0;
  dst[ 4] = 0;
  dst[ 5] = c;
  dst[ 6] = s;
  dst[ 7] = 0;
  dst[ 8] = 0;
  dst[ 9] = -s;
  dst[10] = c;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;

  return dst;
}

/**
 * Rotates the given 4-by-4 matrix around the x-axis by the given
 * angle.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotated matrix.
 * @memberOf module:twgl/m4
 */
function rotateX(m, angleInRadians, dst) {
  dst = dst || new MatType(16);

  const m10 = m[4];
  const m11 = m[5];
  const m12 = m[6];
  const m13 = m[7];
  const m20 = m[8];
  const m21 = m[9];
  const m22 = m[10];
  const m23 = m[11];
  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);

  dst[4]  = c * m10 + s * m20;
  dst[5]  = c * m11 + s * m21;
  dst[6]  = c * m12 + s * m22;
  dst[7]  = c * m13 + s * m23;
  dst[8]  = c * m20 - s * m10;
  dst[9]  = c * m21 - s * m11;
  dst[10] = c * m22 - s * m12;
  dst[11] = c * m23 - s * m13;

  if (m !== dst) {
    dst[ 0] = m[ 0];
    dst[ 1] = m[ 1];
    dst[ 2] = m[ 2];
    dst[ 3] = m[ 3];
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}

/**
 * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotation matrix.
 * @memberOf module:twgl/m4
 */
function rotationY(angleInRadians, dst) {
  dst = dst || new MatType(16);

  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);

  dst[ 0] = c;
  dst[ 1] = 0;
  dst[ 2] = -s;
  dst[ 3] = 0;
  dst[ 4] = 0;
  dst[ 5] = 1;
  dst[ 6] = 0;
  dst[ 7] = 0;
  dst[ 8] = s;
  dst[ 9] = 0;
  dst[10] = c;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;

  return dst;
}

/**
 * Rotates the given 4-by-4 matrix around the y-axis by the given
 * angle.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotated matrix.
 * @memberOf module:twgl/m4
 */
function rotateY(m, angleInRadians, dst) {
  dst = dst || new MatType(16);

  const m00 = m[0 * 4 + 0];
  const m01 = m[0 * 4 + 1];
  const m02 = m[0 * 4 + 2];
  const m03 = m[0 * 4 + 3];
  const m20 = m[2 * 4 + 0];
  const m21 = m[2 * 4 + 1];
  const m22 = m[2 * 4 + 2];
  const m23 = m[2 * 4 + 3];
  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);

  dst[ 0] = c * m00 - s * m20;
  dst[ 1] = c * m01 - s * m21;
  dst[ 2] = c * m02 - s * m22;
  dst[ 3] = c * m03 - s * m23;
  dst[ 8] = c * m20 + s * m00;
  dst[ 9] = c * m21 + s * m01;
  dst[10] = c * m22 + s * m02;
  dst[11] = c * m23 + s * m03;

  if (m !== dst) {
    dst[ 4] = m[ 4];
    dst[ 5] = m[ 5];
    dst[ 6] = m[ 6];
    dst[ 7] = m[ 7];
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}

/**
 * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotation matrix.
 * @memberOf module:twgl/m4
 */
function rotationZ(angleInRadians, dst) {
  dst = dst || new MatType(16);

  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);

  dst[ 0] = c;
  dst[ 1] = s;
  dst[ 2] = 0;
  dst[ 3] = 0;
  dst[ 4] = -s;
  dst[ 5] = c;
  dst[ 6] = 0;
  dst[ 7] = 0;
  dst[ 8] = 0;
  dst[ 9] = 0;
  dst[10] = 1;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;

  return dst;
}

/**
 * Rotates the given 4-by-4 matrix around the z-axis by the given
 * angle.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotated matrix.
 * @memberOf module:twgl/m4
 */
function rotateZ(m, angleInRadians, dst) {
  dst = dst || new MatType(16);

  const m00 = m[0 * 4 + 0];
  const m01 = m[0 * 4 + 1];
  const m02 = m[0 * 4 + 2];
  const m03 = m[0 * 4 + 3];
  const m10 = m[1 * 4 + 0];
  const m11 = m[1 * 4 + 1];
  const m12 = m[1 * 4 + 2];
  const m13 = m[1 * 4 + 3];
  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);

  dst[ 0] = c * m00 + s * m10;
  dst[ 1] = c * m01 + s * m11;
  dst[ 2] = c * m02 + s * m12;
  dst[ 3] = c * m03 + s * m13;
  dst[ 4] = c * m10 - s * m00;
  dst[ 5] = c * m11 - s * m01;
  dst[ 6] = c * m12 - s * m02;
  dst[ 7] = c * m13 - s * m03;

  if (m !== dst) {
    dst[ 8] = m[ 8];
    dst[ 9] = m[ 9];
    dst[10] = m[10];
    dst[11] = m[11];
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}

/**
 * Creates a 4-by-4 matrix which rotates around the given axis by the given
 * angle.
 * @param {module:twgl/v3.Vec3} axis The axis
 *     about which to rotate.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians
 *     around the axis.
 * @memberOf module:twgl/m4
 */
function axisRotation(axis, angleInRadians, dst) {
  dst = dst || new MatType(16);

  let x = axis[0];
  let y = axis[1];
  let z = axis[2];
  const n = Math.sqrt(x * x + y * y + z * z);
  x /= n;
  y /= n;
  z /= n;
  const xx = x * x;
  const yy = y * y;
  const zz = z * z;
  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);
  const oneMinusCosine = 1 - c;

  dst[ 0] = xx + (1 - xx) * c;
  dst[ 1] = x * y * oneMinusCosine + z * s;
  dst[ 2] = x * z * oneMinusCosine - y * s;
  dst[ 3] = 0;
  dst[ 4] = x * y * oneMinusCosine - z * s;
  dst[ 5] = yy + (1 - yy) * c;
  dst[ 6] = y * z * oneMinusCosine + x * s;
  dst[ 7] = 0;
  dst[ 8] = x * z * oneMinusCosine + y * s;
  dst[ 9] = y * z * oneMinusCosine - x * s;
  dst[10] = zz + (1 - zz) * c;
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;

  return dst;
}

/**
 * Rotates the given 4-by-4 matrix around the given axis by the
 * given angle.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} axis The axis
 *     about which to rotate.
 * @param {number} angleInRadians The angle by which to rotate (in radians).
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The rotated matrix.
 * @memberOf module:twgl/m4
 */
function axisRotate(m, axis, angleInRadians, dst) {
  dst = dst || new MatType(16);

  let x = axis[0];
  let y = axis[1];
  let z = axis[2];
  const n = Math.sqrt(x * x + y * y + z * z);
  x /= n;
  y /= n;
  z /= n;
  const xx = x * x;
  const yy = y * y;
  const zz = z * z;
  const c = Math.cos(angleInRadians);
  const s = Math.sin(angleInRadians);
  const oneMinusCosine = 1 - c;

  const r00 = xx + (1 - xx) * c;
  const r01 = x * y * oneMinusCosine + z * s;
  const r02 = x * z * oneMinusCosine - y * s;
  const r10 = x * y * oneMinusCosine - z * s;
  const r11 = yy + (1 - yy) * c;
  const r12 = y * z * oneMinusCosine + x * s;
  const r20 = x * z * oneMinusCosine + y * s;
  const r21 = y * z * oneMinusCosine - x * s;
  const r22 = zz + (1 - zz) * c;

  const m00 = m[0];
  const m01 = m[1];
  const m02 = m[2];
  const m03 = m[3];
  const m10 = m[4];
  const m11 = m[5];
  const m12 = m[6];
  const m13 = m[7];
  const m20 = m[8];
  const m21 = m[9];
  const m22 = m[10];
  const m23 = m[11];

  dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;
  dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;
  dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;
  dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;
  dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;
  dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;
  dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;
  dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;
  dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;
  dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;
  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;
  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;

  if (m !== dst) {
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}

/**
 * Creates a 4-by-4 matrix which scales in each dimension by an amount given by
 * the corresponding entry in the given vector; assumes the vector has three
 * entries.
 * @param {module:twgl/v3.Vec3} v A vector of
 *     three entries specifying the factor by which to scale in each dimension.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The scaling matrix.
 * @memberOf module:twgl/m4
 */
function scaling(v, dst) {
  dst = dst || new MatType(16);

  dst[ 0] = v[0];
  dst[ 1] = 0;
  dst[ 2] = 0;
  dst[ 3] = 0;
  dst[ 4] = 0;
  dst[ 5] = v[1];
  dst[ 6] = 0;
  dst[ 7] = 0;
  dst[ 8] = 0;
  dst[ 9] = 0;
  dst[10] = v[2];
  dst[11] = 0;
  dst[12] = 0;
  dst[13] = 0;
  dst[14] = 0;
  dst[15] = 1;

  return dst;
}

/**
 * Scales the given 4-by-4 matrix in each dimension by an amount
 * given by the corresponding entry in the given vector; assumes the vector has
 * three entries.
 * @param {module:twgl/m4.Mat4} m The matrix to be modified.
 * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the
 *     factor by which to scale in each dimension.
 * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If not passed a new one is created.
 * @return {module:twgl/m4.Mat4} The scaled matrix.
 * @memberOf module:twgl/m4
 */
function scale(m, v, dst) {
  dst = dst || new MatType(16);

  const v0 = v[0];
  const v1 = v[1];
  const v2 = v[2];

  dst[ 0] = v0 * m[0 * 4 + 0];
  dst[ 1] = v0 * m[0 * 4 + 1];
  dst[ 2] = v0 * m[0 * 4 + 2];
  dst[ 3] = v0 * m[0 * 4 + 3];
  dst[ 4] = v1 * m[1 * 4 + 0];
  dst[ 5] = v1 * m[1 * 4 + 1];
  dst[ 6] = v1 * m[1 * 4 + 2];
  dst[ 7] = v1 * m[1 * 4 + 3];
  dst[ 8] = v2 * m[2 * 4 + 0];
  dst[ 9] = v2 * m[2 * 4 + 1];
  dst[10] = v2 * m[2 * 4 + 2];
  dst[11] = v2 * m[2 * 4 + 3];

  if (m !== dst) {
    dst[12] = m[12];
    dst[13] = m[13];
    dst[14] = m[14];
    dst[15] = m[15];
  }

  return dst;
}

/**
 * Takes a 4-by-4 matrix and a vector with 3 entries,
 * interprets the vector as a point, transforms that point by the matrix, and
 * returns the result as a vector with 3 entries.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} v The point.
 * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.
 * @return {module:twgl/v3.Vec3} The transformed point.
 * @memberOf module:twgl/m4
 */
function transformPoint(m, v, dst) {
  dst = dst || create();
  const v0 = v[0];
  const v1 = v[1];
  const v2 = v[2];
  const d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];

  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;
  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;
  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;

  return dst;
}

/**
 * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a
 * direction, transforms that direction by the matrix, and returns the result;
 * assumes the transformation of 3-dimensional space represented by the matrix
 * is parallel-preserving, i.e. any combination of rotation, scaling and
 * translation, but not a perspective distortion. Returns a vector with 3
 * entries.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} v The direction.
 * @param {module:twgl/v3.Vec3} [dst] optional Vec3 to store result. If not passed a new one is created.
 * @return {module:twgl/v3.Vec3} The transformed direction.
 * @memberOf module:twgl/m4
 */
function transformDirection(m, v, dst) {
  dst = dst || create();

  const v0 = v[0];
  const v1 = v[1];
  const v2 = v[2];

  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];
  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];
  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];

  return dst;
}

/**
 * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector
 * as a normal to a surface, and computes a vector which is normal upon
 * transforming that surface by the matrix. The effect of this function is the
 * same as transforming v (as a direction) by the inverse-transpose of m.  This
 * function assumes the transformation of 3-dimensional space represented by the
 * matrix is parallel-preserving, i.e. any combination of rotation, scaling and
 * translation, but not a perspective distortion.  Returns a vector with 3
 * entries.
 * @param {module:twgl/m4.Mat4} m The matrix.
 * @param {module:twgl/v3.Vec3} v The normal.
 * @param {module:twgl/v3.Vec3} [dst] The direction. If not passed a new one is created.
 * @return {module:twgl/v3.Vec3} The transformed normal.
 * @memberOf module:twgl/m4
 */
function transformNormal(m, v, dst) {
  dst = dst || create();
  const mi = inverse(m);
  const v0 = v[0];
  const v1 = v[1];
  const v2 = v[2];

  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];
  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];
  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];

  return dst;
}

var m4 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  axisRotate: axisRotate,
  axisRotation: axisRotation,
  copy: copy$1,
  frustum: frustum,
  getAxis: getAxis,
  getTranslation: getTranslation,
  identity: identity,
  inverse: inverse,
  lookAt: lookAt,
  multiply: multiply$1,
  negate: negate$1,
  ortho: ortho,
  perspective: perspective,
  rotateX: rotateX,
  rotateY: rotateY,
  rotateZ: rotateZ,
  rotationX: rotationX,
  rotationY: rotationY,
  rotationZ: rotationZ,
  scale: scale,
  scaling: scaling,
  setAxis: setAxis,
  setDefaultType: setDefaultType$1,
  setTranslation: setTranslation,
  transformDirection: transformDirection,
  transformNormal: transformNormal,
  transformPoint: transformPoint,
  translate: translate,
  translation: translation,
  transpose: transpose
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/* DataType */
const BYTE                           = 0x1400;
const UNSIGNED_BYTE                  = 0x1401;
const SHORT                          = 0x1402;
const UNSIGNED_SHORT                 = 0x1403;
const INT                            = 0x1404;
const UNSIGNED_INT                   = 0x1405;
const FLOAT                          = 0x1406;
const UNSIGNED_SHORT_4_4_4_4       = 0x8033;
const UNSIGNED_SHORT_5_5_5_1       = 0x8034;
const UNSIGNED_SHORT_5_6_5         = 0x8363;
const HALF_FLOAT                   = 0x140B;
const UNSIGNED_INT_2_10_10_10_REV  = 0x8368;
const UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
const UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;
const FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
const UNSIGNED_INT_24_8            = 0x84FA;

const glTypeToTypedArray = {};
{
  const tt = glTypeToTypedArray;
  tt[BYTE]                           = Int8Array;
  tt[UNSIGNED_BYTE]                  = Uint8Array;
  tt[SHORT]                          = Int16Array;
  tt[UNSIGNED_SHORT]                 = Uint16Array;
  tt[INT]                            = Int32Array;
  tt[UNSIGNED_INT]                   = Uint32Array;
  tt[FLOAT]                          = Float32Array;
  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;
  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;
  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;
  tt[HALF_FLOAT]                     = Uint16Array;
  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;
  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;
  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;
  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;
  tt[UNSIGNED_INT_24_8]              = Uint32Array;
}

/**
 * Get the GL type for a typedArray
 * @param {ArrayBufferView} typedArray a typedArray
 * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will
 *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned
 * @memberOf module:twgl/typedArray
 */
function getGLTypeForTypedArray(typedArray) {
  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line
  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line
  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line
  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line
  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line
  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line
  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line
  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line
  throw new Error('unsupported typed array type');
}

/**
 * Get the GL type for a typedArray type
 * @param {ArrayBufferView} typedArrayType a typedArray constructor
 * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will
 *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned
 * @memberOf module:twgl/typedArray
 */
function getGLTypeForTypedArrayType(typedArrayType) {
  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line
  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line
  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line
  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line
  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line
  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line
  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line
  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line
  throw new Error('unsupported typed array type');
}

/**
 * Get the typed array constructor for a given GL type
 * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)
 * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).
 * @memberOf module:twgl/typedArray
 */
function getTypedArrayTypeForGLType(type) {
  const CTOR = glTypeToTypedArray[type];
  if (!CTOR) {
    throw new Error('unknown gl type');
  }
  return CTOR;
}

const isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'
  ? function isArrayBufferOrSharedArrayBuffer(a) {
    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);
  }
  : function isArrayBuffer(a) {
    return a && a.buffer && a.buffer instanceof ArrayBuffer;
  };

var typedarrays = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getGLTypeForTypedArray: getGLTypeForTypedArray,
  getGLTypeForTypedArrayType: getGLTypeForTypedArrayType,
  getTypedArrayTypeForGLType: getTypedArrayTypeForGLType,
  isArrayBuffer: isArrayBuffer
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/* eslint no-console: "off" */

/**
 * Copy named properties
 *
 * @param {string[]} names names of properties to copy
 * @param {object} src object to copy properties from
 * @param {object} dst object to copy properties to
 * @private
 */
function copyNamedProperties(names, src, dst) {
  names.forEach(function(name) {
    const value = src[name];
    if (value !== undefined) {
      dst[name] = value;
    }
  });
}

/**
 * Copies properties from source to dest only if a matching key is in dest
 *
 * @param {Object.<string, ?>} src the source
 * @param {Object.<string, ?>} dst the dest
 * @private
 */
function copyExistingProperties(src, dst) {
  Object.keys(dst).forEach(function(key) {
    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */
      dst[key] = src[key];
    }
  });
}

function error(...args) {
  console.error(...args);
}

function warn(...args) {
  console.warn(...args);
}

function isBuffer(gl, t) {
  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;
}

function isRenderbuffer(gl, t) {
  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;
}

function isShader(gl, t) {
  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;
}

function isTexture(gl, t) {
  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;
}

function isSampler(gl, t) {
  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;
}

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

const STATIC_DRAW                  = 0x88e4;
const ARRAY_BUFFER                 = 0x8892;
const ELEMENT_ARRAY_BUFFER         = 0x8893;
const BUFFER_SIZE                  = 0x8764;

const BYTE$1                         = 0x1400;
const UNSIGNED_BYTE$1                = 0x1401;
const SHORT$1                        = 0x1402;
const UNSIGNED_SHORT$1               = 0x1403;
const INT$1                          = 0x1404;
const UNSIGNED_INT$1                 = 0x1405;
const FLOAT$1                        = 0x1406;
const defaults = {
  attribPrefix: "",
};

/**
 * Sets the default attrib prefix
 *
 * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`
 * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.
 *
 * In other words I'll create arrays of geometry like this
 *
 *     var arrays = {
 *       position: ...
 *       normal: ...
 *       texcoord: ...
 *     };
 *
 * But need those mapped to attributes and my attributes start with `a_`.
 *
 * @deprecated see {@link module:twgl.setDefaults}
 * @param {string} prefix prefix for attribs
 * @memberOf module:twgl/attributes
 */
function setAttributePrefix(prefix) {
  defaults.attribPrefix = prefix;
}

function setDefaults(newDefaults) {
  copyExistingProperties(newDefaults, defaults);
}

function setBufferFromTypedArray(gl, type, buffer, array, drawType) {
  gl.bindBuffer(type, buffer);
  gl.bufferData(type, array, drawType || STATIC_DRAW);
}

/**
 * Given typed array creates a WebGLBuffer and copies the typed array
 * into it.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken
 * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.
 * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.
 * @return {WebGLBuffer} the created WebGLBuffer
 * @memberOf module:twgl/attributes
 */
function createBufferFromTypedArray(gl, typedArray, type, drawType) {
  if (isBuffer(gl, typedArray)) {
    return typedArray;
  }
  type = type || ARRAY_BUFFER;
  const buffer = gl.createBuffer();
  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);
  return buffer;
}

function isIndices(name) {
  return name === "indices";
}

// This is really just a guess. Though I can't really imagine using
// anything else? Maybe for some compression?
function getNormalizationForTypedArray(typedArray) {
  if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line
  if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line
  return false;
}

// This is really just a guess. Though I can't really imagine using
// anything else? Maybe for some compression?
function getNormalizationForTypedArrayType(typedArrayType) {
  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line
  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line
  return false;
}

function getArray(array) {
  return array.length ? array : array.data;
}

const texcoordRE = /coord|texture/i;
const colorRE = /color|colour/i;

function guessNumComponentsFromName(name, length) {
  let numComponents;
  if (texcoordRE.test(name)) {
    numComponents = 2;
  } else if (colorRE.test(name)) {
    numComponents = 4;
  } else {
    numComponents = 3;  // position, normals, indices ...
  }

  if (length % numComponents > 0) {
    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);
  }

  return numComponents;
}

function getNumComponents(array, arrayName) {
  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);
}

function makeTypedArray(array, name) {
  if (isArrayBuffer(array)) {
    return array;
  }

  if (isArrayBuffer(array.data)) {
    return array.data;
  }

  if (Array.isArray(array)) {
    array = {
      data: array,
    };
  }

  let Type = array.type;
  if (!Type) {
    if (isIndices(name)) {
      Type = Uint16Array;
    } else {
      Type = Float32Array;
    }
  }
  return new Type(array.data);
}

/**
 * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer
 * for the attribute.
 *
 * @typedef {Object} AttribInfo
 * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be
 *    disabled and set to this constant value and all other values will be ignored.
 * @property {number} [numComponents] the number of components for this attribute.
 * @property {number} [size] synonym for `numComponents`.
 * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`
 * @property {boolean} [normalize] whether or not to normalize the data. Default = false
 * @property {number} [offset] offset into buffer in bytes. Default = 0
 * @property {number} [stride] the stride in bytes per element. Default = 0
 * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor
 *    where as anything else = do call it with this value
 * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute
 * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW
 * @memberOf module:twgl
 */

/**
 * Use this type of array spec when TWGL can't guess the type or number of components of an array
 * @typedef {Object} FullArraySpec
 * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be
 *    disabled and set to this constant value and all other values will be ignored.
 * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.
 * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.
 *    If `coord` is in the name assumes `numComponents = 2`.
 *    If `color` is in the name assumes `numComponents = 4`.
 *    otherwise assumes `numComponents = 3`
 * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).
 * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.
 * @property {number} [size] synonym for `numComponents`.
 * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.
 * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0
 * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0
 * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor
 *    where as anything else = do call it with this value
 * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.
 * @property {string} [name] synonym for `attrib`.
 * @property {string} [attribName] synonym for `attrib`.
 * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer
 *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`
 *    to provide this. Example:
 *
 *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {
 *           position: [1, 2, 3, ... ],
 *         });
 *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {
 *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1
 *         });
 *
 * @memberOf module:twgl
 */

/**
 * An individual array in {@link module:twgl.Arrays}
 *
 * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`
 * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will
 * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.
 *
 * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec
 * @memberOf module:twgl
 */

/**
 * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your
 * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.
 *
 *     Bare JavaScript Arrays
 *
 *         var arrays = {
 *            position: [-1, 1, 0],
 *            normal: [0, 1, 0],
 *            ...
 *         }
 *
 *     Bare TypedArrays
 *
 *         var arrays = {
 *            position: new Float32Array([-1, 1, 0]),
 *            color: new Uint8Array([255, 128, 64, 255]),
 *            ...
 *         }
 *
 * *   Will guess at `numComponents` if not specified based on name.
 *
 *     If `coord` is in the name assumes `numComponents = 2`
 *
 *     If `color` is in the name assumes `numComponents = 4`
 *
 *     otherwise assumes `numComponents = 3`
 *
 * Objects with various fields. See {@link module:twgl.FullArraySpec}.
 *
 *     var arrays = {
 *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
 *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
 *     };
 *
 * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays
 * @memberOf module:twgl
 */


/**
 * Creates a set of attribute data and WebGLBuffers from set of arrays
 *
 * Given
 *
 *      var arrays = {
 *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
 *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },
 *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
 *      };
 *
 * returns something like
 *
 *      var attribs = {
 *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
 *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
 *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
 *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },
 *      };
 *
 * notes:
 *
 * *   Arrays can take various forms
 *
 *     Bare JavaScript Arrays
 *
 *         var arrays = {
 *            position: [-1, 1, 0],
 *            normal: [0, 1, 0],
 *            ...
 *         }
 *
 *     Bare TypedArrays
 *
 *         var arrays = {
 *            position: new Float32Array([-1, 1, 0]),
 *            color: new Uint8Array([255, 128, 64, 255]),
 *            ...
 *         }
 *
 * *   Will guess at `numComponents` if not specified based on name.
 *
 *     If `coord` is in the name assumes `numComponents = 2`
 *
 *     If `color` is in the name assumes `numComponents = 4`
 *
 *     otherwise assumes `numComponents = 3`
 *
 * @param {WebGLRenderingContext} gl The webgl rendering context.
 * @param {module:twgl.Arrays} arrays The arrays
 * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from
 *   This lets you share buffers. Any arrays you supply will override
 *   the buffers from srcBufferInfo.
 * @return {Object.<string, module:twgl.AttribInfo>} the attribs
 * @memberOf module:twgl/attributes
 */
function createAttribsFromArrays(gl, arrays) {
  const attribs = {};
  Object.keys(arrays).forEach(function(arrayName) {
    if (!isIndices(arrayName)) {
      const array = arrays[arrayName];
      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);
      if (array.value) {
        if (!Array.isArray(array.value) && !isArrayBuffer(array.value)) {
          throw new Error('array.value is not array or typedarray');
        }
        attribs[attribName] = {
          value: array.value,
        };
      } else {
        let buffer;
        let type;
        let normalization;
        let numComponents;
        if (array.buffer && array.buffer instanceof WebGLBuffer) {
          buffer = array.buffer;
          numComponents = array.numComponents || array.size;
          type = array.type;
          normalization = array.normalize;
        } else if (typeof array === "number" || typeof array.data === "number") {
          const numValues = array.data || array;
          const arrayType = array.type || Float32Array;
          const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;
          type = getGLTypeForTypedArrayType(arrayType);
          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);
          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);
          buffer = gl.createBuffer();
          gl.bindBuffer(ARRAY_BUFFER, buffer);
          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);
        } else {
          const typedArray = makeTypedArray(array, arrayName);
          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);
          type = getGLTypeForTypedArray(typedArray);
          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);
          numComponents = getNumComponents(array, arrayName);
        }
        attribs[attribName] = {
          buffer:        buffer,
          numComponents: numComponents,
          type:          type,
          normalize:     normalization,
          stride:        array.stride || 0,
          offset:        array.offset || 0,
          divisor:       array.divisor === undefined ? undefined : array.divisor,
          drawType:      array.drawType,
        };
      }
    }
  });
  gl.bindBuffer(ARRAY_BUFFER, null);
  return attribs;
}

/**
 * Sets the contents of a buffer attached to an attribInfo
 *
 * This is helper function to dynamically update a buffer.
 *
 * Let's say you make a bufferInfo
 *
 *     var arrays = {
 *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),
 *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),
 *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),
 *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),
 *     };
 *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);
 *
 *  And you want to dynamically update the positions. You could do this
 *
 *     // assuming arrays.position has already been updated with new data.
 *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);
 *
 * @param {WebGLRenderingContext} gl
 * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix
 *   the name of the attribute will include the prefix.
 * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything
 *    else will have to be converted to a typed array before it can be used by WebGL. During init time that
 *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.
 * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer
 *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`
 *    for the portion of the array you want to use.
 *
 *        var someArray = new Float32Array(1000); // an array with 1000 floats
 *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray
 *
 *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`
 * @memberOf module:twgl/attributes
 */
function setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {
  array = makeTypedArray(array);
  if (offset !== undefined) {
    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);
    gl.bufferSubData(ARRAY_BUFFER, offset, array);
  } else {
    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);
  }
}

function getBytesPerValueForGLType(gl, type) {
  if (type === BYTE$1)           return 1;  // eslint-disable-line
  if (type === UNSIGNED_BYTE$1)  return 1;  // eslint-disable-line
  if (type === SHORT$1)          return 2;  // eslint-disable-line
  if (type === UNSIGNED_SHORT$1) return 2;  // eslint-disable-line
  if (type === INT$1)            return 4;  // eslint-disable-line
  if (type === UNSIGNED_INT$1)   return 4;  // eslint-disable-line
  if (type === FLOAT$1)          return 4;  // eslint-disable-line
  return 0;
}

// Tries to get the number of elements from a set of arrays.
const positionKeys = ['position', 'positions', 'a_position'];
function getNumElementsFromNonIndexedArrays(arrays) {
  let key;
  let ii;
  for (ii = 0; ii < positionKeys.length; ++ii) {
    key = positionKeys[ii];
    if (key in arrays) {
      break;
    }
  }
  if (ii === positionKeys.length) {
    key = Object.keys(arrays)[0];
  }
  const array = arrays[key];
  const length = getArray(array).length;
  const numComponents = getNumComponents(array, key);
  const numElements = length / numComponents;
  if (length % numComponents > 0) {
    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);
  }
  return numElements;
}

function getNumElementsFromAttributes(gl, attribs) {
  let key;
  let ii;
  for (ii = 0; ii < positionKeys.length; ++ii) {
    key = positionKeys[ii];
    if (key in attribs) {
      break;
    }
    key = defaults.attribPrefix + key;
    if (key in attribs) {
      break;
    }
  }
  if (ii === positionKeys.length) {
    key = Object.keys(attribs)[0];
  }
  const attrib = attribs[key];
  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);
  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);
  gl.bindBuffer(ARRAY_BUFFER, null);

  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);
  const totalElements = numBytes / bytesPerValue;
  const numComponents = attrib.numComponents || attrib.size;
  // TODO: check stride
  const numElements = totalElements / numComponents;
  if (numElements % 1 !== 0) {
    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);
  }
  return numElements;
}

/**
 * @typedef {Object} BufferInfo
 * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.
 * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..
 * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.
 * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`
 * @memberOf module:twgl
 */

/**
 * Creates a BufferInfo from an object of arrays.
 *
 * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to
 * {@link module:twgl:drawBufferInfo}.
 *
 * Given an object like
 *
 *     var arrays = {
 *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
 *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
 *     };
 *
 *  Creates an BufferInfo like this
 *
 *     bufferInfo = {
 *       numElements: 4,        // or whatever the number of elements is
 *       indices: WebGLBuffer,  // this property will not exist if there are no indices
 *       attribs: {
 *         position: { buffer: WebGLBuffer, numComponents: 3, },
 *         normal:   { buffer: WebGLBuffer, numComponents: 3, },
 *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },
 *       },
 *     };
 *
 *  The properties of arrays can be JavaScript arrays in which case the number of components
 *  will be guessed.
 *
 *     var arrays = {
 *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],
 *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],
 *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
 *        indices:  [0, 1, 2, 1, 2, 3],
 *     };
 *
 *  They can also be TypedArrays
 *
 *     var arrays = {
 *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),
 *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),
 *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),
 *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),
 *     };
 *
 *  Or AugmentedTypedArrays
 *
 *     var positions = createAugmentedTypedArray(3, 4);
 *     var texcoords = createAugmentedTypedArray(2, 4);
 *     var normals   = createAugmentedTypedArray(3, 4);
 *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);
 *
 *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);
 *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);
 *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);
 *     indices.push([0, 1, 2, 1, 2, 3]);
 *
 *     var arrays = {
 *        position: positions,
 *        texcoord: texcoords,
 *        normal:   normals,
 *        indices:  indices,
 *     };
 *
 * For the last example it is equivalent to
 *
 *     var bufferInfo = {
 *       attribs: {
 *         position: { numComponents: 3, buffer: gl.createBuffer(), },
 *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },
 *         normal: { numComponents: 3, buffer: gl.createBuffer(), },
 *       },
 *       indices: gl.createBuffer(),
 *       numElements: 6,
 *     };
 *
 *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);
 *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);
 *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);
 *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);
 *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);
 *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);
 *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);
 *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {module:twgl.Arrays} arrays Your data
 * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing
 *        buffer info to start from. WebGLBuffers etc specified
 *        in the srcBufferInfo will be used in a new BufferInfo
 *        with any arrays specified overriding the ones in
 *        srcBufferInfo.
 * @return {module:twgl.BufferInfo} A BufferInfo
 * @memberOf module:twgl/attributes
 */
function createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {
  const newAttribs = createAttribsFromArrays(gl, arrays);
  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});
  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);
  const indices = arrays.indices;
  if (indices) {
    const newIndices = makeTypedArray(indices, "indices");
    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);
    bufferInfo.numElements = newIndices.length;
    bufferInfo.elementType = getGLTypeForTypedArray(newIndices);
  } else if (!bufferInfo.numElements) {
    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);
  }

  return bufferInfo;
}

/**
 * Creates a buffer from an array, typed array, or array spec
 *
 * Given something like this
 *
 *     [1, 2, 3],
 *
 * or
 *
 *     new Uint16Array([1,2,3]);
 *
 * or
 *
 *     {
 *        data: [1, 2, 3],
 *        type: Uint8Array,
 *     }
 *
 * returns a WebGLBuffer that contains the given data.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
 * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.
 * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.
 * @return {WebGLBuffer} a WebGLBuffer containing the data in array.
 * @memberOf module:twgl/attributes
 */
function createBufferFromArray(gl, array, arrayName) {
  const type = arrayName === "indices" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;
  const typedArray = makeTypedArray(array, arrayName);
  return createBufferFromTypedArray(gl, typedArray, type);
}

/**
 * Creates buffers from arrays or typed arrays
 *
 * Given something like this
 *
 *     var arrays = {
 *        positions: [1, 2, 3],
 *        normals: [0, 0, 1],
 *     }
 *
 * returns something like
 *
 *     buffers = {
 *       positions: WebGLBuffer,
 *       normals: WebGLBuffer,
 *     }
 *
 * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
 * @param {module:twgl.Arrays} arrays
 * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array
 * @memberOf module:twgl/attributes
 */
function createBuffersFromArrays(gl, arrays) {
  const buffers = { };
  Object.keys(arrays).forEach(function(key) {
    buffers[key] = createBufferFromArray(gl, arrays[key], key);
  });

  // Ugh!
  if (arrays.indices) {
    buffers.numElements = arrays.indices.length;
    buffers.elementType = getGLTypeForTypedArray(makeTypedArray(arrays.indices));
  } else {
    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);
  }

  return buffers;
}

var attributes = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createAttribsFromArrays: createAttribsFromArrays,
  createBuffersFromArrays: createBuffersFromArrays,
  createBufferFromArray: createBufferFromArray,
  createBufferFromTypedArray: createBufferFromTypedArray,
  createBufferInfoFromArrays: createBufferInfoFromArrays,
  setAttribInfoBufferFromArray: setAttribInfoBufferFromArray,
  setAttributePrefix: setAttributePrefix,
  setAttributeDefaults_: setDefaults,
  getNumComponents_: getNumComponents,
  getArray_: getArray
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

const getArray$1 = getArray;  // eslint-disable-line
const getNumComponents$1 = getNumComponents;  // eslint-disable-line

/**
 * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray
 */

/**
 * Add `push` to a typed array. It just keeps a 'cursor'
 * and allows use to `push` values into the array so we
 * don't have to manually compute offsets
 * @param {TypedArray} typedArray TypedArray to augment
 * @param {number} numComponents number of components.
 * @private
 */
function augmentTypedArray(typedArray, numComponents) {
  let cursor = 0;
  typedArray.push = function() {
    for (let ii = 0; ii < arguments.length; ++ii) {
      const value = arguments[ii];
      if (value instanceof Array || isArrayBuffer(value)) {
        for (let jj = 0; jj < value.length; ++jj) {
          typedArray[cursor++] = value[jj];
        }
      } else {
        typedArray[cursor++] = value;
      }
    }
  };
  typedArray.reset = function(opt_index) {
    cursor = opt_index || 0;
  };
  typedArray.numComponents = numComponents;
  Object.defineProperty(typedArray, 'numElements', {
    get: function() {
      return this.length / this.numComponents | 0;
    },
  });
  return typedArray;
}

/**
 * creates a typed array with a `push` function attached
 * so that you can easily *push* values.
 *
 * `push` can take multiple arguments. If an argument is an array each element
 * of the array will be added to the typed array.
 *
 * Example:
 *
 *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values
 *     array.push(1, 2, 3);
 *     array.push([4, 5, 6]);
 *     // array now contains [1, 2, 3, 4, 5, 6]
 *
 * Also has `numComponents` and `numElements` properties.
 *
 * @param {number} numComponents number of components
 * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.
 * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.
 * @return {ArrayBufferView} A typed array.
 * @memberOf module:twgl/primitives
 */
function createAugmentedTypedArray(numComponents, numElements, opt_type) {
  const Type = opt_type || Float32Array;
  return augmentTypedArray(new Type(numComponents * numElements), numComponents);
}

function allButIndices(name) {
  return name !== "indices";
}

/**
 * Given indexed vertices creates a new set of vertices un-indexed by expanding the indexed vertices.
 * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex
 * @return {Object.<string, TypedArray>} The deindexed vertices
 * @memberOf module:twgl/primitives
 */
function deindexVertices(vertices) {
  const indices = vertices.indices;
  const newVertices = {};
  const numElements = indices.length;

  function expandToUnindexed(channel) {
    const srcBuffer = vertices[channel];
    const numComponents = srcBuffer.numComponents;
    const dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);
    for (let ii = 0; ii < numElements; ++ii) {
      const ndx = indices[ii];
      const offset = ndx * numComponents;
      for (let jj = 0; jj < numComponents; ++jj) {
        dstBuffer.push(srcBuffer[offset + jj]);
      }
    }
    newVertices[channel] = dstBuffer;
  }

  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);

  return newVertices;
}

/**
 * flattens the normals of deindexed vertices in place.
 * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten
 * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)
 * @memberOf module:twgl/primitives
 */
function flattenNormals(vertices) {
  if (vertices.indices) {
    throw new Error('can not flatten normals of indexed vertices. deindex them first');
  }

  const normals = vertices.normal;
  const numNormals = normals.length;
  for (let ii = 0; ii < numNormals; ii += 9) {
    // pull out the 3 normals for this triangle
    const nax = normals[ii + 0];
    const nay = normals[ii + 1];
    const naz = normals[ii + 2];

    const nbx = normals[ii + 3];
    const nby = normals[ii + 4];
    const nbz = normals[ii + 5];

    const ncx = normals[ii + 6];
    const ncy = normals[ii + 7];
    const ncz = normals[ii + 8];

    // add them
    let nx = nax + nbx + ncx;
    let ny = nay + nby + ncy;
    let nz = naz + nbz + ncz;

    // normalize them
    const length = Math.sqrt(nx * nx + ny * ny + nz * nz);

    nx /= length;
    ny /= length;
    nz /= length;

    // copy them back in
    normals[ii + 0] = nx;
    normals[ii + 1] = ny;
    normals[ii + 2] = nz;

    normals[ii + 3] = nx;
    normals[ii + 4] = ny;
    normals[ii + 5] = nz;

    normals[ii + 6] = nx;
    normals[ii + 7] = ny;
    normals[ii + 8] = nz;
  }

  return vertices;
}

function applyFuncToV3Array(array, matrix, fn) {
  const len = array.length;
  const tmp = new Float32Array(3);
  for (let ii = 0; ii < len; ii += 3) {
    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);
    array[ii    ] = tmp[0];
    array[ii + 1] = tmp[1];
    array[ii + 2] = tmp[2];
  }
}

function transformNormal$1(mi, v, dst) {
  dst = dst || create();
  const v0 = v[0];
  const v1 = v[1];
  const v2 = v[2];

  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];
  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];
  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];

  return dst;
}

/**
 * Reorients directions by the given matrix..
 * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.
 * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.
 * @return {(number[]|TypedArray)} the same array that was passed in
 * @memberOf module:twgl/primitives
 */
function reorientDirections(array, matrix) {
  applyFuncToV3Array(array, matrix, transformDirection);
  return array;
}

/**
 * Reorients normals by the inverse-transpose of the given
 * matrix..
 * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.
 * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.
 * @return {(number[]|TypedArray)} the same array that was passed in
 * @memberOf module:twgl/primitives
 */
function reorientNormals(array, matrix) {
  applyFuncToV3Array(array, inverse(matrix), transformNormal$1);
  return array;
}

/**
 * Reorients positions by the given matrix. In other words, it
 * multiplies each vertex by the given matrix.
 * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.
 * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.
 * @return {(number[]|TypedArray)} the same array that was passed in
 * @memberOf module:twgl/primitives
 */
function reorientPositions(array, matrix) {
  applyFuncToV3Array(array, matrix, transformPoint);
  return array;
}

/**
 * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray
 */

/**
 * Reorients arrays by the given matrix. Assumes arrays have
 * names that contains 'pos' could be reoriented as positions,
 * 'binorm' or 'tan' as directions, and 'norm' as normals.
 *
 * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient
 * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.
 * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.
 * @memberOf module:twgl/primitives
 */
function reorientVertices(arrays, matrix) {
  Object.keys(arrays).forEach(function(name) {
    const array = arrays[name];
    if (name.indexOf("pos") >= 0) {
      reorientPositions(array, matrix);
    } else if (name.indexOf("tan") >= 0 || name.indexOf("binorm") >= 0) {
      reorientDirections(array, matrix);
    } else if (name.indexOf("norm") >= 0) {
      reorientNormals(array, matrix);
    }
  });
  return arrays;
}

/**
 * Creates XY quad BufferInfo
 *
 * The default with no parameters will return a 2x2 quad with values from -1 to +1.
 * If you want a unit quad with that goes from 0 to 1 you'd call it with
 *
 *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);
 *
 * If you want a unit quad centered above 0,0 you'd call it with
 *
 *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
 * @param {number} [xOffset] the amount to offset the quad in X
 * @param {number} [yOffset] the amount to offset the quad in Y
 * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo
 * @memberOf module:twgl/primitives
 * @function createXYQuadBuffers
 */

/**
 * Creates XY quad Buffers
 *
 * The default with no parameters will return a 2x2 quad with values from -1 to +1.
 * If you want a unit quad with that goes from 0 to 1 you'd call it with
 *
 *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);
 *
 * If you want a unit quad centered above 0,0 you'd call it with
 *
 *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
 * @param {number} [xOffset] the amount to offset the quad in X
 * @param {number} [yOffset] the amount to offset the quad in Y
 * @return {module:twgl.BufferInfo} the created XY Quad buffers
 * @memberOf module:twgl/primitives
 * @function createXYQuadBufferInfo
 */

/**
 * Creates XY quad vertices
 *
 * The default with no parameters will return a 2x2 quad with values from -1 to +1.
 * If you want a unit quad with that goes from 0 to 1 you'd call it with
 *
 *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);
 *
 * If you want a unit quad centered above 0,0 you'd call it with
 *
 *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);
 *
 * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
 * @param {number} [xOffset] the amount to offset the quad in X
 * @param {number} [yOffset] the amount to offset the quad in Y
 * @return {Object.<string, TypedArray>} the created XY Quad vertices
 * @memberOf module:twgl/primitives
 */
function createXYQuadVertices(size, xOffset, yOffset) {
  size = size || 2;
  xOffset = xOffset || 0;
  yOffset = yOffset || 0;
  size *= 0.5;
  return {
    position: {
      numComponents: 2,
      data: [
        xOffset + -1 * size, yOffset + -1 * size,
        xOffset +  1 * size, yOffset + -1 * size,
        xOffset + -1 * size, yOffset +  1 * size,
        xOffset +  1 * size, yOffset +  1 * size,
      ],
    },
    normal: [
      0, 0, 1,
      0, 0, 1,
      0, 0, 1,
      0, 0, 1,
    ],
    texcoord: [
      0, 0,
      1, 0,
      0, 1,
      1, 1,
    ],
    indices: [ 0, 1, 2, 2, 1, 3 ],
  };
}

/**
 * Creates XZ plane BufferInfo.
 *
 * The created plane has position, normal, and texcoord data
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [width] Width of the plane. Default = 1
 * @param {number} [depth] Depth of the plane. Default = 1
 * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
 * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
 * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.
 * @return {module:twgl.BufferInfo} The created plane BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createPlaneBufferInfo
 */

/**
 * Creates XZ plane buffers.
 *
 * The created plane has position, normal, and texcoord data
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [width] Width of the plane. Default = 1
 * @param {number} [depth] Depth of the plane. Default = 1
 * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
 * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
 * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.
 * @return {Object.<string, WebGLBuffer>} The created plane buffers.
 * @memberOf module:twgl/primitives
 * @function createPlaneBuffers
 */

/**
 * Creates XZ plane vertices.
 *
 * The created plane has position, normal, and texcoord data
 *
 * @param {number} [width] Width of the plane. Default = 1
 * @param {number} [depth] Depth of the plane. Default = 1
 * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
 * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
 * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.
 * @return {Object.<string, TypedArray>} The created plane vertices.
 * @memberOf module:twgl/primitives
 */
function createPlaneVertices(
    width,
    depth,
    subdivisionsWidth,
    subdivisionsDepth,
    matrix) {
  width = width || 1;
  depth = depth || 1;
  subdivisionsWidth = subdivisionsWidth || 1;
  subdivisionsDepth = subdivisionsDepth || 1;
  matrix = matrix || identity();

  const numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);
  const positions = createAugmentedTypedArray(3, numVertices);
  const normals = createAugmentedTypedArray(3, numVertices);
  const texcoords = createAugmentedTypedArray(2, numVertices);

  for (let z = 0; z <= subdivisionsDepth; z++) {
    for (let x = 0; x <= subdivisionsWidth; x++) {
      const u = x / subdivisionsWidth;
      const v = z / subdivisionsDepth;
      positions.push(
          width * u - width * 0.5,
          0,
          depth * v - depth * 0.5);
      normals.push(0, 1, 0);
      texcoords.push(u, v);
    }
  }

  const numVertsAcross = subdivisionsWidth + 1;
  const indices = createAugmentedTypedArray(
      3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);

  for (let z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line
    for (let x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line
      // Make triangle 1 of quad.
      indices.push(
          (z + 0) * numVertsAcross + x,
          (z + 1) * numVertsAcross + x,
          (z + 0) * numVertsAcross + x + 1);

      // Make triangle 2 of quad.
      indices.push(
          (z + 1) * numVertsAcross + x,
          (z + 1) * numVertsAcross + x + 1,
          (z + 0) * numVertsAcross + x + 1);
    }
  }

  const arrays = reorientVertices({
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices,
  }, matrix);
  return arrays;
}

/**
 * Creates sphere BufferInfo.
 *
 * The created sphere has position, normal, and texcoord data
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius radius of the sphere.
 * @param {number} subdivisionsAxis number of steps around the sphere.
 * @param {number} subdivisionsHeight number of vertically on the sphere.
 * @param {number} [opt_startLatitudeInRadians] where to start the
 *     top of the sphere. Default = 0.
 * @param {number} [opt_endLatitudeInRadians] Where to end the
 *     bottom of the sphere. Default = Math.PI.
 * @param {number} [opt_startLongitudeInRadians] where to start
 *     wrapping the sphere. Default = 0.
 * @param {number} [opt_endLongitudeInRadians] where to end
 *     wrapping the sphere. Default = 2 * Math.PI.
 * @return {module:twgl.BufferInfo} The created sphere BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createSphereBufferInfo
 */

/**
 * Creates sphere buffers.
 *
 * The created sphere has position, normal, and texcoord data
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius radius of the sphere.
 * @param {number} subdivisionsAxis number of steps around the sphere.
 * @param {number} subdivisionsHeight number of vertically on the sphere.
 * @param {number} [opt_startLatitudeInRadians] where to start the
 *     top of the sphere. Default = 0.
 * @param {number} [opt_endLatitudeInRadians] Where to end the
 *     bottom of the sphere. Default = Math.PI.
 * @param {number} [opt_startLongitudeInRadians] where to start
 *     wrapping the sphere. Default = 0.
 * @param {number} [opt_endLongitudeInRadians] where to end
 *     wrapping the sphere. Default = 2 * Math.PI.
 * @return {Object.<string, WebGLBuffer>} The created sphere buffers.
 * @memberOf module:twgl/primitives
 * @function createSphereBuffers
 */

/**
 * Creates sphere vertices.
 *
 * The created sphere has position, normal, and texcoord data
 *
 * @param {number} radius radius of the sphere.
 * @param {number} subdivisionsAxis number of steps around the sphere.
 * @param {number} subdivisionsHeight number of vertically on the sphere.
 * @param {number} [opt_startLatitudeInRadians] where to start the
 *     top of the sphere. Default = 0.
 * @param {number} [opt_endLatitudeInRadians] Where to end the
 *     bottom of the sphere. Default = Math.PI.
 * @param {number} [opt_startLongitudeInRadians] where to start
 *     wrapping the sphere. Default = 0.
 * @param {number} [opt_endLongitudeInRadians] where to end
 *     wrapping the sphere. Default = 2 * Math.PI.
 * @return {Object.<string, TypedArray>} The created sphere vertices.
 * @memberOf module:twgl/primitives
 */
function createSphereVertices(
    radius,
    subdivisionsAxis,
    subdivisionsHeight,
    opt_startLatitudeInRadians,
    opt_endLatitudeInRadians,
    opt_startLongitudeInRadians,
    opt_endLongitudeInRadians) {
  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {
    throw new Error('subdivisionAxis and subdivisionHeight must be > 0');
  }

  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;
  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;
  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;
  opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);

  const latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;
  const longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;

  // We are going to generate our sphere by iterating through its
  // spherical coordinates and generating 2 triangles for each quad on a
  // ring of the sphere.
  const numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);
  const positions = createAugmentedTypedArray(3, numVertices);
  const normals   = createAugmentedTypedArray(3, numVertices);
  const texcoords = createAugmentedTypedArray(2, numVertices);

  // Generate the individual vertices in our vertex buffer.
  for (let y = 0; y <= subdivisionsHeight; y++) {
    for (let x = 0; x <= subdivisionsAxis; x++) {
      // Generate a vertex based on its spherical coordinates
      const u = x / subdivisionsAxis;
      const v = y / subdivisionsHeight;
      const theta = longRange * u + opt_startLongitudeInRadians;
      const phi = latRange * v + opt_startLatitudeInRadians;
      const sinTheta = Math.sin(theta);
      const cosTheta = Math.cos(theta);
      const sinPhi = Math.sin(phi);
      const cosPhi = Math.cos(phi);
      const ux = cosTheta * sinPhi;
      const uy = cosPhi;
      const uz = sinTheta * sinPhi;
      positions.push(radius * ux, radius * uy, radius * uz);
      normals.push(ux, uy, uz);
      texcoords.push(1 - u, v);
    }
  }

  const numVertsAround = subdivisionsAxis + 1;
  const indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);
  for (let x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line
    for (let y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line
      // Make triangle 1 of quad.
      indices.push(
          (y + 0) * numVertsAround + x,
          (y + 0) * numVertsAround + x + 1,
          (y + 1) * numVertsAround + x);

      // Make triangle 2 of quad.
      indices.push(
          (y + 1) * numVertsAround + x,
          (y + 0) * numVertsAround + x + 1,
          (y + 1) * numVertsAround + x + 1);
    }
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices,
  };
}

/**
 * Array of the indices of corners of each face of a cube.
 * @type {Array.<number[]>}
 * @private
 */
const CUBE_FACE_INDICES = [
  [3, 7, 5, 1],  // right
  [6, 2, 0, 4],  // left
  [6, 7, 3, 2],  // ??
  [0, 1, 5, 4],  // ??
  [7, 6, 4, 5],  // front
  [2, 3, 1, 0],  // back
];

/**
 * Creates a BufferInfo for a cube.
 *
 * The cube is created around the origin. (-size / 2, size / 2).
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [size] width, height and depth of the cube.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createCubeBufferInfo
 */

/**
 * Creates the buffers and indices for a cube.
 *
 * The cube is created around the origin. (-size / 2, size / 2).
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} [size] width, height and depth of the cube.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createCubeBuffers
 */

/**
 * Creates the vertices and indices for a cube.
 *
 * The cube is created around the origin. (-size / 2, size / 2).
 *
 * @param {number} [size] width, height and depth of the cube.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */
function createCubeVertices(size) {
  size = size || 1;
  const k = size / 2;

  const cornerVertices = [
    [-k, -k, -k],
    [+k, -k, -k],
    [-k, +k, -k],
    [+k, +k, -k],
    [-k, -k, +k],
    [+k, -k, +k],
    [-k, +k, +k],
    [+k, +k, +k],
  ];

  const faceNormals = [
    [+1, +0, +0],
    [-1, +0, +0],
    [+0, +1, +0],
    [+0, -1, +0],
    [+0, +0, +1],
    [+0, +0, -1],
  ];

  const uvCoords = [
    [1, 0],
    [0, 0],
    [0, 1],
    [1, 1],
  ];

  const numVertices = 6 * 4;
  const positions = createAugmentedTypedArray(3, numVertices);
  const normals   = createAugmentedTypedArray(3, numVertices);
  const texcoords = createAugmentedTypedArray(2 , numVertices);
  const indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);

  for (let f = 0; f < 6; ++f) {
    const faceIndices = CUBE_FACE_INDICES[f];
    for (let v = 0; v < 4; ++v) {
      const position = cornerVertices[faceIndices[v]];
      const normal = faceNormals[f];
      const uv = uvCoords[v];

      // Each face needs all four vertices because the normals and texture
      // coordinates are not all the same.
      positions.push(position);
      normals.push(normal);
      texcoords.push(uv);

    }
    // Two triangles make a square face.
    const offset = 4 * f;
    indices.push(offset + 0, offset + 1, offset + 2);
    indices.push(offset + 0, offset + 2, offset + 3);
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices,
  };
}

/**
 * Creates a BufferInfo for a truncated cone, which is like a cylinder
 * except that it has different top and bottom radii. A truncated cone
 * can also be used to create cylinders and regular cones. The
 * truncated cone will be created centered about the origin, with the
 * y axis as its vertical axis.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} bottomRadius Bottom radius of truncated cone.
 * @param {number} topRadius Top radius of truncated cone.
 * @param {number} height Height of truncated cone.
 * @param {number} radialSubdivisions The number of subdivisions around the
 *     truncated cone.
 * @param {number} verticalSubdivisions The number of subdivisions down the
 *     truncated cone.
 * @param {boolean} [opt_topCap] Create top cap. Default = true.
 * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
 * @return {module:twgl.BufferInfo} The created cone BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createTruncatedConeBufferInfo
 */

/**
 * Creates buffers for a truncated cone, which is like a cylinder
 * except that it has different top and bottom radii. A truncated cone
 * can also be used to create cylinders and regular cones. The
 * truncated cone will be created centered about the origin, with the
 * y axis as its vertical axis.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} bottomRadius Bottom radius of truncated cone.
 * @param {number} topRadius Top radius of truncated cone.
 * @param {number} height Height of truncated cone.
 * @param {number} radialSubdivisions The number of subdivisions around the
 *     truncated cone.
 * @param {number} verticalSubdivisions The number of subdivisions down the
 *     truncated cone.
 * @param {boolean} [opt_topCap] Create top cap. Default = true.
 * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
 * @return {Object.<string, WebGLBuffer>} The created cone buffers.
 * @memberOf module:twgl/primitives
 * @function createTruncatedConeBuffers
 */

/**
 * Creates vertices for a truncated cone, which is like a cylinder
 * except that it has different top and bottom radii. A truncated cone
 * can also be used to create cylinders and regular cones. The
 * truncated cone will be created centered about the origin, with the
 * y axis as its vertical axis. .
 *
 * @param {number} bottomRadius Bottom radius of truncated cone.
 * @param {number} topRadius Top radius of truncated cone.
 * @param {number} height Height of truncated cone.
 * @param {number} radialSubdivisions The number of subdivisions around the
 *     truncated cone.
 * @param {number} verticalSubdivisions The number of subdivisions down the
 *     truncated cone.
 * @param {boolean} [opt_topCap] Create top cap. Default = true.
 * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
 * @return {Object.<string, TypedArray>} The created cone vertices.
 * @memberOf module:twgl/primitives
 */
function createTruncatedConeVertices(
    bottomRadius,
    topRadius,
    height,
    radialSubdivisions,
    verticalSubdivisions,
    opt_topCap,
    opt_bottomCap) {
  if (radialSubdivisions < 3) {
    throw new Error('radialSubdivisions must be 3 or greater');
  }

  if (verticalSubdivisions < 1) {
    throw new Error('verticalSubdivisions must be 1 or greater');
  }

  const topCap = (opt_topCap === undefined) ? true : opt_topCap;
  const bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;

  const extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);

  const numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);
  const positions = createAugmentedTypedArray(3, numVertices);
  const normals   = createAugmentedTypedArray(3, numVertices);
  const texcoords = createAugmentedTypedArray(2, numVertices);
  const indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra / 2) * 2, Uint16Array);

  const vertsAroundEdge = radialSubdivisions + 1;

  // The slant of the cone is constant across its surface
  const slant = Math.atan2(bottomRadius - topRadius, height);
  const cosSlant = Math.cos(slant);
  const sinSlant = Math.sin(slant);

  const start = topCap ? -2 : 0;
  const end = verticalSubdivisions + (bottomCap ? 2 : 0);

  for (let yy = start; yy <= end; ++yy) {
    let v = yy / verticalSubdivisions;
    let y = height * v;
    let ringRadius;
    if (yy < 0) {
      y = 0;
      v = 1;
      ringRadius = bottomRadius;
    } else if (yy > verticalSubdivisions) {
      y = height;
      v = 1;
      ringRadius = topRadius;
    } else {
      ringRadius = bottomRadius +
        (topRadius - bottomRadius) * (yy / verticalSubdivisions);
    }
    if (yy === -2 || yy === verticalSubdivisions + 2) {
      ringRadius = 0;
      v = 0;
    }
    y -= height / 2;
    for (let ii = 0; ii < vertsAroundEdge; ++ii) {
      const sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);
      const cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);
      positions.push(sin * ringRadius, y, cos * ringRadius);
      if (yy < 0) {
        normals.push(0, -1, 0);
      } else if (yy > verticalSubdivisions) {
        normals.push(0, 1, 0);
      } else if (ringRadius === 0.0) {
        normals.push(0, 0, 0);
      } else {
        normals.push(sin * cosSlant, sinSlant, cos * cosSlant);
      }
      texcoords.push((ii / radialSubdivisions), 1 - v);
    }
  }

  for (let yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line
    if (yy === 1 && topCap || yy === verticalSubdivisions + extra - 2 && bottomCap) {
      continue;
    }
    for (let ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line
      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,
                   vertsAroundEdge * (yy + 0) + 1 + ii,
                   vertsAroundEdge * (yy + 1) + 1 + ii);
      indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,
                   vertsAroundEdge * (yy + 1) + 1 + ii,
                   vertsAroundEdge * (yy + 1) + 0 + ii);
    }
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices,
  };
}

/**
 * Expands RLE data
 * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z
 * @param {number[]} [padding] value to add each entry with.
 * @return {number[]} the expanded rleData
 * @private
 */
function expandRLEData(rleData, padding) {
  padding = padding || [];
  const data = [];
  for (let ii = 0; ii < rleData.length; ii += 4) {
    const runLength = rleData[ii];
    const element = rleData.slice(ii + 1, ii + 4);
    element.push.apply(element, padding);
    for (let jj = 0; jj < runLength; ++jj) {
      data.push.apply(data, element);
    }
  }
  return data;
}

/**
 * Creates 3D 'F' BufferInfo.
 * An 'F' is useful because you can easily tell which way it is oriented.
 * The created 'F' has position, normal, texcoord, and color buffers.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function create3DFBufferInfo
 */

/**
 * Creates 3D 'F' buffers.
 * An 'F' is useful because you can easily tell which way it is oriented.
 * The created 'F' has position, normal, texcoord, and color buffers.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function create3DFBuffers
 */

/**
 * Creates 3D 'F' vertices.
 * An 'F' is useful because you can easily tell which way it is oriented.
 * The created 'F' has position, normal, texcoord, and color arrays.
 *
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */
function create3DFVertices() {

  const positions = [
    // left column front
    0,   0,  0,
    0, 150,  0,
    30,   0,  0,
    0, 150,  0,
    30, 150,  0,
    30,   0,  0,

    // top rung front
    30,   0,  0,
    30,  30,  0,
    100,   0,  0,
    30,  30,  0,
    100,  30,  0,
    100,   0,  0,

    // middle rung front
    30,  60,  0,
    30,  90,  0,
    67,  60,  0,
    30,  90,  0,
    67,  90,  0,
    67,  60,  0,

    // left column back
      0,   0,  30,
     30,   0,  30,
      0, 150,  30,
      0, 150,  30,
     30,   0,  30,
     30, 150,  30,

    // top rung back
     30,   0,  30,
    100,   0,  30,
     30,  30,  30,
     30,  30,  30,
    100,   0,  30,
    100,  30,  30,

    // middle rung back
     30,  60,  30,
     67,  60,  30,
     30,  90,  30,
     30,  90,  30,
     67,  60,  30,
     67,  90,  30,

    // top
      0,   0,   0,
    100,   0,   0,
    100,   0,  30,
      0,   0,   0,
    100,   0,  30,
      0,   0,  30,

    // top rung front
    100,   0,   0,
    100,  30,   0,
    100,  30,  30,
    100,   0,   0,
    100,  30,  30,
    100,   0,  30,

    // under top rung
    30,   30,   0,
    30,   30,  30,
    100,  30,  30,
    30,   30,   0,
    100,  30,  30,
    100,  30,   0,

    // between top rung and middle
    30,   30,   0,
    30,   60,  30,
    30,   30,  30,
    30,   30,   0,
    30,   60,   0,
    30,   60,  30,

    // top of middle rung
    30,   60,   0,
    67,   60,  30,
    30,   60,  30,
    30,   60,   0,
    67,   60,   0,
    67,   60,  30,

    // front of middle rung
    67,   60,   0,
    67,   90,  30,
    67,   60,  30,
    67,   60,   0,
    67,   90,   0,
    67,   90,  30,

    // bottom of middle rung.
    30,   90,   0,
    30,   90,  30,
    67,   90,  30,
    30,   90,   0,
    67,   90,  30,
    67,   90,   0,

    // front of bottom
    30,   90,   0,
    30,  150,  30,
    30,   90,  30,
    30,   90,   0,
    30,  150,   0,
    30,  150,  30,

    // bottom
    0,   150,   0,
    0,   150,  30,
    30,  150,  30,
    0,   150,   0,
    30,  150,  30,
    30,  150,   0,

    // left side
    0,   0,   0,
    0,   0,  30,
    0, 150,  30,
    0,   0,   0,
    0, 150,  30,
    0, 150,   0,
  ];

  const texcoords = [
    // left column front
    0.22, 0.19,
    0.22, 0.79,
    0.34, 0.19,
    0.22, 0.79,
    0.34, 0.79,
    0.34, 0.19,

    // top rung front
    0.34, 0.19,
    0.34, 0.31,
    0.62, 0.19,
    0.34, 0.31,
    0.62, 0.31,
    0.62, 0.19,

    // middle rung front
    0.34, 0.43,
    0.34, 0.55,
    0.49, 0.43,
    0.34, 0.55,
    0.49, 0.55,
    0.49, 0.43,

    // left column back
    0, 0,
    1, 0,
    0, 1,
    0, 1,
    1, 0,
    1, 1,

    // top rung back
    0, 0,
    1, 0,
    0, 1,
    0, 1,
    1, 0,
    1, 1,

    // middle rung back
    0, 0,
    1, 0,
    0, 1,
    0, 1,
    1, 0,
    1, 1,

    // top
    0, 0,
    1, 0,
    1, 1,
    0, 0,
    1, 1,
    0, 1,

    // top rung front
    0, 0,
    1, 0,
    1, 1,
    0, 0,
    1, 1,
    0, 1,

    // under top rung
    0, 0,
    0, 1,
    1, 1,
    0, 0,
    1, 1,
    1, 0,

    // between top rung and middle
    0, 0,
    1, 1,
    0, 1,
    0, 0,
    1, 0,
    1, 1,

    // top of middle rung
    0, 0,
    1, 1,
    0, 1,
    0, 0,
    1, 0,
    1, 1,

    // front of middle rung
    0, 0,
    1, 1,
    0, 1,
    0, 0,
    1, 0,
    1, 1,

    // bottom of middle rung.
    0, 0,
    0, 1,
    1, 1,
    0, 0,
    1, 1,
    1, 0,

    // front of bottom
    0, 0,
    1, 1,
    0, 1,
    0, 0,
    1, 0,
    1, 1,

    // bottom
    0, 0,
    0, 1,
    1, 1,
    0, 0,
    1, 1,
    1, 0,

    // left side
    0, 0,
    0, 1,
    1, 1,
    0, 0,
    1, 1,
    1, 0,
  ];

  const normals = expandRLEData([
    // left column front
    // top rung front
    // middle rung front
    18, 0, 0, 1,

    // left column back
    // top rung back
    // middle rung back
    18, 0, 0, -1,

    // top
    6, 0, 1, 0,

    // top rung front
    6, 1, 0, 0,

    // under top rung
    6, 0, -1, 0,

    // between top rung and middle
    6, 1, 0, 0,

    // top of middle rung
    6, 0, 1, 0,

    // front of middle rung
    6, 1, 0, 0,

    // bottom of middle rung.
    6, 0, -1, 0,

    // front of bottom
    6, 1, 0, 0,

    // bottom
    6, 0, -1, 0,

    // left side
    6, -1, 0, 0,
  ]);

  const colors = expandRLEData([
        // left column front
        // top rung front
        // middle rung front
      18, 200,  70, 120,

        // left column back
        // top rung back
        // middle rung back
      18, 80, 70, 200,

        // top
      6, 70, 200, 210,

        // top rung front
      6, 200, 200, 70,

        // under top rung
      6, 210, 100, 70,

        // between top rung and middle
      6, 210, 160, 70,

        // top of middle rung
      6, 70, 180, 210,

        // front of middle rung
      6, 100, 70, 210,

        // bottom of middle rung.
      6, 76, 210, 100,

        // front of bottom
      6, 140, 210, 80,

        // bottom
      6, 90, 130, 110,

        // left side
      6, 160, 160, 220,
  ], [255]);

  const numVerts = positions.length / 3;

  const arrays = {
    position: createAugmentedTypedArray(3, numVerts),
    texcoord: createAugmentedTypedArray(2,  numVerts),
    normal: createAugmentedTypedArray(3, numVerts),
    color: createAugmentedTypedArray(4, numVerts, Uint8Array),
    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),
  };

  arrays.position.push(positions);
  arrays.texcoord.push(texcoords);
  arrays.normal.push(normals);
  arrays.color.push(colors);

  for (let ii = 0; ii < numVerts; ++ii) {
    arrays.indices.push(ii);
  }

  return arrays;
}

/**
 * Creates crescent BufferInfo.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} verticalRadius The vertical radius of the crescent.
 * @param {number} outerRadius The outer radius of the crescent.
 * @param {number} innerRadius The inner radius of the crescent.
 * @param {number} thickness The thickness of the crescent.
 * @param {number} subdivisionsDown number of steps around the crescent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createCresentBufferInfo
 */

/**
 * Creates crescent buffers.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} verticalRadius The vertical radius of the crescent.
 * @param {number} outerRadius The outer radius of the crescent.
 * @param {number} innerRadius The inner radius of the crescent.
 * @param {number} thickness The thickness of the crescent.
 * @param {number} subdivisionsDown number of steps around the crescent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createCresentBuffers
 */

/**
 * Creates crescent vertices.
 *
 * @param {number} verticalRadius The vertical radius of the crescent.
 * @param {number} outerRadius The outer radius of the crescent.
 * @param {number} innerRadius The inner radius of the crescent.
 * @param {number} thickness The thickness of the crescent.
 * @param {number} subdivisionsDown number of steps around the crescent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 * @function createCresentBuffers
 */

/**
 * Creates crescent BufferInfo.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} verticalRadius The vertical radius of the crescent.
 * @param {number} outerRadius The outer radius of the crescent.
 * @param {number} innerRadius The inner radius of the crescent.
 * @param {number} thickness The thickness of the crescent.
 * @param {number} subdivisionsDown number of steps around the crescent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createCrescentBufferInfo
 */

/**
 * Creates crescent buffers.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} verticalRadius The vertical radius of the crescent.
 * @param {number} outerRadius The outer radius of the crescent.
 * @param {number} innerRadius The inner radius of the crescent.
 * @param {number} thickness The thickness of the crescent.
 * @param {number} subdivisionsDown number of steps around the crescent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createCrescentBuffers
 */

/**
 * Creates crescent vertices.
 *
 * @param {number} verticalRadius The vertical radius of the crescent.
 * @param {number} outerRadius The outer radius of the crescent.
 * @param {number} innerRadius The inner radius of the crescent.
 * @param {number} thickness The thickness of the crescent.
 * @param {number} subdivisionsDown number of steps around the crescent.
 * @param {number} [startOffset] Where to start arc. Default 0.
 * @param {number} [endOffset] Where to end arg. Default 1.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */
 function createCrescentVertices(
    verticalRadius,
    outerRadius,
    innerRadius,
    thickness,
    subdivisionsDown,
    startOffset,
    endOffset) {
  if (subdivisionsDown <= 0) {
    throw new Error('subdivisionDown must be > 0');
  }

  startOffset = startOffset || 0;
  endOffset   = endOffset || 1;

  const subdivisionsThick = 2;

  const offsetRange = endOffset - startOffset;
  const numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);
  const positions   = createAugmentedTypedArray(3, numVertices);
  const normals     = createAugmentedTypedArray(3, numVertices);
  const texcoords   = createAugmentedTypedArray(2, numVertices);

  function lerp(a, b, s) {
    return a + (b - a) * s;
  }

  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {
    for (let z = 0; z <= subdivisionsDown; z++) {
      const uBack = x / (subdivisionsThick - 1);
      const v = z / subdivisionsDown;
      const xBack = (uBack - 0.5) * 2;
      const angle = (startOffset + (v * offsetRange)) * Math.PI;
      const s = Math.sin(angle);
      const c = Math.cos(angle);
      const radius = lerp(verticalRadius, arcRadius, s);
      const px = xBack * thickness;
      const py = c * verticalRadius;
      const pz = s * radius;
      positions.push(px, py, pz);
      const n = add(multiply([0, s, c], normalMult), normalAdd);
      normals.push(n);
      texcoords.push(uBack * uMult + uAdd, v);
    }
  }

  // Generate the individual vertices in our vertex buffer.
  for (let x = 0; x < subdivisionsThick; x++) {
    const uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;
    createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);
    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);
    createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);
    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);
  }

  // Do outer surface.
  const indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);

  function createSurface(leftArcOffset, rightArcOffset) {
    for (let z = 0; z < subdivisionsDown; ++z) {
      // Make triangle 1 of quad.
      indices.push(
          leftArcOffset + z + 0,
          leftArcOffset + z + 1,
          rightArcOffset + z + 0);

      // Make triangle 2 of quad.
      indices.push(
          leftArcOffset + z + 1,
          rightArcOffset + z + 1,
          rightArcOffset + z + 0);
    }
  }

  const numVerticesDown = subdivisionsDown + 1;
  // front
  createSurface(numVerticesDown * 0, numVerticesDown * 4);
  // right
  createSurface(numVerticesDown * 5, numVerticesDown * 7);
  // back
  createSurface(numVerticesDown * 6, numVerticesDown * 2);
  // left
  createSurface(numVerticesDown * 3, numVerticesDown * 1);

  return {
    position: positions,
    normal:   normals,
    texcoord: texcoords,
    indices:  indices,
  };
}

/**
 * Creates cylinder BufferInfo. The cylinder will be created around the origin
 * along the y-axis.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius Radius of cylinder.
 * @param {number} height Height of cylinder.
 * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
 * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
 * @param {boolean} [topCap] Create top cap. Default = true.
 * @param {boolean} [bottomCap] Create bottom cap. Default = true.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createCylinderBufferInfo
 */

 /**
  * Creates cylinder buffers. The cylinder will be created around the origin
  * along the y-axis.
  *
  * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
  * @param {number} radius Radius of cylinder.
  * @param {number} height Height of cylinder.
  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
  * @param {boolean} [topCap] Create top cap. Default = true.
  * @param {boolean} [bottomCap] Create bottom cap. Default = true.
  * @return {Object.<string, WebGLBuffer>} The created buffers.
  * @memberOf module:twgl/primitives
  * @function createCylinderBuffers
  */

 /**
  * Creates cylinder vertices. The cylinder will be created around the origin
  * along the y-axis.
  *
  * @param {number} radius Radius of cylinder.
  * @param {number} height Height of cylinder.
  * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
  * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
  * @param {boolean} [topCap] Create top cap. Default = true.
  * @param {boolean} [bottomCap] Create bottom cap. Default = true.
  * @return {Object.<string, TypedArray>} The created vertices.
  * @memberOf module:twgl/primitives
  */
function createCylinderVertices(
    radius,
    height,
    radialSubdivisions,
    verticalSubdivisions,
    topCap,
    bottomCap) {
  return createTruncatedConeVertices(
      radius,
      radius,
      height,
      radialSubdivisions,
      verticalSubdivisions,
      topCap,
      bottomCap);
}

/**
 * Creates BufferInfo for a torus
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius radius of center of torus circle.
 * @param {number} thickness radius of torus ring.
 * @param {number} radialSubdivisions The number of subdivisions around the torus.
 * @param {number} bodySubdivisions The number of subdivisions around the body torus.
 * @param {boolean} [startAngle] start angle in radians. Default = 0.
 * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createTorusBufferInfo
 */

/**
 * Creates buffers for a torus
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius radius of center of torus circle.
 * @param {number} thickness radius of torus ring.
 * @param {number} radialSubdivisions The number of subdivisions around the torus.
 * @param {number} bodySubdivisions The number of subdivisions around the body torus.
 * @param {boolean} [startAngle] start angle in radians. Default = 0.
 * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createTorusBuffers
 */

/**
 * Creates vertices for a torus
 *
 * @param {number} radius radius of center of torus circle.
 * @param {number} thickness radius of torus ring.
 * @param {number} radialSubdivisions The number of subdivisions around the torus.
 * @param {number} bodySubdivisions The number of subdivisions around the body torus.
 * @param {boolean} [startAngle] start angle in radians. Default = 0.
 * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */
function createTorusVertices(
    radius,
    thickness,
    radialSubdivisions,
    bodySubdivisions,
    startAngle,
    endAngle) {
  if (radialSubdivisions < 3) {
    throw new Error('radialSubdivisions must be 3 or greater');
  }

  if (bodySubdivisions < 3) {
    throw new Error('verticalSubdivisions must be 3 or greater');
  }

  startAngle = startAngle || 0;
  endAngle = endAngle || Math.PI * 2;
  const range = endAngle - startAngle;

  const radialParts = radialSubdivisions + 1;
  const bodyParts   = bodySubdivisions + 1;
  const numVertices = radialParts * bodyParts;
  const positions   = createAugmentedTypedArray(3, numVertices);
  const normals     = createAugmentedTypedArray(3, numVertices);
  const texcoords   = createAugmentedTypedArray(2, numVertices);
  const indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);

  for (let slice = 0; slice < bodyParts; ++slice) {
    const v = slice / bodySubdivisions;
    const sliceAngle = v * Math.PI * 2;
    const sliceSin = Math.sin(sliceAngle);
    const ringRadius = radius + sliceSin * thickness;
    const ny = Math.cos(sliceAngle);
    const y = ny * thickness;
    for (let ring = 0; ring < radialParts; ++ring) {
      const u = ring / radialSubdivisions;
      const ringAngle = startAngle + u * range;
      const xSin = Math.sin(ringAngle);
      const zCos = Math.cos(ringAngle);
      const x = xSin * ringRadius;
      const z = zCos * ringRadius;
      const nx = xSin * sliceSin;
      const nz = zCos * sliceSin;
      positions.push(x, y, z);
      normals.push(nx, ny, nz);
      texcoords.push(u, 1 - v);
    }
  }

  for (let slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line
    for (let ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line
      const nextRingIndex  = 1 + ring;
      const nextSliceIndex = 1 + slice;
      indices.push(radialParts * slice          + ring,
                   radialParts * nextSliceIndex + ring,
                   radialParts * slice          + nextRingIndex);
      indices.push(radialParts * nextSliceIndex + ring,
                   radialParts * nextSliceIndex + nextRingIndex,
                   radialParts * slice          + nextRingIndex);
    }
  }

  return {
    position: positions,
    normal:   normals,
    texcoord: texcoords,
    indices:  indices,
  };
}


/**
 * Creates a disc BufferInfo. The disc will be in the xz plane, centered at
 * the origin. When creating, at least 3 divisions, or pie
 * pieces, need to be specified, otherwise the triangles making
 * up the disc will be degenerate. You can also specify the
 * number of radial pieces `stacks`. A value of 1 for
 * stacks will give you a simple disc of pie pieces.  If you
 * want to create an annulus you can set `innerRadius` to a
 * value > 0. Finally, `stackPower` allows you to have the widths
 * increase or decrease as you move away from the center. This
 * is particularly useful when using the disc as a ground plane
 * with a fixed camera such that you don't need the resolution
 * of small triangles near the perimeter. For example, a value
 * of 2 will produce stacks whose outside radius increases with
 * the square of the stack index. A value of 1 will give uniform
 * stacks.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius Radius of the ground plane.
 * @param {number} divisions Number of triangles in the ground plane (at least 3).
 * @param {number} [stacks] Number of radial divisions (default=1).
 * @param {number} [innerRadius] Default 0.
 * @param {number} [stackPower] Power to raise stack size to for decreasing width.
 * @return {module:twgl.BufferInfo} The created BufferInfo.
 * @memberOf module:twgl/primitives
 * @function createDiscBufferInfo
 */

/**
 * Creates disc buffers. The disc will be in the xz plane, centered at
 * the origin. When creating, at least 3 divisions, or pie
 * pieces, need to be specified, otherwise the triangles making
 * up the disc will be degenerate. You can also specify the
 * number of radial pieces `stacks`. A value of 1 for
 * stacks will give you a simple disc of pie pieces.  If you
 * want to create an annulus you can set `innerRadius` to a
 * value > 0. Finally, `stackPower` allows you to have the widths
 * increase or decrease as you move away from the center. This
 * is particularly useful when using the disc as a ground plane
 * with a fixed camera such that you don't need the resolution
 * of small triangles near the perimeter. For example, a value
 * of 2 will produce stacks whose outside radius increases with
 * the square of the stack index. A value of 1 will give uniform
 * stacks.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
 * @param {number} radius Radius of the ground plane.
 * @param {number} divisions Number of triangles in the ground plane (at least 3).
 * @param {number} [stacks] Number of radial divisions (default=1).
 * @param {number} [innerRadius] Default 0.
 * @param {number} [stackPower] Power to raise stack size to for decreasing width.
 * @return {Object.<string, WebGLBuffer>} The created buffers.
 * @memberOf module:twgl/primitives
 * @function createDiscBuffers
 */

/**
 * Creates disc vertices. The disc will be in the xz plane, centered at
 * the origin. When creating, at least 3 divisions, or pie
 * pieces, need to be specified, otherwise the triangles making
 * up the disc will be degenerate. You can also specify the
 * number of radial pieces `stacks`. A value of 1 for
 * stacks will give you a simple disc of pie pieces.  If you
 * want to create an annulus you can set `innerRadius` to a
 * value > 0. Finally, `stackPower` allows you to have the widths
 * increase or decrease as you move away from the center. This
 * is particularly useful when using the disc as a ground plane
 * with a fixed camera such that you don't need the resolution
 * of small triangles near the perimeter. For example, a value
 * of 2 will produce stacks whose outside radius increases with
 * the square of the stack index. A value of 1 will give uniform
 * stacks.
 *
 * @param {number} radius Radius of the ground plane.
 * @param {number} divisions Number of triangles in the ground plane (at least 3).
 * @param {number} [stacks] Number of radial divisions (default=1).
 * @param {number} [innerRadius] Default 0.
 * @param {number} [stackPower] Power to raise stack size to for decreasing width.
 * @return {Object.<string, TypedArray>} The created vertices.
 * @memberOf module:twgl/primitives
 */
function createDiscVertices(
    radius,
    divisions,
    stacks,
    innerRadius,
    stackPower) {
  if (divisions < 3) {
    throw new Error('divisions must be at least 3');
  }

  stacks = stacks ? stacks : 1;
  stackPower = stackPower ? stackPower : 1;
  innerRadius = innerRadius ? innerRadius : 0;

  // Note: We don't share the center vertex because that would
  // mess up texture coordinates.
  const numVertices = (divisions + 1) * (stacks + 1);

  const positions = createAugmentedTypedArray(3, numVertices);
  const normals   = createAugmentedTypedArray(3, numVertices);
  const texcoords = createAugmentedTypedArray(2, numVertices);
  const indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);

  let firstIndex = 0;
  const radiusSpan = radius - innerRadius;
  const pointsPerStack = divisions + 1;

  // Build the disk one stack at a time.
  for (let stack = 0; stack <= stacks; ++stack) {
    const stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);

    for (let i = 0; i <= divisions; ++i) {
      const theta = 2.0 * Math.PI * i / divisions;
      const x = stackRadius * Math.cos(theta);
      const z = stackRadius * Math.sin(theta);

      positions.push(x, 0, z);
      normals.push(0, 1, 0);
      texcoords.push(1 - (i / divisions), stack / stacks);
      if (stack > 0 && i !== divisions) {
        // a, b, c and d are the indices of the vertices of a quad.  unless
        // the current stack is the one closest to the center, in which case
        // the vertices a and b connect to the center vertex.
        const a = firstIndex + (i + 1);
        const b = firstIndex + i;
        const c = firstIndex + i - pointsPerStack;
        const d = firstIndex + (i + 1) - pointsPerStack;

        // Make a quad of the vertices a, b, c, d.
        indices.push(a, b, c);
        indices.push(a, c, d);
      }
    }

    firstIndex += divisions + 1;
  }

  return {
    position: positions,
    normal: normals,
    texcoord: texcoords,
    indices: indices,
  };
}

/**
 * creates a random integer between 0 and range - 1 inclusive.
 * @param {number} range
 * @return {number} random value between 0 and range - 1 inclusive.
 * @private
 */
function randInt(range) {
  return Math.random() * range | 0;
}

/**
 * Used to supply random colors
 * @callback RandomColorFunc
 * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed
 * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha
 * @return {number} a number from 0 to 255
 * @memberOf module:twgl/primitives
 */

/**
 * @typedef {Object} RandomVerticesOptions
 * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices
 * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers
 * @memberOf module:twgl/primitives
 */

/**
 * Creates an augmentedTypedArray of random vertex colors.
 * If the vertices are indexed (have an indices array) then will
 * just make random colors. Otherwise assumes they are triangles
 * and makes one random color for every 3 vertices.
 * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.
 * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.
 * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.
 * @memberOf module:twgl/primitives
 */
function makeRandomVertexColors(vertices, options) {
  options = options || {};
  const numElements = vertices.position.numElements;
  const vColors = createAugmentedTypedArray(4, numElements, Uint8Array);
  const rand = options.rand || function(ndx, channel) {
    return channel < 3 ? randInt(256) : 255;
  };
  vertices.color = vColors;
  if (vertices.indices) {
    // just make random colors if index
    for (let ii = 0; ii < numElements; ++ii) {
      vColors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));
    }
  } else {
    // make random colors per triangle
    const numVertsPerColor = options.vertsPerColor || 3;
    const numSets = numElements / numVertsPerColor;
    for (let ii = 0; ii < numSets; ++ii) {  // eslint-disable-line
      const color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];
      for (let jj = 0; jj < numVertsPerColor; ++jj) {
        vColors.push(color);
      }
    }
  }
  return vertices;
}

/**
 * creates a function that calls fn to create vertices and then
 * creates a buffers for them
 * @private
 */
function createBufferFunc(fn) {
  return function(gl) {
    const arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));
    return createBuffersFromArrays(gl, arrays);
  };
}

/**
 * creates a function that calls fn to create vertices and then
 * creates a bufferInfo object for them
 * @private
 */
function createBufferInfoFunc(fn) {
  return function(gl) {
    const arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));
    return createBufferInfoFromArrays(gl, arrays);
  };
}

const arraySpecPropertyNames = [
  "numComponents",
  "size",
  "type",
  "normalize",
  "stride",
  "offset",
  "attrib",
  "name",
  "attribName",
];

/**
 * Copy elements from one array to another
 *
 * @param {Array|TypedArray} src source array
 * @param {Array|TypedArray} dst dest array
 * @param {number} dstNdx index in dest to copy src
 * @param {number} [offset] offset to add to copied values
 * @private
 */
function copyElements(src, dst, dstNdx, offset) {
  offset = offset || 0;
  const length = src.length;
  for (let ii = 0; ii < length; ++ii) {
    dst[dstNdx + ii] = src[ii] + offset;
  }
}

/**
 * Creates an array of the same time
 *
 * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy
 * @param {number} length size of new array
 * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray
 * @private
 */
function createArrayOfSameType(srcArray, length) {
  const arraySrc = getArray$1(srcArray);
  const newArray = new arraySrc.constructor(length);
  let newArraySpec = newArray;
  // If it appears to have been augmented make new one augmented
  if (arraySrc.numComponents && arraySrc.numElements) {
    augmentTypedArray(newArray, arraySrc.numComponents);
  }
  // If it was a full spec make new one a full spec
  if (srcArray.data) {
    newArraySpec = {
      data: newArray,
    };
    copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);
  }
  return newArraySpec;
}

/**
 * Concatenates sets of vertices
 *
 * Assumes the vertices match in composition. For example
 * if one set of vertices has positions, normals, and indices
 * all sets of vertices must have positions, normals, and indices
 * and of the same type.
 *
 * Example:
 *
 *      const cubeVertices = twgl.primitives.createCubeVertices(2);
 *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);
 *      // move the sphere 2 units up
 *      twgl.primitives.reorientVertices(
 *          sphereVertices, twgl.m4.translation([0, 2, 0]));
 *      // merge the sphere with the cube
 *      const cubeSphereVertices = twgl.primitives.concatVertices(
 *          [cubeVertices, sphereVertices]);
 *      // turn them into WebGL buffers and attrib data
 *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);
 *
 * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices
 * @return {module:twgl.Arrays} The concatenated vertices.
 * @memberOf module:twgl/primitives
 */
function concatVertices(arrayOfArrays) {
  const names = {};
  let baseName;
  // get names of all arrays.
  // and numElements for each set of vertices
  for (let ii = 0; ii < arrayOfArrays.length; ++ii) {
    const arrays = arrayOfArrays[ii];
    Object.keys(arrays).forEach(function(name) {  // eslint-disable-line
      if (!names[name]) {
        names[name] = [];
      }
      if (!baseName && name !== 'indices') {
        baseName = name;
      }
      const arrayInfo = arrays[name];
      const numComponents = getNumComponents$1(arrayInfo, name);
      const array = getArray$1(arrayInfo);
      const numElements = array.length / numComponents;
      names[name].push(numElements);
    });
  }

  // compute length of combined array
  // and return one for reference
  function getLengthOfCombinedArrays(name) {
    let length = 0;
    let arraySpec;
    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {
      const arrays = arrayOfArrays[ii];
      const arrayInfo = arrays[name];
      const array = getArray$1(arrayInfo);
      length += array.length;
      if (!arraySpec || arrayInfo.data) {
        arraySpec = arrayInfo;
      }
    }
    return {
      length: length,
      spec: arraySpec,
    };
  }

  function copyArraysToNewArray(name, base, newArray) {
    let baseIndex = 0;
    let offset = 0;
    for (let ii = 0; ii < arrayOfArrays.length; ++ii) {
      const arrays = arrayOfArrays[ii];
      const arrayInfo = arrays[name];
      const array = getArray$1(arrayInfo);
      if (name === 'indices') {
        copyElements(array, newArray, offset, baseIndex);
        baseIndex += base[ii];
      } else {
        copyElements(array, newArray, offset);
      }
      offset += array.length;
    }
  }

  const base = names[baseName];

  const newArrays = {};
  Object.keys(names).forEach(function(name) {
    const info = getLengthOfCombinedArrays(name);
    const newArraySpec = createArrayOfSameType(info.spec, info.length);
    copyArraysToNewArray(name, base, getArray$1(newArraySpec));
    newArrays[name] = newArraySpec;
  });
  return newArrays;
}

/**
 * Creates a duplicate set of vertices
 *
 * This is useful for calling reorientVertices when you
 * also want to keep the original available
 *
 * @param {module:twgl.Arrays} arrays of vertices
 * @return {module:twgl.Arrays} The duplicated vertices.
 * @memberOf module:twgl/primitives
 */
function duplicateVertices(arrays) {
  const newArrays = {};
  Object.keys(arrays).forEach(function(name) {
    const arraySpec = arrays[name];
    const srcArray = getArray$1(arraySpec);
    const newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);
    copyElements(srcArray, getArray$1(newArraySpec), 0);
    newArrays[name] = newArraySpec;
  });
  return newArrays;
}

const create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);
const create3DFBuffers = createBufferFunc(create3DFVertices);
const createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);
const createCubeBuffers = createBufferFunc(createCubeVertices);
const createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);
const createPlaneBuffers = createBufferFunc(createPlaneVertices);
const createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);
const createSphereBuffers = createBufferFunc(createSphereVertices);
const createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);
const createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);
const createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);
const createXYQuadBuffers = createBufferFunc(createXYQuadVertices);
const createCrescentBufferInfo = createBufferInfoFunc(createCrescentVertices);
const createCrescentBuffers = createBufferFunc(createCrescentVertices);
const createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);
const createCylinderBuffers = createBufferFunc(createCylinderVertices);
const createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);
const createTorusBuffers = createBufferFunc(createTorusVertices);
const createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);
const createDiscBuffers = createBufferFunc(createDiscVertices);

// these were mis-spelled until 4.12
const createCresentBufferInfo = createCrescentBufferInfo;
const createCresentBuffers = createCrescentBuffers;
const createCresentVertices = createCrescentVertices;

var primitives = /*#__PURE__*/Object.freeze({
  __proto__: null,
  create3DFBufferInfo: create3DFBufferInfo,
  create3DFBuffers: create3DFBuffers,
  create3DFVertices: create3DFVertices,
  createAugmentedTypedArray: createAugmentedTypedArray,
  createCubeBufferInfo: createCubeBufferInfo,
  createCubeBuffers: createCubeBuffers,
  createCubeVertices: createCubeVertices,
  createPlaneBufferInfo: createPlaneBufferInfo,
  createPlaneBuffers: createPlaneBuffers,
  createPlaneVertices: createPlaneVertices,
  createSphereBufferInfo: createSphereBufferInfo,
  createSphereBuffers: createSphereBuffers,
  createSphereVertices: createSphereVertices,
  createTruncatedConeBufferInfo: createTruncatedConeBufferInfo,
  createTruncatedConeBuffers: createTruncatedConeBuffers,
  createTruncatedConeVertices: createTruncatedConeVertices,
  createXYQuadBufferInfo: createXYQuadBufferInfo,
  createXYQuadBuffers: createXYQuadBuffers,
  createXYQuadVertices: createXYQuadVertices,
  createCresentBufferInfo: createCresentBufferInfo,
  createCresentBuffers: createCresentBuffers,
  createCresentVertices: createCresentVertices,
  createCrescentBufferInfo: createCrescentBufferInfo,
  createCrescentBuffers: createCrescentBuffers,
  createCrescentVertices: createCrescentVertices,
  createCylinderBufferInfo: createCylinderBufferInfo,
  createCylinderBuffers: createCylinderBuffers,
  createCylinderVertices: createCylinderVertices,
  createTorusBufferInfo: createTorusBufferInfo,
  createTorusBuffers: createTorusBuffers,
  createTorusVertices: createTorusVertices,
  createDiscBufferInfo: createDiscBufferInfo,
  createDiscBuffers: createDiscBuffers,
  createDiscVertices: createDiscVertices,
  deindexVertices: deindexVertices,
  flattenNormals: flattenNormals,
  makeRandomVertexColors: makeRandomVertexColors,
  reorientDirections: reorientDirections,
  reorientNormals: reorientNormals,
  reorientPositions: reorientPositions,
  reorientVertices: reorientVertices,
  concatVertices: concatVertices,
  duplicateVertices: duplicateVertices
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * Gets the gl version as a number
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @return {number} version of gl
 * @private
 */
//function getVersionAsNumber(gl) {
//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));
//}

/**
 * Check if context is WebGL 2.0
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @return {bool} true if it's WebGL 2.0
 * @memberOf module:twgl
 */
function isWebGL2(gl) {
  // This is the correct check but it's slow
  //  return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0") === 0;
  // This might also be the correct check but I'm assuming it's slow-ish
  // return gl instanceof WebGL2RenderingContext;
  return !!gl.texStorage2D;
}

/**
 * Check if context is WebGL 1.0
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @return {bool} true if it's WebGL 1.0
 * @memberOf module:twgl
 */
function isWebGL1(gl) {
  // This is the correct check but it's slow
  // const version = getVersionAsNumber(gl);
  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96
  // This might also be the correct check but I'm assuming it's slow-ish
  // return gl instanceof WebGLRenderingContext;
  return !gl.texStorage2D;
}

/**
 * Gets a string for WebGL enum
 *
 * Note: Several enums are the same. Without more
 * context (which function) it's impossible to always
 * give the correct enum. As it is, for matching values
 * it gives all enums. Checking the WebGL2RenderingContext
 * that means
 *
 *      0     = ZERO | POINT | NONE | NO_ERROR
 *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT
 *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB
 *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING
 *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING
 *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING
 *
 * It's also not useful for bits really unless you pass in individual bits.
 * In other words
 *
 *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;
 *     twgl.glEnumToString(gl, bits);  // not going to work
 *
 * Note that some enums only exist on extensions. If you
 * want them to show up you need to pass the extension at least
 * once. For example
 *
 *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');
 *     if (ext) {
 *        twgl.glEnumToString(ext, 0);  // just prime the function
 *
 *        ..later..
 *
 *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;
 *        console.log(twgl.glEnumToString(gl, internalFormat));
 *
 * Notice I didn't have to pass the extension the second time. This means
 * you can have place that generically gets an enum for texture formats for example.
 * and as long as you primed the function with the extensions
 *
 * If you're using `twgl.addExtensionsToContext` to enable your extensions
 * then twgl will automatically get the extension's enums.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object
 * @param {number} value the value of the enum you want to look up.
 * @return {string} enum string or hex value
 * @memberOf module:twgl
 * @function glEnumToString
 */
const glEnumToString = (function() {
  const haveEnumsForType = {};
  const enums = {};

  function addEnums(gl) {
    const type = gl.constructor.name;
    if (!haveEnumsForType[type]) {
      for (const key in gl) {
        if (typeof gl[key] === 'number') {
          const existing = enums[gl[key]];
          enums[gl[key]] = existing ? `${existing} | ${key}` : key;
        }
      }
      haveEnumsForType[type] = true;
    }
  }

  return function glEnumToString(gl, value) {
    addEnums(gl);
    return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);
  };
}());

var utils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  glEnumToString: glEnumToString,
  isWebGL1: isWebGL1,
  isWebGL2: isWebGL2
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
const defaults$1 = {
  textureColor: new Uint8Array([128, 192, 255, 255]),
  textureOptions: {},
  crossOrigin: undefined,
};
const isArrayBuffer$1 = isArrayBuffer;

// Should we make this on demand?
const getShared2DContext = function() {
  let s_ctx;
  return function getShared2DContext() {
    s_ctx = s_ctx ||
        ((typeof document !== 'undefined' && document.createElement)
          ? document.createElement("canvas").getContext("2d")
          : null);
    return s_ctx;
  };
}();

// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but
//       not only does Firefox NOT support it but Firefox freezes immediately
//       if you try to create one instead of just returning null and continuing.
//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext("2d"));  // OffscreenCanvas may not support 2d

// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2
// we can use the various unpack settings. Otherwise we could try using
// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap
// is async and the current TWGL code expects a non-Async result though that
// might not be a problem. ImageBitmap though is not available in Edge or Safari
// as of 2018-01-02

/* PixelFormat */
const ALPHA                          = 0x1906;
const RGB                            = 0x1907;
const RGBA                           = 0x1908;
const LUMINANCE                      = 0x1909;
const LUMINANCE_ALPHA                = 0x190A;
const DEPTH_COMPONENT                = 0x1902;
const DEPTH_STENCIL                  = 0x84F9;

/* TextureWrapMode */
// const REPEAT                         = 0x2901;
// const MIRRORED_REPEAT                = 0x8370;
const CLAMP_TO_EDGE                  = 0x812f;

/* TextureMagFilter */
const NEAREST                        = 0x2600;
const LINEAR                         = 0x2601;

/* TextureMinFilter */
// const NEAREST_MIPMAP_NEAREST         = 0x2700;
// const LINEAR_MIPMAP_NEAREST          = 0x2701;
// const NEAREST_MIPMAP_LINEAR          = 0x2702;
// const LINEAR_MIPMAP_LINEAR           = 0x2703;

/* Texture Target */
const TEXTURE_2D                     = 0x0de1;
const TEXTURE_CUBE_MAP               = 0x8513;
const TEXTURE_3D                     = 0x806f;
const TEXTURE_2D_ARRAY               = 0x8c1a;

/* Cubemap Targets */
const TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;
const TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;
const TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;
const TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;
const TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;
const TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;

/* Texture Parameters */
const TEXTURE_MIN_FILTER             = 0x2801;
const TEXTURE_MAG_FILTER             = 0x2800;
const TEXTURE_WRAP_S                 = 0x2802;
const TEXTURE_WRAP_T                 = 0x2803;
const TEXTURE_WRAP_R                 = 0x8072;
const TEXTURE_MIN_LOD                = 0x813a;
const TEXTURE_MAX_LOD                = 0x813b;
const TEXTURE_BASE_LEVEL             = 0x813c;
const TEXTURE_MAX_LEVEL              = 0x813d;


/* Pixel store */
const UNPACK_ALIGNMENT                   = 0x0cf5;
const UNPACK_ROW_LENGTH                  = 0x0cf2;
const UNPACK_IMAGE_HEIGHT                = 0x806e;
const UNPACK_SKIP_PIXELS                 = 0x0cf4;
const UNPACK_SKIP_ROWS                   = 0x0cf3;
const UNPACK_SKIP_IMAGES                 = 0x806d;
const UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
const UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;
const UNPACK_FLIP_Y_WEBGL                = 0x9240;

const R8                           = 0x8229;
const R8_SNORM                     = 0x8F94;
const R16F                         = 0x822D;
const R32F                         = 0x822E;
const R8UI                         = 0x8232;
const R8I                          = 0x8231;
const RG16UI                       = 0x823A;
const RG16I                        = 0x8239;
const RG32UI                       = 0x823C;
const RG32I                        = 0x823B;
const RG8                          = 0x822B;
const RG8_SNORM                    = 0x8F95;
const RG16F                        = 0x822F;
const RG32F                        = 0x8230;
const RG8UI                        = 0x8238;
const RG8I                         = 0x8237;
const R16UI                        = 0x8234;
const R16I                         = 0x8233;
const R32UI                        = 0x8236;
const R32I                         = 0x8235;
const RGB8                         = 0x8051;
const SRGB8                        = 0x8C41;
const RGB565                       = 0x8D62;
const RGB8_SNORM                   = 0x8F96;
const R11F_G11F_B10F               = 0x8C3A;
const RGB9_E5                      = 0x8C3D;
const RGB16F                       = 0x881B;
const RGB32F                       = 0x8815;
const RGB8UI                       = 0x8D7D;
const RGB8I                        = 0x8D8F;
const RGB16UI                      = 0x8D77;
const RGB16I                       = 0x8D89;
const RGB32UI                      = 0x8D71;
const RGB32I                       = 0x8D83;
const RGBA8                        = 0x8058;
const SRGB8_ALPHA8                 = 0x8C43;
const RGBA8_SNORM                  = 0x8F97;
const RGB5_A1                      = 0x8057;
const RGBA4                        = 0x8056;
const RGB10_A2                     = 0x8059;
const RGBA16F                      = 0x881A;
const RGBA32F                      = 0x8814;
const RGBA8UI                      = 0x8D7C;
const RGBA8I                       = 0x8D8E;
const RGB10_A2UI                   = 0x906F;
const RGBA16UI                     = 0x8D76;
const RGBA16I                      = 0x8D88;
const RGBA32I                      = 0x8D82;
const RGBA32UI                     = 0x8D70;

const DEPTH_COMPONENT16            = 0x81A5;
const DEPTH_COMPONENT24            = 0x81A6;
const DEPTH_COMPONENT32F           = 0x8CAC;
const DEPTH32F_STENCIL8            = 0x8CAD;
const DEPTH24_STENCIL8             = 0x88F0;

/* DataType */
const BYTE$2                         = 0x1400;
const UNSIGNED_BYTE$2                = 0x1401;
const SHORT$2                        = 0x1402;
const UNSIGNED_SHORT$2               = 0x1403;
const INT$2                          = 0x1404;
const UNSIGNED_INT$2                 = 0x1405;
const FLOAT$2                        = 0x1406;
const UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;
const UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;
const UNSIGNED_SHORT_5_6_5$1         = 0x8363;
const HALF_FLOAT$1                   = 0x140B;
const HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(
const UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;
const UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;
const UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;
const FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;
const UNSIGNED_INT_24_8$1            = 0x84FA;

const RG                           = 0x8227;
const RG_INTEGER                   = 0x8228;
const RED                          = 0x1903;
const RED_INTEGER                  = 0x8D94;
const RGB_INTEGER                  = 0x8D98;
const RGBA_INTEGER                 = 0x8D99;

const formatInfo = {};
{
  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle
  // the name.
  const f = formatInfo;
  f[ALPHA]           = { numColorComponents: 1, };
  f[LUMINANCE]       = { numColorComponents: 1, };
  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };
  f[RGB]             = { numColorComponents: 3, };
  f[RGBA]            = { numColorComponents: 4, };
  f[RED]             = { numColorComponents: 1, };
  f[RED_INTEGER]     = { numColorComponents: 1, };
  f[RG]              = { numColorComponents: 2, };
  f[RG_INTEGER]      = { numColorComponents: 2, };
  f[RGB]             = { numColorComponents: 3, };
  f[RGB_INTEGER]     = { numColorComponents: 3, };
  f[RGBA]            = { numColorComponents: 4, };
  f[RGBA_INTEGER]    = { numColorComponents: 4, };
  f[DEPTH_COMPONENT] = { numColorComponents: 1, };
  f[DEPTH_STENCIL]   = { numColorComponents: 2, };
}

/**
 * @typedef {Object} TextureFormatDetails
 * @property {number} textureFormat format to pass texImage2D and similar functions.
 * @property {boolean} colorRenderable true if you can render to this format of texture.
 * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.
 * @property {number[]} type Array of possible types you can pass to texImage2D and similar function
 * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element
 * @private
 */

let s_textureInternalFormatInfo;
function getTextureInternalFormatInfo(internalFormat) {
  if (!s_textureInternalFormatInfo) {
    // NOTE: these properties need unique names so we can let Uglify mangle the name.
    const t = {};
    // unsized formats
    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };
    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };
    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };
    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_5_6_5$1], };
    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_4_4_4_4$1, UNSIGNED_SHORT_5_5_5_1$1], };
    t[DEPTH_COMPONENT]    = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$2, UNSIGNED_SHORT$2], };

    // sized formats
    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };
    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE$2], };
    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$2, HALF_FLOAT$1], };
    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };
    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };
    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE$2], };
    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$2], };
    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT$2], };
    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };
    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$2], };
    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };
    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE$2], };
    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$2, HALF_FLOAT$1], };
    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$2], };
    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };
    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE$2], };
    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$2], };
    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT$2], };
    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$2], };
    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$2], };
    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };
    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };
    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_6_5$1], };
    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE$2], };
    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_10F_11F_11F_REV$1], };
    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_5_9_9_9_REV$1], };
    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$2, HALF_FLOAT$1], };
    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$2], };
    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };
    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE$2], };
    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$2], };
    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT$2], };
    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$2], };
    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$2], };
    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };
    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };
    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE$2], };
    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_5_5_1$1, UNSIGNED_INT_2_10_10_10_REV$1], };
    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_4_4_4_4$1], };
    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };
    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$2, HALF_FLOAT$1], };
    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$2], };
    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };
    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE$2], };
    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };
    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$2], };
    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT$2], };
    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$2], };
    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$2], };
    // Sized Internal
    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$2, UNSIGNED_INT$2], };
    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };
    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };
    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8$1], };
    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV$1], };

    Object.keys(t).forEach(function(internalFormat) {
      const info = t[internalFormat];
      info.bytesPerElementMap = {};
      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {
        const type = info.type[ndx];
        info.bytesPerElementMap[type] = bytesPerElement;
      });
    });
    s_textureInternalFormatInfo = t;
  }
  return s_textureInternalFormatInfo[internalFormat];
}

/**
 * Gets the number of bytes per element for a given internalFormat / type
 * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
 * @param {number} type The type parameter for texImage2D etc..
 * @return {number} the number of bytes per element for the given internalFormat, type combo
 * @memberOf module:twgl/textures
 */
function getBytesPerElementForInternalFormat(internalFormat, type) {
  const info = getTextureInternalFormatInfo(internalFormat);
  if (!info) {
    throw "unknown internal format";
  }
  const bytesPerElement = info.bytesPerElementMap[type];
  if (bytesPerElement === undefined) {
    throw "unknown internal format";
  }
  return bytesPerElement;
}

/**
 * Info related to a specific texture internalFormat as returned
 * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.
 *
 * @typedef {Object} TextureFormatInfo
 * @property {number} format Format to pass to texImage2D and related functions
 * @property {number} type Type to pass to texImage2D and related functions
 * @memberOf module:twgl/textures
 */

/**
 * Gets the format and type for a given internalFormat
 *
 * @param {number} internalFormat The internal format
 * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,
 * @memberOf module:twgl/textures
 */
function getFormatAndTypeForInternalFormat(internalFormat) {
  const info = getTextureInternalFormatInfo(internalFormat);
  if (!info) {
    throw "unknown internal format";
  }
  return {
    format: info.textureFormat,
    type: info.type[0],
  };
}

/**
 * Returns true if value is power of 2
 * @param {number} value number to check.
 * @return true if value is power of 2
 * @private
 */
function isPowerOf2(value) {
  return (value & (value - 1)) === 0;
}

/**
 * Gets whether or not we can generate mips for the given
 * internal format.
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {number} width The width parameter from texImage2D etc..
 * @param {number} height The height parameter from texImage2D etc..
 * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
 * @return {boolean} true if we can generate mips
 * @memberOf module:twgl/textures
 */
function canGenerateMipmap(gl, width, height, internalFormat) {
  if (!isWebGL2(gl)) {
    return isPowerOf2(width) && isPowerOf2(height);
  }
  const info = getTextureInternalFormatInfo(internalFormat);
  if (!info) {
    throw "unknown internal format";
  }
  return info.colorRenderable && info.textureFilterable;
}

/**
 * Gets whether or not we can generate mips for the given format
 * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
 * @return {boolean} true if we can generate mips
 * @memberOf module:twgl/textures
 */
function canFilter(internalFormat) {
  const info = getTextureInternalFormatInfo(internalFormat);
  if (!info) {
    throw "unknown internal format";
  }
  return info.textureFilterable;
}

/**
 * Gets the number of components for a given image format.
 * @param {number} format the format.
 * @return {number} the number of components for the format.
 * @memberOf module:twgl/textures
 */
function getNumComponentsForFormat(format) {
  const info = formatInfo[format];
  if (!info) {
    throw "unknown format: " + format;
  }
  return info.numColorComponents;
}

/**
 * Gets the texture type for a given array type.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @return {number} the gl texture type
 * @private
 */
function getTextureTypeForArrayType(gl, src, defaultType) {
  if (isArrayBuffer$1(src)) {
    return getGLTypeForTypedArray(src);
  }
  return defaultType || UNSIGNED_BYTE$2;
}

function guessDimensions(gl, target, width, height, numElements) {
  if (numElements % 1 !== 0) {
    throw "can't guess dimensions";
  }
  if (!width && !height) {
    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));
    if (size % 1 === 0) {
      width = size;
      height = size;
    } else {
      width = numElements;
      height = 1;
    }
  } else if (!height) {
    height = numElements / width;
    if (height % 1) {
      throw "can't guess dimensions";
    }
  } else if (!width) {
    width = numElements / height;
    if (width % 1) {
      throw "can't guess dimensions";
    }
  }
  return {
    width: width,
    height: height,
  };
}

/**
 * Sets the default texture color.
 *
 * The default texture color is used when loading textures from
 * urls. Because the URL will be loaded async we'd like to be
 * able to use the texture immediately. By putting a 1x1 pixel
 * color in the texture we can start using the texture before
 * the URL has loaded.
 *
 * @param {number[]} color Array of 4 values in the range 0 to 1
 * @deprecated see {@link module:twgl.setDefaults}
 * @memberOf module:twgl/textures
 */
function setDefaultTextureColor(color) {
  defaults$1.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);
}

function setDefaults$1(newDefaults) {
  copyExistingProperties(newDefaults, defaults$1);
  if (newDefaults.textureColor) {
    setDefaultTextureColor(newDefaults.textureColor);
  }
}

/**
 * A function to generate the source for a texture.
 * @callback TextureFunc
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {module:twgl.TextureOptions} options the texture options
 * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.
 * @memberOf module:twgl
 */

/**
 * Texture options passed to most texture functions. Each function will use whatever options
 * are appropriate for its needs. This lets you pass the same options to all functions.
 *
 * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,
 * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.
 *
 * @typedef {Object} TextureOptions
 * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.
 * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.
 * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.
 * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.
 * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .
 * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`
 *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.
 * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`
 * @property {number} [minMag] both the min and mag filter settings.
 * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`
 * @property {number} [format] format for texture. Defaults to `gl.RGBA`.
 * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`
 *     is ArrayBufferView defaults to type that matches ArrayBufferView type.
 * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube
 * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
 * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
 * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
 * @property {number} [minLod] TEXTURE_MIN_LOD setting
 * @property {number} [maxLod] TEXTURE_MAX_LOD setting
 * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting
 * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting
 * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.
 * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.
 *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`
 *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink
 * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.
 *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
 *     the current setting for specific textures.
 * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.
 *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
 *     the current setting for specific textures.
 * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.
 *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
 *     the current setting for specific textures.
 * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and
 *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above
 *    then then `auto` is assumed to be `false` unless explicity set to `true`.
 * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is
 *
 *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
 *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
 *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
 *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
 *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
 *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]
 *
 * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture
 *
 *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable
 *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.
 *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.
 *    The pieces will be uploaded in `cubeFaceOrder`
 *
 *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.
 *
 *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture
 *    and will be scaled to the specified width and height OR to the size of the first image that loads.
 *
 *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,
 *    `HTMLCanvasElement`, `HTMLVideoElement`.
 *
 *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is
 *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`
 *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided
 *    by 6. Then
 *
 *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height
 *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.
 *
 *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.
 *
 * If `number[]` will be converted to `type`.
 *
 * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.
 * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`
 * an array etc...
 *
 * If `src` is undefined then an empty texture will be created of size `width` by `height`.
 *
 * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.
 *    default: undefined. Also see {@link module:twgl.setDefaults}.
 *
 * @memberOf module:twgl
 */

/**
 * Sets any packing state that will be set based on the options.
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @private
 */
function setPackState(gl, options) {
  if (options.colorspaceConversion !== undefined) {
    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);
  }
  if (options.premultiplyAlpha !== undefined) {
    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);
  }
  if (options.flipY !== undefined) {
    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);
  }
}

/**
 * Set skip state to defaults
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @private
 */
function setSkipStateToDefault(gl) {
  gl.pixelStorei(UNPACK_ALIGNMENT, 4);
  if (isWebGL2(gl)) {
    gl.pixelStorei(UNPACK_ROW_LENGTH, 0);
    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);
    gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);
    gl.pixelStorei(UNPACK_SKIP_ROWS, 0);
    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);
  }
}

/**
 * Sets the parameters of a texture or sampler
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {number|WebGLSampler} target texture target or sampler
 * @param {function()} parameteriFn texParameteri or samplerParameteri fn
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @private
 */
function setTextureSamplerParameters(gl, target, parameteriFn, options) {
  if (options.minMag) {
    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);
    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);
  }
  if (options.min) {
    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);
  }
  if (options.mag) {
    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);
  }
  if (options.wrap) {
    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);
    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);
    if (target === TEXTURE_3D || isSampler(gl, target)) {
      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);
    }
  }
  if (options.wrapR) {
    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);
  }
  if (options.wrapS) {
    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);
  }
  if (options.wrapT) {
    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);
  }
  if (options.minLod) {
    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);
  }
  if (options.maxLod) {
    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);
  }
  if (options.baseLevel) {
    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);
  }
  if (options.maxLevel) {
    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);
  }
}

/**
 * Sets the texture parameters of a texture.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 */
function setTextureParameters(gl, tex, options) {
  const target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  setTextureSamplerParameters(gl, target, gl.texParameteri, options);
}

/**
 * Sets the sampler parameters of a sampler.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLSampler} sampler the WebGLSampler to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @memberOf module:twgl/textures
 */
function setSamplerParameters(gl, sampler, options) {
  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);
}

/**
 * Creates a new sampler object and sets parameters.
 *
 * Example:
 *
 *      const sampler = twgl.createSampler(gl, {
 *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER
 *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R
 *      });
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.
 * @return {Object.<string,WebGLSampler>} the created samplers by name
 * @private
 */
function createSampler(gl, options) {
  const sampler = gl.createSampler();
  setSamplerParameters(gl, sampler, options);
  return sampler;
}

/**
 * Creates a multiple sampler objects and sets parameters on each.
 *
 * Example:
 *
 *      const samplers = twgl.createSamplers(gl, {
 *        nearest: {
 *          minMag: gl.NEAREST,
 *        },
 *        nearestClampS: {
 *          minMag: gl.NEAREST,
 *          wrapS: gl.CLAMP_TO_NEAREST,
 *        },
 *        linear: {
 *          minMag: gl.LINEAR,
 *        },
 *        nearestClamp: {
 *          minMag: gl.NEAREST,
 *          wrap: gl.CLAMP_TO_EDGE,
 *        },
 *        linearClamp: {
 *          minMag: gl.LINEAR,
 *          wrap: gl.CLAMP_TO_EDGE,
 *        },
 *        linearClampT: {
 *          minMag: gl.LINEAR,
 *          wrapT: gl.CLAMP_TO_EDGE,
 *        },
 *      });
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler
 * @private
 */
function createSamplers(gl, samplerOptions) {
  const samplers = {};
  Object.keys(samplerOptions).forEach(function(name) {
    samplers[name] = createSampler(gl, samplerOptions[name]);
  });
  return samplers;
}

/**
 * Makes a 1x1 pixel
 * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.
 * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values
 * @return {Uint8Array} Unit8Array with color.
 * @private
 */
function make1Pixel(color) {
  color = color || defaults$1.textureColor;
  if (isArrayBuffer$1(color)) {
    return color;
  }
  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);
}

/**
 * Sets filtering or generates mips for texture based on width or height
 * If width or height is not passed in uses `options.width` and//or `options.height`
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @param {number} [width] width of texture
 * @param {number} [height] height of texture
 * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..
 * @memberOf module:twgl/textures
 */
function setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {
  options = options || defaults$1.textureOptions;
  internalFormat = internalFormat || RGBA;
  const target = options.target || TEXTURE_2D;
  width = width || options.width;
  height = height || options.height;
  gl.bindTexture(target, tex);
  if (canGenerateMipmap(gl, width, height, internalFormat)) {
    gl.generateMipmap(target);
  } else {
    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;
    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);
    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);
    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
  }
}

function shouldAutomaticallySetTextureFilteringForSize(options) {
  return options.auto === true || (options.auto === undefined && options.level === undefined);
}

/**
 * Gets an array of cubemap face enums
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @return {number[]} cubemap face enums
 * @private
 */
function getCubeFaceOrder(gl, options) {
  options = options || {};
  return options.cubeFaceOrder || [
      TEXTURE_CUBE_MAP_POSITIVE_X,
      TEXTURE_CUBE_MAP_NEGATIVE_X,
      TEXTURE_CUBE_MAP_POSITIVE_Y,
      TEXTURE_CUBE_MAP_NEGATIVE_Y,
      TEXTURE_CUBE_MAP_POSITIVE_Z,
      TEXTURE_CUBE_MAP_NEGATIVE_Z,
    ];
}

/**
 * @typedef {Object} FaceInfo
 * @property {number} face gl enum for texImage2D
 * @property {number} ndx face index (0 - 5) into source data
 * @ignore
 */

/**
 * Gets an array of FaceInfos
 * There's a bug in some NVidia drivers that will crash the driver if
 * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take
 * the user's desired order from his faces to WebGL and make sure we
 * do the faces in WebGL order
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but
 *    it's needed internally to sort the array of `ndx` properties by `face`.
 * @private
 */
function getCubeFacesWithNdx(gl, options) {
  const faces = getCubeFaceOrder(gl, options);
  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(
  const facesWithNdx = faces.map(function(face, ndx) {
    return { face: face, ndx: ndx };
  });
  facesWithNdx.sort(function(a, b) {
    return a.face - b.face;
  });
  return facesWithNdx;
}

/**
 * Set a texture from the contents of an element. Will also set
 * texture filtering or generate mips based on the dimensions of the element
 * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will
 * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {HTMLElement} element a canvas, img, or video element.
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 * @kind function
 */
function setTextureFromElement(gl, tex, element, options) {
  options = options || defaults$1.textureOptions;
  const target = options.target || TEXTURE_2D;
  const level = options.level || 0;
  let width = element.width;
  let height = element.height;
  const internalFormat = options.internalFormat || options.format || RGBA;
  const formatType = getFormatAndTypeForInternalFormat(internalFormat);
  const format = options.format || formatType.format;
  const type = options.type || formatType.type;
  setPackState(gl, options);
  gl.bindTexture(target, tex);
  if (target === TEXTURE_CUBE_MAP) {
    // guess the parts
    const imgWidth  = element.width;
    const imgHeight = element.height;
    let size;
    let slices;
    if (imgWidth / 6 === imgHeight) {
      // It's 6x1
      size = imgHeight;
      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];
    } else if (imgHeight / 6 === imgWidth) {
      // It's 1x6
      size = imgWidth;
      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];
    } else if (imgWidth / 3 === imgHeight / 2) {
      // It's 3x2
      size = imgWidth / 3;
      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];
    } else if (imgWidth / 2 === imgHeight / 3) {
      // It's 2x3
      size = imgWidth / 2;
      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];
    } else {
      throw "can't figure out cube map from element: " + (element.src ? element.src : element.nodeName);
    }
    const ctx = getShared2DContext();
    if (ctx) {
      ctx.canvas.width = size;
      ctx.canvas.height = size;
      width = size;
      height = size;
      getCubeFacesWithNdx(gl, options).forEach(function(f) {
        const xOffset = slices[f.ndx * 2 + 0] * size;
        const yOffset = slices[f.ndx * 2 + 1] * size;
        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);
        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);
      });
      // Free up the canvas memory
      ctx.canvas.width = 1;
      ctx.canvas.height = 1;
    } else if (typeof createImageBitmap !== 'undefined') {
      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's
      // note lossy? (alpha is not premultiplied? although I'm not sure what
      width = size;
      height = size;
      getCubeFacesWithNdx(gl, options).forEach(function(f) {
        const xOffset = slices[f.ndx * 2 + 0] * size;
        const yOffset = slices[f.ndx * 2 + 1] * size;
        // We can't easily use a default texture color here as it would have to match
        // the type across all faces where as with a 2D one there's only one face
        // so we're replacing everything all at once. It also has to be the correct size.
        // On the other hand we need all faces to be the same size so as one face loads
        // the rest match else the texture will be un-renderable.
        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);
        createImageBitmap(element, xOffset, yOffset, size, size, {
          premultiplyAlpha: 'none',
          colorSpaceConversion: 'none',
        })
        .then(function(imageBitmap) {
          setPackState(gl, options);
          gl.bindTexture(target, tex);
          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);
          if (shouldAutomaticallySetTextureFilteringForSize(options)) {
            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
          }
        });
      });
    }
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    const smallest = Math.min(element.width, element.height);
    const largest = Math.max(element.width, element.height);
    const depth = largest / smallest;
    if (depth % 1 !== 0) {
      throw "can not compute 3D dimensions of element";
    }
    const xMult = element.width  === largest ? 1 : 0;
    const yMult = element.height === largest ? 1 : 0;
    gl.pixelStorei(UNPACK_ALIGNMENT, 1);
    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);
    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);
    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);
    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);
    for (let d = 0; d < depth; ++d) {
      const srcX = d * smallest * xMult;
      const srcY = d * smallest * yMult;
      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);
      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);
      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);
    }
    setSkipStateToDefault(gl);
  } else {
    gl.texImage2D(target, level, internalFormat, format, type, element);
  }
  if (shouldAutomaticallySetTextureFilteringForSize(options)) {
    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
  }
  setTextureParameters(gl, tex, options);
}

function noop() {
}

/**
 * Checks whether the url's origin is the same so that we can set the `crossOrigin`
 * @param {string} url url to image
 * @returns {boolean} true if the window's origin is the same as image's url
 * @private
 */
function urlIsSameOrigin(url) {
  if (typeof document !== 'undefined') {
    // for IE really
    const a = document.createElement('a');
    a.href = url;
    return a.hostname === location.hostname &&
           a.port     === location.port &&
           a.protocol === location.protocol;
  } else {
    const localOrigin = (new URL(location.href)).origin;
    const urlOrigin = (new URL(url, location.href)).origin;
    return urlOrigin === localOrigin;
  }
}

function setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {
  return crossOrigin === undefined && !urlIsSameOrigin(url)
     ? 'anonymous'
     : crossOrigin;
}

/**
 * Loads an image
 * @param {string} url url to image
 * @param {string} crossOrigin
 * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
 *     if there was an error
 * @return {HTMLImageElement} the image being loaded.
 * @private
 */
function loadImage(url, crossOrigin, callback) {
  callback = callback || noop;
  let img;
  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;
  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);
  if (typeof Image !== 'undefined') {
    img = new Image();
    if (crossOrigin !== undefined) {
      img.crossOrigin = crossOrigin;
    }

    const clearEventHandlers = function clearEventHandlers() {
      img.removeEventListener('error', onError);  // eslint-disable-line
      img.removeEventListener('load', onLoad);  // eslint-disable-line
      img = null;
    };

    const onError = function onError() {
      const msg = "couldn't load image: " + url;
      error(msg);
      callback(msg, img);
      clearEventHandlers();
    };

    const onLoad = function onLoad() {
      callback(null, img);
      clearEventHandlers();
    };

    img.addEventListener('error', onError);
    img.addEventListener('load', onLoad);
    img.src = url;
    return img;
  } else if (typeof ImageBitmap !== 'undefined') {
    let err;
    let bm;
    const cb = function cb() {
      callback(err, bm);
    };

    const options = {};
    if (crossOrigin) {
      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin
    }
    fetch(url, options).then(function(response) {
      if (!response.ok) {
        throw response;
      }
      return response.blob();
    }).then(function(blob) {
      return createImageBitmap(blob, {
        premultiplyAlpha: 'none',
        colorSpaceConversion: 'none',
      });
    }).then(function(bitmap) {
      // not sure if this works. We don't want
      // to catch the user's error. So, call
      // the callback in a timeout so we're
      // not in this scope inside the promise.
      bm = bitmap;
      setTimeout(cb);
    }).catch(function(e) {
      err = e;
      setTimeout(cb);
    });
    img = null;
  }
  return img;
}

/**
 * check if object is a TexImageSource
 *
 * @param {Object} obj Object to test
 * @return {boolean} true if object is a TexImageSource
 * @private
 */
function isTexImageSource(obj) {
  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||
         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||
         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);
}

/**
 * if obj is an TexImageSource then just
 * uses it otherwise if obj is a string
 * then load it first.
 *
 * @param {string|TexImageSource} obj
 * @param {string} crossOrigin
 * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
 *     if there was an error
 * @private
 */
function loadAndUseImage(obj, crossOrigin, callback) {
  if (isTexImageSource(obj)) {
    setTimeout(function() {
      callback(null, obj);
    });
    return obj;
  }

  return loadImage(obj, crossOrigin, callback);
}

/**
 * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set
 * the default texture color is used which can be set by calling `setDefaultTextureColor`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 */
function setTextureTo1PixelColor(gl, tex, options) {
  options = options || defaults$1.textureOptions;
  const target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  if (options.color === false) {
    return;
  }
  // Assume it's a URL
  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.
  const color = make1Pixel(options.color);
  if (target === TEXTURE_CUBE_MAP) {
    for (let ii = 0; ii < 6; ++ii) {
      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);
    }
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);
  } else {
    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);
  }
}

/**
 * The src image(s) used to create a texture.
 *
 * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}
 * you can pass in urls for images to load into the textures. If it's a single url
 * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap
 * this will be a corresponding array of images for the cubemap.
 *
 * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc
 * @memberOf module:twgl
 */

/**
 * A callback for when an image finished downloading and been uploaded into a texture
 * @callback TextureReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {WebGLTexture} texture the texture.
 * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture
 * @memberOf module:twgl
 */

/**
 * A callback for when all images have finished downloading and been uploaded into their respective textures
 * @callback TexturesReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.
 * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.
 * @memberOf module:twgl
 */

/**
 * A callback for when an image finished downloading and been uploaded into a texture
 * @callback CubemapReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {WebGLTexture} tex the texture.
 * @param {HTMLImageElement[]} imgs the images for each face.
 * @memberOf module:twgl
 */

/**
 * A callback for when an image finished downloading and been uploaded into a texture
 * @callback ThreeDReadyCallback
 * @param {*} err If truthy there was an error.
 * @param {WebGLTexture} tex the texture.
 * @param {HTMLImageElement[]} imgs the images for each slice.
 * @memberOf module:twgl
 */

/**
 * Loads a texture from an image from a Url as specified in `options.src`
 * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is
 * immediately useable. It will be updated with the contents of the image once the image has finished
 * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will
 *    be non null if there was an error.
 * @return {HTMLImageElement} the image being downloaded.
 * @memberOf module:twgl/textures
 */
function loadTextureFromUrl(gl, tex, options, callback) {
  callback = callback || noop;
  options = options || defaults$1.textureOptions;
  setTextureTo1PixelColor(gl, tex, options);
  // Because it's async we need to copy the options.
  options = Object.assign({}, options);
  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {
    if (err) {
      callback(err, tex, img);
    } else {
      setTextureFromElement(gl, tex, img, options);
      callback(null, tex, img);
    }
  });
  return img;
}

/**
 * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color
 * so that it is usable immediately unless `option.color === false`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will
 *    be non null if there was an error.
 * @memberOf module:twgl/textures
 */
function loadCubemapFromUrls(gl, tex, options, callback) {
  callback = callback || noop;
  const urls = options.src;
  if (urls.length !== 6) {
    throw "there must be 6 urls for a cubemap";
  }
  const level = options.level || 0;
  const internalFormat = options.internalFormat || options.format || RGBA;
  const formatType = getFormatAndTypeForInternalFormat(internalFormat);
  const format = options.format || formatType.format;
  const type = options.type || UNSIGNED_BYTE$2;
  const target = options.target || TEXTURE_2D;
  if (target !== TEXTURE_CUBE_MAP) {
    throw "target must be TEXTURE_CUBE_MAP";
  }
  setTextureTo1PixelColor(gl, tex, options);
  // Because it's async we need to copy the options.
  options = Object.assign({}, options);
  let numToLoad = 6;
  const errors = [];
  const faces = getCubeFaceOrder(gl, options);
  let imgs;  // eslint-disable-line

  function uploadImg(faceTarget) {
    return function(err, img) {
      --numToLoad;
      if (err) {
        errors.push(err);
      } else {
        if (img.width !== img.height) {
          errors.push("cubemap face img is not a square: " + img.src);
        } else {
          setPackState(gl, options);
          gl.bindTexture(target, tex);

          // So assuming this is the first image we now have one face that's img sized
          // and 5 faces that are 1x1 pixel so size the other faces
          if (numToLoad === 5) {
            // use the default order
            getCubeFaceOrder().forEach(function(otherTarget) {
              // Should we re-use the same face or a color?
              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);
            });
          } else {
            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);
          }

          if (shouldAutomaticallySetTextureFilteringForSize(options)) {
            gl.generateMipmap(target);
          }
        }
      }

      if (numToLoad === 0) {
        callback(errors.length ? errors : undefined, tex, imgs);
      }
    };
  }

  imgs = urls.map(function(url, ndx) {
    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));
  });
}

/**
 * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.
 * Will set the texture to a 1x1 pixel color
 * so that it is usable immediately unless `option.color === false`.
 *
 * If the width and height is not specified the width and height of the first
 * image loaded will be used. Note that since images are loaded async
 * which image downloads first is unknown.
 *
 * If an image is not the same size as the width and height it will be scaled
 * to that width and height.
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will
 *    be non null if there was an error.
 * @memberOf module:twgl/textures
 */
function loadSlicesFromUrls(gl, tex, options, callback) {
  callback = callback || noop;
  const urls = options.src;
  const internalFormat = options.internalFormat || options.format || RGBA;
  const formatType = getFormatAndTypeForInternalFormat(internalFormat);
  const format = options.format || formatType.format;
  const type = options.type || UNSIGNED_BYTE$2;
  const target = options.target || TEXTURE_2D_ARRAY;
  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {
    throw "target must be TEXTURE_3D or TEXTURE_2D_ARRAY";
  }
  setTextureTo1PixelColor(gl, tex, options);
  // Because it's async we need to copy the options.
  options = Object.assign({}, options);
  let numToLoad = urls.length;
  const errors = [];
  let imgs;  // eslint-disable-line
  const level = options.level || 0;
  let width = options.width;
  let height = options.height;
  const depth = urls.length;
  let firstImage = true;

  function uploadImg(slice) {
    return function(err, img) {
      --numToLoad;
      if (err) {
        errors.push(err);
      } else {
        setPackState(gl, options);
        gl.bindTexture(target, tex);

        if (firstImage) {
          firstImage = false;
          width = options.width || img.width;
          height = options.height || img.height;
          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);

          // put it in every slice otherwise some slices will be 0,0,0,0
          for (let s = 0; s < depth; ++s) {
            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);
          }
        } else {
          let src = img;
          let ctx;
          if (img.width !== width || img.height !== height) {
            // Size the image to fix
            ctx = getShared2DContext();
            src = ctx.canvas;
            ctx.canvas.width = width;
            ctx.canvas.height = height;
            ctx.drawImage(img, 0, 0, width, height);
          }

          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);

          // free the canvas memory
          if (ctx && src === ctx.canvas) {
            ctx.canvas.width = 0;
            ctx.canvas.height = 0;
          }
        }

        if (shouldAutomaticallySetTextureFilteringForSize(options)) {
          gl.generateMipmap(target);
        }
      }

      if (numToLoad === 0) {
        callback(errors.length ? errors : undefined, tex, imgs);
      }
    };
  }

  imgs = urls.map(function(url, ndx) {
    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));
  });
}

/**
 * Sets a texture from an array or typed array. If the width or height is not provided will attempt to
 * guess the size. See {@link module:twgl.TextureOptions}.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 *   This is often the same options you passed in when you created the texture.
 * @memberOf module:twgl/textures
 */
function setTextureFromArray(gl, tex, src, options) {
  options = options || defaults$1.textureOptions;
  const target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  let width = options.width;
  let height = options.height;
  let depth = options.depth;
  const level = options.level || 0;
  const internalFormat = options.internalFormat || options.format || RGBA;
  const formatType = getFormatAndTypeForInternalFormat(internalFormat);
  const format = options.format || formatType.format;
  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);
  if (!isArrayBuffer$1(src)) {
    const Type = getTypedArrayTypeForGLType(type);
    src = new Type(src);
  } else if (src instanceof Uint8ClampedArray) {
    src = new Uint8Array(src.buffer);
  }

  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);
  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?
  if (numElements % 1) {
    throw "length wrong size for format: " + glEnumToString(gl, format);
  }
  let dimensions;
  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    if (!width && !height && !depth) {
      const size = Math.cbrt(numElements);
      if (size % 1 !== 0) {
        throw "can't guess cube size of array of numElements: " + numElements;
      }
      width = size;
      height = size;
      depth = size;
    } else if (width && (!height || !depth)) {
      dimensions = guessDimensions(gl, target, height, depth, numElements / width);
      height = dimensions.width;
      depth = dimensions.height;
    } else if (height && (!width || !depth)) {
      dimensions = guessDimensions(gl, target, width, depth, numElements / height);
      width = dimensions.width;
      depth = dimensions.height;
    } else {
      dimensions = guessDimensions(gl, target, width, height, numElements / depth);
      width = dimensions.width;
      height = dimensions.height;
    }
  } else {
    dimensions = guessDimensions(gl, target, width, height, numElements);
    width = dimensions.width;
    height = dimensions.height;
  }
  setSkipStateToDefault(gl);
  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);
  setPackState(gl, options);
  if (target === TEXTURE_CUBE_MAP) {
    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;
    const faceSize = numElements / 6 * elementsPerElement;

    getCubeFacesWithNdx(gl, options).forEach(f => {
      const offset = faceSize * f.ndx;
      const data = src.subarray(offset, offset + faceSize);
      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);
    });
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);
  } else {
    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);
  }
  return {
    width: width,
    height: height,
    depth: depth,
    type: type,
  };
}

/**
 * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.
 * You must set `options.width` and `options.height`.
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the WebGLTexture to set parameters for
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @memberOf module:twgl/textures
 */
function setEmptyTexture(gl, tex, options) {
  const target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  const level = options.level || 0;
  const internalFormat = options.internalFormat || options.format || RGBA;
  const formatType = getFormatAndTypeForInternalFormat(internalFormat);
  const format = options.format || formatType.format;
  const type = options.type || formatType.type;
  setPackState(gl, options);
  if (target === TEXTURE_CUBE_MAP) {
    for (let ii = 0; ii < 6; ++ii) {
      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);
    }
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);
  } else {
    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);
  }
}

/**
 * Creates a texture based on the options passed in.
 *
 * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES
 * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
 * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.
 * @return {WebGLTexture} the created texture.
 * @memberOf module:twgl/textures
 */
function createTexture(gl, options, callback) {
  callback = callback || noop;
  options = options || defaults$1.textureOptions;
  const tex = gl.createTexture();
  const target = options.target || TEXTURE_2D;
  let width  = options.width  || 1;
  let height = options.height || 1;
  const internalFormat = options.internalFormat || RGBA;
  gl.bindTexture(target, tex);
  if (target === TEXTURE_CUBE_MAP) {
    // this should have been the default for cubemaps :(
    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
  }
  let src = options.src;
  if (src) {
    if (typeof src === "function") {
      src = src(gl, options);
    }
    if (typeof (src) === "string") {
      loadTextureFromUrl(gl, tex, options, callback);
    } else if (isArrayBuffer$1(src) ||
               (Array.isArray(src) && (
                    typeof src[0] === 'number' ||
                    Array.isArray(src[0]) ||
                    isArrayBuffer$1(src[0]))
               )
              ) {
      const dimensions = setTextureFromArray(gl, tex, src, options);
      width  = dimensions.width;
      height = dimensions.height;
    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {
      if (target === TEXTURE_CUBE_MAP) {
        loadCubemapFromUrls(gl, tex, options, callback);
      } else {
        loadSlicesFromUrls(gl, tex, options, callback);
      }
    } else { // if (isTexImageSource(src))
      setTextureFromElement(gl, tex, src, options);
      width  = src.width;
      height = src.height;
    }
  } else {
    setEmptyTexture(gl, tex, options);
  }
  if (shouldAutomaticallySetTextureFilteringForSize(options)) {
    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
  }
  setTextureParameters(gl, tex, options);
  return tex;
}

/**
 * Resizes a texture based on the options passed in.
 *
 * Note: This is not a generic resize anything function.
 * It's mostly used by {@link module:twgl.resizeFramebufferInfo}
 * It will use `options.src` if it exists to try to determine a `type`
 * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided
 * for the texture. Texture parameters will be set accordingly
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {WebGLTexture} tex the texture to resize
 * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
 * @param {number} [width] the new width. If not passed in will use `options.width`
 * @param {number} [height] the new height. If not passed in will use `options.height`
 * @param {number} [depth] the new depth. If not passed in will use `options.depth`
 * @memberOf module:twgl/textures
 */
function resizeTexture(gl, tex, options, width, height, depth) {
  width = width || options.width;
  height = height || options.height;
  depth = depth || options.depth;
  const target = options.target || TEXTURE_2D;
  gl.bindTexture(target, tex);
  const level = options.level || 0;
  const internalFormat = options.internalFormat || options.format || RGBA;
  const formatType = getFormatAndTypeForInternalFormat(internalFormat);
  const format = options.format || formatType.format;
  let type;
  const src = options.src;
  if (!src) {
    type = options.type || formatType.type;
  } else if (isArrayBuffer$1(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {
    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);
  } else {
    type = options.type || formatType.type;
  }
  if (target === TEXTURE_CUBE_MAP) {
    for (let ii = 0; ii < 6; ++ii) {
      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);
    }
  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);
  } else {
    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);
  }
}

/**
 * Check if a src is an async request.
 * if src is a string we're going to download an image
 * if src is an array of strings we're going to download cubemap images
 * @param {*} src The src from a TextureOptions
 * @returns {bool} true if src is async.
 * @private
 */
function isAsyncSrc(src) {
  return typeof src === 'string' ||
         (Array.isArray(src) && typeof src[0] === 'string');
}

/**
 * Creates a bunch of textures based on the passed in options.
 *
 * Example:
 *
 *     const textures = twgl.createTextures(gl, {
 *       // a power of 2 image
 *       hftIcon: { src: "images/hft-icon-16.png", mag: gl.NEAREST },
 *       // a non-power of 2 image
 *       clover: { src: "images/clover.jpg" },
 *       // From a canvas
 *       fromCanvas: { src: ctx.canvas },
 *       // A cubemap from 6 images
 *       yokohama: {
 *         target: gl.TEXTURE_CUBE_MAP,
 *         src: [
 *           'images/yokohama/posx.jpg',
 *           'images/yokohama/negx.jpg',
 *           'images/yokohama/posy.jpg',
 *           'images/yokohama/negy.jpg',
 *           'images/yokohama/posz.jpg',
 *           'images/yokohama/negz.jpg',
 *         ],
 *       },
 *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)
 *       goldengate: {
 *         target: gl.TEXTURE_CUBE_MAP,
 *         src: 'images/goldengate.jpg',
 *       },
 *       // A 2x2 pixel texture from a JavaScript array
 *       checker: {
 *         mag: gl.NEAREST,
 *         min: gl.LINEAR,
 *         src: [
 *           255,255,255,255,
 *           192,192,192,255,
 *           192,192,192,255,
 *           255,255,255,255,
 *         ],
 *       },
 *       // a 1x2 pixel texture from a typed array.
 *       stripe: {
 *         mag: gl.NEAREST,
 *         min: gl.LINEAR,
 *         format: gl.LUMINANCE,
 *         src: new Uint8Array([
 *           255,
 *           128,
 *           255,
 *           128,
 *           255,
 *           128,
 *           255,
 *           128,
 *         ]),
 *         width: 1,
 *       },
 *     });
 *
 * Now
 *
 * *   `textures.hftIcon` will be a 2d texture
 * *   `textures.clover` will be a 2d texture
 * *   `textures.fromCanvas` will be a 2d texture
 * *   `textures.yohohama` will be a cubemap texture
 * *   `textures.goldengate` will be a cubemap texture
 * *   `textures.checker` will be a 2d texture
 * *   `textures.stripe` will be a 2d texture
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.
 * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.
 * @return {Object.<string,WebGLTexture>} the created textures by name
 * @memberOf module:twgl/textures
 */
function createTextures(gl, textureOptions, callback) {
  callback = callback || noop;
  let numDownloading = 0;
  const errors = [];
  const textures = {};
  const images = {};

  function callCallbackIfReady() {
    if (numDownloading === 0) {
      setTimeout(function() {
        callback(errors.length ? errors : undefined, textures, images);
      }, 0);
    }
  }

  Object.keys(textureOptions).forEach(function(name) {
    const options = textureOptions[name];
    let onLoadFn;
    if (isAsyncSrc(options.src)) {
      onLoadFn = function(err, tex, img) {
        images[name] = img;
        --numDownloading;
        if (err) {
          errors.push(err);
        }
        callCallbackIfReady();
      };
      ++numDownloading;
    }
    textures[name] = createTexture(gl, options, onLoadFn);
  });

  // queue the callback if there are no images to download.
  // We do this because if your code is structured to wait for
  // images to download but then you comment out all the async
  // images your code would break.
  callCallbackIfReady();

  return textures;
}

var textures = /*#__PURE__*/Object.freeze({
  __proto__: null,
  setTextureDefaults_: setDefaults$1,
  createSampler: createSampler,
  createSamplers: createSamplers,
  setSamplerParameters: setSamplerParameters,
  createTexture: createTexture,
  setEmptyTexture: setEmptyTexture,
  setTextureFromArray: setTextureFromArray,
  loadTextureFromUrl: loadTextureFromUrl,
  setTextureFromElement: setTextureFromElement,
  setTextureFilteringForSize: setTextureFilteringForSize,
  setTextureParameters: setTextureParameters,
  setDefaultTextureColor: setDefaultTextureColor,
  createTextures: createTextures,
  resizeTexture: resizeTexture,
  canGenerateMipmap: canGenerateMipmap,
  canFilter: canFilter,
  getNumComponentsForFormat: getNumComponentsForFormat,
  getBytesPerElementForInternalFormat: getBytesPerElementForInternalFormat,
  getFormatAndTypeForInternalFormat: getFormatAndTypeForInternalFormat
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * Low level shader program related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibility they are available at both `twgl.programs` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/programs
 */

const error$1 = error;
const warn$1 = warn;
function getElementById(id) {
  return (typeof document !== 'undefined' && document.getElementById)
      ? document.getElementById(id)
      : null;
}

const TEXTURE0                       = 0x84c0;
const DYNAMIC_DRAW                   = 0x88e8;

const ARRAY_BUFFER$1                   = 0x8892;
const ELEMENT_ARRAY_BUFFER$1           = 0x8893;
const UNIFORM_BUFFER                 = 0x8a11;
const TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;

const TRANSFORM_FEEDBACK             = 0x8e22;

const COMPILE_STATUS                 = 0x8b81;
const LINK_STATUS                    = 0x8b82;
const FRAGMENT_SHADER                = 0x8b30;
const VERTEX_SHADER                  = 0x8b31;
const SEPARATE_ATTRIBS               = 0x8c8d;

const ACTIVE_UNIFORMS                = 0x8b86;
const ACTIVE_ATTRIBUTES              = 0x8b89;
const TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;
const ACTIVE_UNIFORM_BLOCKS          = 0x8a36;
const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;
const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;
const UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;
const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;

const FLOAT$3                         = 0x1406;
const FLOAT_VEC2                    = 0x8B50;
const FLOAT_VEC3                    = 0x8B51;
const FLOAT_VEC4                    = 0x8B52;
const INT$3                           = 0x1404;
const INT_VEC2                      = 0x8B53;
const INT_VEC3                      = 0x8B54;
const INT_VEC4                      = 0x8B55;
const BOOL                          = 0x8B56;
const BOOL_VEC2                     = 0x8B57;
const BOOL_VEC3                     = 0x8B58;
const BOOL_VEC4                     = 0x8B59;
const FLOAT_MAT2                    = 0x8B5A;
const FLOAT_MAT3                    = 0x8B5B;
const FLOAT_MAT4                    = 0x8B5C;
const SAMPLER_2D                    = 0x8B5E;
const SAMPLER_CUBE                  = 0x8B60;
const SAMPLER_3D                    = 0x8B5F;
const SAMPLER_2D_SHADOW             = 0x8B62;
const FLOAT_MAT2x3                  = 0x8B65;
const FLOAT_MAT2x4                  = 0x8B66;
const FLOAT_MAT3x2                  = 0x8B67;
const FLOAT_MAT3x4                  = 0x8B68;
const FLOAT_MAT4x2                  = 0x8B69;
const FLOAT_MAT4x3                  = 0x8B6A;
const SAMPLER_2D_ARRAY              = 0x8DC1;
const SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;
const SAMPLER_CUBE_SHADOW           = 0x8DC5;
const UNSIGNED_INT$3                  = 0x1405;
const UNSIGNED_INT_VEC2             = 0x8DC6;
const UNSIGNED_INT_VEC3             = 0x8DC7;
const UNSIGNED_INT_VEC4             = 0x8DC8;
const INT_SAMPLER_2D                = 0x8DCA;
const INT_SAMPLER_3D                = 0x8DCB;
const INT_SAMPLER_CUBE              = 0x8DCC;
const INT_SAMPLER_2D_ARRAY          = 0x8DCF;
const UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;
const UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;
const UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;
const UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;

const TEXTURE_2D$1                    = 0x0DE1;
const TEXTURE_CUBE_MAP$1              = 0x8513;
const TEXTURE_3D$1                    = 0x806F;
const TEXTURE_2D_ARRAY$1              = 0x8C1A;

const typeMap = {};

/**
 * Returns the corresponding bind point for a given sampler type
 */
function getBindPointForSamplerType(gl, type) {
  return typeMap[type].bindPoint;
}

// This kind of sucks! If you could compose functions as in `var fn = gl[name];`
// this code could be a lot smaller but that is sadly really slow (T_T)

function floatSetter(gl, location) {
  return function(v) {
    gl.uniform1f(location, v);
  };
}

function floatArraySetter(gl, location) {
  return function(v) {
    gl.uniform1fv(location, v);
  };
}

function floatVec2Setter(gl, location) {
  return function(v) {
    gl.uniform2fv(location, v);
  };
}

function floatVec3Setter(gl, location) {
  return function(v) {
    gl.uniform3fv(location, v);
  };
}

function floatVec4Setter(gl, location) {
  return function(v) {
    gl.uniform4fv(location, v);
  };
}

function intSetter(gl, location) {
  return function(v) {
    gl.uniform1i(location, v);
  };
}

function intArraySetter(gl, location) {
  return function(v) {
    gl.uniform1iv(location, v);
  };
}

function intVec2Setter(gl, location) {
  return function(v) {
    gl.uniform2iv(location, v);
  };
}

function intVec3Setter(gl, location) {
  return function(v) {
    gl.uniform3iv(location, v);
  };
}

function intVec4Setter(gl, location) {
  return function(v) {
    gl.uniform4iv(location, v);
  };
}

function uintSetter(gl, location) {
  return function(v) {
    gl.uniform1ui(location, v);
  };
}

function uintArraySetter(gl, location) {
  return function(v) {
    gl.uniform1uiv(location, v);
  };
}

function uintVec2Setter(gl, location) {
  return function(v) {
    gl.uniform2uiv(location, v);
  };
}

function uintVec3Setter(gl, location) {
  return function(v) {
    gl.uniform3uiv(location, v);
  };
}

function uintVec4Setter(gl, location) {
  return function(v) {
    gl.uniform4uiv(location, v);
  };
}

function floatMat2Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix2fv(location, false, v);
  };
}

function floatMat3Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix3fv(location, false, v);
  };
}

function floatMat4Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix4fv(location, false, v);
  };
}

function floatMat23Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix2x3fv(location, false, v);
  };
}

function floatMat32Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix3x2fv(location, false, v);
  };
}

function floatMat24Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix2x4fv(location, false, v);
  };
}

function floatMat42Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix4x2fv(location, false, v);
  };
}

function floatMat34Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix3x4fv(location, false, v);
  };
}

function floatMat43Setter(gl, location) {
  return function(v) {
    gl.uniformMatrix4x3fv(location, false, v);
  };
}

function samplerSetter(gl, type, unit, location) {
  const bindPoint = getBindPointForSamplerType(gl, type);
  return isWebGL2(gl) ? function(textureOrPair) {
    let texture;
    let sampler;
    if (isTexture(gl, textureOrPair)) {
      texture = textureOrPair;
      sampler = null;
    } else {
      texture = textureOrPair.texture;
      sampler = textureOrPair.sampler;
    }
    gl.uniform1i(location, unit);
    gl.activeTexture(TEXTURE0 + unit);
    gl.bindTexture(bindPoint, texture);
    gl.bindSampler(unit, sampler);
  } : function(texture) {
    gl.uniform1i(location, unit);
    gl.activeTexture(TEXTURE0 + unit);
    gl.bindTexture(bindPoint, texture);
  };
}

function samplerArraySetter(gl, type, unit, location, size) {
  const bindPoint = getBindPointForSamplerType(gl, type);
  const units = new Int32Array(size);
  for (let ii = 0; ii < size; ++ii) {
    units[ii] = unit + ii;
  }

  return isWebGL2(gl) ? function(textures) {
    gl.uniform1iv(location, units);
    textures.forEach(function(textureOrPair, index) {
      gl.activeTexture(TEXTURE0 + units[index]);
      let texture;
      let sampler;
      if (isTexture(gl, textureOrPair)) {
        texture = textureOrPair;
        sampler = null;
      } else {
        texture = textureOrPair.texture;
        sampler = textureOrPair.sampler;
      }
      gl.bindSampler(unit, sampler);
      gl.bindTexture(bindPoint, texture);
    });
  } : function(textures) {
    gl.uniform1iv(location, units);
    textures.forEach(function(texture, index) {
      gl.activeTexture(TEXTURE0 + units[index]);
      gl.bindTexture(bindPoint, texture);
    });
  };
}

typeMap[FLOAT$3]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };
typeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };
typeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };
typeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };
typeMap[INT$3]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };
typeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };
typeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };
typeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };
typeMap[UNSIGNED_INT$3]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };
typeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };
typeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };
typeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };
typeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };
typeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };
typeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };
typeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };
typeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };
typeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };
typeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };
typeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };
typeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };
typeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };
typeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };
typeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };
typeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };
typeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
typeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
typeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };
typeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
typeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };
typeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };
typeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
typeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
typeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };
typeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
typeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };
typeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
typeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };
typeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
typeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };

function floatAttribSetter(gl, index) {
  return function(b) {
    if (b.value) {
      gl.disableVertexAttribArray(index);
      switch (b.value.length) {
        case 4:
          gl.vertexAttrib4fv(index, b.value);
          break;
        case 3:
          gl.vertexAttrib3fv(index, b.value);
          break;
        case 2:
          gl.vertexAttrib2fv(index, b.value);
          break;
        case 1:
          gl.vertexAttrib1fv(index, b.value);
          break;
        default:
          throw new Error('the length of a float constant value must be between 1 and 4!');
      }
    } else {
      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
      gl.enableVertexAttribArray(index);
      gl.vertexAttribPointer(
          index, b.numComponents || b.size, b.type || FLOAT$3, b.normalize || false, b.stride || 0, b.offset || 0);
      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index, b.divisor);
      }
    }
  };
}

function intAttribSetter(gl, index) {
  return function(b) {
    if (b.value) {
      gl.disableVertexAttribArray(index);
      if (b.value.length === 4) {
        gl.vertexAttrib4iv(index, b.value);
      } else {
        throw new Error('The length of an integer constant value must be 4!');
      }
    } else {
      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
      gl.enableVertexAttribArray(index);
      gl.vertexAttribIPointer(
          index, b.numComponents || b.size, b.type || INT$3, b.stride || 0, b.offset || 0);
      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index, b.divisor);
      }
    }
  };
}

function uintAttribSetter(gl, index) {
  return function(b) {
    if (b.value) {
      gl.disableVertexAttribArray(index);
      if (b.value.length === 4) {
        gl.vertexAttrib4uiv(index, b.value);
      } else {
        throw new Error('The length of an unsigned integer constant value must be 4!');
      }
    } else {
      gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
      gl.enableVertexAttribArray(index);
      gl.vertexAttribIPointer(
          index, b.numComponents || b.size, b.type || UNSIGNED_INT$3, b.stride || 0, b.offset || 0);
      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index, b.divisor);
      }
    }
  };
}

function matAttribSetter(gl, index, typeInfo) {
  const defaultSize = typeInfo.size;
  const count = typeInfo.count;

  return function(b) {
    gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
    const numComponents = b.size || b.numComponents || defaultSize;
    const size = numComponents / count;
    const type = b.type || FLOAT$3;
    const typeInfo = typeMap[type];
    const stride = typeInfo.size * numComponents;
    const normalize = b.normalize || false;
    const offset = b.offset || 0;
    const rowOffset = stride / count;
    for (let i = 0; i < count; ++i) {
      gl.enableVertexAttribArray(index + i);
      gl.vertexAttribPointer(
          index + i, size, type, normalize, stride, offset + rowOffset * i);
      if (b.divisor !== undefined) {
        gl.vertexAttribDivisor(index + i, b.divisor);
      }
    }
  };
}



const attrTypeMap = {};
attrTypeMap[FLOAT$3]             = { size:  4, setter: floatAttribSetter, };
attrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };
attrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };
attrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };
attrTypeMap[INT$3]               = { size:  4, setter: intAttribSetter,   };
attrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };
attrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };
attrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };
attrTypeMap[UNSIGNED_INT$3]      = { size:  4, setter: uintAttribSetter,  };
attrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };
attrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };
attrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };
attrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };
attrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };
attrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };
attrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };
attrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };
attrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };
attrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };

const errorRE = /ERROR:\s*\d+:(\d+)/gi;
function addLineNumbersWithError(src, log = '', lineOffset = 0) {
  // Note: Error message formats are not defined by any spec so this may or may not work.
  const matches = [...log.matchAll(errorRE)];
  const lineNoToErrorMap = new Map(matches.map((m, ndx) => {
    const lineNo = parseInt(m[1]);
    const next = matches[ndx + 1];
    const end = next ? next.index : log.length;
    const msg = log.substring(m.index, end);
    return [lineNo - 1, msg];
  }));
  return src.split('\n').map((line, lineNo) => {
    const err = lineNoToErrorMap.get(lineNo);
    return `${lineNo + 1 + lineOffset}: ${line}${err ? `\n\n^^^ ${err}` : ''}`;
  }).join('\n');
}

/**
 * Error Callback
 * @callback ErrorCallback
 * @param {string} msg error message.
 * @param {number} [lineOffset] amount to add to line number
 * @memberOf module:twgl
 */

const spaceRE = /^[ \t]*\n/;

/**
 * Loads a shader.
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {string} shaderSource The shader source.
 * @param {number} shaderType The type of shader.
 * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.
 * @return {WebGLShader} The created shader.
 * @private
 */
function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {
  const errFn = opt_errorCallback || error$1;
  // Create the shader object
  const shader = gl.createShader(shaderType);

  // Remove the first end of line because WebGL 2.0 requires
  // #version 300 es
  // as the first line. No whitespace allowed before that line
  // so
  //
  // <script>
  // #version 300 es
  // </script>
  //
  // Has one line before it which is invalid according to GLSL ES 3.00
  //
  let lineOffset = 0;
  if (spaceRE.test(shaderSource)) {
    lineOffset = 1;
    shaderSource = shaderSource.replace(spaceRE, '');
  }

  // Load the shader source
  gl.shaderSource(shader, shaderSource);

  // Compile the shader
  gl.compileShader(shader);

  // Check the compile status
  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);
  if (!compiled) {
    // Something went wrong during compilation; get the error
    const lastError = gl.getShaderInfoLog(shader);
    errFn(`${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`);
    gl.deleteShader(shader);
    return null;
  }

  return shader;
}

/**
 * @typedef {Object} ProgramOptions
 * @property {function(string)} [errorCallback] callback for errors
 * @property {Object.<string,number>} [attribLocations] a attribute name to location map
 * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed
 *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise
 *   you can pass an array of names.
 * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.
 * @memberOf module:twgl
 */

/**
 * Gets the program options based on all these optional arguments
 * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in
 * @private
 */
function getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {
  let transformFeedbackVaryings;
  let transformFeedbackMode;
  if (typeof opt_locations === 'function') {
    opt_errorCallback = opt_locations;
    opt_locations = undefined;
  }
  if (typeof opt_attribs === 'function') {
    opt_errorCallback = opt_attribs;
    opt_attribs = undefined;
  } else if (opt_attribs && !Array.isArray(opt_attribs)) {
    // If we have an errorCallback we can just return this object
    // Otherwise we need to construct one with default errorCallback
    if (opt_attribs.errorCallback) {
      return opt_attribs;
    }
    const opt = opt_attribs;
    opt_errorCallback = opt.errorCallback;
    opt_attribs = opt.attribLocations;
    transformFeedbackVaryings = opt.transformFeedbackVaryings;
    transformFeedbackMode = opt.transformFeedbackMode;
  }

  const options = {
    errorCallback: opt_errorCallback || error$1,
    transformFeedbackVaryings: transformFeedbackVaryings,
    transformFeedbackMode: transformFeedbackMode,
  };

  if (opt_attribs) {
    let attribLocations = {};
    if (Array.isArray(opt_attribs)) {
      opt_attribs.forEach(function(attrib,  ndx) {
        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;
      });
    } else {
      attribLocations = opt_attribs;
    }
    options.attribLocations = attribLocations;
  }

  return options;
}

const defaultShaderType = [
  "VERTEX_SHADER",
  "FRAGMENT_SHADER",
];

function getShaderTypeFromScriptType(gl, scriptType) {
  if (scriptType.indexOf("frag") >= 0) {
    return FRAGMENT_SHADER;
  } else if (scriptType.indexOf("vert") >= 0) {
    return VERTEX_SHADER;
  }
  return undefined;
}

function deleteShaders(gl, shaders) {
  shaders.forEach(function(shader) {
    gl.deleteShader(shader);
  });
}

/**
 * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the
 * program and calls useProgram.
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgram(gl, [vs, fs], options);
 *     twgl.createProgram(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source
 * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {WebGLProgram?} the created program or null if error.
 * @memberOf module:twgl/programs
 */
function createProgram(
    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {
  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  const realShaders = [];
  const newShaders = [];
  for (let ndx = 0; ndx < shaders.length; ++ndx) {
    let shader = shaders[ndx];
    if (typeof (shader) === 'string') {
      const elem = getElementById(shader);
      const src = elem ? elem.text : shader;
      let type = gl[defaultShaderType[ndx]];
      if (elem && elem.type) {
        type = getShaderTypeFromScriptType(gl, elem.type) || type;
      }
      shader = loadShader(gl, src, type, progOptions.errorCallback);
      newShaders.push(shader);
    }
    if (isShader(gl, shader)) {
      realShaders.push(shader);
    }
  }

  if (realShaders.length !== shaders.length) {
    progOptions.errorCallback("not enough shaders for program");
    deleteShaders(gl, newShaders);
    return null;
  }

  const program = gl.createProgram();
  realShaders.forEach(function(shader) {
    gl.attachShader(program, shader);
  });
  if (progOptions.attribLocations) {
    Object.keys(progOptions.attribLocations).forEach(function(attrib) {
      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);
    });
  }
  let varyings = progOptions.transformFeedbackVaryings;
  if (varyings) {
    if (varyings.attribs) {
      varyings = varyings.attribs;
    }
    if (!Array.isArray(varyings)) {
      varyings = Object.keys(varyings);
    }
    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);
  }
  gl.linkProgram(program);

  // Check the link status
  const linked = gl.getProgramParameter(program, LINK_STATUS);
  if (!linked) {
    // something went wrong with the link
    const lastError = gl.getProgramInfoLog(program);
    progOptions.errorCallback(`${
      realShaders.map(shader => {
        const src = addLineNumbersWithError(gl.getShaderSource(shader), '', 0);
        const type = gl.getShaderParameter(shader, gl.SHADER_TYPE);
        return `${glEnumToString(gl, type)}\n${src}}`;
      }).join('\n')
    }\nError in program linking: ${lastError}`);

    gl.deleteProgram(program);
    deleteShaders(gl, newShaders);
    return null;
  }
  return program;
}

/**
 * Loads a shader from a script tag.
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {string} scriptId The id of the script tag.
 * @param {number} [opt_shaderType] The type of shader. If not passed in it will
 *     be derived from the type of the script tag.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.
 * @return {WebGLShader?} The created shader or null if error.
 * @private
 */
function createShaderFromScript(
    gl, scriptId, opt_shaderType, opt_errorCallback) {
  let shaderSource = "";
  const shaderScript = getElementById(scriptId);
  if (!shaderScript) {
    throw new Error(`unknown script element: ${scriptId}`);
  }
  shaderSource = shaderScript.text;

  const shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);
  if (!shaderType) {
    throw new Error('unknown shader type');
  }

  return loadShader(gl, shaderSource, shaderType, opt_errorCallback);
}

/**
 * Creates a program from 2 script tags.
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {string[]} shaderScriptIds Array of ids of the script
 *        tags for the shaders. The first is assumed to be the
 *        vertex shader, the second the fragment shader.
 * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {WebGLProgram?} the created program or null if error.
 * @memberOf module:twgl/programs
 */
function createProgramFromScripts(
    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {
  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  const shaders = [];
  for (let ii = 0; ii < shaderScriptIds.length; ++ii) {
    const shader = createShaderFromScript(
        gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);
    if (!shader) {
      return null;
    }
    shaders.push(shader);
  }
  return createProgram(gl, shaders, progOptions);
}

/**
 * Creates a program from 2 sources.
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {string[]} shaderSources Array of sources for the
 *        shaders. The first is assumed to be the vertex shader,
 *        the second the fragment shader.
 * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {WebGLProgram?} the created program or null if error.
 * @memberOf module:twgl/programs
 */
function createProgramFromSources(
    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  const shaders = [];
  for (let ii = 0; ii < shaderSources.length; ++ii) {
    const shader = loadShader(
        gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);
    if (!shader) {
      return null;
    }
    shaders.push(shader);
  }
  return createProgram(gl, shaders, progOptions);
}

/**
 * Returns true if attribute/uniform is a reserved/built in
 *
 * It makes no sense to me why GL returns these because it's
 * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`
 * with names that start with `gl_` (and `webgl_` in WebGL)
 *
 * I can only assume they are there because they might count
 * when computing the number of uniforms/attributes used when you want to
 * know if you are near the limit. That doesn't really make sense
 * to me but the fact that these get returned are in the spec.
 *
 * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or
 *    `gl.getActiveAttrib`.
 * @return {bool} true if it's reserved
 * @private
 */
function isBuiltIn(info) {
  const name = info.name;
  return name.startsWith("gl_") || name.startsWith("webgl_");
}

const tokenRE = /(\.|\[|]|\w+)/g;
const isDigit = s => s >= '0' && s <= '9';
function addSetterToUniformTree(fullPath, setter, node, uniformSetters) {
  const tokens = fullPath.split(tokenRE).filter(s => s !== '');
  let tokenNdx = 0;
  let path = '';

  for (;;) {
    const token = tokens[tokenNdx++];  // has to be name or number
    path += token;
    const isArrayIndex = isDigit(token[0]);
    const accessor = isArrayIndex
        ? parseInt(token)
        : token;
    if (isArrayIndex) {
      path += tokens[tokenNdx++];  // skip ']'
    }
    const isLastToken = tokenNdx === tokens.length;
    if (isLastToken) {
      node[accessor] = setter;
      break;
    } else {
      const token = tokens[tokenNdx++];  // has to be . or [
      const isArray = token === '[';
      const child = node[accessor] || (isArray ? [] : {});
      node[accessor] = child;
      node = child;
      uniformSetters[path] = uniformSetters[path] || function(node) {
        return function(value) {
          setUniformTree(node, value);
        };
      }(child);
      path += token;
    }
  }
}

/**
 * Creates setter functions for all uniforms of a shader
 * program.
 *
 * @see {@link module:twgl.setUniforms}
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLProgram} program the program to create setters for.
 * @returns {Object.<string, function>} an object with a setter by name for each uniform
 * @memberOf module:twgl/programs
 */
function createUniformSetters(gl, program) {
  let textureUnit = 0;

  /**
   * Creates a setter for a uniform of the given program with it's
   * location embedded in the setter.
   * @param {WebGLProgram} program
   * @param {WebGLUniformInfo} uniformInfo
   * @returns {function} the created setter.
   */
  function createUniformSetter(program, uniformInfo, location) {
    const isArray = uniformInfo.name.endsWith("[0]");
    const type = uniformInfo.type;
    const typeInfo = typeMap[type];
    if (!typeInfo) {
      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.
    }
    let setter;
    if (typeInfo.bindPoint) {
      // it's a sampler
      const unit = textureUnit;
      textureUnit += uniformInfo.size;
      if (isArray) {
        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);
      } else {
        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);
      }
    } else {
      if (typeInfo.arraySetter && isArray) {
        setter = typeInfo.arraySetter(gl, location);
      } else {
        setter = typeInfo.setter(gl, location);
      }
    }
    setter.location = location;
    return setter;
  }

  const uniformSetters = {};
  const uniformTree = {};
  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);

  for (let ii = 0; ii < numUniforms; ++ii) {
    const uniformInfo = gl.getActiveUniform(program, ii);
    if (isBuiltIn(uniformInfo)) {
      continue;
    }
    let name = uniformInfo.name;
    // remove the array suffix.
    if (name.endsWith("[0]")) {
      name = name.substr(0, name.length - 3);
    }
    const location = gl.getUniformLocation(program, uniformInfo.name);
    // the uniform will have no location if it's in a uniform block
    if (location) {
      const setter = createUniformSetter(program, uniformInfo, location);
      uniformSetters[name] = setter;
      addSetterToUniformTree(name, setter, uniformTree, uniformSetters);
    }
  }

  return uniformSetters;
}

/**
 * @typedef {Object} TransformFeedbackInfo
 * @property {number} index index of transform feedback
 * @property {number} type GL type
 * @property {number} size 1 - 4
 * @memberOf module:twgl
 */

/**
 * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLProgram} program an existing WebGLProgram.
 * @return {Object<string, module:twgl.TransformFeedbackInfo>}
 * @memberOf module:twgl
 */
function createTransformFeedbackInfo(gl, program) {
  const info = {};
  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);
  for (let ii = 0; ii < numVaryings; ++ii) {
    const varying = gl.getTransformFeedbackVarying(program, ii);
    info[varying.name] = {
      index: ii,
      type: varying.type,
      size: varying.size,
    };
  }
  return info;
}

/**
 * Binds buffers for transform feedback.
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.
 * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.
 * @memberOf module:twgl
 */
function bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {
  if (transformFeedbackInfo.transformFeedbackInfo) {
    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;
  }
  if (bufferInfo.attribs) {
    bufferInfo = bufferInfo.attribs;
  }
  for (const name in bufferInfo) {
    const varying = transformFeedbackInfo[name];
    if (varying) {
      const buf = bufferInfo[name];
      if (buf.offset) {
        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);
      } else {
        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);
      }
    }
  }
}

/**
 * Creates a transform feedback and sets the buffers
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}
 * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.
 * @return {WebGLTransformFeedback} the created transform feedback
 * @memberOf module:twgl
 */
function createTransformFeedback(gl, programInfo, bufferInfo) {
  const tf = gl.createTransformFeedback();
  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);
  gl.useProgram(programInfo.program);
  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);
  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);
  return tf;
}

/**
 * @typedef {Object} UniformData
 * @property {string} name The name of the uniform
 * @property {number} type The WebGL type enum for this uniform
 * @property {number} size The number of elements for this uniform
 * @property {number} blockNdx The block index this uniform appears in
 * @property {number} offset The byte offset in the block for this uniform's value
 * @memberOf module:twgl
 */

/**
 * The specification for one UniformBlockObject
 *
 * @typedef {Object} BlockSpec
 * @property {number} index The index of the block.
 * @property {number} size The size in bytes needed for the block
 * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices
 *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.
 * @property {bool} usedByVertexShader Self explanatory
 * @property {bool} usedByFragmentShader Self explanatory
 * @property {bool} used Self explanatory
 * @memberOf module:twgl
 */

/**
 * A `UniformBlockSpec` represents the data needed to create and bind
 * UniformBlockObjects for a given program
 *
 * @typedef {Object} UniformBlockSpec
 * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name
 * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.
 * @memberOf module:twgl
 */

/**
 * Creates a UniformBlockSpec for the given program.
 *
 * A UniformBlockSpec represents the data needed to create and bind
 * UniformBlockObjects
 *
 * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context
 * @param {WebGLProgram} program A WebGLProgram for a successfully linked program
 * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec
 * @memberOf module:twgl/programs
 */
function createUniformBlockSpecFromProgram(gl, program) {
  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);
  const uniformData = [];
  const uniformIndices = [];

  for (let ii = 0; ii < numUniforms; ++ii) {
    uniformIndices.push(ii);
    uniformData.push({});
    const uniformInfo = gl.getActiveUniform(program, ii);
    uniformData[ii].name = uniformInfo.name;
  }

  [
    [ "UNIFORM_TYPE", "type" ],
    [ "UNIFORM_SIZE", "size" ],  // num elements
    [ "UNIFORM_BLOCK_INDEX", "blockNdx" ],
    [ "UNIFORM_OFFSET", "offset", ],
  ].forEach(function(pair) {
    const pname = pair[0];
    const key = pair[1];
    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {
      uniformData[ndx][key] = value;
    });
  });

  const blockSpecs = {};

  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);
  for (let ii = 0; ii < numUniformBlocks; ++ii) {
    const name = gl.getActiveUniformBlockName(program, ii);
    const blockSpec = {
      index: gl.getUniformBlockIndex(program, name),
      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),
      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),
      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),
      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),
    };
    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;
    blockSpecs[name] = blockSpec;
  }

  return {
    blockSpecs: blockSpecs,
    uniformData: uniformData,
  };
}

const arraySuffixRE = /\[\d+\]\.$/;  // better way to check?

const pad = (v, padding) => ((v + (padding - 1)) / padding | 0) * padding;

function createUniformBlockUniformSetter(view, isArray, rows, cols) {
  if (isArray || rows) {
    cols = cols || 1;
    const numElements = view.length;
    const totalRows = numElements / 4;
    return function(value) {
      let dst = 0;
      let src = 0;
      for (let row = 0; row < totalRows; ++row) {
        for (let col = 0; col < cols; ++col) {
          view[dst++] = value[src++];
        }
        dst += 4 - cols;
      }
    };
  } else {
    return function(value) {
      if (value.length) {
        view.set(value);
      } else {
        view[0] = value;
      }
    };
  }
}

/**
 * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values
 * and a corresponding WebGLBuffer to hold those values on the GPU
 *
 * @typedef {Object} UniformBlockInfo
 * @property {string} name The name of the block
 * @property {ArrayBuffer} array The array buffer that contains the uniform values
 * @property {Float32Array} asFloat A float view on the array buffer. This is useful
 *    inspecting the contents of the buffer in the debugger.
 * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.
 * @property {number} [offset] offset into buffer
 * @property {Object<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.
 *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset
 *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`
 *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an
 *   `Int32Array` view, etc.
 * @property {Object<string, function>} setters A setter for this uniform.
 *   The reason to use setters is elements of arrays are padded to vec4 sizes which
 *   means if you want to set an array of 4 floats you'd need to set 16 values
 *   (or set elements 0, 4, 8, 12). In other words
 *   `someBlockInfo.uniforms.some4FloatArrayUniform.set([0, , , , 1, , , , 2, , , , 3])`
 *   where as the setter handles just passing in [0, 1, 2, 3] either directly as in
 *   `someBlockInfo.setter.some4FloatArrayUniform.set([0, 1, 2, 3])` (not recommended)
 *   or via {@link module:twgl.setBlockUniforms}
 * @memberOf module:twgl
 */

/**
 * Creates a `UniformBlockInfo` for the specified block
 *
 * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy
 * `UniformBlockInfo` is returned**. This is because when debugging GLSL
 * it is common to comment out large portions of a shader or for example set
 * the final output to a constant. When that happens blocks get optimized out.
 * If this function did not create dummy blocks your code would crash when debugging.
 *
 * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext
 * @param {WebGLProgram} program A WebGLProgram
 * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned
 *     from {@link module:twgl.createUniformBlockSpecFromProgram}.
 * @param {string} blockName The name of the block.
 * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo
 * @memberOf module:twgl/programs
 */
function createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {
  const blockSpecs = uniformBlockSpec.blockSpecs;
  const uniformData = uniformBlockSpec.uniformData;
  const blockSpec = blockSpecs[blockName];
  if (!blockSpec) {
    warn$1("no uniform block object named:", blockName);
    return {
      name: blockName,
      uniforms: {},
    };
  }
  const array = new ArrayBuffer(blockSpec.size);
  const buffer = gl.createBuffer();
  const uniformBufferIndex = blockSpec.index;
  gl.bindBuffer(UNIFORM_BUFFER, buffer);
  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);

  let prefix = blockName + ".";
  if (arraySuffixRE.test(prefix)) {
    prefix = prefix.replace(arraySuffixRE, ".");
  }
  const uniforms = {};
  const setters = {};
  const setterTree = {};
  blockSpec.uniformIndices.forEach(function(uniformNdx) {
    const data = uniformData[uniformNdx];
    let name = data.name;
    if (name.startsWith(prefix)) {
      name = name.substr(prefix.length);
    }
    const isArray = name.endsWith('[0]');
    if (isArray) {
      name = name.substr(0, name.length - 3);
    }
    const typeInfo = typeMap[data.type];
    const Type = typeInfo.Type;
    const byteLength = isArray
        ? pad(typeInfo.size, 16) * data.size
        : typeInfo.size * data.size;
    const uniformView = new Type(array, data.offset, byteLength / Type.BYTES_PER_ELEMENT);
    uniforms[name] = uniformView;
    // Note: I'm not sure what to do here. The original
    // idea was to create TypedArray views into each part
    // of the block. This is useful, for example if you have
    // a block with { mat4: model; mat4 view; mat4 projection; }
    // you'll get a Float32Array for each one suitable for
    // passing to most JS math libraries including twgl's and glMatrix.js.
    //
    // But, if you have a an array of structures, especially if that
    // array is large, you get a whole bunch of TypedArray views.
    // Every one of them has overhead and switching between them all
    // is probably a cache miss. In that case it would really be better
    // to just have one view (asFloat) and have all the setters
    // just reference the correct portion. But, then you can't easily
    // treat a matrix, or a vec4, as a standalone thing like you can
    // with all the views.
    //
    // Another problem with the views is they are not shared. With
    // uniforms you have one set of setters. With UniformBlockInfo
    // you have a set of setters *pre block instance*. That's because
    // TypedArray views can't be mapped to different buffers.
    //
    // My gut right now is if you really want the speed and compactness
    // then you should probably roll your own solution. TWGL's goal
    // here is ease of use as AFAICT there is no simple generic efficient
    // solution.
    const setter = createUniformBlockUniformSetter(uniformView, isArray, typeInfo.rows, typeInfo.cols);
    setters[name] = setter;
    addSetterToUniformTree(name, setter, setterTree, setters);
  });
  return {
    name: blockName,
    array,
    asFloat: new Float32Array(array),  // for debugging
    buffer,
    uniforms,
    setters,
  };
}

/**
 * Creates a `UniformBlockInfo` for the specified block
 *
 * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy
 * `UniformBlockInfo` is returned**. This is because when debugging GLSL
 * it is common to comment out large portions of a shader or for example set
 * the final output to a constant. When that happens blocks get optimized out.
 * If this function did not create dummy blocks your code would crash when debugging.
 *
 * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext
 * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`
 *     as returned from {@link module:twgl.createProgramInfo}
 * @param {string} blockName The name of the block.
 * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo
 * @memberOf module:twgl/programs
 */
function createUniformBlockInfo(gl, programInfo, blockName) {
  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);
}

/**
 * Binds a uniform block to the matching uniform block point.
 * Matches by blocks by name so blocks must have the same name not just the same
 * structure.
 *
 * If you have changed any values and you upload the values into the corresponding WebGLBuffer
 * call {@link module:twgl.setUniformBlock} instead.
 *
 * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.
 * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`
 *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as
 *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.
 * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from
 *     {@link module:twgl.createUniformBlockInfo}.
 * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name
 *     no buffer is bound.
 * @memberOf module:twgl/programs
 */
function bindUniformBlock(gl, programInfo, uniformBlockInfo) {
  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;
  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];
  if (blockSpec) {
    const bufferBindIndex = blockSpec.index;
    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);
    return true;
  }
  return false;
}

/**
 * Uploads the current uniform values to the corresponding WebGLBuffer
 * and binds that buffer to the program's corresponding bind point for the uniform block object.
 *
 * If you haven't changed any values and you only need to bind the uniform block object
 * call {@link module:twgl.bindUniformBlock} instead.
 *
 * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.
 * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`
 *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as
 *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.
 * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from
 *     {@link module:twgl.createUniformBlockInfo}.
 * @memberOf module:twgl/programs
 */
function setUniformBlock(gl, programInfo, uniformBlockInfo) {
  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {
    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);
  }
}

/**
 * Sets values of a uniform block object
 *
 * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.
 * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given
 *    type of uniform. So for example given a block like
 *
 *       uniform SomeBlock {
 *         float someFloat;
 *         vec2 someVec2;
 *         vec3 someVec3Array[2];
 *         int someInt;
 *       }
 *
 *  You can set the values of the uniform block with
 *
 *       twgl.setBlockUniforms(someBlockInfo, {
 *          someFloat: 12.3,
 *          someVec2: [1, 2],
 *          someVec3Array: [1, 2, 3, 4, 5, 6],
 *          someInt: 5,
 *       }
 *
 *  Arrays can be JavaScript arrays or typed arrays
 *
 *  You can also fill out structure and array values either via
 *  shortcut. Example
 *
 *     // -- in shader --
 *     struct Light {
 *       float intensity;
 *       vec4 color;
 *     };
 *     uniform Lights {
 *       Light lights[2];
 *     };
 *
 *     // in JavaScript
 *
 *     twgl.setBlockUniforms(someBlockInfo, {
 *       lights: [
 *         { intensity: 5.0, color: [1, 0, 0, 1] },
 *         { intensity: 2.0, color: [0, 0, 1, 1] },
 *       ],
 *     });
 *
 *     // or the more traditional way
 *
 *     twgl.setBlockUniforms(someBlockInfo, {
 *       "lights[0].intensity": 5.0,
 *       "lights[0].color": [1, 0, 0, 1],
 *       "lights[1].intensity": 2.0,
 *       "lights[1].color": [0, 0, 1, 1],
 *     });
 *
 *   You can also specify partial paths
 *
 *     twgl.setBlockUniforms(someBlockInfo, {
 *       'lights[1]: { intensity: 5.0, color: [1, 0, 0, 1] },
 *     });
 *
 *   But you can not specify leaf array indices.
 *
 *  **IMPORTANT!**, packing in a UniformBlock is unintuitive.
 *  For example the actual layout of `someVec3Array` above in memory
 *  is `1, 2, 3, unused, 4, 5, 6, unused`. twgl takes in 6 values
 *  as shown about and copies them, skipping the padding. This might
 *  be confusing if you're already familiar with Uniform blocks.
 *
 *  If you want to deal with the padding yourself you can access the array
 *  buffer views directly. eg:
 *
 *      someBlockInfo.someVec3Array.set([1, 2, 3, 0, 4, 5, 6, 0]);
 *
 *  Any name that doesn't match will be ignored
 * @memberOf module:twgl/programs
 */
function setBlockUniforms(uniformBlockInfo, values) {
  const setters = uniformBlockInfo.setters;
  for (const name in values) {
    const setter = setters[name];
    if (setter) {
      const value = values[name];
      setter(value);
    }
  }
}

function setUniformTree(tree, values) {
  for (const name in values) {
    const prop = tree[name];
    if (typeof prop === 'function') {
      prop(values[name]);
    } else {
      setUniformTree(tree[name], values[name]);
    }
  }
}

/**
 * Set uniforms and binds related textures.
 *
 * example:
 *
 *     const programInfo = createProgramInfo(
 *         gl, ["some-vs", "some-fs"]);
 *
 *     const tex1 = gl.createTexture();
 *     const tex2 = gl.createTexture();
 *
 *     ... assume we setup the textures with data ...
 *
 *     const uniforms = {
 *       u_someSampler: tex1,
 *       u_someOtherSampler: tex2,
 *       u_someColor: [1,0,0,1],
 *       u_somePosition: [0,1,1],
 *       u_someMatrix: [
 *         1,0,0,0,
 *         0,1,0,0,
 *         0,0,1,0,
 *         0,0,0,0,
 *       ],
 *     };
 *
 *     gl.useProgram(program);
 *
 * This will automatically bind the textures AND set the
 * uniforms.
 *
 *     twgl.setUniforms(programInfo, uniforms);
 *
 * For the example above it is equivalent to
 *
 *     var texUnit = 0;
 *     gl.activeTexture(gl.TEXTURE0 + texUnit);
 *     gl.bindTexture(gl.TEXTURE_2D, tex1);
 *     gl.uniform1i(u_someSamplerLocation, texUnit++);
 *     gl.activeTexture(gl.TEXTURE0 + texUnit);
 *     gl.bindTexture(gl.TEXTURE_2D, tex2);
 *     gl.uniform1i(u_someSamplerLocation, texUnit++);
 *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);
 *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);
 *     gl.uniformMatrix4fv(u_someMatrix, false, [
 *         1,0,0,0,
 *         0,1,0,0,
 *         0,0,1,0,
 *         0,0,0,0,
 *       ]);
 *
 * Note it is perfectly reasonable to call `setUniforms` multiple times. For example
 *
 *     const uniforms = {
 *       u_someSampler: tex1,
 *       u_someOtherSampler: tex2,
 *     };
 *
 *     const moreUniforms {
 *       u_someColor: [1,0,0,1],
 *       u_somePosition: [0,1,1],
 *       u_someMatrix: [
 *         1,0,0,0,
 *         0,1,0,0,
 *         0,0,1,0,
 *         0,0,0,0,
 *       ],
 *     };
 *
 *     twgl.setUniforms(programInfo, uniforms);
 *     twgl.setUniforms(programInfo, moreUniforms);
 *
 * You can also add WebGLSamplers to uniform samplers as in
 *
 *     const uniforms = {
 *       u_someSampler: {
 *         texture: someWebGLTexture,
 *         sampler: someWebGLSampler,
 *       },
 *     };
 *
 * In which case both the sampler and texture will be bound to the
 * same unit.
 *
 * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from
 *        `createUniformSetters`.
 * @param {Object.<string, ?>} values an object with values for the
 *        uniforms.
 *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example
 *
 *     const sharedUniforms = {
 *       u_fogNear: 10,
 *       u_projection: ...
 *       ...
 *     };
 *
 *     const localUniforms = {
 *       u_world: ...
 *       u_diffuseColor: ...
 *     };
 *
 *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);
 *
 *     // is the same as
 *
 *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);
 *
 *     // is the same as
 *
 *     twgl.setUniforms(programInfo, sharedUniforms);
 *     twgl.setUniforms(programInfo, localUniforms};
 *
 *   You can also fill out structure and array values either via
 *   shortcut. Example
 *
 *     // -- in shader --
 *     struct Light {
 *       float intensity;
 *       vec4 color;
 *     };
 *     uniform Light lights[2];
 *
 *     // in JavaScript
 *
 *     twgl.setUniforms(programInfo, {
 *       lights: [
 *         { intensity: 5.0, color: [1, 0, 0, 1] },
 *         { intensity: 2.0, color: [0, 0, 1, 1] },
 *       ],
 *     });
 *
 *   or the more traditional way
 *
 *     twgl.setUniforms(programInfo, {
 *       "lights[0].intensity": 5.0,
 *       "lights[0].color": [1, 0, 0, 1],
 *       "lights[1].intensity": 2.0,
 *       "lights[1].color": [0, 0, 1, 1],
 *     });
 *
 *   You can also specify partial paths
 *
 *     twgl.setUniforms(programInfo, {
 *       'lights[1]: { intensity: 5.0, color: [1, 0, 0, 1] },
 *     });
 *
 *   But you can not specify leaf array indices
 *
 * @memberOf module:twgl/programs
 */
function setUniforms(setters, ...args) {  // eslint-disable-line
  const actualSetters = setters.uniformSetters || setters;
  const numArgs = args.length;
  for (let aNdx = 0; aNdx < numArgs; ++aNdx) {
    const values = args[aNdx];
    if (Array.isArray(values)) {
      const numValues = values.length;
      for (let ii = 0; ii < numValues; ++ii) {
        setUniforms(actualSetters, values[ii]);
      }
    } else {
      for (const name in values) {
        const setter = actualSetters[name];
        if (setter) {
          setter(values[name]);
        }
      }
    }
  }
}

/**
 * Alias for `setUniforms`
 * @function
 * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from
 *        `createUniformSetters`.
 * @param {Object.<string, ?>} values an object with values for the
 * @memberOf module:twgl/programs
 */
const setUniformsAndBindTextures = setUniforms;

/**
 * Creates setter functions for all attributes of a shader
 * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.
 *
 * @see {@link module:twgl.setAttributes} for example
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {WebGLProgram} program the program to create setters for.
 * @return {Object.<string, function>} an object with a setter for each attribute by name.
 * @memberOf module:twgl/programs
 */
function createAttributeSetters(gl, program) {
  const attribSetters = {
  };

  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);
  for (let ii = 0; ii < numAttribs; ++ii) {
    const attribInfo = gl.getActiveAttrib(program, ii);
    if (isBuiltIn(attribInfo)) {
      continue;
    }
    const index = gl.getAttribLocation(program, attribInfo.name);
    const typeInfo = attrTypeMap[attribInfo.type];
    const setter = typeInfo.setter(gl, index, typeInfo);
    setter.location = index;
    attribSetters[attribInfo.name] = setter;
  }

  return attribSetters;
}

/**
 * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})
 *
 * Example:
 *
 *     const program = createProgramFromScripts(
 *         gl, ["some-vs", "some-fs");
 *
 *     const attribSetters = createAttributeSetters(program);
 *
 *     const positionBuffer = gl.createBuffer();
 *     const texcoordBuffer = gl.createBuffer();
 *
 *     const attribs = {
 *       a_position: {buffer: positionBuffer, numComponents: 3},
 *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
 *     };
 *
 *     gl.useProgram(program);
 *
 * This will automatically bind the buffers AND set the
 * attributes.
 *
 *     setAttributes(attribSetters, attribs);
 *
 * Properties of attribs. For each attrib you can add
 * properties:
 *
 * *   type: the type of data in the buffer. Default = gl.FLOAT
 * *   normalize: whether or not to normalize the data. Default = false
 * *   stride: the stride. Default = 0
 * *   offset: offset into the buffer. Default = 0
 * *   divisor: the divisor for instances. Default = undefined
 *
 * For example if you had 3 value float positions, 2 value
 * float texcoord and 4 value uint8 colors you'd setup your
 * attribs like this
 *
 *     const attribs = {
 *       a_position: {buffer: positionBuffer, numComponents: 3},
 *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
 *       a_color: {
 *         buffer: colorBuffer,
 *         numComponents: 4,
 *         type: gl.UNSIGNED_BYTE,
 *         normalize: true,
 *       },
 *     };
 *
 * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters
 * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.
 * @memberOf module:twgl/programs
 * @deprecated use {@link module:twgl.setBuffersAndAttributes}
 */
function setAttributes(setters, buffers) {
  for (const name in buffers) {
    const setter = setters[name];
    if (setter) {
      setter(buffers[name]);
    }
  }
}

/**
 * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate
 *
 * Example:
 *
 *     const programInfo = createProgramInfo(
 *         gl, ["some-vs", "some-fs");
 *
 *     const arrays = {
 *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
 *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
 *     };
 *
 *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);
 *
 *     gl.useProgram(programInfo.program);
 *
 * This will automatically bind the buffers AND set the
 * attributes.
 *
 *     setBuffersAndAttributes(gl, programInfo, bufferInfo);
 *
 * For the example above it is equivalent to
 *
 *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
 *     gl.enableVertexAttribArray(a_positionLocation);
 *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);
 *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);
 *     gl.enableVertexAttribArray(a_texcoordLocation);
 *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
 * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}
 * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.
 *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}
 * @memberOf module:twgl/programs
 */
function setBuffersAndAttributes(gl, programInfo, buffers) {
  if (buffers.vertexArrayObject) {
    gl.bindVertexArray(buffers.vertexArrayObject);
  } else {
    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);
    if (buffers.indices) {
      gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);
    }
  }
}

/**
 * @typedef {Object} ProgramInfo
 * @property {WebGLProgram} program A shader program
 * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,
 * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,
 * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..
 * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks
 * @memberOf module:twgl
 */

/**
 * Creates a ProgramInfo from an existing program.
 *
 * A ProgramInfo contains
 *
 *     programInfo = {
 *        program: WebGLProgram,
 *        uniformSetters: object of setters as returned from createUniformSetters,
 *        attribSetters: object of setters as returned from createAttribSetters,
 *     }
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {WebGLProgram} program an existing WebGLProgram.
 * @return {module:twgl.ProgramInfo} The created ProgramInfo.
 * @memberOf module:twgl/programs
 */
function createProgramInfoFromProgram(gl, program) {
  const uniformSetters = createUniformSetters(gl, program);
  const attribSetters = createAttributeSetters(gl, program);
  const programInfo = {
    program,
    uniformSetters,
    attribSetters,
  };

  if (isWebGL2(gl)) {
    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);
    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);
  }

  return programInfo;
}

/**
 * Creates a ProgramInfo from 2 sources.
 *
 * A ProgramInfo contains
 *
 *     programInfo = {
 *        program: WebGLProgram,
 *        uniformSetters: object of setters as returned from createUniformSetters,
 *        attribSetters: object of setters as returned from createAttribSetters,
 *     }
 *
 * NOTE: There are 4 signatures for this function
 *
 *     twgl.createProgramInfo(gl, [vs, fs], options);
 *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);
 *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);
 *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {string[]} shaderSources Array of sources for the
 *        shaders or ids. The first is assumed to be the vertex shader,
 *        the second the fragment shader.
 * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
 * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
 * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
 *        on error. If you want something else pass an callback. It's passed an error message.
 * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile
 * @memberOf module:twgl/programs
 */
function createProgramInfo(
    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
  let good = true;
  shaderSources = shaderSources.map(function(source) {
    // Lets assume if there is no \n it's an id
    if (source.indexOf("\n") < 0) {
      const script = getElementById(source);
      if (!script) {
        progOptions.errorCallback("no element with id: " + source);
        good = false;
      } else {
        source = script.text;
      }
    }
    return source;
  });
  if (!good) {
    return null;
  }
  const program = createProgramFromSources(gl, shaderSources, progOptions);
  if (!program) {
    return null;
  }
  return createProgramInfoFromProgram(gl, program);
}

var programs = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createAttributeSetters: createAttributeSetters,
  createProgram: createProgram,
  createProgramFromScripts: createProgramFromScripts,
  createProgramFromSources: createProgramFromSources,
  createProgramInfo: createProgramInfo,
  createProgramInfoFromProgram: createProgramInfoFromProgram,
  createUniformSetters: createUniformSetters,
  createUniformBlockSpecFromProgram: createUniformBlockSpecFromProgram,
  createUniformBlockInfoFromProgram: createUniformBlockInfoFromProgram,
  createUniformBlockInfo: createUniformBlockInfo,
  createTransformFeedback: createTransformFeedback,
  createTransformFeedbackInfo: createTransformFeedbackInfo,
  bindTransformFeedbackInfo: bindTransformFeedbackInfo,
  setAttributes: setAttributes,
  setBuffersAndAttributes: setBuffersAndAttributes,
  setUniforms: setUniforms,
  setUniformsAndBindTextures: setUniformsAndBindTextures,
  setUniformBlock: setUniformBlock,
  setBlockUniforms: setBlockUniforms,
  bindUniformBlock: bindUniformBlock
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

const TRIANGLES                      = 0x0004;
const UNSIGNED_SHORT$3                 = 0x1403;

/**
 * Drawing related functions
 *
 * For backward compatibility they are available at both `twgl.draw` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/draw
 */

/**
 * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate
 *
 * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself
 * but calling this means if you switch from indexed data to non-indexed
 * data you don't have to remember to update your draw call.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or
 *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
 * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`
 * @param {number} [count] An optional count. Defaults to bufferInfo.numElements
 * @param {number} [offset] An optional offset. Defaults to 0.
 * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called
 * @memberOf module:twgl/draw
 */
function drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {
  type = type === undefined ? TRIANGLES : type;
  const indices = bufferInfo.indices;
  const elementType = bufferInfo.elementType;
  const numElements = count === undefined ? bufferInfo.numElements : count;
  offset = offset === undefined ? 0 : offset;
  if (elementType || indices) {
    if (instanceCount !== undefined) {
      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset, instanceCount);
    } else {
      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset);
    }
  } else {
    if (instanceCount !== undefined) {
      gl.drawArraysInstanced(type, offset, numElements, instanceCount);
    } else {
      gl.drawArrays(type, offset, numElements);
    }
  }
}

/**
 * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.
 *
 * You need either a `BufferInfo` or a `VertexArrayInfo`.
 *
 * @typedef {Object} DrawObject
 * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`
 * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...
 * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}
 * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}
 * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
 * @property {Object<string, ?>} uniforms The values for the uniforms.
 *   You can pass multiple objects by putting them in an array. For example
 *
 *     var sharedUniforms = {
 *       u_fogNear: 10,
 *       u_projection: ...
 *       ...
 *     };
 *
 *     var localUniforms = {
 *       u_world: ...
 *       u_diffuseColor: ...
 *     };
 *
 *     var drawObj = {
 *       ...
 *       uniforms: [sharedUniforms, localUniforms],
 *     };
 *
 * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.
 * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.
 * @property {number} [instanceCount] the number of instances. Defaults to undefined.
 * @memberOf module:twgl
 */

/**
 * Draws a list of objects
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {DrawObject[]} objectsToDraw an array of objects to draw.
 * @memberOf module:twgl/draw
 */
function drawObjectList(gl, objectsToDraw) {
  let lastUsedProgramInfo = null;
  let lastUsedBufferInfo = null;

  objectsToDraw.forEach(function(object) {
    if (object.active === false) {
      return;
    }

    const programInfo = object.programInfo;
    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;
    let bindBuffers = false;
    const type = object.type === undefined ? TRIANGLES : object.type;

    if (programInfo !== lastUsedProgramInfo) {
      lastUsedProgramInfo = programInfo;
      gl.useProgram(programInfo.program);

      // We have to rebind buffers when changing programs because we
      // only bind buffers the program uses. So if 2 programs use the same
      // bufferInfo but the 1st one uses only positions the when the
      // we switch to the 2nd one some of the attributes will not be on.
      bindBuffers = true;
    }

    // Setup all the needed attributes.
    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {
      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {
        gl.bindVertexArray(null);
      }
      lastUsedBufferInfo = bufferInfo;
      setBuffersAndAttributes(gl, programInfo, bufferInfo);
    }

    // Set the uniforms.
    setUniforms(programInfo, object.uniforms);

    // Draw
    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);
  });

  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {
    gl.bindVertexArray(null);
  }
}

var draw = /*#__PURE__*/Object.freeze({
  __proto__: null,
  drawBufferInfo: drawBufferInfo,
  drawObjectList: drawObjectList
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

const FRAMEBUFFER                    = 0x8d40;
const RENDERBUFFER                   = 0x8d41;
const TEXTURE_2D$2                     = 0x0de1;

const UNSIGNED_BYTE$3                  = 0x1401;

/* PixelFormat */
const DEPTH_COMPONENT$1                = 0x1902;
const RGBA$1                           = 0x1908;
const DEPTH_COMPONENT24$1              = 0x81a6;
const DEPTH_COMPONENT32F$1             = 0x8cac;
const DEPTH24_STENCIL8$1               = 0x88f0;
const DEPTH32F_STENCIL8$1              = 0x8cad;

/* Framebuffer Object. */
const RGBA4$1                          = 0x8056;
const RGB5_A1$1                        = 0x8057;
const RGB565$1                         = 0x8D62;
const DEPTH_COMPONENT16$1              = 0x81A5;
const STENCIL_INDEX                  = 0x1901;
const STENCIL_INDEX8                 = 0x8D48;
const DEPTH_STENCIL$1                  = 0x84F9;
const COLOR_ATTACHMENT0              = 0x8CE0;
const DEPTH_ATTACHMENT               = 0x8D00;
const STENCIL_ATTACHMENT             = 0x8D20;
const DEPTH_STENCIL_ATTACHMENT       = 0x821A;

/* TextureWrapMode */
const CLAMP_TO_EDGE$1                  = 0x812F;

/* TextureMagFilter */
const LINEAR$1                         = 0x2601;

/**
 * The options for a framebuffer attachment.
 *
 * Note: For a `format` that is a texture include all the texture
 * options from {@link module:twgl.TextureOptions} for example
 * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}
 * `auto` defaults to `false` for attachment textures but `min` and `mag` default
 * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`
 *
 * @typedef {Object} AttachmentOptions
 * @property {number} [attachmentPoint] The attachment point. Defaults
 *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type
 *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending
 *   on the format or attachment type.
 * @property {number} [format] The format. If one of `gl.RGBA4`,
 *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,
 *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a
 *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`
 * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.
 * @property {number} [target] The texture target for `gl.framebufferTexture2D`.
 *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.
 * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.
 * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.
 *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`
 * @property {(WebGLRenderbuffer | WebGLTexture)} [attachment] An existing renderbuffer or texture.
 *    If provided will attach this Object. This allows you to share
 *    attachments across framebuffers.
 * @memberOf module:twgl
 * @mixes module:twgl.TextureOptions
 */

const defaultAttachments = [
  { format: RGBA$1, type: UNSIGNED_BYTE$3, min: LINEAR$1, wrap: CLAMP_TO_EDGE$1, },
  { format: DEPTH_STENCIL$1, },
];

const attachmentsByFormat = {};
attachmentsByFormat[DEPTH_STENCIL$1] = DEPTH_STENCIL_ATTACHMENT;
attachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;
attachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT$1] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT16$1] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT24$1] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH_COMPONENT32F$1] = DEPTH_ATTACHMENT;
attachmentsByFormat[DEPTH24_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;
attachmentsByFormat[DEPTH32F_STENCIL8$1] = DEPTH_STENCIL_ATTACHMENT;

function getAttachmentPointForFormat(format, internalFormat) {
  return attachmentsByFormat[format] || attachmentsByFormat[internalFormat];
}

const renderbufferFormats = {};
renderbufferFormats[RGBA4$1] = true;
renderbufferFormats[RGB5_A1$1] = true;
renderbufferFormats[RGB565$1] = true;
renderbufferFormats[DEPTH_STENCIL$1] = true;
renderbufferFormats[DEPTH_COMPONENT16$1] = true;
renderbufferFormats[STENCIL_INDEX] = true;
renderbufferFormats[STENCIL_INDEX8] = true;

function isRenderbufferFormat(format) {
  return renderbufferFormats[format];
}

/**
 * @typedef {Object} FramebufferInfo
 * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo
 * @property {Array.<(WebGLRenderbuffer | WebGLTexture)>} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.
 * @property {number} width The width of the framebuffer and its attachments
 * @property {number} height The width of the framebuffer and its attachments
 * @memberOf module:twgl
 */

/**
 * Creates a framebuffer and attachments.
 *
 * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.
 *
 * The simplest usage
 *
 *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer
 *     const fbi = twgl.createFramebufferInfo(gl);
 *
 * More complex usage
 *
 *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer
 *     const attachments = [
 *       { format: RGB565, mag: NEAREST },
 *       { format: STENCIL_INDEX8 },
 *     ]
 *     const fbi = twgl.createFramebufferInfo(gl, attachments);
 *
 * Passing in a specific size
 *
 *     const width = 256;
 *     const height = 256;
 *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);
 *
 * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.
 * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an
 *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.
 * @param {number} [width] the width for the attachments. Default = size of drawingBuffer
 * @param {number} [height] the height for the attachments. Default = size of drawingBuffer
 * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.
 * @memberOf module:twgl/framebuffers
 */
function createFramebufferInfo(gl, attachments, width, height) {
  const target = FRAMEBUFFER;
  const fb = gl.createFramebuffer();
  gl.bindFramebuffer(target, fb);
  width  = width  || gl.drawingBufferWidth;
  height = height || gl.drawingBufferHeight;
  attachments = attachments || defaultAttachments;
  let colorAttachmentCount = 0;
  const framebufferInfo = {
    framebuffer: fb,
    attachments: [],
    width: width,
    height: height,
  };
  attachments.forEach(function(attachmentOptions) {
    let attachment = attachmentOptions.attachment;
    const format = attachmentOptions.format;
    let attachmentPoint = attachmentOptions.attachmentPoint || getAttachmentPointForFormat(format, attachmentOptions.internalFormat);
    if (!attachmentPoint) {
      attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;
    }
    if (!attachment) {
      if (isRenderbufferFormat(format)) {
        attachment = gl.createRenderbuffer();
        gl.bindRenderbuffer(RENDERBUFFER, attachment);
        gl.renderbufferStorage(RENDERBUFFER, format, width, height);
      } else {
        const textureOptions = Object.assign({}, attachmentOptions);
        textureOptions.width = width;
        textureOptions.height = height;
        if (textureOptions.auto === undefined) {
          textureOptions.auto = false;
          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR$1;
          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR$1;
          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE$1;
          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE$1;
        }
        attachment = createTexture(gl, textureOptions);
      }
    }
    if (isRenderbuffer(gl, attachment)) {
      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);
    } else if (isTexture(gl, attachment)) {
      if (attachmentOptions.layer !== undefined) {
        gl.framebufferTextureLayer(
          target,
          attachmentPoint,
          attachment,
          attachmentOptions.level || 0,
          attachmentOptions.layer);
      } else {
        gl.framebufferTexture2D(
            target,
            attachmentPoint,
            attachmentOptions.target || TEXTURE_2D$2,
            attachment,
            attachmentOptions.level || 0);
      }
    } else {
      throw new Error('unknown attachment type');
    }
    framebufferInfo.attachments.push(attachment);
  });
  return framebufferInfo;
}

/**
 * Resizes the attachments of a framebuffer.
 *
 * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}
 * because TWGL has no idea the format/type of each attachment.
 *
 * The simplest usage
 *
 *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer
 *     const fbi = twgl.createFramebufferInfo(gl);
 *
 *     ...
 *
 *     function render() {
 *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {
 *         // resize the attachments
 *         twgl.resizeFramebufferInfo(gl, fbi);
 *       }
 *
 * More complex usage
 *
 *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer
 *     const attachments = [
 *       { format: RGB565, mag: NEAREST },
 *       { format: STENCIL_INDEX8 },
 *     ]
 *     const fbi = twgl.createFramebufferInfo(gl, attachments);
 *
 *     ...
 *
 *     function render() {
 *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {
 *         // resize the attachments to match
 *         twgl.resizeFramebufferInfo(gl, fbi, attachments);
 *       }
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.
 * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.
 * @param {number} [width] the width for the attachments. Default = size of drawingBuffer
 * @param {number} [height] the height for the attachments. Default = size of drawingBuffer
 * @memberOf module:twgl/framebuffers
 */
function resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {
  width  = width  || gl.drawingBufferWidth;
  height = height || gl.drawingBufferHeight;
  framebufferInfo.width = width;
  framebufferInfo.height = height;
  attachments = attachments || defaultAttachments;
  attachments.forEach(function(attachmentOptions, ndx) {
    const attachment = framebufferInfo.attachments[ndx];
    const format = attachmentOptions.format;
    if (isRenderbuffer(gl, attachment)) {
      gl.bindRenderbuffer(RENDERBUFFER, attachment);
      gl.renderbufferStorage(RENDERBUFFER, format, width, height);
    } else if (isTexture(gl, attachment)) {
      resizeTexture(gl, attachment, attachmentOptions, width, height);
    } else {
      throw new Error('unknown attachment type');
    }
  });
}

/**
 * Binds a framebuffer
 *
 * This function pretty much solely exists because I spent hours
 * trying to figure out why something I wrote wasn't working only
 * to realize I forget to set the viewport dimensions.
 * My hope is this function will fix that.
 *
 * It is effectively the same as
 *
 *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);
 *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);
 *
 * @param {WebGLRenderingContext} gl the WebGLRenderingContext
 * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.
 *   If falsy will bind the canvas.
 * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.
 * @memberOf module:twgl/framebuffers
 */

function bindFramebufferInfo(gl, framebufferInfo, target) {
  target = target || FRAMEBUFFER;
  if (framebufferInfo) {
    gl.bindFramebuffer(target, framebufferInfo.framebuffer);
    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);
  } else {
    gl.bindFramebuffer(target, null);
    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
  }
}

var framebuffers = /*#__PURE__*/Object.freeze({
  __proto__: null,
  bindFramebufferInfo: bindFramebufferInfo,
  createFramebufferInfo: createFramebufferInfo,
  resizeFramebufferInfo: resizeFramebufferInfo
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
 * vertex array object related functions
 *
 * You should generally not need to use these functions. They are provided
 * for those cases where you're doing something out of the ordinary
 * and you need lower level access.
 *
 * For backward compatibility they are available at both `twgl.attributes` and `twgl`
 * itself
 *
 * See {@link module:twgl} for core functions
 *
 * @module twgl/vertexArrays
 */

const ELEMENT_ARRAY_BUFFER$2           = 0x8893;

/**
 * @typedef {Object} VertexArrayInfo
 * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.
 * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..
 * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object
 * @memberOf module:twgl
 */

/**
 * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos
 *
 * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to
 * {@link module:twgl:drawBufferInfo}.
 *
 * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects
 *   assign buffers to specific attributes at creation time. That means they can only be used with programs
 *   who's attributes use the same attribute locations for the same purposes.
 *
 * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}
 *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.
 *
 * also
 *
 * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object
 *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**
 *   will affect the Vertex Array Object state.
 *
 * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos
 * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...
 *
 *    You need to make sure every attribute that will be used is bound. So for example assume shader 1
 *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo
 *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't
 *    now attribute D's location.
 *
 *    So, you can pass in both shader 1 and shader 2's programInfo
 *
 * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo
 *
 * @memberOf module:twgl/vertexArrays
 */
function createVertexArrayInfo(gl, programInfos, bufferInfo) {
  const vao = gl.createVertexArray();
  gl.bindVertexArray(vao);
  if (!programInfos.length) {
    programInfos = [programInfos];
  }
  programInfos.forEach(function(programInfo) {
    setBuffersAndAttributes(gl, programInfo, bufferInfo);
  });
  gl.bindVertexArray(null);
  return {
    numElements: bufferInfo.numElements,
    elementType: bufferInfo.elementType,
    vertexArrayObject: vao,
  };
}

/**
 * Creates a vertex array object and then sets the attributes on it
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
 * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters
 * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.
 * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices
 * @memberOf module:twgl/vertexArrays
 */
function createVAOAndSetAttributes(gl, setters, attribs, indices) {
  const vao = gl.createVertexArray();
  gl.bindVertexArray(vao);
  setAttributes(setters, attribs);
  if (indices) {
    gl.bindBuffer(ELEMENT_ARRAY_BUFFER$2, indices);
  }
  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER
  // like when creating buffers for other stuff will mess up this VAO's binding
  gl.bindVertexArray(null);
  return vao;
}

/**
 * Creates a vertex array object and then sets the attributes
 * on it
 *
 * @param {WebGLRenderingContext} gl The WebGLRenderingContext
 *        to use.
 * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters
 * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...
 * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices
 * @memberOf module:twgl/vertexArrays
 */
function createVAOFromBufferInfo(gl, programInfo, bufferInfo) {
  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);
}

var vertexArrays = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createVertexArrayInfo: createVertexArrayInfo,
  createVAOAndSetAttributes: createVAOAndSetAttributes,
  createVAOFromBufferInfo: createVAOFromBufferInfo
});

/*
 * Copyright 2019 Gregg Tavares
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
const defaults$2 = {
  addExtensionsToContext: true,
};

/**
 * Various default settings for twgl.
 *
 * Note: You can call this any number of times. Example:
 *
 *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });
 *     twgl.setDefaults({ attribPrefix: 'a_' });
 *
 * is equivalent to
 *
 *     twgl.setDefaults({
 *       textureColor: [1, 0, 0, 1],
 *       attribPrefix: 'a_',
 *     });
 *
 * @typedef {Object} Defaults
 * @property {string} [attribPrefix] The prefix to stick on attributes
 *
 *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`
 *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.
 *
 *   In other words I'll create arrays of geometry like this
 *
 *       const arrays = {
 *         position: ...
 *         normal: ...
 *         texcoord: ...
 *       };
 *
 *   But need those mapped to attributes and my attributes start with `a_`.
 *
 *   Default: `""`
 *
 * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1
 *
 *   The default texture color is used when loading textures from
 *   urls. Because the URL will be loaded async we'd like to be
 *   able to use the texture immediately. By putting a 1x1 pixel
 *   color in the texture we can start using the texture before
 *   the URL has loaded.
 *
 *   Default: `[0.5, 0.75, 1, 1]`
 *
 * @property {string} [crossOrigin]
 *
 *   If not undefined sets the crossOrigin attribute on images
 *   that twgl creates when downloading images for textures.
 *
 *   Also see {@link module:twgl.TextureOptions}.
 *
 * @property {bool} [addExtensionsToContext]
 *
 *   If true, then, when twgl will try to add any supported WebGL extensions
 *   directly to the context under their normal GL names. For example
 *   if ANGLE_instances_arrays exists then twgl would enable it,
 *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,
 *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`
 *   to the `WebGLRenderingContext`.
 *
 * @memberOf module:twgl
 */

/**
 * Sets various defaults for twgl.
 *
 * In the interest of terseness which is kind of the point
 * of twgl I've integrated a few of the older functions here
 *
 * @param {module:twgl.Defaults} newDefaults The default settings.
 * @memberOf module:twgl
 */
function setDefaults$2(newDefaults) {
  copyExistingProperties(newDefaults, defaults$2);
  setDefaults(newDefaults);  // eslint-disable-line
  setDefaults$1(newDefaults);  // eslint-disable-line
}

const prefixRE = /^(.*?)_/;
function addExtensionToContext(gl, extensionName) {
  glEnumToString(gl, 0);
  const ext = gl.getExtension(extensionName);
  if (ext) {
    const enums = {};
    const fnSuffix = prefixRE.exec(extensionName)[1];
    const enumSuffix = '_' + fnSuffix;
    for (const key in ext) {
      const value = ext[key];
      const isFunc = typeof (value) === 'function';
      const suffix = isFunc ? fnSuffix : enumSuffix;
      let name = key;
      // examples of where this is not true are WEBGL_compressed_texture_s3tc
      // and WEBGL_compressed_texture_pvrtc
      if (key.endsWith(suffix)) {
        name = key.substring(0, key.length - suffix.length);
      }
      if (gl[name] !== undefined) {
        if (!isFunc && gl[name] !== value) {
          warn(name, gl[name], value, key);
        }
      } else {
        if (isFunc) {
          gl[name] = function(origFn) {
            return function() {
              return origFn.apply(ext, arguments);
            };
          }(value);
        } else {
          gl[name] = value;
          enums[name] = value;
        }
      }
    }
    // pass the modified enums to glEnumToString
    enums.constructor = {
      name: ext.constructor.name,
    };
    glEnumToString(enums, 0);
  }
  return ext;
}

/*
 * If you're wondering why the code doesn't just iterate
 * over all extensions using `gl.getExtensions` is that it's possible
 * some future extension is incompatible with this code. Rather than
 * have thing suddenly break it seems better to manually add to this
 * list.
 *
 */
const supportedExtensions = [
  'ANGLE_instanced_arrays',
  'EXT_blend_minmax',
  'EXT_color_buffer_float',
  'EXT_color_buffer_half_float',
  'EXT_disjoint_timer_query',
  'EXT_disjoint_timer_query_webgl2',
  'EXT_frag_depth',
  'EXT_sRGB',
  'EXT_shader_texture_lod',
  'EXT_texture_filter_anisotropic',
  'OES_element_index_uint',
  'OES_standard_derivatives',
  'OES_texture_float',
  'OES_texture_float_linear',
  'OES_texture_half_float',
  'OES_texture_half_float_linear',
  'OES_vertex_array_object',
  'WEBGL_color_buffer_float',
  'WEBGL_compressed_texture_atc',
  'WEBGL_compressed_texture_etc1',
  'WEBGL_compressed_texture_pvrtc',
  'WEBGL_compressed_texture_s3tc',
  'WEBGL_compressed_texture_s3tc_srgb',
  'WEBGL_depth_texture',
  'WEBGL_draw_buffers',
];

/**
 * Attempts to enable all of the following extensions
 * and add their functions and constants to the
 * `WebGLRenderingContext` using their normal non-extension like names.
 *
 *      ANGLE_instanced_arrays
 *      EXT_blend_minmax
 *      EXT_color_buffer_float
 *      EXT_color_buffer_half_float
 *      EXT_disjoint_timer_query
 *      EXT_disjoint_timer_query_webgl2
 *      EXT_frag_depth
 *      EXT_sRGB
 *      EXT_shader_texture_lod
 *      EXT_texture_filter_anisotropic
 *      OES_element_index_uint
 *      OES_standard_derivatives
 *      OES_texture_float
 *      OES_texture_float_linear
 *      OES_texture_half_float
 *      OES_texture_half_float_linear
 *      OES_vertex_array_object
 *      WEBGL_color_buffer_float
 *      WEBGL_compressed_texture_atc
 *      WEBGL_compressed_texture_etc1
 *      WEBGL_compressed_texture_pvrtc
 *      WEBGL_compressed_texture_s3tc
 *      WEBGL_compressed_texture_s3tc_srgb
 *      WEBGL_depth_texture
 *      WEBGL_draw_buffers
 *
 * For example if `ANGLE_instanced_arrays` exists then the functions
 * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`
 * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the
 * `WebGLRenderingContext`.
 *
 * Note that if you want to know if the extension exists you should
 * probably call `gl.getExtension` for each extension. Alternatively
 * you can check for the existence of the functions or constants that
 * are expected to be added. For example
 *
 *    if (gl.drawBuffers) {
 *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2
 *      ....
 *
 * @param {WebGLRenderingContext} gl A WebGLRenderingContext
 * @memberOf module:twgl
 */
function addExtensionsToContext(gl) {
  for (let ii = 0; ii < supportedExtensions.length; ++ii) {
    addExtensionToContext(gl, supportedExtensions[ii]);
  }
}

/**
 * Creates a webgl context.
 * @param {HTMLCanvasElement} canvas The canvas tag to get
 *     context from. If one is not passed in one will be
 *     created.
 * @return {WebGLRenderingContext} The created context.
 * @private
 */
function create3DContext(canvas, opt_attribs) {
  const names = ["webgl", "experimental-webgl"];
  let context = null;
  for (let ii = 0; ii < names.length; ++ii) {
    context = canvas.getContext(names[ii], opt_attribs);
    if (context) {
      if (defaults$2.addExtensionsToContext) {
        addExtensionsToContext(context);
      }
      break;
    }
  }
  return context;
}

/**
 * Gets a WebGL1 context.
 *
 * Note: Will attempt to enable Vertex Array Objects
 * and add WebGL2 entry points. (unless you first set defaults with
 * `twgl.setDefaults({enableVertexArrayObjects: false})`;
 *
 * @param {HTMLCanvasElement} canvas a canvas element.
 * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes
 * @return {WebGLRenderingContext} The created context.
 * @memberOf module:twgl
 */
function getWebGLContext(canvas, opt_attribs) {
  const gl = create3DContext(canvas, opt_attribs);
  return gl;
}

/**
 * Creates a webgl context.
 *
 * Will return a WebGL2 context if possible.
 *
 * You can check if it's WebGL2 with
 *
 *     twgl.isWebGL2(gl);
 *
 * @param {HTMLCanvasElement} canvas The canvas tag to get
 *     context from. If one is not passed in one will be
 *     created.
 * @return {WebGLRenderingContext} The created context.
 */
function createContext(canvas, opt_attribs) {
  const names = ["webgl2", "webgl", "experimental-webgl"];
  let context = null;
  for (let ii = 0; ii < names.length; ++ii) {
    context = canvas.getContext(names[ii], opt_attribs);
    if (context) {
      if (defaults$2.addExtensionsToContext) {
        addExtensionsToContext(context);
      }
      break;
    }
  }
  return context;
}

/**
 * Gets a WebGL context.  Will create a WebGL2 context if possible.
 *
 * You can check if it's WebGL2 with
 *
 *    function isWebGL2(gl) {
 *      return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0 ") == 0;
 *    }
 *
 * Note: For a WebGL1 context will attempt to enable Vertex Array Objects
 * and add WebGL2 entry points. (unless you first set defaults with
 * `twgl.setDefaults({enableVertexArrayObjects: false})`;
 *
 * @param {HTMLCanvasElement} canvas a canvas element.
 * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes
 * @return {WebGLRenderingContext} The created context.
 * @memberOf module:twgl
 */
function getContext(canvas, opt_attribs) {
  const gl = createContext(canvas, opt_attribs);
  return gl;
}

/**
 * Resize a canvas to match the size it's displayed.
 * @param {HTMLCanvasElement} canvas The canvas to resize.
 * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.
 * @return {boolean} true if the canvas was resized.
 * @memberOf module:twgl
 */
function resizeCanvasToDisplaySize(canvas, multiplier) {
  multiplier = multiplier || 1;
  multiplier = Math.max(0, multiplier);
  const width  = canvas.clientWidth  * multiplier | 0;
  const height = canvas.clientHeight * multiplier | 0;
  if (canvas.width !== width || canvas.height !== height) {
    canvas.width = width;
    canvas.height = height;
    return true;
  }
  return false;
}




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*********************************!*\
  !*** ./games/PALO2/src/main.js ***!
  \*********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @engine/flatfast */ "./engine/src/flatfast.js");
/* harmony import */ var _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vsWrapper/vs */ "./games/PALO2/src/vsWrapper/vs.js");
/* harmony import */ var _intro__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./intro */ "./games/PALO2/src/intro.js");
/* harmony import */ var _title__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./title */ "./games/PALO2/src/title.js");
/* harmony import */ var _dialog__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dialog */ "./games/PALO2/src/dialog.js");
/* harmony import */ var _gameEvent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./gameEvent */ "./games/PALO2/src/gameEvent.js");
/* harmony import */ var _zako__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./zako */ "./games/PALO2/src/zako.js");
/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./player */ "./games/PALO2/src/player.js");
/* harmony import */ var _gameLoop__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./gameLoop */ "./games/PALO2/src/gameLoop.js");
//  ___  ___  _    ___  ___ 
// | . \| . || |  | . |<_  >
// |  _/|   || |_ | | | / / 
// |_|  |_|_||___|`___'<___>
//
// 85되었수다! 100K 스페셜 / 삭제되었수다!                         




// 256x200 프레임버퍼
_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.init( 256,200 ,60,_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Application.ScaleModes.LETTERBOX );
// DOS시절 쓰던 VisualShocker Engine
_vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.VsStage.init();
_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.setBackgroundColor( 0x000000 );









// vsStage.setCacheMode( 2 );

_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.stage.addChild( new _vsWrapper_vs__WEBPACK_IMPORTED_MODULE_1__.VsPad( ) );
_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.stage.on( _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Event.STAGE_VISIBLE,( e )=>{
    // 인트로에서 문제가 된다
    if ( !e.visible ) {
        _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.Sound.stopAllSingleSound();
    }
    _engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.setPaused( !e.visible );
} );
_engine_flatfast__WEBPACK_IMPORTED_MODULE_0__.application.dispatchEvent( "mode:title" ); 


})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,